! File      : /home/vms/flechsig/vms/phas/phaseuil/commandsmenu.uil
! Date      : <11 Apr 97 15:30:46 flechsig> 
! Time-stamp: <30 Mar 01 14:45:52 flechsig> 
! Author    : Uwe Flechsig, flechsig@exp.bessy.de

! Datei: USERDISK_3:[FLECHSIG.PHASE.PHASEUIL]COMMANDSMENU.UIL
! Datum: 11.AUG.1994
! Stand: 29-JUL-1996
! Autor: FLECHSIG, BESSY Berlin


include file "grafbox.uil";     
include file "optibox.uil";     

object
    CommandMenu : XmPulldownMenu {
        controls {
                XmPushButton        CProductMatrixButton;  
                XmCascadeButton     CMatrixMenuButton;  
                XmCascadeButton     CCalculationMenuButton;  
		XmSeparator         {};  
		XmPushButton        mGraphicCommandButton;
                XmPushButton        WriteResultButton;  
                XmPushButton        CPSButton;     
                XmPushButton        CPurgeButton;
                XmPushButton        CWriteMapButton; 
 		XmPushButton        CWriteMCoButton;  
                	       	};         
        callbacks {
            MrmNcreateCallback  = procedure create_proc (kCommandMenu);
            XmNhelpCallback     = procedure sens_help_proc(k_command_menu_help);
            };                              
        };

object
    CProductMatrixButton : XmPushButton {
        arguments {
            XmNlabelString      = "multiply Matrix...";
            XmNmnemonic         = keysym("M");
            XmNsensitive	= false;};
        callbacks {
            XmNactivateCallback = procedure 
					activate_proc (kCProductMatrixButton);
            XmNhelpCallback     = procedure sens_help_proc(k_command_help); 
            };
        };
!********************** create matrix ****************************************
object
    CMatrixMenuButton : XmCascadeButton {
        arguments {
            XmNlabelString      = "create Matrix";
	XmNsensitive	= false;
            XmNmnemonic         = keysym("r");  };    
        controls {
            XmPulldownMenu         CMatrixMenu;      };
        callbacks {
            XmNhelpCallback      = procedure sens_help_proc(k_file_help);
            };
        };

object
    CMatrixMenu : XmPulldownMenu {
        controls {
                   XmPushButton        CMatrixRTButton;
                   XmPushButton        CMatrixPSButton; 
                   XmPushButton        CMatrixReadButton; 
                 };
        callbacks {
            !MrmNcreateCallback  = procedure create_proc (kEOEMenu);
            XmNhelpCallback     = procedure sens_help_proc(k_edit_help); 
            };
        };       

object
    CMatrixRTButton : XmPushButton {
        arguments {
            XmNlabelString      = "Ray Trace (Source -> Image)";
            XmNmnemonic         = keysym("T"); 
            };
        callbacks {
            XmNactivateCallback = procedure activate_proc (kCMatrixRTButton);
            XmNhelpCallback     = procedure sens_help_proc(k_command_help); 
            };
        }; 

object
    CMatrixPSButton : XmPushButton {
        arguments {
            XmNlabelString      = "PSD (Image -> Source)";
            XmNmnemonic         = keysym("P"); 
            };
        callbacks {
            XmNactivateCallback = procedure activate_proc (kCMatrixPSButton);
            XmNhelpCallback     = procedure sens_help_proc(k_command_help); 
            };
        };    

object
    CMatrixReadButton : XmPushButton {
        arguments {
            XmNlabelString      = "read matrix from file";
            XmNmnemonic         = keysym("f"); 
            };
        callbacks {
            XmNactivateCallback = procedure activate_proc (kCMatrixReadButton);
            XmNhelpCallback     = procedure sens_help_proc(k_command_help); 
            };
        };    


!************************* matrix create menu end ***************************
object
    CCalculationMenuButton : XmCascadeButton {
        arguments {
            XmNlabelString      = "Calculation";
            XmNmnemonic         = keysym("c");  };    
        controls {
            XmPulldownMenu         CCalculationMenu;      };
        callbacks {
            XmNhelpCallback      = procedure sens_help_proc(k_file_help);
            };
        };

object
    CCalculationMenu : XmPulldownMenu {
        controls {
                   XmPushButton        CCRayTraceButton;
                   XmPushButton        CCPTButton; 
                   XmPushButton        CCMPTButton; 
                   XmPushButton        CCSR1Button; 
                   XmPushButton        CCSR2Button; 
		   XmPushButton        CCOptiButton;    
                   XmPushButton        CCExtractButton;  
                     };
        callbacks {
            XmNhelpCallback     = procedure sens_help_proc(k_edit_help); 
            };
        };       

object
    CCRayTraceButton: XmPushButton {
        arguments {
            XmNlabelString      = "ray tracing";
            XmNmnemonic         = keysym("a"); 
		};
        callbacks {
            XmNactivateCallback = procedure activate_proc (kCCRayTraceButton);
            };
        };      

object
    CCPTButton : XmPushButton {
        arguments {
            XmNlabelString      = "phase space imaging";
            XmNmnemonic         = keysym("p"); 
	};
        callbacks {
            XmNactivateCallback = procedure activate_proc (kCCPTButton);
            };
        };    

object
    CCMPTButton : XmPushButton {
        arguments {
            XmNlabelString      = "multiple phase space imaging";
            XmNmnemonic         = keysym("q"); 
	};
        callbacks {
            XmNactivateCallback = procedure activate_proc (kCCMPTButton);
            };
        };    

object
    CCSR1Button : XmPushButton {
        arguments {
            XmNlabelString      = "footprint at selected element"; 
            XmNmnemonic         = keysym("f"); 
!            XmNsensitive	= false;   
	};
        callbacks {
            XmNactivateCallback = procedure activate_proc (kCCSR1Button);
            };
        }; 

object
    CCSR2Button : XmPushButton {
        arguments {
            XmNlabelString      = "full ray trace"; 
            XmNmnemonic         = keysym("y"); 
	};
        callbacks {
            XmNactivateCallback = procedure activate_proc (kCCSR2Button);
            };
        };  
   

object
    CCOptiButton : XmPushButton {
        arguments {
            XmNlabelString      = "Beamline Optimization"; 
            XmNmnemonic         = keysym("B");                   
            XmNsensitive	= true;  
            	};
        callbacks {
            XmNactivateCallback = procedure activate_proc (kCCOptiButton);
            };
        };  

object
    CCExtractButton : XmPushButton {
        arguments {
            XmNlabelString      = "Extraction"; 
            XmNmnemonic         = keysym("E");                   
            XmNsensitive	= true;  
            	};
        callbacks {
            XmNactivateCallback = procedure activate_proc (kCCExtractButton);
            };
        };  

!**************** SR Box **********************************************

object           
    CCSRDialog : XmMessageDialog {         
        arguments {
            XmNdialogTitle      = "Single Ray Trace";
            XmNmessageString    = "Results at DECterm! ";
            XmNdefaultPosition  = true;
            XmNautoUnmanage     = true;
            XmNnoResize         = true;
            };
        callbacks {
            MrmNcreateCallback  = procedure create_proc (kCCSRDialog);   };
        };


!**************** SR Box **********************************************

                                         
!************************** calculation end *****************************       

object
    CPurgeButton : XmPushButton {                   
        arguments {
            XmNlabelString      = "User";   
            XmNmnemonic         = keysym("U"); 
            };     
        callbacks {
            XmNactivateCallback = procedure activate_proc (kCPurge);
            XmNhelpCallback     = procedure sens_help_proc(k_command_help);  
            };
        };  

object
    CPSButton : XmPushButton {                   
        arguments {
            XmNlabelString      = "create ASCII- File";   
            XmNmnemonic         = keysym("i");
            };     
        callbacks {
            XmNactivateCallback = procedure activate_proc (kDirCommand);
            XmNhelpCallback     = procedure sens_help_proc(k_command_help);  
            };
        };      

object
    mGraphicCommandButton: XmPushButton {
        arguments {
            XmNlabelString      = "Graphic...";
            XmNmnemonic         = keysym("G");
            };
        callbacks {
            XmNactivateCallback = procedure activate_proc (kGraphicCommand);
            XmNhelpCallback     = procedure sens_help_proc(k_command_help); 
            };
        };                                                   


!***************** matrix multiplication Box **************************
                                                   
object
    CCGlueBox  : XmFormDialog {   
	   arguments {
		XmNdialogTitle	    = "Matrix Multiplication Box";
		XmNautoUnmanage     = false; 
                XmNdefaultButton    = XmPushButton CCGOK;
                XmNcancelButton     = XmPushButton CCGCancel;
                XmNhorizontalSpacing= 10; 
                XmNverticalSpacing  = 15; 
		};
        controls {
                XmLabel         CCGResultLabel;
                XmPushButton    CCGResultButton; 
      	        XmScrolledList  CCGList;
                XmPushButton    CCGAdd; 
                XmPushButton    CCGDel; 
                XmPushButton    CCGOK;
                XmPushButton    CCGCancel;
		};          
        callbacks { MrmNcreateCallback = procedure create_proc(kCCGlueBox);};
        };    

object
    CCGResultLabel : XmLabel {
        arguments {
            XmNlabelString      = "result: ";
            XmNtopAttachment    = XmATTACH_FORM;
            XmNtopOffset        = 15;    
            XmNleftAttachment   = XmATTACH_FORM;
            XmNleftOffset       = 20;    
                        };
           };

object
     CCGResultButton :  XmPushButton {
               arguments	{
	       XmNlabelString 		= "PRODUCT.OMX";
	       XmNtopAttachment		= XmATTACH_FORM;
               XmNtopOffset        	= 10;    
               XmNrightAttachment	= XmATTACH_FORM;
               XmNrightOffset      	= 20;    
               XmNleftAttachment   	= XmATTACH_WIDGET; 
               XmNleftWidget            = CCGResultLabel;   
               XmNleftOffset       	= 20; 
               	};
           callbacks {
               MrmNcreateCallback  = procedure create_proc (kCCGResultButton);
               XmNactivateCallback = procedure activate_proc(kCCGResultButton);
        };   
    };         

object
    CCGList : XmScrolledList {
        arguments {
            XmNvisibleItemCount = 5;
            XmNunitType         = XmPIXELS;  
            XmNlistSizePolicy   = XmCONSTANT;
            XmNwidth		= 400;
            XmNbackground	= color('white', background);
            XmNtopAttachment	= XmATTACH_WIDGET;
            XmNtopWidget        = CCGResultLabel;     
            XmNtopOffset        = 20; 
	    XmNleftAttachment   = XmATTACH_FORM;
            XmNrightAttachment  = XmATTACH_FORM;
            XmNbottomAttachment	= XmATTACH_FORM;    
            XmNbottomOffset     = 70;
            	  };                  
        callbacks {
           MrmNcreateCallback  = procedure create_proc (kCCGList);
                  };                   
        };

object
	CCGOK :  XmPushButton {
               arguments      {
	       XmNbottomAttachment	= XmATTACH_FORM; 
	       XmNlabelString 		= "OK";
	       XmNleftAttachment   	= XmATTACH_FORM;
               XmNleftOffset       	= 20;
            		      };
        callbacks {
               MrmNcreateCallback  = procedure create_proc (kCCGOK);
               XmNactivateCallback = procedure activate_proc(kCCGOK);
        };   
   };         

object
	CCGAdd :  XmPushButton {
               arguments       {
	       XmNbottomAttachment	= XmATTACH_FORM; 
	       XmNlabelString 		= "Add Matrix";
	       XmNleftAttachment   	= XmATTACH_WIDGET;
               XmNleftWidget            = CCGOK;  
				};
	callbacks {
               MrmNcreateCallback  = procedure create_proc (kCCGAdd);
               XmNactivateCallback = procedure activate_proc(kCCGAdd);
        	};   
  	};         

object
	CCGDel :  XmPushButton {
               arguments	{
	       XmNbottomAttachment	= XmATTACH_FORM;   
	       XmNlabelString 		= "Delete Matrix";
	       XmNleftAttachment   	= XmATTACH_WIDGET;
               XmNleftWidget            = CCGAdd;      
               				}; 
	callbacks {
               MrmNcreateCallback  = procedure create_proc (kCCGDel);
               XmNactivateCallback = procedure activate_proc(kCCGDel);
	        };   
	};         

object
	CCGCancel :  XmPushButton {
               arguments	{
	       XmNbottomAttachment	= XmATTACH_FORM;   
	       XmNlabelString 		= "Cancel";
               XmNleftAttachment   	= XmATTACH_WIDGET;
               XmNleftWidget            = CCGDel;      
				}; 
	callbacks {
               MrmNcreateCallback  = procedure create_proc (kCCGCancel);
               XmNactivateCallback = procedure activate_proc(kCCGCancel);
	        };   
	};    

object
    CWriteMapButton : XmPushButton {                   
        arguments {
            XmNlabelString      = "Write Map";   
            XmNmnemonic         = keysym("W");
!            XmNsensitive	= false;       23.5.96
		};     
        callbacks {
            XmNactivateCallback = procedure activate_proc (kCWriteMapButton);
                  };
        };      


object
    CWriteMCoButton : XmPushButton {                   
        arguments {
            XmNlabelString      = "Write Mirror Coefficients";   
            XmNmnemonic         = keysym("o");
!            XmNsensitive	= false;       23.5.96
		};     
        callbacks {
            XmNactivateCallback = procedure activate_proc (kCWriteMCoButton);
                  };
        };      


object
    WriteResultButton : XmPushButton {                   
        arguments {
            XmNlabelString      = "Write Result";   
            XmNmnemonic         = keysym("R");
		};     
        callbacks {
           XmNactivateCallback = procedure activate_proc (kCWriteResultButton);
                  };
        };                                           
