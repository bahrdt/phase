      SUBROUTINE S1MACH                                                 SMCA0000
C                                                                       SMCA0010
C  S1MACH TESTS THE CONSISTENCY OF THE MACHINE CONSTANTS IN             SMCA0020
C  I1MACH, R1MACH AND D1MACH.                                           SMCA0030
C                                                                       SMCA0040
      INTEGER IMACH(16),I1MACH                                          SMCA0050
      INTEGER STDOUT                                                    SMCA0060
      INTEGER DIGINT, DIGSP, DIGDP                                      SMCA0070
      REAL RMACH(5),R1MACH                                              SMCA0080
      REAL S2MACH, XR, YR                                               SMCA0090
      REAL SBASE, SBASEM                                                SMCA0100
      REAL ALOG10, SQRT                                                 SMCA0110
      DOUBLE PRECISION DLOG10, DSQRT                                    SMCA0120
      DOUBLE PRECISION DMACH(5),D1MACH                                  SMCA0130
      DOUBLE PRECISION S3MACH, XD, YD                                   SMCA0140
      DOUBLE PRECISION DBASE, DBASEM                                    SMCA0150
C                                                                       SMCA0160
C/6S                                                                    SMCA0170
C     INTEGER IFMT(12)                                                  SMCA0180
C     INTEGER EFMT(15)                                                  SMCA0190
C     INTEGER DFMT(15)                                                  SMCA0200
C     INTEGER CCPLUS                                                    SMCA0210
C/7S                                                                    SMCA0220
      CHARACTER*1 IFMT1(12), EFMT1(15), DFMT1(15), CCPLUS               SMCA0230
      CHARACTER*12 IFMT                                                 SMCA0240
      CHARACTER*15 EFMT, DFMT                                           SMCA0250
      EQUIVALENCE (IFMT1(1),IFMT), (EFMT1(1),EFMT), (DFMT1(1),DFMT)     SMCA0260
C/                                                                      SMCA0270
      INTEGER DWIDTH, WWIDTH, EWIDTH                                    SMCA0280
      INTEGER DEMAX, DEMIN                                              SMCA0290
C                                                                       SMCA0300
      EQUIVALENCE ( STDOUT, IMACH(2) )                                  SMCA0310
      EQUIVALENCE ( DIGINT, IMACH(8) )                                  SMCA0320
      EQUIVALENCE ( DIGSP,  IMACH(11) )                                 SMCA0330
      EQUIVALENCE ( DIGDP,  IMACH(14) )                                 SMCA0340
C                                                                       SMCA0350
C/6S                                                                    SMCA0360
C     DATA CCPLUS   / 1H+ /                                             SMCA0370
C/7S                                                                    SMCA0380
      DATA CCPLUS   / '+' /                                             SMCA0390
C/                                                                      SMCA0400
C                                                                       SMCA0410
C/6S                                                                    SMCA0420
C     DATA IFMT(1 ) / 1H( /                                             SMCA0430
C     DATA IFMT(2 ) / 1HA /                                             SMCA0440
C     DATA IFMT(3 ) / 1H1 /                                             SMCA0450
C     DATA IFMT(4 ) / 1H, /                                             SMCA0460
C     DATA IFMT(5 ) / 1H5 /                                             SMCA0470
C     DATA IFMT(6 ) / 1H1 /                                             SMCA0480
C     DATA IFMT(7 ) / 1HX /                                             SMCA0490
C     DATA IFMT(8 ) / 1H, /                                             SMCA0500
C     DATA IFMT(9 ) / 1HI /                                             SMCA0510
C     DATA IFMT(10) / 1H  /                                             SMCA0520
C     DATA IFMT(11) / 1H  /                                             SMCA0530
C     DATA IFMT(12) / 1H) /                                             SMCA0540
C/7S                                                                    SMCA0550
      DATA IFMT1(1 ) / '(' /                                            SMCA0560
      DATA IFMT1(2 ) / 'A' /                                            SMCA0570
      DATA IFMT1(3 ) / '1' /                                            SMCA0580
      DATA IFMT1(4 ) / ',' /                                            SMCA0590
      DATA IFMT1(5 ) / '5' /                                            SMCA0600
      DATA IFMT1(6 ) / '1' /                                            SMCA0610
      DATA IFMT1(7 ) / 'X' /                                            SMCA0620
      DATA IFMT1(8 ) / ',' /                                            SMCA0630
      DATA IFMT1(9 ) / 'I' /                                            SMCA0640
      DATA IFMT1(10) / ' ' /                                            SMCA0650
      DATA IFMT1(11) / ' ' /                                            SMCA0660
      DATA IFMT1(12) / ')' /                                            SMCA0670
C/                                                                      SMCA0680
C                                                                       SMCA0690
C/6S                                                                    SMCA0700
C     DATA EFMT( 1) / 1H( /,    DFMT( 1) / 1H( /                        SMCA0710
C     DATA EFMT( 2) / 1HA /,    DFMT( 2) / 1HA /                        SMCA0720
C     DATA EFMT( 3) / 1H1 /,    DFMT( 3) / 1H1 /                        SMCA0730
C     DATA EFMT( 4) / 1H, /,    DFMT( 4) / 1H, /                        SMCA0740
C     DATA EFMT( 5) / 1H3 /,    DFMT( 5) / 1H3 /                        SMCA0750
C     DATA EFMT( 6) / 1H2 /,    DFMT( 6) / 1H2 /                        SMCA0760
C     DATA EFMT( 7) / 1HX /,    DFMT( 7) / 1HX /                        SMCA0770
C     DATA EFMT( 8) / 1H, /,    DFMT( 8) / 1H, /                        SMCA0780
C     DATA EFMT( 9) / 1HE /,    DFMT( 9) / 1HD /                        SMCA0790
C     DATA EFMT(10) / 1H  /,    DFMT(10) / 1H  /                        SMCA0800
C     DATA EFMT(11) / 1H  /,    DFMT(11) / 1H  /                        SMCA0810
C     DATA EFMT(12) / 1H. /,    DFMT(12) / 1H. /                        SMCA0820
C     DATA EFMT(13) / 1H  /,    DFMT(13) / 1H  /                        SMCA0830
C     DATA EFMT(14) / 1H  /,    DFMT(14) / 1H  /                        SMCA0840
C     DATA EFMT(15) / 1H) /,    DFMT(15) / 1H) /                        SMCA0850
C/7S                                                                    SMCA0860
      DATA EFMT1( 1) / '(' /,    DFMT1( 1) / '(' /                      SMCA0870
      DATA EFMT1( 2) / 'A' /,    DFMT1( 2) / 'A' /                      SMCA0880
      DATA EFMT1( 3) / '1' /,    DFMT1( 3) / '1' /                      SMCA0890
      DATA EFMT1( 4) / ',' /,    DFMT1( 4) / ',' /                      SMCA0900
      DATA EFMT1( 5) / '3' /,    DFMT1( 5) / '3' /                      SMCA0910
      DATA EFMT1( 6) / '2' /,    DFMT1( 6) / '2' /                      SMCA0920
      DATA EFMT1( 7) / 'X' /,    DFMT1( 7) / 'X' /                      SMCA0930
      DATA EFMT1( 8) / ',' /,    DFMT1( 8) / ',' /                      SMCA0940
      DATA EFMT1( 9) / 'E' /,    DFMT1( 9) / 'D' /                      SMCA0950
      DATA EFMT1(10) / ' ' /,    DFMT1(10) / ' ' /                      SMCA0960
      DATA EFMT1(11) / ' ' /,    DFMT1(11) / ' ' /                      SMCA0970
      DATA EFMT1(12) / '.' /,    DFMT1(12) / '.' /                      SMCA0980
      DATA EFMT1(13) / ' ' /,    DFMT1(13) / ' ' /                      SMCA0990
      DATA EFMT1(14) / ' ' /,    DFMT1(14) / ' ' /                      SMCA1000
      DATA EFMT1(15) / ')' /,    DFMT1(15) / ')' /                      SMCA1010
C/                                                                      SMCA1020
C                                                                       SMCA1030
C  FETCH ALL CONSTANTS INTO LOCAL ARRAYS                                SMCA1040
C                                                                       SMCA1050
      DO 10 I = 1,16                                                    SMCA1060
        IMACH(I) = I1MACH(I)                                            SMCA1070
 10     CONTINUE                                                        SMCA1080
C                                                                       SMCA1090
      DO 20 I = 1,5                                                     SMCA1100
        RMACH(I) = R1MACH(I)                                            SMCA1110
        DMACH(I) = D1MACH(I)                                            SMCA1120
 20     CONTINUE                                                        SMCA1130
C                                                                       SMCA1140
C  COMPUTE NUMBER OF CHARACTER POSITIONS NEEDED FOR WRITING             SMCA1150
C  OUT THE LARGEST INTEGER ALLOWING FOR ONE SPACE AND A SIGN            SMCA1160
C  AND PLUG THE FIELD WIDTH IN THE FORMAT.                              SMCA1170
C                                                                       SMCA1180
      WWIDTH = ICEIL( ALOG10(FLOAT(IMACH(7)))*FLOAT(IMACH(8)) ) + 2     SMCA1190
C/6S                                                                    SMCA1200
C     CALL S88FMT( 2, WWIDTH, IFMT(10) )                                SMCA1210
C     WRITE( STDOUT, 900 ) ( IFMT(I), I = 9, 11 )                       SMCA1220
C/7S                                                                    SMCA1230
      CALL S88FMT( 2, WWIDTH, IFMT1(10) )                               SMCA1240
      WRITE( STDOUT, 900 ) ( IFMT1(I), I = 9, 11 )                      SMCA1250
C/                                                                      SMCA1260
 900  FORMAT(//37H FORMAT CONVERSION FOR INTEGERS IS - ,3A1             SMCA1270
     1       / 25H INTEGER CONSTANTS FOLLOW///)                         SMCA1280
C                                                                       SMCA1290
C  NOW WRITE OUT THE INTEGER CONSTANTS                                  SMCA1300
C                                                                       SMCA1310
      WRITE( STDOUT, 1001 )                                             SMCA1320
 1001 FORMAT(24H THE STANDARD INPUT UNIT)                               SMCA1330
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(1)                            SMCA1340
C                                                                       SMCA1350
      WRITE( STDOUT, 1002 )                                             SMCA1360
 1002 FORMAT(25H THE STANDARD OUTPUT UNIT)                              SMCA1370
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(2)                            SMCA1380
C                                                                       SMCA1390
      WRITE( STDOUT, 1003 )                                             SMCA1400
 1003 FORMAT(24H THE STANDARD PUNCH UNIT)                               SMCA1410
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(3)                            SMCA1420
C                                                                       SMCA1430
      WRITE( STDOUT, 1004 )                                             SMCA1440
 1004 FORMAT(32H THE STANDARD ERROR MESSAGE UNIT)                       SMCA1450
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(4)                            SMCA1460
C                                                                       SMCA1470
      WRITE( STDOUT, 1005 )                                             SMCA1480
 1005 FORMAT(28H THE NUMBER OF BITS PER WORD)                           SMCA1490
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(5)                            SMCA1500
C                                                                       SMCA1510
      WRITE( STDOUT, 1006 )                                             SMCA1520
 1006 FORMAT(34H THE NUMBER OF CHARACTERS PER WORD)                     SMCA1530
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(6)                            SMCA1540
C                                                                       SMCA1550
      WRITE( STDOUT, 1007 )                                             SMCA1560
 1007 FORMAT(34H A, THE BASE OF AN S-DIGIT INTEGER)                     SMCA1570
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(7)                            SMCA1580
C                                                                       SMCA1590
      WRITE( STDOUT, 1008 )                                             SMCA1600
 1008 FORMAT(31H S, THE NUMBER OF BASE-A DIGITS)                        SMCA1610
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(8)                            SMCA1620
C                                                                       SMCA1630
      WRITE( STDOUT, 1009 )                                             SMCA1640
 1009 FORMAT(32H A**S - 1, THE LARGEST MAGNITUDE)                       SMCA1650
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(9)                            SMCA1660
C                                                                       SMCA1670
      WRITE( STDOUT, 1010 )                                             SMCA1680
 1010 FORMAT(47H B, THE BASE OF A T-DIGIT FLOATING-POINT NUMBER)        SMCA1690
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(10)                           SMCA1700
C                                                                       SMCA1710
      WRITE( STDOUT, 1011 )                                             SMCA1720
 1011 FORMAT(51H T, THE NUMBER OF BASE-B DIGITS IN SINGLE-PRECISION)    SMCA1730
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(11)                           SMCA1740
C                                                                       SMCA1750
      WRITE( STDOUT, 1012 )                                             SMCA1760
 1012 FORMAT(45H EMIN, THE SMALLEST SINGLE-PRECISION EXPONENT)          SMCA1770
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(12)                           SMCA1780
C                                                                       SMCA1790
      WRITE( STDOUT, 1013 )                                             SMCA1800
 1013 FORMAT(44H EMAX, THE LARGEST SINGLE-PRECISION EXPONENT)           SMCA1810
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(13)                           SMCA1820
C                                                                       SMCA1830
      WRITE( STDOUT, 1014 )                                             SMCA1840
 1014 FORMAT(51H T, THE NUMBER OF BASE-B DIGITS IN DOUBLE-PRECISION)    SMCA1850
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(14)                           SMCA1860
C                                                                       SMCA1870
      WRITE( STDOUT, 1015 )                                             SMCA1880
 1015 FORMAT(45H EMIN, THE SMALLEST DOUBLE-PRECISION EXPONENT)          SMCA1890
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(15)                           SMCA1900
C                                                                       SMCA1910
      WRITE( STDOUT, 1016 )                                             SMCA1920
 1016 FORMAT(44H EMAX, THE LARGEST DOUBLE-PRECISION EXPONENT)           SMCA1930
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(16)                           SMCA1940
C                                                                       SMCA1950
C  COMPUTE THE NUMBER OF CHARACTER POSITIONS NEEDED FOR WRITING         SMCA1960
C  OUT A SINGLE-PRECISION NUMBER ALLOWING FOR ONE SPACE AND             SMCA1970
C  A SIGN AND PLUG THE FIELDS IN THE FORMAT.                            SMCA1980
C                                                                       SMCA1990
      DWIDTH = ICEIL( ALOG10(FLOAT(IMACH(10)))*FLOAT(IMACH(11)) )       SMCA2000
C/6S                                                                    SMCA2010
C     CALL S88FMT( 2, DWIDTH, EFMT(13) )                                SMCA2020
C/7S                                                                    SMCA2030
      CALL S88FMT( 2, DWIDTH, EFMT1(13) )                               SMCA2040
C/                                                                      SMCA2050
      DEMIN =  IFLR( ALOG10(FLOAT(IMACH(10)))*FLOAT(IMACH(12)-1) ) + 1  SMCA2060
      DEMAX = ICEIL( ALOG10(FLOAT(IMACH(10)))*FLOAT(IMACH(13)) )        SMCA2070
      EWIDTH = IFLR( ALOG10(FLOAT(MAX0(IABS(DEMIN),IABS(DEMAX)))) ) + 1 SMCA2080
      WWIDTH = DWIDTH + EWIDTH + 6                                      SMCA2090
C/6S                                                                    SMCA2100
C     CALL S88FMT( 2, WWIDTH, EFMT(10) )                                SMCA2110
C     WRITE( STDOUT, 1900 ) ( EFMT(I), I = 9, 14 )                      SMCA2120
C/7S                                                                    SMCA2130
      CALL S88FMT( 2, WWIDTH, EFMT1(10) )                               SMCA2140
      WRITE( STDOUT, 1900 ) ( EFMT1(I), I = 9, 14 )                     SMCA2150
C/                                                                      SMCA2160
 1900 FORMAT(//45H FORMAT CONVERSION FOR SINGLE-PRECISION IS - ,6A1     SMCA2170
     1       / 34H SINGLE-PRECISION CONSTANTS FOLLOW///)                SMCA2180
C                                                                       SMCA2190
C  NOW WRITE OUT THE SINGLE-PRECISION CONSTANTS                         SMCA2200
C                                                                       SMCA2210
      WRITE( STDOUT, 2001 )                                             SMCA2220
 2001 FORMAT(32H THE SMALLEST POSITIVE MAGNITUDE)                       SMCA2230
      WRITE( STDOUT, EFMT ) CCPLUS, RMACH(1)                            SMCA2240
C                                                                       SMCA2250
      WRITE( STDOUT, 2002 )                                             SMCA2260
 2002 FORMAT(22H THE LARGEST MAGNITUDE)                                 SMCA2270
      WRITE( STDOUT, EFMT ) CCPLUS, RMACH(2)                            SMCA2280
C                                                                       SMCA2290
      WRITE( STDOUT, 2003 )                                             SMCA2300
 2003 FORMAT(30H THE SMALLEST RELATIVE SPACING)                         SMCA2310
      WRITE( STDOUT, EFMT ) CCPLUS, RMACH(3)                            SMCA2320
C                                                                       SMCA2330
      WRITE( STDOUT, 2004 )                                             SMCA2340
 2004 FORMAT(29H THE LARGEST RELATIVE SPACING)                          SMCA2350
      WRITE( STDOUT, EFMT ) CCPLUS, RMACH(4)                            SMCA2360
C                                                                       SMCA2370
      WRITE( STDOUT, 2005 )                                             SMCA2380
 2005 FORMAT(18H LOG10 OF THE BASE)                                     SMCA2390
      WRITE( STDOUT, EFMT ) CCPLUS, RMACH(5)                            SMCA2400
C/6S                                                                    SMCA2410
C     CALL S88FMT( 2, WWIDTH+1, EFMT(10) )                              SMCA2420
C     CALL S88FMT( 2, DWIDTH+1, EFMT(13) )                              SMCA2430
C/7S                                                                    SMCA2440
      CALL S88FMT( 2, WWIDTH+1, EFMT1(10) )                             SMCA2450
      CALL S88FMT( 2, DWIDTH+1, EFMT1(13) )                             SMCA2460
C/                                                                      SMCA2470
C  COMPUTE THE NUMBER OF CHARACTER POSITIONS NEEDED FOR WRITING         SMCA2480
C  OUT A DOUBLE-PRECISION NUMBER ALLOWING FOR ONE SPACE AND             SMCA2490
C  A SIGN AND PLUG THE FIELDS IN THE FORMAT.                            SMCA2500
C                                                                       SMCA2510
      DWIDTH = ICEIL( ALOG10(FLOAT(IMACH(10)))*FLOAT(IMACH(14)) )       SMCA2520
C/6S                                                                    SMCA2530
C     CALL S88FMT( 2, DWIDTH, DFMT(13) )                                SMCA2540
C/7S                                                                    SMCA2550
      CALL S88FMT( 2, DWIDTH, DFMT1(13) )                               SMCA2560
C/                                                                      SMCA2570
      DEMIN =  IFLR( ALOG10(FLOAT(IMACH(10)))*FLOAT(IMACH(15)-1) ) + 1  SMCA2580
      DEMAX = ICEIL( ALOG10(FLOAT(IMACH(10)))*FLOAT(IMACH(16)) )        SMCA2590
      EWIDTH = IFLR( ALOG10(FLOAT(MAX0(IABS(DEMIN),IABS(DEMAX)))) ) + 1 SMCA2600
      WWIDTH = DWIDTH + EWIDTH + 6                                      SMCA2610
C/6S                                                                    SMCA2620
C     CALL S88FMT( 2, WWIDTH, DFMT(10) )                                SMCA2630
C     WRITE( STDOUT, 2900 ) ( DFMT(I), I = 9, 14 )                      SMCA2640
C/7S                                                                    SMCA2650
      CALL S88FMT( 2, WWIDTH, DFMT1(10) )                               SMCA2660
      WRITE( STDOUT, 2900 ) ( DFMT1(I), I = 9, 14 )                     SMCA2670
C/                                                                      SMCA2680
 2900 FORMAT(//45H FORMAT CONVERSION FOR DOUBLE-PRECISION IS - ,6A1     SMCA2690
     1       / 34H DOUBLE-PRECISION CONSTANTS FOLLOW///)                SMCA2700
C                                                                       SMCA2710
C  NOW WRITE OUT THE DOUBLE-PRECISION CONSTANTS                         SMCA2720
C                                                                       SMCA2730
      WRITE( STDOUT, 3001 )                                             SMCA2740
 3001 FORMAT(32H THE SMALLEST POSITIVE MAGNITUDE)                       SMCA2750
      WRITE( STDOUT, DFMT ) CCPLUS, DMACH(1)                            SMCA2760
C                                                                       SMCA2770
      WRITE( STDOUT, 3002 )                                             SMCA2780
 3002 FORMAT(22H THE LARGEST MAGNITUDE)                                 SMCA2790
      WRITE( STDOUT, DFMT ) CCPLUS, DMACH(2)                            SMCA2800
C                                                                       SMCA2810
      WRITE( STDOUT, 3003 )                                             SMCA2820
 3003 FORMAT(30H THE SMALLEST RELATIVE SPACING)                         SMCA2830
      WRITE( STDOUT, DFMT ) CCPLUS, DMACH(3)                            SMCA2840
C                                                                       SMCA2850
      WRITE( STDOUT, 3004 )                                             SMCA2860
 3004 FORMAT(29H THE LARGEST RELATIVE SPACING)                          SMCA2870
      WRITE( STDOUT, DFMT ) CCPLUS, DMACH(4)                            SMCA2880
C                                                                       SMCA2890
      WRITE( STDOUT, 3005 )                                             SMCA2900
 3005 FORMAT(18H LOG10 OF THE BASE)                                     SMCA2910
      WRITE( STDOUT, DFMT ) CCPLUS, DMACH(5)                            SMCA2920
C/6S                                                                    SMCA2930
C     CALL S88FMT( 2, WWIDTH+1, DFMT(10) )                              SMCA2940
C     CALL S88FMT( 2, DWIDTH+1, DFMT(13) )                              SMCA2950
C/7S                                                                    SMCA2960
      CALL S88FMT( 2, WWIDTH+1, DFMT1(10) )                             SMCA2970
      CALL S88FMT( 2, DWIDTH+1, DFMT1(13) )                             SMCA2980
C/                                                                      SMCA2990
C  NOW CHECK CONSISTENCY OF INTEGER CONSTANTS                           SMCA3000
C/6S                                                                    SMCA3010
C     CALL S88FMT( 2, 14, IFMT(5) )                                     SMCA3020
C/7S                                                                    SMCA3030
      CALL S88FMT( 2, 14, IFMT1(5) )                                    SMCA3040
C/                                                                      SMCA3050
      IF( IMACH(11) .LE. IMACH(14) ) GOTO 4009                          SMCA3060
      WRITE( STDOUT, 4001 )                                             SMCA3070
 4001 FORMAT(30H0I1MACH(11) EXCEEDS I1MACH(14) )                        SMCA3080
      WRITE( STDOUT, 4002 )                                             SMCA3090
 4002 FORMAT(13H I1MACH(11) = )                                         SMCA3100
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(11)                           SMCA3110
      WRITE( STDOUT, 4003 )                                             SMCA3120
 4003 FORMAT(13H I1MACH(14) = )                                         SMCA3130
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(14)                           SMCA3140
 4009 CONTINUE                                                          SMCA3150
C                                                                       SMCA3160
      IF( IMACH(13) .LE. IMACH(16) ) GOTO 4019                          SMCA3170
      WRITE( STDOUT, 4011 )                                             SMCA3180
 4011 FORMAT(40H0WARNING - I1MACH(13) EXCEEDS I1MACH(16) )              SMCA3190
      WRITE( STDOUT, 4012 )                                             SMCA3200
 4012 FORMAT(13H I1MACH(13) = )                                         SMCA3210
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(13)                           SMCA3220
      WRITE( STDOUT, 4013 )                                             SMCA3230
 4013 FORMAT(13H I1MACH(16) = )                                         SMCA3240
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(16)                           SMCA3250
 4019 CONTINUE                                                          SMCA3260
C                                                                       SMCA3270
      IF( IMACH(16)-IMACH(15) .GE. IMACH(13)-IMACH(12) ) GOTO 4029      SMCA3280
      WRITE( STDOUT, 4021 )                                             SMCA3290
 4021 FORMAT(34H0WARNING - I1MACH(13) - I1MACH(12) )                    SMCA3300
      WRITE( STDOUT, 4022 )                                             SMCA3310
 4022 FORMAT(32H EXCEEDS I1MACH(16) - I1MACH(15) )                      SMCA3320
      WRITE( STDOUT, 4023 )                                             SMCA3330
 4023 FORMAT(13H I1MACH(12) = )                                         SMCA3340
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(12)                           SMCA3350
      WRITE( STDOUT, 4024 )                                             SMCA3360
 4024 FORMAT(13H I1MACH(13) = )                                         SMCA3370
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(13)                           SMCA3380
      WRITE( STDOUT, 4025 )                                             SMCA3390
 4025 FORMAT(13H I1MACH(15) = )                                         SMCA3400
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(15)                           SMCA3410
      WRITE( STDOUT, 4026 )                                             SMCA3420
 4026 FORMAT(13H I1MACH(16) = )                                         SMCA3430
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(16)                           SMCA3440
 4029 CONTINUE                                                          SMCA3450
C                                                                       SMCA3460
      N = 0                                                             SMCA3470
      IBASEM = IMACH(7) - 1                                             SMCA3480
      DO 4030 I = 1, DIGINT                                             SMCA3490
        N = N*IMACH(7) + IBASEM                                         SMCA3500
 4030   CONTINUE                                                        SMCA3510
C                                                                       SMCA3520
      IF( IMACH(9) .EQ. N) GOTO 4039                                    SMCA3530
      WRITE( STDOUT, 4031 )                                             SMCA3540
 4031 FORMAT(39H1IMACH(9) IS NOT IMACH(7)**IMACH(8) - 1 )               SMCA3550
      WRITE( STDOUT, 4032 )                                             SMCA3560
 4032 FORMAT(12H I1MACH(7) = )                                          SMCA3570
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(7)                            SMCA3580
      WRITE( STDOUT, 4034 )                                             SMCA3590
 4034 FORMAT(12H I1MACH(8) = )                                          SMCA3600
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(8)                            SMCA3610
      WRITE( STDOUT, 4035 )                                             SMCA3620
 4035 FORMAT(12H I1MACH(9) = )                                          SMCA3630
      WRITE( STDOUT, IFMT ) CCPLUS, IMACH(9)                            SMCA3640
 4039 CONTINUE                                                          SMCA3650
C                                                                       SMCA3660
C NOW CHECK CONSISTENCY OF SINGLE-PRECISION CONSTANTS                   SMCA3670
C/6S                                                                    SMCA3680
C     CALL S88FMT( 2, 19, EFMT(5) )                                     SMCA3690
C/7S                                                                    SMCA3700
      CALL S88FMT( 2, 19, EFMT1(5) )                                    SMCA3710
C/                                                                      SMCA3720
      XR = S2MACH( 1.0, IMACH(10), IMACH(12)-1 )                        SMCA3730
      IF( XR .EQ. RMACH(1) ) GOTO 5009                                  SMCA3740
      WRITE( STDOUT, 5001 )                                             SMCA3750
 5001 FORMAT(47H0R1MACH(1) DOES NOT AGREE WITH CALCULATED VALUE)        SMCA3760
      WRITE( STDOUT, 5002 )                                             SMCA3770
 5002 FORMAT(12H R1MACH(1) = )                                          SMCA3780
      WRITE( STDOUT, EFMT ) CCPLUS, RMACH(1)                            SMCA3790
      WRITE( STDOUT, 5003 )                                             SMCA3800
 5003 FORMAT(19H CALCULATED VALUE = )                                   SMCA3810
      WRITE( STDOUT, EFMT ) CCPLUS, XR                                  SMCA3820
      WRITE( STDOUT, 5004 )                                             SMCA3830
 5004 FORMAT(14H DIFFERENCE = )                                         SMCA3840
      XR = RMACH(1) - XR                                                SMCA3850
      WRITE( STDOUT, EFMT ) CCPLUS, XR                                  SMCA3860
 5009 CONTINUE                                                          SMCA3870
C                                                                       SMCA3880
      XR = 0.0                                                          SMCA3890
      SBASE  = FLOAT( IMACH(10) )                                       SMCA3900
      SBASEM = FLOAT( IMACH(10)-1 )                                     SMCA3910
      DO 5010 I = 1, DIGSP                                              SMCA3920
        XR = (XR + SBASEM)/SBASE                                        SMCA3930
 5010   CONTINUE                                                        SMCA3940
C                                                                       SMCA3950
      XR = S2MACH( XR, IMACH(10), IMACH(13) )                           SMCA3960
      IF( XR .EQ. RMACH(2) ) GOTO 5019                                  SMCA3970
      WRITE( STDOUT, 5011 )                                             SMCA3980
 5011 FORMAT(47H0R1MACH(2) DOES NOT AGREE WITH CALCULATED VALUE)        SMCA3990
      WRITE( STDOUT, 5012 )                                             SMCA4000
 5012 FORMAT(12H R1MACH(2) = )                                          SMCA4010
      WRITE( STDOUT, EFMT ) CCPLUS, RMACH(2)                            SMCA4020
      WRITE( STDOUT, 5013 )                                             SMCA4030
 5013 FORMAT(19H CALCULATED VALUE = )                                   SMCA4040
      WRITE( STDOUT, EFMT ) CCPLUS, XR                                  SMCA4050
      WRITE( STDOUT, 5014 )                                             SMCA4060
 5014 FORMAT(14H DIFFERENCE = )                                         SMCA4070
      XR = RMACH(2) - XR                                                SMCA4080
      WRITE( STDOUT, EFMT ) CCPLUS, XR                                  SMCA4090
 5019 CONTINUE                                                          SMCA4100
C                                                                       SMCA4110
      XR = S2MACH( 1.0, IMACH(10), -IMACH(11) )                         SMCA4120
      IF( XR .EQ. RMACH(3) ) GOTO 5029                                  SMCA4130
      WRITE( STDOUT, 5021 )                                             SMCA4140
 5021 FORMAT(47H0R1MACH(3) DOES NOT AGREE WITH CALCULATED VALUE)        SMCA4150
      WRITE( STDOUT, 5022 )                                             SMCA4160
 5022 FORMAT(12H R1MACH(3) = )                                          SMCA4170
      WRITE( STDOUT, EFMT ) CCPLUS, RMACH(3)                            SMCA4180
      WRITE( STDOUT, 5023 )                                             SMCA4190
 5023 FORMAT(19H CALCULATED VALUE = )                                   SMCA4200
      WRITE( STDOUT, EFMT ) CCPLUS, XR                                  SMCA4210
      WRITE( STDOUT, 5024 )                                             SMCA4220
 5024 FORMAT(14H DIFFERENCE = )                                         SMCA4230
      XR = RMACH(3) - XR                                                SMCA4240
      WRITE( STDOUT, EFMT ) CCPLUS, XR                                  SMCA4250
 5029 CONTINUE                                                          SMCA4260
C                                                                       SMCA4270
      XR = S2MACH( 1.0, IMACH(10), 1-IMACH(11) )                        SMCA4280
      IF( XR .EQ. RMACH(4) ) GOTO 5039                                  SMCA4290
      WRITE( STDOUT, 5031 )                                             SMCA4300
 5031 FORMAT(47H0R1MACH(4) DOES NOT AGREE WITH CALCULATED VALUE)        SMCA4310
      WRITE( STDOUT, 5032 )                                             SMCA4320
 5032 FORMAT(12H R1MACH(4) = )                                          SMCA4330
      WRITE( STDOUT, EFMT ) CCPLUS, RMACH(4)                            SMCA4340
      WRITE( STDOUT, 5033 )                                             SMCA4350
 5033 FORMAT(19H CALCULATED VALUE = )                                   SMCA4360
      WRITE( STDOUT, EFMT ) CCPLUS, XR                                  SMCA4370
      WRITE( STDOUT, 5034 )                                             SMCA4380
 5034 FORMAT(14H DIFFERENCE = )                                         SMCA4390
      XR = RMACH(4) - XR                                                SMCA4400
      WRITE( STDOUT, EFMT ) CCPLUS, XR                                  SMCA4410
 5039 CONTINUE                                                          SMCA4420
C                                                                       SMCA4430
      XR = ALOG10( FLOAT(IMACH(10)) )                                   SMCA4440
      IF( XR .EQ. RMACH(5) ) GOTO 5049                                  SMCA4450
      WRITE( STDOUT, 5041 )                                             SMCA4460
 5041 FORMAT(47H0R1MACH(5) DOES NOT AGREE WITH CALCULATED VALUE)        SMCA4470
      WRITE( STDOUT, 5042 )                                             SMCA4480
 5042 FORMAT(12H R1MACH(5) = )                                          SMCA4490
      WRITE( STDOUT, EFMT ) CCPLUS, RMACH(5)                            SMCA4500
      WRITE( STDOUT, 5043 )                                             SMCA4510
 5043 FORMAT(19H CALCULATED VALUE = )                                   SMCA4520
      WRITE( STDOUT, EFMT ) CCPLUS, XR                                  SMCA4530
      WRITE( STDOUT, 5044 )                                             SMCA4540
 5044 FORMAT(14H DIFFERENCE = )                                         SMCA4550
      XR = RMACH(5) - XR                                                SMCA4560
      WRITE( STDOUT, EFMT ) CCPLUS, XR                                  SMCA4570
 5049 CONTINUE                                                          SMCA4580
C                                                                       SMCA4590
C NOW CHECK CONSISTENCY OF DOUBLE-PRECISION CONSTANTS                   SMCA4600
C/6S                                                                    SMCA4610
C     CALL S88FMT( 2, 19, DFMT(5) )                                     SMCA4620
C/7S                                                                    SMCA4630
      CALL S88FMT( 2, 19, DFMT1(5) )                                    SMCA4640
C/                                                                      SMCA4650
      XD = S3MACH( 1.0D0, IMACH(10), IMACH(15)-1 )                      SMCA4660
      IF( XD .EQ. DMACH(1) ) GOTO 6009                                  SMCA4670
      WRITE( STDOUT, 6001 )                                             SMCA4680
 6001 FORMAT(47H0D1MACH(1) DOES NOT AGREE WITH CALCULATED VALUE)        SMCA4690
      WRITE( STDOUT, 6002 )                                             SMCA4700
 6002 FORMAT(12H D1MACH(1) = )                                          SMCA4710
      WRITE( STDOUT, DFMT ) CCPLUS, DMACH(1)                            SMCA4720
      WRITE( STDOUT, 6003 )                                             SMCA4730
 6003 FORMAT(19H CALCULATED VALUE = )                                   SMCA4740
      WRITE( STDOUT, DFMT ) CCPLUS, XD                                  SMCA4750
      WRITE( STDOUT, 6004 )                                             SMCA4760
 6004 FORMAT(14H DIFFERENCE = )                                         SMCA4770
      XD = DMACH(1) - XD                                                SMCA4780
      WRITE( STDOUT, DFMT ) CCPLUS, XD                                  SMCA4790
 6009 CONTINUE                                                          SMCA4800
C                                                                       SMCA4810
      XD = 0.0D0                                                        SMCA4820
      DBASE  = DBLE ( FLOAT( IMACH(10) ) )                              SMCA4830
      DBASEM = DBLE ( FLOAT( IMACH(10)-1 ) )                            SMCA4840
      DO 6010 I = 1, DIGDP                                              SMCA4850
        XD = (XD + DBASEM)/DBASE                                        SMCA4860
 6010   CONTINUE                                                        SMCA4870
C                                                                       SMCA4880
      XD = S3MACH( XD, IMACH(10), IMACH(16) )                           SMCA4890
      IF( XD .EQ. DMACH(2) ) GOTO 6019                                  SMCA4900
      WRITE( STDOUT, 6011 )                                             SMCA4910
 6011 FORMAT(47H0D1MACH(2) DOES NOT AGREE WITH CALCULATED VALUE)        SMCA4920
      WRITE( STDOUT, 6012 )                                             SMCA4930
 6012 FORMAT(12H D1MACH(2) = )                                          SMCA4940
      WRITE( STDOUT, DFMT ) CCPLUS, DMACH(2)                            SMCA4950
      WRITE( STDOUT, 6013 )                                             SMCA4960
 6013 FORMAT(19H CALCULATED VALUE = )                                   SMCA4970
      WRITE( STDOUT, DFMT ) CCPLUS, XD                                  SMCA4980
      WRITE( STDOUT, 6014 )                                             SMCA4990
 6014 FORMAT(14H DIFFERENCE = )                                         SMCA5000
      XD = DMACH(2) - XD                                                SMCA5010
      WRITE( STDOUT, DFMT ) CCPLUS, XD                                  SMCA5020
 6019 CONTINUE                                                          SMCA5030
C                                                                       SMCA5040
      XD = S3MACH( 1.0D0, IMACH(10), -IMACH(14) )                       SMCA5050
      IF( XD .EQ. DMACH(3) ) GOTO 6029                                  SMCA5060
      WRITE( STDOUT, 6021 )                                             SMCA5070
 6021 FORMAT(47H0D1MACH(3) DOES NOT AGREE WITH CALCULATED VALUE)        SMCA5080
      WRITE( STDOUT, 6022 )                                             SMCA5090
 6022 FORMAT(12H D1MACH(3) = )                                          SMCA5100
      WRITE( STDOUT, DFMT ) CCPLUS, DMACH(3)                            SMCA5110
      WRITE( STDOUT, 6023 )                                             SMCA5120
 6023 FORMAT(19H CALCULATED VALUE = )                                   SMCA5130
      WRITE( STDOUT, DFMT ) CCPLUS, XD                                  SMCA5140
      WRITE( STDOUT, 6024 )                                             SMCA5150
 6024 FORMAT(14H DIFFERENCE = )                                         SMCA5160
      XD = DMACH(3) - XD                                                SMCA5170
      WRITE( STDOUT, DFMT ) CCPLUS, XD                                  SMCA5180
 6029 CONTINUE                                                          SMCA5190
C                                                                       SMCA5200
      XD = S3MACH( 1.0D0, IMACH(10), 1-IMACH(14) )                      SMCA5210
      IF( XD .EQ. DMACH(4) ) GOTO 6039                                  SMCA5220
      WRITE( STDOUT, 6031 )                                             SMCA5230
 6031 FORMAT(47H0D1MACH(4) DOES NOT AGREE WITH CALCULATED VALUE)        SMCA5240
      WRITE( STDOUT, 6032 )                                             SMCA5250
 6032 FORMAT(12H D1MACH(4) = )                                          SMCA5260
      WRITE( STDOUT, DFMT ) CCPLUS, DMACH(4)                            SMCA5270
      WRITE( STDOUT, 6033 )                                             SMCA5280
 6033 FORMAT(19H CALCULATED VALUE = )                                   SMCA5290
      WRITE( STDOUT, DFMT ) CCPLUS, XD                                  SMCA5300
      WRITE( STDOUT, 6034 )                                             SMCA5310
 6034 FORMAT(14H DIFFERENCE = )                                         SMCA5320
      XD = DMACH(4) - XD                                                SMCA5330
      WRITE( STDOUT, DFMT ) CCPLUS, XD                                  SMCA5340
 6039 CONTINUE                                                          SMCA5350
C                                                                       SMCA5360
      XD = DLOG10( DBLE(FLOAT(IMACH(10))) )                             SMCA5370
      IF( XD .EQ. DMACH(5) ) GOTO 6049                                  SMCA5380
      WRITE( STDOUT, 6041 )                                             SMCA5390
 6041 FORMAT(47H0D1MACH(5) DOES NOT AGREE WITH CALCULATED VALUE)        SMCA5400
      WRITE( STDOUT, 6042 )                                             SMCA5410
 6042 FORMAT(12H D1MACH(5) = )                                          SMCA5420
      WRITE( STDOUT, DFMT ) CCPLUS, DMACH(5)                            SMCA5430
      WRITE( STDOUT, 6043 )                                             SMCA5440
 6043 FORMAT(19H CALCULATED VALUE = )                                   SMCA5450
      WRITE( STDOUT, DFMT ) CCPLUS, XD                                  SMCA5460
      WRITE( STDOUT, 6044 )                                             SMCA5470
 6044 FORMAT(14H DIFFERENCE = )                                         SMCA5480
      XD = DMACH(5) - XD                                                SMCA5490
      WRITE( STDOUT, DFMT ) CCPLUS, XD                                  SMCA5500
 6049 CONTINUE                                                          SMCA5510
C                                                                       SMCA5520
C NOW SEE IF SINGLE-PRECISION IS CLOSED UNDER NEGATION                  SMCA5530
C                                                                       SMCA5540
      XR = -RMACH(1)                                                    SMCA5550
      XR = -XR                                                          SMCA5560
      IF( XR .EQ. RMACH(1) ) GOTO 7009                                  SMCA5570
      WRITE( STDOUT, 7001 )                                             SMCA5580
 7001 FORMAT(29H0-(-R1MACH(1)) .NE. R1MACH(1))                          SMCA5590
      WRITE( STDOUT, 7002 )                                             SMCA5600
 7002 FORMAT(16H    R1MACH(1)  = )                                      SMCA5610
      WRITE( STDOUT, EFMT ) CCPLUS, RMACH(1)                            SMCA5620
      WRITE( STDOUT, 7003 )                                             SMCA5630
 7003 FORMAT(16H -(-R1MACH(1)) = )                                      SMCA5640
      WRITE( STDOUT, EFMT ) CCPLUS, XR                                  SMCA5650
 7009 CONTINUE                                                          SMCA5660
C                                                                       SMCA5670
      XR = -RMACH(2)                                                    SMCA5680
      XR = -XR                                                          SMCA5690
      IF( XR .EQ. RMACH(2) ) GOTO 7019                                  SMCA5700
      WRITE( STDOUT, 7011 )                                             SMCA5710
 7011 FORMAT(29H0-(-R1MACH(2)) .NE. R1MACH(2))                          SMCA5720
      WRITE( STDOUT, 7012 )                                             SMCA5730
 7012 FORMAT(16H    R1MACH(2)  = )                                      SMCA5740
      WRITE( STDOUT, EFMT ) CCPLUS, RMACH(2)                            SMCA5750
      WRITE( STDOUT, 7013 )                                             SMCA5760
 7013 FORMAT(16H -(-R1MACH(2)) = )                                      SMCA5770
      WRITE( STDOUT, EFMT ) CCPLUS, XR                                  SMCA5780
 7019 CONTINUE                                                          SMCA5790
C                                                                       SMCA5800
C NOW SEE IF DOUBLE-PRECISION IS CLOSED UNDER NEGATION                  SMCA5810
C                                                                       SMCA5820
      XD = -DMACH(1)                                                    SMCA5830
      XD = -XD                                                          SMCA5840
      IF( XD .EQ. DMACH(1) ) GOTO 8009                                  SMCA5850
      WRITE( STDOUT, 8001 )                                             SMCA5860
 8001 FORMAT(29H0-(-D1MACH(1)) .NE. D1MACH(1))                          SMCA5870
      WRITE( STDOUT, 8002 )                                             SMCA5880
 8002 FORMAT(16H    D1MACH(1)  = )                                      SMCA5890
      WRITE( STDOUT, DFMT ) CCPLUS, DMACH(1)                            SMCA5900
      WRITE( STDOUT, 8003 )                                             SMCA5910
 8003 FORMAT(16H -(-D1MACH(1)) = )                                      SMCA5920
      WRITE( STDOUT, DFMT ) CCPLUS, XD                                  SMCA5930
 8009 CONTINUE                                                          SMCA5940
C                                                                       SMCA5950
      XD = -DMACH(2)                                                    SMCA5960
      XD = -XD                                                          SMCA5970
      IF( XD .EQ. DMACH(2) ) GOTO 8019                                  SMCA5980
      WRITE( STDOUT, 8011 )                                             SMCA5990
 8011 FORMAT(29H0-(-D1MACH(2)) .NE. D1MACH(2))                          SMCA6000
      WRITE( STDOUT, 8012 )                                             SMCA6010
 8012 FORMAT(16H    D1MACH(2)  = )                                      SMCA6020
      WRITE( STDOUT, DFMT ) CCPLUS, DMACH(2)                            SMCA6030
      WRITE( STDOUT, 8013 )                                             SMCA6040
 8013 FORMAT(16H -(-D1MACH(2)) = )                                      SMCA6050
      WRITE( STDOUT, DFMT ) CCPLUS, XD                                  SMCA6060
 8019 CONTINUE                                                          SMCA6070
C                                                                       SMCA6080
C CHECK THAT SQRT AND DSQRT WORK NEAR OVER- AND UNDERFLOW LIMITS.       SMCA6090
C                                                                       SMCA6100
      N = IMACH(11)/2 + 1                                               SMCA6110
      XR = SQRT(RMACH(1))                                               SMCA6120
      IF (XR .GT. 0.0) GO TO 9002                                       SMCA6130
         WRITE( STDOUT, 9001 )                                          SMCA6140
 9001    FORMAT(18H SQRT(R1MACH(1)) =)                                  SMCA6150
         WRITE( STDOUT, EFMT ) CCPLUS, XR                               SMCA6160
         GO TO 9004                                                     SMCA6170
C SCALE TO AVOID TROUBLE FROM UNDERFLOW...                              SMCA6180
 9002 XR = S2MACH( XR, IMACH(10), N)                                    SMCA6190
      YR = S2MACH( RMACH(1), IMACH(10), 2*N)                            SMCA6200
      YR = ABS(XR*XR - YR) / YR                                         SMCA6210
      IF (YR .LT. 2.*RMACH(4)) GO TO 9004                               SMCA6220
         WRITE( STDOUT, 9003 )                                          SMCA6230
 9003    FORMAT(35H EXCESSIVE ERROR IN SQRT(R1MACH(1))/13H REL. ERROR =)SMCA6240
         WRITE( STDOUT, EFMT ) CCPLUS, YR                               SMCA6250
 9004 XR = SQRT(RMACH(2))                                               SMCA6260
      IF (XR .GT. 0.0) GO TO 9006                                       SMCA6270
         WRITE( STDOUT, 9005 )                                          SMCA6280
 9005    FORMAT(18H SQRT(R1MACH(2)) =)                                  SMCA6290
         WRITE( STDOUT, EFMT ) CCPLUS, XR                               SMCA6300
         GO TO 9008                                                     SMCA6310
C SCALE TO AVOID TROUBLE FROM OVERFLOW...                               SMCA6320
 9006 XR = S2MACH( XR, IMACH(10), -N)                                   SMCA6330
      YR = S2MACH( RMACH(2), IMACH(10), -2*N)                           SMCA6340
      YR = ABS(XR*XR - YR) / YR                                         SMCA6350
      IF (YR .LT. 2.*RMACH(4)) GO TO 9008                               SMCA6360
         WRITE( STDOUT, 9007 )                                          SMCA6370
 9007    FORMAT(35H EXCESSIVE ERROR IN SQRT(R1MACH(2))/13H REL. ERROR =)SMCA6380
         WRITE( STDOUT, EFMT ) CCPLUS, YR                               SMCA6390
C                                                                       SMCA6400
 9008 N = IMACH(14)/2 + 1                                               SMCA6410
      XD = DSQRT(DMACH(1))                                              SMCA6420
      IF (XD .GT. 0.D0) GO TO 9010                                      SMCA6430
         WRITE( STDOUT, 9009 )                                          SMCA6440
 9009    FORMAT(19H DSQRT(D1MACH(1)) =)                                 SMCA6450
         WRITE( STDOUT, DFMT ) CCPLUS, XD                               SMCA6460
         GO TO 9012                                                     SMCA6470
C AGAIN SCALE TO AVOID TROUBLE FROM UNDERFLOW...                        SMCA6480
 9010 XD = S3MACH( XD, IMACH(10), N)                                    SMCA6490
      YD = S3MACH( DMACH(1), IMACH(10), 2*N)                            SMCA6500
      YD = DABS(XD*XD - YD) / YD                                        SMCA6510
      IF (YD .LT. 2.D0*DMACH(4)) GO TO 9012                             SMCA6520
        WRITE( STDOUT, 9011 )                                           SMCA6530
 9011   FORMAT(36H EXCESSIVE ERROR IN DSQRT(D1MACH(1))/13H REL. ERROR =)SMCA6540
        WRITE( STDOUT, EFMT ) CCPLUS, YD                                SMCA6550
 9012 XD = DSQRT(DMACH(2))                                              SMCA6560
      IF (XD .GT. 0.0D0) GO TO 9014                                     SMCA6570
        WRITE( STDOUT, 9013 )                                           SMCA6580
 9013   FORMAT(19H DSQRT(D1MACH(2)) =)                                  SMCA6590
        WRITE( STDOUT, EFMT ) CCPLUS, XD                                SMCA6600
        GO TO 9016                                                      SMCA6610
C AGAIN SCALE TO AVOID TROUBLE FROM OVERFLOW...                         SMCA6620
 9014 XD = S3MACH( XD, IMACH(10), -N)                                   SMCA6630
      YD = S3MACH( DMACH(2), IMACH(10), -2*N)                           SMCA6640
      YD = DABS(XD*XD - YD) / YD                                        SMCA6650
      IF (YD .LT. 2.D0*DMACH(4)) GO TO 9016                             SMCA6660
        WRITE( STDOUT, 9015 )                                           SMCA6670
 9015   FORMAT(36H EXCESSIVE ERROR IN DSQRT(D1MACH(2))/13H REL. ERROR =)SMCA6680
        WRITE( STDOUT, EFMT ) CCPLUS, YD                                SMCA6690
 9016 RETURN                                                            SMCA6700
C                                                                       SMCA6710
      END                                                               SMCA6720
      REAL FUNCTION S2MACH( XR, BASE, EXP )                             SMCB0000
C                                                                       SMCB0020
C S2MACH = XR * BASE**EXP                                               SMCB0040
C                                                                       SMCB0060
C     (17-JUN-85) -- REVISED TO MAKE OVERFLOW LESS LIKELY               SMCB0080
      INTEGER BASE, EXP                                                 SMCB0100
      REAL TBASE, XR                                                    SMCB0120
C                                                                       SMCB0140
      TBASE = FLOAT(BASE)                                               SMCB0160
      S2MACH = XR                                                       SMCB0180
C                                                                       SMCB0200
      N = EXP                                                           SMCB0220
      IF( N .GE. 0 ) GO TO 20                                           SMCB0240
C                                                                       SMCB0260
      N = -N                                                            SMCB0280
      TBASE = 1.0/TBASE                                                 SMCB0300
C                                                                       SMCB0320
 20   IF( MOD(N,2) .NE. 0 ) S2MACH = S2MACH*TBASE                       SMCB0340
      N = N/2                                                           SMCB0360
      IF( N .LT. 2 ) GO TO 30                                           SMCB0380
      TBASE = TBASE * TBASE                                             SMCB0400
      GO TO 20                                                          SMCB0420
C                                                                       SMCB0440
 30   IF (N .EQ. 1) S2MACH = (S2MACH * TBASE) * TBASE                   SMCB0460
      RETURN                                                            SMCB0480
C                                                                       SMCB0500
      END                                                               SMCB0520
      DOUBLE PRECISION FUNCTION S3MACH( XD, BASE, EXP )                 SMCC0000
C                                                                       SMCC0020
C S3MACH = XD * BASE**EXP                                               SMCC0040
C                                                                       SMCC0060
C     (17-JUN-85) -- REVISED TO MAKE OVERFLOW LESS LIKELY               SMCC0080
      INTEGER BASE, EXP                                                 SMCC0100
      DOUBLE PRECISION TBASE, XD                                        SMCC0120
C                                                                       SMCC0140
      TBASE = FLOAT(BASE)                                               SMCC0160
      S3MACH = XD                                                       SMCC0180
C                                                                       SMCC0200
      N = EXP                                                           SMCC0220
      IF( N .GE. 0 ) GO TO 20                                           SMCC0240
C                                                                       SMCC0260
      N = -N                                                            SMCC0280
      TBASE = 1.0D0/TBASE                                               SMCC0300
C                                                                       SMCC0320
 20   IF( MOD(N,2) .NE. 0 ) S3MACH = S3MACH*TBASE                       SMCC0340
      N = N/2                                                           SMCC0360
      IF( N .LT. 2 ) GO TO 30                                           SMCC0380
      TBASE = TBASE * TBASE                                             SMCC0400
      GO TO 20                                                          SMCC0420
C                                                                       SMCC0440
 30   IF (N .EQ. 1) S3MACH = (S3MACH * TBASE) * TBASE                   SMCC0460
      RETURN                                                            SMCC0480
C                                                                       SMCC0500
      END                                                               SMCC0520
      SUBROUTINE ENTER(IRNEW)                                           ENLA0000
C                                                                       ENLA0020
C  THIS ROUTINE SAVES                                                   ENLA0040
C                                                                       ENLA0060
C    1) THE CURRENT NUMBER OF OUTSTANDING STORAGE ALLOCATIONS, LOUT, ANDENLA0080
C    2) THE CURRENT RECOVERY LEVEL, LRECOV,                             ENLA0100
C                                                                       ENLA0120
C  IN AN ENTER-BLOCK IN THE STACK.                                      ENLA0140
C                                                                       ENLA0160
C  IT ALSO SETS LRECOV = IRNEW IF IRNEW = 1 OR 2.                       ENLA0180
C  IF IRNEW = 0, THEN THE RECOVERY LEVEL IS NOT ALTERED.                ENLA0200
C                                                                       ENLA0220
C  SCRATCH SPACE ALLOCATED - 3 INTEGER WORDS ARE LEFT ON THE STACK.     ENLA0240
C                                                                       ENLA0260
C  ERROR STATES -                                                       ENLA0280
C                                                                       ENLA0300
C    1 - MUST HAVE IRNEW = 0, 1 OR 2.                                   ENLA0320
C                                                                       ENLA0340
      COMMON /CSTAK/DSTACK                                              ENLA0360
      DOUBLE PRECISION DSTACK(500)                                      ENLA0380
      INTEGER ISTACK(1000)                                              ENLA0400
      EQUIVALENCE (DSTACK(1),ISTACK(1))                                 ENLA0420
      EQUIVALENCE (ISTACK(1),LOUT)                                      ENLA0440
C                                                                       ENLA0460
C/6S                                                                    ENLA0480
C     IF (0.GT.IRNEW .OR. IRNEW.GT.2)                                   ENLA0500
C    1  CALL SETERR(35HENTER - MUST HAVE IRNEW = 0, 1 OR 2,35,1,2)      ENLA0520
C/7S                                                                    ENLA0540
      IF (0.GT.IRNEW .OR. IRNEW.GT.2)                                   ENLA0560
     1  CALL SETERR('ENTER - MUST HAVE IRNEW = 0, 1 OR 2',35,1,2)       ENLA0580
C/                                                                      ENLA0600
C                                                                       ENLA0620
C  ALLOCATE SPACE FOR SAVING THE ABOVE 2 ITEMS                          ENLA0640
C  AND A BACK-POINTER FOR CHAINING THE ENTER-BLOCKS TOGETHER.           ENLA0660
C                                                                       ENLA0680
      INOW=ISTKGT(3,2)                                                  ENLA0700
C                                                                       ENLA0720
C  SAVE THE CURRENT NUMBER OF OUTSTANDING ALLOCATIONS.                  ENLA0740
C                                                                       ENLA0760
      ISTACK(INOW)=LOUT                                                 ENLA0780
C                                                                       ENLA0800
C  SAVE THE CURRENT RECOVERY LEVEL.                                     ENLA0820
C                                                                       ENLA0840
      CALL ENTSRC(ISTACK(INOW+1),IRNEW)                                 ENLA0860
C                                                                       ENLA0880
C  SAVE A BACK-POINTER TO THE START OF THE PREVIOUS ENTER-BLOCK.        ENLA0900
C                                                                       ENLA0920
      ISTACK(INOW+2)=I8TSEL(INOW)                                       ENLA0940
C                                                                       ENLA0960
      RETURN                                                            ENLA0980
C                                                                       ENLA1000
      END                                                               ENLA1020
      SUBROUTINE LEAVE                                                  ENLB0000
C                                                                       ENLB0020
C  THIS ROUTINE                                                         ENLB0040
C                                                                       ENLB0060
C    1) DE-ALLOCATES ALL SCRATCH SPACE ALLOCATED SINCE THE LAST ENTER,  ENLB0080
C       INCLUDING THE LAST ENTER-BLOCK.                                 ENLB0100
C    2) RESTORES THE RECOVERY LEVEL TO ITS VALUE                        ENLB0120
C       AT THE TIME OF THE LAST CALL TO ENTER.                          ENLB0140
C                                                                       ENLB0160
C  ERROR STATES -                                                       ENLB0180
C                                                                       ENLB0200
C    1 - CANNOT LEAVE BEYOND THE FIRST ENTER.                           ENLB0220
C    2 - ISTACK(INOW) HAS BEEN OVERWRITTEN.                             ENLB0240
C    3 - TOO MANY ISTKRLS OR ISTACK(1 AND/OR INOW) CLOBBERED.           ENLB0260
C    4 - ISTACK(INOW+1) HAS BEEN OVERWRITTEN.                           ENLB0280
C    5 - ISTACK(INOW+2) HAS BEEN OVERWRITTEN.                           ENLB0300
C                                                                       ENLB0320
      COMMON /CSTAK/DSTACK                                              ENLB0340
      DOUBLE PRECISION DSTACK(500)                                      ENLB0360
      INTEGER ISTACK(1000)                                              ENLB0380
      EQUIVALENCE (DSTACK(1),ISTACK(1))                                 ENLB0400
      EQUIVALENCE (ISTACK(1),LOUT)                                      ENLB0420
C                                                                       ENLB0440
C  GET THE POINTER TO THE CURRENT ENTER-BLOCK.                          ENLB0460
C                                                                       ENLB0480
      INOW=I8TSEL(-1)                                                   ENLB0500
C                                                                       ENLB0520
C/6S                                                                    ENLB0540
C     IF (INOW.EQ.0)                                                    ENLB0560
C    1  CALL SETERR(43HLEAVE - CANNOT LEAVE BEYOND THE FIRST ENTER,43,  ENLB0580
C    2              1,2)                                                ENLB0600
C     IF (ISTACK(INOW).LT.1)                                            ENLB0620
C    1  CALL SETERR(41HLEAVE - ISTACK(INOW) HAS BEEN OVERWRITTEN,41,2,2)ENLB0640
C     IF (LOUT.LT.ISTACK(INOW)) CALL SETERR(                            ENLB0660
C    1  59HLEAVE - TOO MANY ISTKRLS OR ISTACK(1 AND/OR INOW) CLOBBERED, ENLB0680
C    2  59,3,2)                                                         ENLB0700
C     IF (ISTACK(INOW+1).LT.1 .OR. ISTACK(INOW+1).GT.2)                 ENLB0720
C    1  CALL SETERR(43HLEAVE - ISTACK(INOW+1) HAS BEEN OVERWRITTEN,     ENLB0740
C    2              43,4,2)                                             ENLB0760
C     IF (ISTACK(INOW+2).GT.INOW-3 .OR. ISTACK(INOW+2).LT.0)            ENLB0780
C    1  CALL SETERR(43HLEAVE - ISTACK(INOW+2) HAS BEEN OVERWRITTEN,     ENLB0800
C    2              43,5,2)                                             ENLB0820
C/7S                                                                    ENLB0840
      IF (INOW.EQ.0)                                                    ENLB0860
     1  CALL SETERR('LEAVE - CANNOT LEAVE BEYOND THE FIRST ENTER',43,   ENLB0880
     2              1,2)                                                ENLB0900
      IF (ISTACK(INOW).LT.1)                                            ENLB0920
     1  CALL SETERR('LEAVE - ISTACK(INOW) HAS BEEN OVERWRITTEN',41,2,2) ENLB0940
      IF (LOUT.LT.ISTACK(INOW)) CALL SETERR(                            ENLB0960
     1  'LEAVE - TOO MANY ISTKRLS OR ISTACK(1 AND/OR INOW) CLOBBERED',  ENLB0980
     2  59,3,2)                                                         ENLB1000
      IF (ISTACK(INOW+1).LT.1 .OR. ISTACK(INOW+1).GT.2)                 ENLB1020
     1  CALL SETERR('LEAVE - ISTACK(INOW+1) HAS BEEN OVERWRITTEN',      ENLB1040
     2              43,4,2)                                             ENLB1060
      IF (ISTACK(INOW+2).GT.INOW-3 .OR. ISTACK(INOW+2).LT.0)            ENLB1080
     1  CALL SETERR('LEAVE - ISTACK(INOW+2) HAS BEEN OVERWRITTEN',      ENLB1100
     2              43,5,2)                                             ENLB1120
C/                                                                      ENLB1140
C                                                                       ENLB1160
C  DE-ALLOCATE THE SCRATCH SPACE.                                       ENLB1180
C                                                                       ENLB1200
      CALL ISTKRL(LOUT-ISTACK(INOW)+1)                                  ENLB1220
C                                                                       ENLB1240
C  RESTORE THE RECOVERY LEVEL.                                          ENLB1260
C                                                                       ENLB1280
      CALL RETSRC(ISTACK(INOW+1))                                       ENLB1300
C                                                                       ENLB1320
C  LOWER THE BACK-POINTER.                                              ENLB1340
C                                                                       ENLB1360
      ITEMP=I8TSEL(ISTACK(INOW+2))                                      ENLB1380
C                                                                       ENLB1400
      RETURN                                                            ENLB1420
C                                                                       ENLB1440
      END                                                               ENLB1460
      SUBROUTINE ENTSRC(IROLD,IRNEW)                                    RECA0000
C                                                                       RECA0020
C  THIS ROUTINE RETURNS IROLD = LRECOV AND SETS LRECOV = IRNEW.         RECA0040
C                                                                       RECA0060
C  IF THERE IS AN ACTIVE ERROR STATE, THE MESSAGE IS PRINTED            RECA0080
C  AND EXECUTION STOPS.                                                 RECA0100
C                                                                       RECA0120
C  IRNEW = 0 LEAVES LRECOV UNCHANGED, WHILE                             RECA0140
C  IRNEW = 1 GIVES RECOVERY AND                                         RECA0160
C  IRNEW = 2 TURNS RECOVERY OFF.                                        RECA0180
C                                                                       RECA0200
C  ERROR STATES -                                                       RECA0220
C                                                                       RECA0240
C    1 - ILLEGAL VALUE OF IRNEW.                                        RECA0260
C    2 - CALLED WHILE IN AN ERROR STATE.                                RECA0280
C                                                                       RECA0300
C/6S                                                                    RECA0320
C     IF (IRNEW.LT.0 .OR. IRNEW.GT.2)                                   RECA0340
C    1   CALL SETERR(31HENTSRC - ILLEGAL VALUE OF IRNEW,31,1,2)         RECA0360
C/7S                                                                    RECA0380
      IF (IRNEW.LT.0 .OR. IRNEW.GT.2)                                   RECA0400
     1   CALL SETERR('ENTSRC - ILLEGAL VALUE OF IRNEW',31,1,2)          RECA0420
C/                                                                      RECA0440
C                                                                       RECA0460
      IROLD=I8SAVE(2,IRNEW,IRNEW.NE.0)                                  RECA0480
C                                                                       RECA0500
C  IF HAVE AN ERROR STATE, STOP EXECUTION.                              RECA0520
C                                                                       RECA0540
C/6S                                                                    RECA0560
C     IF (I8SAVE(1,0,.FALSE.) .NE. 0) CALL SETERR                       RECA0580
C    1   (39HENTSRC - CALLED WHILE IN AN ERROR STATE,39,2,2)            RECA0600
C/7S                                                                    RECA0620
      IF (I8SAVE(1,0,.FALSE.) .NE. 0) CALL SETERR                       RECA0640
     1   ('ENTSRC - CALLED WHILE IN AN ERROR STATE',39,2,2)             RECA0660
C/                                                                      RECA0680
C                                                                       RECA0700
      RETURN                                                            RECA0720
C                                                                       RECA0740
      END                                                               RECA0760
      SUBROUTINE RETSRC(IROLD)                                          RECB0000
C                                                                       RECB0020
C  THIS ROUTINE SETS LRECOV = IROLD.                                    RECB0040
C                                                                       RECB0060
C  IF THE CURRENT ERROR BECOMES UNRECOVERABLE,                          RECB0080
C  THE MESSAGE IS PRINTED AND EXECUTION STOPS.                          RECB0100
C                                                                       RECB0120
C  ERROR STATES -                                                       RECB0140
C                                                                       RECB0160
C    1 - ILLEGAL VALUE OF IROLD.                                        RECB0180
C                                                                       RECB0200
C/6S                                                                    RECB0220
C     IF (IROLD.LT.1 .OR. IROLD.GT.2)                                   RECB0240
C    1  CALL SETERR(31HRETSRC - ILLEGAL VALUE OF IROLD,31,1,2)          RECB0260
C/7S                                                                    RECB0280
      IF (IROLD.LT.1 .OR. IROLD.GT.2)                                   RECB0300
     1  CALL SETERR('RETSRC - ILLEGAL VALUE OF IROLD',31,1,2)           RECB0320
C/                                                                      RECB0340
C                                                                       RECB0360
      ITEMP=I8SAVE(2,IROLD,.TRUE.)                                      RECB0380
C                                                                       RECB0400
C  IF THE CURRENT ERROR IS NOW UNRECOVERABLE, PRINT AND STOP.           RECB0420
C                                                                       RECB0440
      IF (IROLD.EQ.1 .OR. I8SAVE(1,0,.FALSE.).EQ.0) RETURN              RECB0460
C                                                                       RECB0480
        CALL EPRINT                                                     RECB0500
        STOP                                                            RECB0520
C                                                                       RECB0540
      END                                                               RECB0560
      INTEGER FUNCTION I8TSEL(INOW)                                     RECC0000
C                                                                       RECC0020
C  TO RETURN I8TSEL = THE POINTER TO THE CURRENT ENTER-BLOCK AND        RECC0040
C  SET THE CURRENT POINTER TO INOW.                                     RECC0060
C                                                                       RECC0080
C  START WITH NO BACK-POINTER.                                          RECC0100
C                                                                       RECC0120
      DATA IENTER/0/                                                    RECC0140
C                                                                       RECC0160
      I8TSEL=IENTER                                                     RECC0180
      IF (INOW.GE.0) IENTER=INOW                                        RECC0200
C                                                                       RECC0220
      RETURN                                                            RECC0240
C                                                                       RECC0260
      END                                                               RECC0280
      INTEGER FUNCTION ISTKQU(ITYPE)                                    STKA0000
C                                                                       STKA0020
C  RETURNS THE NUMBER OF ITEMS OF TYPE ITYPE THAT REMAIN                STKA0040
C  TO BE ALLOCATED IN ONE REQUEST.                                      STKA0060
C                                                                       STKA0080
C  ERROR STATES -                                                       STKA0100
C                                                                       STKA0120
C    1 - LNOW, LUSED, LMAX OR LBOOK OVERWRITTEN                         STKA0140
C    2 - ITYPE .LE. 0 .OR. ITYPE .GE. 6                                 STKA0160
C                                                                       STKA0180
      COMMON /CSTAK/DSTAK                                               STKA0200
C                                                                       STKA0220
      DOUBLE PRECISION DSTAK(500)                                       STKA0240
      INTEGER ISTAK(1000)                                               STKA0260
      INTEGER ISIZE(5)                                                  STKA0280
C                                                                       STKA0300
      LOGICAL INIT                                                      STKA0320
C                                                                       STKA0340
      EQUIVALENCE (DSTAK(1),ISTAK(1))                                   STKA0360
      EQUIVALENCE (ISTAK(2),LNOW)                                       STKA0380
      EQUIVALENCE (ISTAK(3),LUSED)                                      STKA0400
      EQUIVALENCE (ISTAK(4),LMAX)                                       STKA0420
      EQUIVALENCE (ISTAK(5),LBOOK)                                      STKA0440
      EQUIVALENCE (ISTAK(6),ISIZE(1))                                   STKA0460
C                                                                       STKA0480
      DATA INIT/.TRUE./                                                 STKA0500
C                                                                       STKA0520
      IF (INIT) CALL I0TK00(INIT,500,4)                                 STKA0540
C                                                                       STKA0560
C/6S                                                                    STKA0580
C     IF (LNOW.LT.LBOOK.OR.LNOW.GT.LUSED.OR.LUSED.GT.LMAX) CALL SETERR  STKA0600
C    1   (47HISTKQU - LNOW, LUSED, LMAX OR LBOOK OVERWRITTEN,           STKA0620
C    2    47,1,2)                                                       STKA0640
C/7S                                                                    STKA0660
      IF (LNOW.LT.LBOOK.OR.LNOW.GT.LUSED.OR.LUSED.GT.LMAX) CALL SETERR  STKA0680
     1   ('ISTKQU - LNOW, LUSED, LMAX OR LBOOK OVERWRITTEN',            STKA0700
     2    47,1,2)                                                       STKA0720
C/                                                                      STKA0740
C                                                                       STKA0760
C/6S                                                                    STKA0780
C     IF (ITYPE.LE.0.OR.ITYPE.GE.6) CALL SETERR                         STKA0800
C    1   (33HISTKQU - ITYPE.LE.0.OR.ITYPE.GE.6,33,2,2)                  STKA0820
C/7S                                                                    STKA0840
      IF (ITYPE.LE.0.OR.ITYPE.GE.6) CALL SETERR                         STKA0860
     1   ('ISTKQU - ITYPE.LE.0.OR.ITYPE.GE.6',33,2,2)                   STKA0880
C/                                                                      STKA0900
C                                                                       STKA0920
      ISTKQU = MAX0( ((LMAX-2)*ISIZE(2))/ISIZE(ITYPE)                   STKA0940
     1             - (LNOW*ISIZE(2)-1)/ISIZE(ITYPE)                     STKA0960
     2             - 1, 0 )                                             STKA0980
C                                                                       STKA1000
      RETURN                                                            STKA1020
C                                                                       STKA1040
      END                                                               STKA1060
      INTEGER FUNCTION ISTKMD(NITEMS)                                   STKB0000
C                                                                       STKB0020
C  CHANGES THE LENGTH OF THE FRAME AT THE TOP OF THE STACK              STKB0040
C  TO NITEMS.                                                           STKB0060
C                                                                       STKB0080
C  ERROR STATES -                                                       STKB0100
C                                                                       STKB0120
C    1 - LNOW OVERWRITTEN                                               STKB0140
C    2 - ISTAK(LNOWO-1) OVERWRITTEN                                     STKB0160
C                                                                       STKB0180
      COMMON /CSTAK/DSTAK                                               STKB0200
C                                                                       STKB0220
      DOUBLE PRECISION DSTAK(500)                                       STKB0240
      INTEGER ISTAK(1000)                                               STKB0260
C                                                                       STKB0280
      EQUIVALENCE (DSTAK(1),ISTAK(1))                                   STKB0300
      EQUIVALENCE (ISTAK(2),LNOW)                                       STKB0320
C                                                                       STKB0340
      LNOWO = LNOW                                                      STKB0360
      CALL ISTKRL(1)                                                    STKB0380
C                                                                       STKB0400
      ITYPE = ISTAK(LNOWO-1)                                            STKB0420
C                                                                       STKB0440
C/6S                                                                    STKB0460
C     IF (ITYPE.LE.0.OR.ITYPE.GE.6) CALL SETERR                         STKB0480
C    1   (35HISTKMD - ISTAK(LNOWO-1) OVERWRITTEN,35,1,2)                STKB0500
C/7S                                                                    STKB0520
      IF (ITYPE.LE.0.OR.ITYPE.GE.6) CALL SETERR                         STKB0540
     1   ('ISTKMD - ISTAK(LNOWO-1) OVERWRITTEN',35,1,2)                 STKB0560
C/                                                                      STKB0580
C                                                                       STKB0600
      ISTKMD = ISTKGT(NITEMS,ITYPE)                                     STKB0620
C                                                                       STKB0640
      RETURN                                                            STKB0660
C                                                                       STKB0680
      END                                                               STKB0700
      SUBROUTINE ISTKRL(NUMBER)                                         STKC0000
C                                                                       STKC0020
C  DE-ALLOCATES THE LAST (NUMBER) ALLOCATIONS MADE IN THE STACK         STKC0040
C  BY ISTKGT.                                                           STKC0060
C                                                                       STKC0080
C  ERROR STATES -                                                       STKC0100
C                                                                       STKC0120
C    1 - NUMBER .LT. 0                                                  STKC0140
C    2 - LNOW, LUSED, LMAX OR LBOOK OVERWRITTEN                         STKC0160
C    3 - ATTEMPT TO DE-ALLOCATE NON-EXISTENT ALLOCATION                 STKC0180
C    4 - THE POINTER AT ISTAK(LNOW) OVERWRITTEN                         STKC0200
C                                                                       STKC0220
      COMMON /CSTAK/DSTAK                                               STKC0240
C                                                                       STKC0260
      DOUBLE PRECISION DSTAK(500)                                       STKC0280
      INTEGER ISTAK(1000)                                               STKC0300
      LOGICAL INIT                                                      STKC0320
C                                                                       STKC0340
      EQUIVALENCE (DSTAK(1),ISTAK(1))                                   STKC0360
      EQUIVALENCE (ISTAK(1),LOUT)                                       STKC0380
      EQUIVALENCE (ISTAK(2),LNOW)                                       STKC0400
      EQUIVALENCE (ISTAK(3),LUSED)                                      STKC0420
      EQUIVALENCE (ISTAK(4),LMAX)                                       STKC0440
      EQUIVALENCE (ISTAK(5),LBOOK)                                      STKC0460
C                                                                       STKC0480
      DATA INIT/.TRUE./                                                 STKC0500
C                                                                       STKC0520
      IF (INIT) CALL I0TK00(INIT,500,4)                                 STKC0540
C                                                                       STKC0560
C/6S                                                                    STKC0580
C     IF (NUMBER.LT.0) CALL SETERR(20HISTKRL - NUMBER.LT.0,20,1,2)      STKC0600
C/7S                                                                    STKC0620
      IF (NUMBER.LT.0) CALL SETERR('ISTKRL - NUMBER.LT.0',20,1,2)       STKC0640
C/                                                                      STKC0660
C                                                                       STKC0680
C/6S                                                                    STKC0700
C     IF (LNOW.LT.LBOOK.OR.LNOW.GT.LUSED.OR.LUSED.GT.LMAX) CALL SETERR  STKC0720
C    1   (47HISTKRL - LNOW, LUSED, LMAX OR LBOOK OVERWRITTEN,           STKC0740
C    2    47,2,2)                                                       STKC0760
C/7S                                                                    STKC0780
      IF (LNOW.LT.LBOOK.OR.LNOW.GT.LUSED.OR.LUSED.GT.LMAX) CALL SETERR  STKC0800
     1   ('ISTKRL - LNOW, LUSED, LMAX OR LBOOK OVERWRITTEN',            STKC0820
     2    47,2,2)                                                       STKC0840
C/                                                                      STKC0860
C                                                                       STKC0880
      IN = NUMBER                                                       STKC0900
 10      IF (IN.EQ.0) RETURN                                            STKC0920
C                                                                       STKC0940
C/6S                                                                    STKC0960
C        IF (LNOW.LE.LBOOK) CALL SETERR                                 STKC0980
C    1   (55HISTKRL - ATTEMPT TO DE-ALLOCATE NON-EXISTENT ALLOCATION,   STKC1000
C    2    55,3,2)                                                       STKC1020
C/7S                                                                    STKC1040
         IF (LNOW.LE.LBOOK) CALL SETERR                                 STKC1060
     1   ('ISTKRL - ATTEMPT TO DE-ALLOCATE NON-EXISTENT ALLOCATION',    STKC1080
     2    55,3,2)                                                       STKC1100
C/                                                                      STKC1120
C                                                                       STKC1140
C     CHECK TO MAKE SURE THE BACK POINTERS ARE MONOTONE.                STKC1160
C                                                                       STKC1180
C/6S                                                                    STKC1200
C        IF (ISTAK(LNOW).LT.LBOOK.OR.ISTAK(LNOW).GE.LNOW-1) CALL SETERR STKC1220
C    1   (47HISTKRL - THE POINTER AT ISTAK(LNOW) OVERWRITTEN,           STKC1240
C    2    47,4,2)                                                       STKC1260
C/7S                                                                    STKC1280
         IF (ISTAK(LNOW).LT.LBOOK.OR.ISTAK(LNOW).GE.LNOW-1) CALL SETERR STKC1300
     1   ('ISTKRL - THE POINTER AT ISTAK(LNOW) OVERWRITTEN',            STKC1320
     2    47,4,2)                                                       STKC1340
C/                                                                      STKC1360
C                                                                       STKC1380
         LOUT = LOUT-1                                                  STKC1400
         LNOW = ISTAK(LNOW)                                             STKC1420
         IN = IN-1                                                      STKC1440
         GO TO 10                                                       STKC1460
C                                                                       STKC1480
      END                                                               STKC1500
      INTEGER FUNCTION ISTKGT(NITEMS,ITYPE)                             STKE0000
C                                                                       STKE0020
C  ALLOCATES SPACE OUT OF THE INTEGER ARRAY ISTAK (IN COMMON            STKE0040
C  BLOCK CSTAK) FOR AN ARRAY OF LENGTH NITEMS AND OF TYPE               STKE0060
C  DETERMINED BY ITYPE AS FOLLOWS                                       STKE0080
C                                                                       STKE0100
C    1 - LOGICAL                                                        STKE0120
C    2 - INTEGER                                                        STKE0140
C    3 - REAL                                                           STKE0160
C    4 - DOUBLE PRECISION                                               STKE0180
C    5 - COMPLEX                                                        STKE0200
C                                                                       STKE0220
C  ON RETURN, THE ARRAY WILL OCCUPY                                     STKE0240
C                                                                       STKE0260
C    STAK(ISTKGT), STAK(ISTKGT+1), ..., STAK(ISTKGT-NITEMS+1)           STKE0280
C                                                                       STKE0300
C  WHERE STAK IS AN ARRAY OF TYPE ITYPE EQUIVALENCED TO ISTAK.          STKE0320
C                                                                       STKE0340
C  (FOR THOSE WANTING TO MAKE MACHINE DEPENDENT MODIFICATIONS           STKE0360
C  TO SUPPORT OTHER TYPES, CODES 6,7,8,9,10,11 AND 12 HAVE              STKE0380
C  BEEN RESERVED FOR 1/4 LOGICAL, 1/2 LOGICAL, 1/4 INTEGER,             STKE0400
C  1/2 INTEGER, QUAD PRECISION, DOUBLE COMPLEX AND QUAD                 STKE0420
C  COMPLEX, RESPECTIVELY.)                                              STKE0440
C                                                                       STKE0460
C  THE ALLOCATOR RESERVES THE FIRST TEN INTEGER WORDS OF THE STACK      STKE0480
C  FOR ITS OWN INTERNAL BOOK-KEEPING. THESE ARE INITIALIZED BY          STKE0500
C  THE INITIALIZING SUBPROGRAM I0TK00 UPON THE FIRST CALL               STKE0520
C  TO A SUBPROGRAM IN THE ALLOCATION PACKAGE.                           STKE0540
C                                                                       STKE0560
C  THE USE OF THE FIRST FIVE WORDS IS DESCRIBED BELOW.                  STKE0580
C                                                                       STKE0600
C    ISTAK( 1) - LOUT,  THE NUMBER OF CURRENT ALLOCATIONS.              STKE0620
C    ISTAK( 2) - LNOW,  THE CURRENT ACTIVE LENGTH OF THE STACK.         STKE0640
C    ISTAK( 3) - LUSED, THE MAXIMUM VALUE OF ISTAK(2) ACHIEVED.         STKE0660
C    ISTAK( 4) - LMAX,  THE MAXIMUM LENGTH THE STACK.                   STKE0680
C    ISTAK( 5) - LBOOK, THE NUMBER OF WORDS USED FOR BOOKEEPING.        STKE0700
C                                                                       STKE0720
C  THE NEXT FIVE WORDS CONTAIN INTEGERS DESCRIBING THE AMOUNT           STKE0740
C  OF STORAGE ALLOCATED BY THE FORTRAN SYSTEM TO THE VARIOUS            STKE0760
C  DATA TYPES.  THE UNIT OF MEASUREMENT IS ARBITRARY AND MAY            STKE0780
C  BE WORDS, BYTES OR BITS OR WHATEVER IS CONVENIENT.  THE              STKE0800
C  VALUES CURRENTLY ASSUMED CORRESPOND TO AN ANS FORTRAN                STKE0820
C  ENVIRONMENT.  FOR SOME MINI-COMPUTER SYSTEMS THE VALUES MAY          STKE0840
C  HAVE TO BE CHANGED (SEE I0TK00).                                     STKE0860
C                                                                       STKE0880
C    ISTAK( 6) - THE NUMBER OF UNITS ALLOCATED TO LOGICAL               STKE0900
C    ISTAK( 7) - THE NUMBER OF UNITS ALLOCATED TO INTEGER               STKE0920
C    ISTAK( 8) - THE NUMBER OF UNITS ALLOCATED TO REAL                  STKE0940
C    ISTAK( 9) - THE NUMBER OF UNITS ALLOCATED TO DOUBLE PRECISION      STKE0960
C    ISTAK(10) - THE NUMBER OF UNITS ALLOCATED TO COMPLEX               STKE0980
C                                                                       STKE1000
C  ERROR STATES -                                                       STKE1020
C                                                                       STKE1040
C    1 - NITEMS .LT. 0                                                  STKE1060
C    2 - ITYPE .LE. 0 .OR. ITYPE .GE. 6                                 STKE1080
C    3 - LNOW, LUSED, LMAX OR LBOOK OVERWRITTEN                         STKE1100
C    4 - STACK OVERFLOW                                                 STKE1120
C                                                                       STKE1140
      COMMON /CSTAK/DSTAK                                               STKE1160
C                                                                       STKE1180
      DOUBLE PRECISION DSTAK(500)                                       STKE1200
      INTEGER ISTAK(1000)                                               STKE1220
      INTEGER ISIZE(5)                                                  STKE1240
C                                                                       STKE1260
      LOGICAL INIT                                                      STKE1280
C                                                                       STKE1300
      EQUIVALENCE (DSTAK(1),ISTAK(1))                                   STKE1320
      EQUIVALENCE (ISTAK(1),LOUT)                                       STKE1340
      EQUIVALENCE (ISTAK(2),LNOW)                                       STKE1360
      EQUIVALENCE (ISTAK(3),LUSED)                                      STKE1380
      EQUIVALENCE (ISTAK(4),LMAX)                                       STKE1400
      EQUIVALENCE (ISTAK(5),LBOOK)                                      STKE1420
      EQUIVALENCE (ISTAK(6),ISIZE(1))                                   STKE1440
C                                                                       STKE1460
      DATA INIT/.TRUE./                                                 STKE1480
C                                                                       STKE1500
      IF (INIT) CALL I0TK00(INIT,500,4)                                 STKE1520
C                                                                       STKE1540
C/6S                                                                    STKE1560
C     IF (NITEMS.LT.0) CALL SETERR(20HISTKGT - NITEMS.LT.0,20,1,2)      STKE1580
C/7S                                                                    STKE1600
      IF (NITEMS.LT.0) CALL SETERR('ISTKGT - NITEMS.LT.0',20,1,2)       STKE1620
C/                                                                      STKE1640
C                                                                       STKE1660
C/6S                                                                    STKE1680
C     IF (ITYPE.LE.0 .OR. ITYPE.GE.6) CALL SETERR                       STKE1700
C    1   (33HISTKGT - ITYPE.LE.0.OR.ITYPE.GE.6,33,2,2)                  STKE1720
C/7S                                                                    STKE1740
      IF (ITYPE.LE.0 .OR. ITYPE.GE.6) CALL SETERR                       STKE1760
     1   ('ISTKGT - ITYPE.LE.0.OR.ITYPE.GE.6',33,2,2)                   STKE1780
C/                                                                      STKE1800
C                                                                       STKE1820
C/6S                                                                    STKE1840
C     IF (LNOW.LT.LBOOK.OR.LNOW.GT.LUSED.OR.LUSED.GT.LMAX) CALL SETERR  STKE1860
C    1   (47HISTKGT - LNOW, LUSED, LMAX OR LBOOK OVERWRITTEN,           STKE1880
C    2    47,3,2)                                                       STKE1900
C/7S                                                                    STKE1920
      IF (LNOW.LT.LBOOK.OR.LNOW.GT.LUSED.OR.LUSED.GT.LMAX) CALL SETERR  STKE1940
     1   ('ISTKGT - LNOW, LUSED, LMAX OR LBOOK OVERWRITTEN',            STKE1960
     2    47,3,2)                                                       STKE1980
C/                                                                      STKE2000
C                                                                       STKE2020
      ISTKGT = (LNOW*ISIZE(2)-1)/ISIZE(ITYPE) + 2                       STKE2040
      I = ( (ISTKGT-1+NITEMS)*ISIZE(ITYPE) - 1 )/ISIZE(2) + 3           STKE2060
C                                                                       STKE2080
C  STACK OVERFLOW IS AN UNRECOVERABLE ERROR.                            STKE2100
C                                                                       STKE2120
C/6S                                                                    STKE2140
C     IF (I.GT.LMAX) CALL SETERR(69HISTKGT - STACK TOO SHORT. ENLARGE ITSTKE2160
C    1 AND CALL ISTKIN IN MAIN PROGRAM.,69,4,2)                         STKE2180
C/7S                                                                    STKE2200
      IF (I.GT.LMAX) CALL SETERR('ISTKGT - STACK TOO SHORT. ENLARGE IT ASTKE2220
     *ND CALL ISTKIN IN MAIN PROGRAM.',69,4,2)                          STKE2240
C/                                                                      STKE2260
C                                                                       STKE2280
C  ISTAK(I-1) CONTAINS THE TYPE FOR THIS ALLOCATION.                    STKE2300
C  ISTAK(I  ) CONTAINS A POINTER TO THE END OF THE PREVIOUS             STKE2320
C             ALLOCATION.                                               STKE2340
C                                                                       STKE2360
      ISTAK(I-1) = ITYPE                                                STKE2380
      ISTAK(I  ) = LNOW                                                 STKE2400
      LOUT = LOUT+1                                                     STKE2420
      LNOW = I                                                          STKE2440
      LUSED = MAX0(LUSED,LNOW)                                          STKE2460
C                                                                       STKE2480
      RETURN                                                            STKE2500
C                                                                       STKE2520
      END                                                               STKE2540
      SUBROUTINE ISTKIN(NITEMS,ITYPE)                                   STKF0000
C                                                                       STKF0020
C  INITIALIZES THE STACK ALLOCATOR, SETTING THE LENGTH OF THE STACK.    STKF0040
C                                                                       STKF0060
C  ERROR STATES -                                                       STKF0080
C                                                                       STKF0100
C    1 - NITEMS .LE. 0                                                  STKF0120
C    2 - ITYPE .LE. 0 .OR. ITYPE .GE. 6                                 STKF0140
C                                                                       STKF0160
      LOGICAL INIT                                                      STKF0180
C                                                                       STKF0200
      DATA INIT/.TRUE./                                                 STKF0220
C                                                                       STKF0240
C/6S                                                                    STKF0260
C     IF (NITEMS.LE.0) CALL SETERR(20HISTKIN - NITEMS.LE.0,20,1,2)      STKF0280
C/7S                                                                    STKF0300
      IF (NITEMS.LE.0) CALL SETERR('ISTKIN - NITEMS.LE.0',20,1,2)       STKF0320
C/                                                                      STKF0340
C                                                                       STKF0360
C/6S                                                                    STKF0380
C     IF (ITYPE.LE.0.OR.ITYPE.GE.6) CALL SETERR                         STKF0400
C    1   (33HISTKIN - ITYPE.LE.0.OR.ITYPE.GE.6,33,2,2)                  STKF0420
C/7S                                                                    STKF0440
      IF (ITYPE.LE.0.OR.ITYPE.GE.6) CALL SETERR                         STKF0460
     1   ('ISTKIN - ITYPE.LE.0.OR.ITYPE.GE.6',33,2,2)                   STKF0480
C/                                                                      STKF0500
C                                                                       STKF0520
      IF (INIT) CALL I0TK00(INIT,NITEMS,ITYPE)                          STKF0540
C                                                                       STKF0560
      RETURN                                                            STKF0580
C                                                                       STKF0600
      END                                                               STKF0620
      INTEGER FUNCTION ISTKST(NFACT)                                    STKS0000
C                                                                       STKS0020
C  RETURNS CONTROL INFORMATION AS FOLLOWS                               STKS0040
C                                                                       STKS0060
C  NFACT    ITEM RETURNED                                               STKS0080
C                                                                       STKS0100
C    1         LOUT,  THE NUMBER OF CURRENT ALLOCATIONS                 STKS0120
C    2         LNOW,  THE CURRENT ACTIVE LENGTH                         STKS0140
C    3         LUSED, THE MAXIMUM USED                                  STKS0160
C    4         LMAX,  THE MAXIMUM ALLOWED                               STKS0180
C                                                                       STKS0200
      COMMON /CSTAK/DSTAK                                               STKS0220
C                                                                       STKS0240
      DOUBLE PRECISION DSTAK(500)                                       STKS0260
      INTEGER ISTAK(1000)                                               STKS0280
      INTEGER ISTATS(4)                                                 STKS0300
      LOGICAL INIT                                                      STKS0320
C                                                                       STKS0340
      EQUIVALENCE (DSTAK(1),ISTAK(1))                                   STKS0360
      EQUIVALENCE (ISTAK(1),ISTATS(1))                                  STKS0380
C                                                                       STKS0400
      DATA INIT/.TRUE./                                                 STKS0420
C                                                                       STKS0440
      IF (INIT) CALL I0TK00(INIT,500,4)                                 STKS0460
C                                                                       STKS0480
C/6S                                                                    STKS0500
C     IF (NFACT.LE.0.OR.NFACT.GE.5) CALL SETERR                         STKS0520
C    1   (33HISTKST - NFACT.LE.0.OR.NFACT.GE.5,33,1,2)                  STKS0540
C/7S                                                                    STKS0560
      IF (NFACT.LE.0.OR.NFACT.GE.5) CALL SETERR                         STKS0580
     1   ('ISTKST - NFACT.LE.0.OR.NFACT.GE.5',33,1,2)                   STKS0600
C/                                                                      STKS0620
C                                                                       STKS0640
      ISTKST = ISTATS(NFACT)                                            STKS0660
C                                                                       STKS0680
      RETURN                                                            STKS0700
C                                                                       STKS0720
      END                                                               STKS0740
      REAL FUNCTION R1MACH(I)                                           MCHR0000
C                                                                       MCHR0020
C  SINGLE-PRECISION MACHINE CONSTANTS                                   MCHR0040
C                                                                       MCHR0060
C  R1MACH(1) = B**(EMIN-1), THE SMALLEST POSITIVE MAGNITUDE.            MCHR0080
C                                                                       MCHR0100
C  R1MACH(2) = B**EMAX*(1 - B**(-T)), THE LARGEST MAGNITUDE.            MCHR0120
C                                                                       MCHR0140
C  R1MACH(3) = B**(-T), THE SMALLEST RELATIVE SPACING.                  MCHR0160
C                                                                       MCHR0180
C  R1MACH(4) = B**(1-T), THE LARGEST RELATIVE SPACING.                  MCHR0200
C                                                                       MCHR0220
C  R1MACH(5) = LOG10(B)                                                 MCHR0240
C                                                                       MCHR0260
C  TO ALTER THIS FUNCTION FOR A PARTICULAR ENVIRONMENT,                 MCHR0280
C  THE DESIRED SET OF DATA STATEMENTS SHOULD BE ACTIVATED BY            MCHR0300
C  REMOVING THE C FROM COLUMN 1.                                        MCHR0320
C                                                                       MCHR0340
C  FOR IEEE-ARITHMETIC MACHINES (BINARY STANDARD), THE FIRST            MCHR0360
C  SET OF CONSTANTS BELOW SHOULD BE APPROPRIATE.                        MCHR0380
C                                                                       MCHR0400
C  WHERE POSSIBLE, DECIMAL, OCTAL OR HEXADECIMAL CONSTANTS ARE USED     MCHR0420
C  TO SPECIFY THE CONSTANTS EXACTLY.  SOMETIMES THIS REQUIRES USING     MCHR0440
C  EQUIVALENT INTEGER ARRAYS.  IF YOUR COMPILER USES HALF-WORD          MCHR0460
C  INTEGERS BY DEFAULT (SOMETIMES CALLED INTEGER*2), YOU MAY NEED TO    MCHR0480
C  CHANGE INTEGER TO INTEGER*4 OR OTHERWISE INSTRUCT YOUR COMPILER      MCHR0500
C  TO USE FULL-WORD INTEGERS IN THE NEXT 5 DECLARATIONS.                MCHR0520
C                                                                       MCHR0540
      INTEGER SMALL(2)                                                  MCHR0560
      INTEGER LARGE(2)                                                  MCHR0580
      INTEGER RIGHT(2)                                                  MCHR0600
      INTEGER DIVER(2)                                                  MCHR0620
      INTEGER LOG10(2)                                                  MCHR0640
      INTEGER SC                                                        MCHR0660
C                                                                       MCHR0680
      REAL RMACH(5)                                                     MCHR0700
C                                                                       MCHR0720
      EQUIVALENCE (RMACH(1),SMALL(1))                                   MCHR0740
      EQUIVALENCE (RMACH(2),LARGE(1))                                   MCHR0760
      EQUIVALENCE (RMACH(3),RIGHT(1))                                   MCHR0780
      EQUIVALENCE (RMACH(4),DIVER(1))                                   MCHR0800
      EQUIVALENCE (RMACH(5),LOG10(1))                                   MCHR0820
C                                                                       MCHR0840
C     MACHINE CONSTANTS FOR IEEE ARITHMETIC MACHINES, SUCH AS THE AT&T  MCHR0860
C     3B SERIES, MOTOROLA 68000 BASED MACHINES (E.G. SUN 3 AND AT&T     MCHR0880
C     PC 7300), AND 8087 BASED MICROS (E.G. IBM PC AND AT&T 6300).      MCHR0900
C                                                                       MCHR0920
C      DATA SMALL(1) /     8388608 /                                    MCHR0940
C      DATA LARGE(1) /  2139095039 /                                    MCHR0960
C      DATA RIGHT(1) /   864026624 /                                    MCHR0980
C      DATA DIVER(1) /   872415232 /                                    MCHR1000
C      DATA LOG10(1) /  1050288283 /, SC/987/                           MCHR1020
C                                                                       MCHR1040
C     MACHINE CONSTANTS FOR AMDAHL MACHINES.                            MCHR1060
C                                                                       MCHR1080
C      DATA SMALL(1) /    1048576 /                                     MCHR1100
C      DATA LARGE(1) / 2147483647 /                                     MCHR1120
C      DATA RIGHT(1) /  990904320 /                                     MCHR1140
C      DATA DIVER(1) / 1007681536 /                                     MCHR1160
C      DATA LOG10(1) / 1091781651 /, SC/987/                            MCHR1180
C                                                                       MCHR1200
C     MACHINE CONSTANTS FOR THE BURROUGHS 1700 SYSTEM.                  MCHR1220
C                                                                       MCHR1240
C      DATA RMACH(1) / Z400800000 /                                     MCHR1260
C      DATA RMACH(2) / Z5FFFFFFFF /                                     MCHR1280
C      DATA RMACH(3) / Z4E9800000 /                                     MCHR1300
C      DATA RMACH(4) / Z4EA800000 /                                     MCHR1320
C      DATA RMACH(5) / Z500E730E8 /, SC/987/                            MCHR1340
C                                                                       MCHR1360
C     MACHINE CONSTANTS FOR THE BURROUGHS 5700/6700/7700 SYSTEMS.       MCHR1380
C                                                                       MCHR1400
C      DATA RMACH(1) / O1771000000000000 /                              MCHR1420
C      DATA RMACH(2) / O0777777777777777 /                              MCHR1440
C      DATA RMACH(3) / O1311000000000000 /                              MCHR1460
C      DATA RMACH(4) / O1301000000000000 /                              MCHR1480
C      DATA RMACH(5) / O1157163034761675 /, SC/987/                     MCHR1500
C                                                                       MCHR1520
C     MACHINE CONSTANTS FOR FTN4 ON THE CDC 6000/7000 SERIES.           MCHR1540
C                                                                       MCHR1560
C      DATA RMACH(1) / 00564000000000000000B /                          MCHR1580
C      DATA RMACH(2) / 37767777777777777776B /                          MCHR1600
C      DATA RMACH(3) / 16414000000000000000B /                          MCHR1620
C      DATA RMACH(4) / 16424000000000000000B /                          MCHR1640
C      DATA RMACH(5) / 17164642023241175720B /, SC/987/                 MCHR1660
C                                                                       MCHR1680
C     MACHINE CONSTANTS FOR FTN5 ON THE CDC 6000/7000 SERIES.           MCHR1700
C                                                                       MCHR1720
C      DATA RMACH(1) / O"00564000000000000000" /                        MCHR1740
C      DATA RMACH(2) / O"37767777777777777776" /                        MCHR1760
C      DATA RMACH(3) / O"16414000000000000000" /                        MCHR1780
C      DATA RMACH(4) / O"16424000000000000000" /                        MCHR1800
C      DATA RMACH(5) / O"17164642023241175720" /, SC/987/               MCHR1820
C                                                                       MCHR1840
C     MACHINE CONSTANTS FOR CONVEX C-1.                                 MCHR1860
C                                                                       MCHR1880
C      DATA RMACH(1) / '00800000'X /                                    MCHR1900
C      DATA RMACH(2) / '7FFFFFFF'X /                                    MCHR1920
C      DATA RMACH(3) / '34800000'X /                                    MCHR1940
C      DATA RMACH(4) / '35000000'X /                                    MCHR1960
C      DATA RMACH(5) / '3F9A209B'X /, SC/987/                           MCHR1980
C                                                                       MCHR2000
C     MACHINE CONSTANTS FOR THE CRAY 1, XMP, 2, AND 3.                  MCHR2020
C                                                                       MCHR2040
C      DATA RMACH(1) / 200034000000000000000B /                         MCHR2060
C      DATA RMACH(2) / 577767777777777777776B /                         MCHR2080
C      DATA RMACH(3) / 377224000000000000000B /                         MCHR2100
C      DATA RMACH(4) / 377234000000000000000B /                         MCHR2120
C      DATA RMACH(5) / 377774642023241175720B /, SC/987/                MCHR2140
C                                                                       MCHR2160
C     MACHINE CONSTANTS FOR THE DATA GENERAL ECLIPSE S/200.             MCHR2180
C                                                                       MCHR2200
C     NOTE - IT MAY BE APPROPRIATE TO INCLUDE THE FOLLOWING LINE -      MCHR2220
C     STATIC RMACH(5)                                                   MCHR2240
C                                                                       MCHR2260
C      DATA SMALL/20K,0/,LARGE/77777K,177777K/                          MCHR2280
C      DATA RIGHT/35420K,0/,DIVER/36020K,0/                             MCHR2300
C      DATA LOG10/40423K,42023K/, SC/987/                               MCHR2320
C                                                                       MCHR2340
C     MACHINE CONSTANTS FOR THE HARRIS SLASH 6 AND SLASH 7.             MCHR2360
C                                                                       MCHR2380
C      DATA SMALL(1),SMALL(2) / '20000000, '00000201 /                  MCHR2400
C      DATA LARGE(1),LARGE(2) / '37777777, '00000177 /                  MCHR2420
C      DATA RIGHT(1),RIGHT(2) / '20000000, '00000352 /                  MCHR2440
C      DATA DIVER(1),DIVER(2) / '20000000, '00000353 /                  MCHR2460
C      DATA LOG10(1),LOG10(2) / '23210115, '00000377 /, SC/987/         MCHR2480
C                                                                       MCHR2500
C     MACHINE CONSTANTS FOR THE HONEYWELL DPS 8/70 SERIES.              MCHR2520
C                                                                       MCHR2540
C      DATA RMACH(1) / O402400000000 /                                  MCHR2560
C      DATA RMACH(2) / O376777777777 /                                  MCHR2580
C      DATA RMACH(3) / O714400000000 /                                  MCHR2600
C      DATA RMACH(4) / O716400000000 /                                  MCHR2620
C      DATA RMACH(5) / O776464202324 /, SC/987/                         MCHR2640
C                                                                       MCHR2660
C     MACHINE CONSTANTS FOR THE IBM 360/370 SERIES,                     MCHR2680
C     THE XEROX SIGMA 5/7/9 AND THE SEL SYSTEMS 85/86.                  MCHR2700
C                                                                       MCHR2720
C      DATA RMACH(1) / Z00100000 /                                      MCHR2740
C      DATA RMACH(2) / Z7FFFFFFF /                                      MCHR2760
C      DATA RMACH(3) / Z3B100000 /                                      MCHR2780
C      DATA RMACH(4) / Z3C100000 /                                      MCHR2800
C      DATA RMACH(5) / Z41134413 /, SC/987/                             MCHR2820
C                                                                       MCHR2840
C     MACHINE CONSTANTS FOR THE INTERDATA 8/32                          MCHR2860
C     WITH THE UNIX SYSTEM FORTRAN 77 COMPILER.                         MCHR2880
C                                                                       MCHR2900
C     FOR THE INTERDATA FORTRAN VII COMPILER REPLACE                    MCHR2920
C     THE Z'S SPECIFYING HEX CONSTANTS WITH Y'S.                        MCHR2940
C                                                                       MCHR2960
C      DATA RMACH(1) / Z'00100000' /                                    MCHR2980
C      DATA RMACH(2) / Z'7EFFFFFF' /                                    MCHR3000
C      DATA RMACH(3) / Z'3B100000' /                                    MCHR3020
C      DATA RMACH(4) / Z'3C100000' /                                    MCHR3040
C      DATA RMACH(5) / Z'41134413' /, SC/987/                           MCHR3060
C                                                                       MCHR3080
C     MACHINE CONSTANTS FOR THE PDP-10 (KA OR KI PROCESSOR).            MCHR3100
C                                                                       MCHR3120
C      DATA RMACH(1) / "000400000000 /                                  MCHR3140
C      DATA RMACH(2) / "377777777777 /                                  MCHR3160
C      DATA RMACH(3) / "146400000000 /                                  MCHR3180
C      DATA RMACH(4) / "147400000000 /                                  MCHR3200
C      DATA RMACH(5) / "177464202324 /, SC/987/                         MCHR3220
C                                                                       MCHR3240
C     MACHINE CONSTANTS FOR PDP-11 FORTRANS SUPPORTING                  MCHR3260
C     32-BIT INTEGERS (EXPRESSED IN INTEGER AND OCTAL).                 MCHR3280
C                                                                       MCHR3300
C      DATA SMALL(1) /    8388608 /                                     MCHR3320
C      DATA LARGE(1) / 2147483647 /                                     MCHR3340
C      DATA RIGHT(1) /  880803840 /                                     MCHR3360
C      DATA DIVER(1) /  889192448 /                                     MCHR3380
C      DATA LOG10(1) / 1067065499 /, SC/987/                            MCHR3400
C                                                                       MCHR3420
C      DATA RMACH(1) / O00040000000 /                                   MCHR3440
C      DATA RMACH(2) / O17777777777 /                                   MCHR3460
C      DATA RMACH(3) / O06440000000 /                                   MCHR3480
C      DATA RMACH(4) / O06500000000 /                                   MCHR3500
C      DATA RMACH(5) / O07746420233 /, SC/987/                          MCHR3520
C                                                                       MCHR3540
C     MACHINE CONSTANTS FOR PDP-11 FORTRANS SUPPORTING                  MCHR3560
C     16-BIT INTEGERS  (EXPRESSED IN INTEGER AND OCTAL).                MCHR3580
C                                                                       MCHR3600
C      DATA SMALL(1),SMALL(2) /   128,     0 /                          MCHR3620
C      DATA LARGE(1),LARGE(2) / 32767,    -1 /                          MCHR3640
C      DATA RIGHT(1),RIGHT(2) / 13440,     0 /                          MCHR3660
C      DATA DIVER(1),DIVER(2) / 13568,     0 /                          MCHR3680
C      DATA LOG10(1),LOG10(2) / 16282,  8347 /, SC/987/                 MCHR3700
C                                                                       MCHR3720
C      DATA SMALL(1),SMALL(2) / O000200, O000000 /                      MCHR3740
C      DATA LARGE(1),LARGE(2) / O077777, O177777 /                      MCHR3760
C      DATA RIGHT(1),RIGHT(2) / O032200, O000000 /                      MCHR3780
C      DATA DIVER(1),DIVER(2) / O032400, O000000 /                      MCHR3800
C      DATA LOG10(1),LOG10(2) / O037632, O020233 /, SC/987/             MCHR3820
C                                                                       MCHR3840
C     MACHINE CONSTANTS FOR THE SEQUENT BALANCE 8000.                   MCHR3860
C                                                                       MCHR3880
C      DATA SMALL(1) / $00800000 /                                      MCHR3900
C      DATA LARGE(1) / $7F7FFFFF /                                      MCHR3920
C      DATA RIGHT(1) / $33800000 /                                      MCHR3940
C      DATA DIVER(1) / $34000000 /                                      MCHR3960
C      DATA LOG10(1) / $3E9A209B /, SC/987/                             MCHR3980
C                                                                       MCHR4000
C     MACHINE CONSTANTS FOR THE UNIVAC 1100 SERIES.                     MCHR4020
C                                                                       MCHR4040
C      DATA RMACH(1) / O000400000000 /                                  MCHR4060
C      DATA RMACH(2) / O377777777777 /                                  MCHR4080
C      DATA RMACH(3) / O146400000000 /                                  MCHR4100
C      DATA RMACH(4) / O147400000000 /                                  MCHR4120
C      DATA RMACH(5) / O177464202324 /, SC/987/                         MCHR4140
C                                                                       MCHR4160
C     MACHINE CONSTANTS FOR THE VAX UNIX F77 COMPILER.                  MCHR4180
C                                                                       MCHR4200
C      DATA SMALL(1) /       128 /                                      MCHR4220
C      DATA LARGE(1) /    -32769 /                                      MCHR4240
C      DATA RIGHT(1) /     13440 /                                      MCHR4260
C      DATA DIVER(1) /     13568 /                                      MCHR4280
C      DATA LOG10(1) / 547045274 /, SC/987/                             MCHR4300
C                                                                       MCHR4320
C     MACHINE CONSTANTS FOR THE VAX-11 WITH                             MCHR4340
C     FORTRAN IV-PLUS COMPILER.                                         MCHR4360
C                                                                       MCHR4380
C      DATA RMACH(1) / Z00000080 /                                      MCHR4400
C      DATA RMACH(2) / ZFFFF7FFF /                                      MCHR4420
C      DATA RMACH(3) / Z00003480 /                                      MCHR4440
C      DATA RMACH(4) / Z00003500 /                                      MCHR4460
C      DATA RMACH(5) / Z209B3F9A /, SC/987/                             MCHR4480
C                                                                       MCHR4500
C     MACHINE CONSTANTS FOR VAX/VMS VERSION 2.2.                        MCHR4520
C                                                                       MCHR4540
C      DATA RMACH(1) /       '80'X /                                    MCHR4560
C      DATA RMACH(2) / 'FFFF7FFF'X /                                    MCHR4580
C      DATA RMACH(3) /     '3480'X /                                    MCHR4600
C      DATA RMACH(4) /     '3500'X /                                    MCHR4620
C      DATA RMACH(5) / '209B3F9A'X /, SC/987/                           MCHR4640
C                                                                       MCHR4660
C  ***  ISSUE STOP 778 IF ALL DATA STATEMENTS ARE COMMENTED...          MCHR4680
      IF (SC .NE. 987) STOP 778                                         MCHR4700
C/6S                                                                    MCHR4720
C     IF (I .LT. 1  .OR.  I .GT. 5)                                     MCHR4740
C    1   CALL SETERR(24HR1MACH - I OUT OF BOUNDS,24,1,2)                MCHR4760
C/7S                                                                    MCHR4780
      IF (I .LT. 1  .OR.  I .GT. 5)                                     MCHR4800
     1   CALL SETERR('R1MACH - I OUT OF BOUNDS',24,1,2)                 MCHR4820
C/                                                                      MCHR4840
C                                                                       MCHR4860
      R1MACH = RMACH(I)                                                 MCHR4880
      RETURN                                                            MCHR4900
C                                                                       MCHR4920
      END                                                               MCHR4940
      DOUBLE PRECISION FUNCTION D1MACH(I)                               MCHD0000
C                                                                       MCHD0020
C  DOUBLE-PRECISION MACHINE CONSTANTS                                   MCHD0040
C                                                                       MCHD0060
C  D1MACH( 1) = B**(EMIN-1), THE SMALLEST POSITIVE MAGNITUDE.           MCHD0080
C                                                                       MCHD0100
C  D1MACH( 2) = B**EMAX*(1 - B**(-T)), THE LARGEST MAGNITUDE.           MCHD0120
C                                                                       MCHD0140
C  D1MACH( 3) = B**(-T), THE SMALLEST RELATIVE SPACING.                 MCHD0160
C                                                                       MCHD0180
C  D1MACH( 4) = B**(1-T), THE LARGEST RELATIVE SPACING.                 MCHD0200
C                                                                       MCHD0220
C  D1MACH( 5) = LOG10(B)                                                MCHD0240
C                                                                       MCHD0260
C  TO ALTER THIS FUNCTION FOR A PARTICULAR ENVIRONMENT,                 MCHD0280
C  THE DESIRED SET OF DATA STATEMENTS SHOULD BE ACTIVATED BY            MCHD0300
C  REMOVING THE C FROM COLUMN 1.                                        MCHD0320
C                                                                       MCHD0340
C  FOR IEEE-ARITHMETIC MACHINES (BINARY STANDARD), ONE OF THE FIRST     MCHD0360
C  TWO SETS OF CONSTANTS BELOW SHOULD BE APPROPRIATE.                   MCHD0380
C                                                                       MCHD0400
C  WHERE POSSIBLE, DECIMAL, OCTAL OR HEXADECIMAL CONSTANTS ARE USED     MCHD0420
C  TO SPECIFY THE CONSTANTS EXACTLY.  SOMETIMES THIS REQUIRES USING     MCHD0440
C  EQUIVALENT INTEGER ARRAYS.  IF YOUR COMPILER USES HALF-WORD          MCHD0460
C  INTEGERS BY DEFAULT (SOMETIMES CALLED INTEGER*2), YOU MAY NEED TO    MCHD0480
C  CHANGE INTEGER TO INTEGER*4 OR OTHERWISE INSTRUCT YOUR COMPILER      MCHD0500
C  TO USE FULL-WORD INTEGERS IN THE NEXT 5 DECLARATIONS.                MCHD0520
C                                                                       MCHD0540
      INTEGER SMALL(4)                                                  MCHD0560
      INTEGER LARGE(4)                                                  MCHD0580
      INTEGER RIGHT(4)                                                  MCHD0600
      INTEGER DIVER(4)                                                  MCHD0620
      INTEGER LOG10(4)                                                  MCHD0640
      INTEGER SC                                                        MCHD0660
C                                                                       MCHD0680
      DOUBLE PRECISION DMACH(5)                                         MCHD0700
C                                                                       MCHD0720
      EQUIVALENCE (DMACH(1),SMALL(1))                                   MCHD0740
      EQUIVALENCE (DMACH(2),LARGE(1))                                   MCHD0760
      EQUIVALENCE (DMACH(3),RIGHT(1))                                   MCHD0780
      EQUIVALENCE (DMACH(4),DIVER(1))                                   MCHD0800
      EQUIVALENCE (DMACH(5),LOG10(1))                                   MCHD0820
C                                                                       MCHD0840
C     MACHINE CONSTANTS FOR IEEE ARITHMETIC MACHINES, SUCH AS THE AT&T  MCHD0860
C     3B SERIES AND MOTOROLA 68000 BASED MACHINES (E.G. SUN 3 AND AT&T  MCHD0880
C     PC 7300), IN WHICH THE MOST SIGNIFICANT BYTE IS STORED FIRST.     MCHD0900
C                                                                       MCHD0920
C      DATA SMALL(1),SMALL(2) /    1048576,          0 /                MCHD0940
C      DATA LARGE(1),LARGE(2) / 2146435071,         -1 /                MCHD0960
C      DATA RIGHT(1),RIGHT(2) / 1017118720,          0 /                MCHD0980
C      DATA DIVER(1),DIVER(2) / 1018167296,          0 /                MCHD1000
C      DATA LOG10(1),LOG10(2) / 1070810131, 1352628735 /, SC/987/       MCHD1020
C                                                                       MCHD1040
C     MACHINE CONSTANTS FOR IEEE ARITHMETIC MACHINES AND 8087-BASED     MCHD1060
C     MICROS, SUCH AS THE IBM PC AND AT&T 6300, IN WHICH THE LEAST      MCHD1080
C     SIGNIFICANT BYTE IS STORED FIRST.                                 MCHD1100
C                                                                       MCHD1120
C      DATA SMALL(1),SMALL(2) /          0,    1048576 /                MCHD1140
C      DATA LARGE(1),LARGE(2) /         -1, 2146435071 /                MCHD1160
C      DATA RIGHT(1),RIGHT(2) /          0, 1017118720 /                MCHD1180
C      DATA DIVER(1),DIVER(2) /          0, 1018167296 /                MCHD1200
C      DATA LOG10(1),LOG10(2) / 1352628735, 1070810131 /, SC/987/       MCHD1220
C                                                                       MCHD1240
C     MACHINE CONSTANTS FOR AMDAHL MACHINES.                            MCHD1260
C                                                                       MCHD1280
C      DATA SMALL(1),SMALL(2) /    1048576,          0 /                MCHD1300
C      DATA LARGE(1),LARGE(2) / 2147483647,         -1 /                MCHD1320
C      DATA RIGHT(1),RIGHT(2) /  856686592,          0 /                MCHD1340
C      DATA DIVER(1),DIVER(2) /  873463808,          0 /                MCHD1360
C      DATA LOG10(1),LOG10(2) / 1091781651, 1352628735 /, SC/987/       MCHD1380
C                                                                       MCHD1400
C     MACHINE CONSTANTS FOR THE BURROUGHS 1700 SYSTEM.                  MCHD1420
C                                                                       MCHD1440
C      DATA SMALL(1) / ZC00800000 /                                     MCHD1460
C      DATA SMALL(2) / Z000000000 /                                     MCHD1480
C                                                                       MCHD1500
C      DATA LARGE(1) / ZDFFFFFFFF /                                     MCHD1520
C      DATA LARGE(2) / ZFFFFFFFFF /                                     MCHD1540
C                                                                       MCHD1560
C      DATA RIGHT(1) / ZCC5800000 /                                     MCHD1580
C      DATA RIGHT(2) / Z000000000 /                                     MCHD1600
C                                                                       MCHD1620
C      DATA DIVER(1) / ZCC6800000 /                                     MCHD1640
C      DATA DIVER(2) / Z000000000 /                                     MCHD1660
C                                                                       MCHD1680
C      DATA LOG10(1) / ZD00E730E7 /                                     MCHD1700
C      DATA LOG10(2) / ZC77800DC0 /, SC/987/                            MCHD1720
C                                                                       MCHD1740
C     MACHINE CONSTANTS FOR THE BURROUGHS 5700 SYSTEM.                  MCHD1760
C                                                                       MCHD1780
C      DATA SMALL(1) / O1771000000000000 /                              MCHD1800
C      DATA SMALL(2) / O0000000000000000 /                              MCHD1820
C                                                                       MCHD1840
C      DATA LARGE(1) / O0777777777777777 /                              MCHD1860
C      DATA LARGE(2) / O0007777777777777 /                              MCHD1880
C                                                                       MCHD1900
C      DATA RIGHT(1) / O1461000000000000 /                              MCHD1920
C      DATA RIGHT(2) / O0000000000000000 /                              MCHD1940
C                                                                       MCHD1960
C      DATA DIVER(1) / O1451000000000000 /                              MCHD1980
C      DATA DIVER(2) / O0000000000000000 /                              MCHD2000
C                                                                       MCHD2020
C      DATA LOG10(1) / O1157163034761674 /                              MCHD2040
C      DATA LOG10(2) / O0006677466732724 /, SC/987/                     MCHD2060
C                                                                       MCHD2080
C     MACHINE CONSTANTS FOR THE BURROUGHS 6700/7700 SYSTEMS.            MCHD2100
C                                                                       MCHD2120
C      DATA SMALL(1) / O1771000000000000 /                              MCHD2140
C      DATA SMALL(2) / O7770000000000000 /                              MCHD2160
C                                                                       MCHD2180
C      DATA LARGE(1) / O0777777777777777 /                              MCHD2200
C      DATA LARGE(2) / O7777777777777777 /                              MCHD2220
C                                                                       MCHD2240
C      DATA RIGHT(1) / O1461000000000000 /                              MCHD2260
C      DATA RIGHT(2) / O0000000000000000 /                              MCHD2280
C                                                                       MCHD2300
C      DATA DIVER(1) / O1451000000000000 /                              MCHD2320
C      DATA DIVER(2) / O0000000000000000 /                              MCHD2340
C                                                                       MCHD2360
C      DATA LOG10(1) / O1157163034761674 /                              MCHD2380
C      DATA LOG10(2) / O0006677466732724 /, SC/987/                     MCHD2400
C                                                                       MCHD2420
C     MACHINE CONSTANTS FOR FTN4 ON THE CDC 6000/7000 SERIES.           MCHD2440
C                                                                       MCHD2460
C      DATA SMALL(1) / 00564000000000000000B /                          MCHD2480
C      DATA SMALL(2) / 00000000000000000000B /                          MCHD2500
C                                                                       MCHD2520
C      DATA LARGE(1) / 37757777777777777777B /                          MCHD2540
C      DATA LARGE(2) / 37157777777777777774B /                          MCHD2560
C                                                                       MCHD2580
C      DATA RIGHT(1) / 15624000000000000000B /                          MCHD2600
C      DATA RIGHT(2) / 00000000000000000000B /                          MCHD2620
C                                                                       MCHD2640
C      DATA DIVER(1) / 15634000000000000000B /                          MCHD2660
C      DATA DIVER(2) / 00000000000000000000B /                          MCHD2680
C                                                                       MCHD2700
C      DATA LOG10(1) / 17164642023241175717B /                          MCHD2720
C      DATA LOG10(2) / 16367571421742254654B /, SC/987/                 MCHD2740
C                                                                       MCHD2760
C     MACHINE CONSTANTS FOR FTN5 ON THE CDC 6000/7000 SERIES.           MCHD2780
C                                                                       MCHD2800
C      DATA SMALL(1) / O"00564000000000000000" /                        MCHD2820
C      DATA SMALL(2) / O"00000000000000000000" /                        MCHD2840
C                                                                       MCHD2860
C      DATA LARGE(1) / O"37757777777777777777" /                        MCHD2880
C      DATA LARGE(2) / O"37157777777777777774" /                        MCHD2900
C                                                                       MCHD2920
C      DATA RIGHT(1) / O"15624000000000000000" /                        MCHD2940
C      DATA RIGHT(2) / O"00000000000000000000" /                        MCHD2960
C                                                                       MCHD2980
C      DATA DIVER(1) / O"15634000000000000000" /                        MCHD3000
C      DATA DIVER(2) / O"00000000000000000000" /                        MCHD3020
C                                                                       MCHD3040
C      DATA LOG10(1) / O"17164642023241175717" /                        MCHD3060
C      DATA LOG10(2) / O"16367571421742254654" /, SC/987/               MCHD3080
C                                                                       MCHD3100
C     MACHINE CONSTANTS FOR CONVEX C-1                                  MCHD3120
C                                                                       MCHD3140
C      DATA SMALL(1),SMALL(2) / '00100000'X, '00000000'X /              MCHD3160
C      DATA LARGE(1),LARGE(2) / '7FFFFFFF'X, 'FFFFFFFF'X /              MCHD3180
C      DATA RIGHT(1),RIGHT(2) / '3CC00000'X, '00000000'X /              MCHD3200
C      DATA DIVER(1),DIVER(2) / '3CD00000'X, '00000000'X /              MCHD3220
C      DATA LOG10(1),LOG10(2) / '3FF34413'X, '509F79FF'X /, SC/987/     MCHD3240
C                                                                       MCHD3260
C     MACHINE CONSTANTS FOR THE CRAY 1, XMP, 2, AND 3.                  MCHD3280
C                                                                       MCHD3300
C      DATA SMALL(1) / 201354000000000000000B /                         MCHD3320
C      DATA SMALL(2) / 000000000000000000000B /                         MCHD3340
C                                                                       MCHD3360
C      DATA LARGE(1) / 577767777777777777777B /                         MCHD3380
C      DATA LARGE(2) / 000007777777777777776B /                         MCHD3400
C                                                                       MCHD3420
C      DATA RIGHT(1) / 376434000000000000000B /                         MCHD3440
C      DATA RIGHT(2) / 000000000000000000000B /                         MCHD3460
C                                                                       MCHD3480
C      DATA DIVER(1) / 376444000000000000000B /                         MCHD3500
C      DATA DIVER(2) / 000000000000000000000B /                         MCHD3520
C                                                                       MCHD3540
C      DATA LOG10(1) / 377774642023241175717B /                         MCHD3560
C      DATA LOG10(2) / 000007571421742254654B /, SC/987/                MCHD3580
C                                                                       MCHD3600
C     MACHINE CONSTANTS FOR THE DATA GENERAL ECLIPSE S/200              MCHD3620
C                                                                       MCHD3640
C     NOTE - IT MAY BE APPROPRIATE TO INCLUDE THE FOLLOWING LINE -      MCHD3660
C     STATIC DMACH(5)                                                   MCHD3680
C                                                                       MCHD3700
C      DATA SMALL/20K,3*0/,LARGE/77777K,3*177777K/                      MCHD3720
C      DATA RIGHT/31420K,3*0/,DIVER/32020K,3*0/                         MCHD3740
C      DATA LOG10/40423K,42023K,50237K,74776K/, SC/987/                 MCHD3760
C                                                                       MCHD3780
C     MACHINE CONSTANTS FOR THE HARRIS SLASH 6 AND SLASH 7              MCHD3800
C                                                                       MCHD3820
C      DATA SMALL(1),SMALL(2) / '20000000, '00000201 /                  MCHD3840
C      DATA LARGE(1),LARGE(2) / '37777777, '37777577 /                  MCHD3860
C      DATA RIGHT(1),RIGHT(2) / '20000000, '00000333 /                  MCHD3880
C      DATA DIVER(1),DIVER(2) / '20000000, '00000334 /                  MCHD3900
C      DATA LOG10(1),LOG10(2) / '23210115, '10237777 /, SC/987/         MCHD3920
C                                                                       MCHD3940
C     MACHINE CONSTANTS FOR THE HONEYWELL DPS 8/70 SERIES.              MCHD3960
C                                                                       MCHD3980
C      DATA SMALL(1),SMALL(2) / O402400000000, O000000000000 /          MCHD4000
C      DATA LARGE(1),LARGE(2) / O376777777777, O777777777777 /          MCHD4020
C      DATA RIGHT(1),RIGHT(2) / O604400000000, O000000000000 /          MCHD4040
C      DATA DIVER(1),DIVER(2) / O606400000000, O000000000000 /          MCHD4060
C      DATA LOG10(1),LOG10(2) / O776464202324, O117571775714 /, SC/987/ MCHD4080
C                                                                       MCHD4100
C     MACHINE CONSTANTS FOR THE IBM 360/370 SERIES,                     MCHD4120
C     THE XEROX SIGMA 5/7/9 AND THE SEL SYSTEMS 85/86.                  MCHD4140
C                                                                       MCHD4160
C      DATA SMALL(1),SMALL(2) / Z00100000, Z00000000 /                  MCHD4180
C      DATA LARGE(1),LARGE(2) / Z7FFFFFFF, ZFFFFFFFF /                  MCHD4200
C      DATA RIGHT(1),RIGHT(2) / Z33100000, Z00000000 /                  MCHD4220
C      DATA DIVER(1),DIVER(2) / Z34100000, Z00000000 /                  MCHD4240
C      DATA LOG10(1),LOG10(2) / Z41134413, Z509F79FF /, SC/987/         MCHD4260
C                                                                       MCHD4280
C     MACHINE CONSTANTS FOR THE INTERDATA 8/32                          MCHD4300
C     WITH THE UNIX SYSTEM FORTRAN 77 COMPILER.                         MCHD4320
C                                                                       MCHD4340
C     FOR THE INTERDATA FORTRAN VII COMPILER REPLACE                    MCHD4360
C     THE Z'S SPECIFYING HEX CONSTANTS WITH Y'S.                        MCHD4380
C                                                                       MCHD4400
C      DATA SMALL(1),SMALL(2) / Z'00100000', Z'00000000' /              MCHD4420
C      DATA LARGE(1),LARGE(2) / Z'7EFFFFFF', Z'FFFFFFFF' /              MCHD4440
C      DATA RIGHT(1),RIGHT(2) / Z'33100000', Z'00000000' /              MCHD4460
C      DATA DIVER(1),DIVER(2) / Z'34100000', Z'00000000' /              MCHD4480
C      DATA LOG10(1),LOG10(2) / Z'41134413', Z'509F79FF' /, SC/987/     MCHD4500
C                                                                       MCHD4520
C     MACHINE CONSTANTS FOR THE PDP-10 (KA PROCESSOR).                  MCHD4540
C                                                                       MCHD4560
C      DATA SMALL(1),SMALL(2) / "033400000000, "000000000000 /          MCHD4580
C      DATA LARGE(1),LARGE(2) / "377777777777, "344777777777 /          MCHD4600
C      DATA RIGHT(1),RIGHT(2) / "113400000000, "000000000000 /          MCHD4620
C      DATA DIVER(1),DIVER(2) / "114400000000, "000000000000 /          MCHD4640
C      DATA LOG10(1),LOG10(2) / "177464202324, "144117571776 /, SC/987/ MCHD4660
C                                                                       MCHD4680
C     MACHINE CONSTANTS FOR THE PDP-10 (KI PROCESSOR).                  MCHD4700
C                                                                       MCHD4720
C      DATA SMALL(1),SMALL(2) / "000400000000, "000000000000 /          MCHD4740
C      DATA LARGE(1),LARGE(2) / "377777777777, "377777777777 /          MCHD4760
C      DATA RIGHT(1),RIGHT(2) / "103400000000, "000000000000 /          MCHD4780
C      DATA DIVER(1),DIVER(2) / "104400000000, "000000000000 /          MCHD4800
C      DATA LOG10(1),LOG10(2) / "177464202324, "047674776746 /, SC/987/ MCHD4820
C                                                                       MCHD4840
C     MACHINE CONSTANTS FOR PDP-11 FORTRANS SUPPORTING                  MCHD4860
C     32-BIT INTEGERS (EXPRESSED IN INTEGER AND OCTAL).                 MCHD4880
C                                                                       MCHD4900
C      DATA SMALL(1),SMALL(2) /    8388608,           0 /               MCHD4920
C      DATA LARGE(1),LARGE(2) / 2147483647,          -1 /               MCHD4940
C      DATA RIGHT(1),RIGHT(2) /  612368384,           0 /               MCHD4960
C      DATA DIVER(1),DIVER(2) /  620756992,           0 /               MCHD4980
C      DATA LOG10(1),LOG10(2) / 1067065498, -2063872008 /, SC/987/      MCHD5000
C                                                                       MCHD5020
C      DATA SMALL(1),SMALL(2) / O00040000000, O00000000000 /            MCHD5040
C      DATA LARGE(1),LARGE(2) / O17777777777, O37777777777 /            MCHD5060
C      DATA RIGHT(1),RIGHT(2) / O04440000000, O00000000000 /            MCHD5080
C      DATA DIVER(1),DIVER(2) / O04500000000, O00000000000 /            MCHD5100
C      DATA LOG10(1),LOG10(2) / O07746420232, O20476747770 /, SC/987/   MCHD5120
C                                                                       MCHD5140
C     MACHINE CONSTANTS FOR PDP-11 FORTRANS SUPPORTING                  MCHD5160
C     16-BIT INTEGERS (EXPRESSED IN INTEGER AND OCTAL).                 MCHD5180
C                                                                       MCHD5200
C      DATA SMALL(1),SMALL(2) /    128,      0 /                        MCHD5220
C      DATA SMALL(3),SMALL(4) /      0,      0 /                        MCHD5240
C                                                                       MCHD5260
C      DATA LARGE(1),LARGE(2) /  32767,     -1 /                        MCHD5280
C      DATA LARGE(3),LARGE(4) /     -1,     -1 /                        MCHD5300
C                                                                       MCHD5320
C      DATA RIGHT(1),RIGHT(2) /   9344,      0 /                        MCHD5340
C      DATA RIGHT(3),RIGHT(4) /      0,      0 /                        MCHD5360
C                                                                       MCHD5380
C      DATA DIVER(1),DIVER(2) /   9472,      0 /                        MCHD5400
C      DATA DIVER(3),DIVER(4) /      0,      0 /                        MCHD5420
C                                                                       MCHD5440
C      DATA LOG10(1),LOG10(2) /  16282,   8346 /                        MCHD5460
C      DATA LOG10(3),LOG10(4) / -31493, -12296 /, SC/987/               MCHD5480
C                                                                       MCHD5500
C      DATA SMALL(1),SMALL(2) / O000200, O000000 /                      MCHD5520
C      DATA SMALL(3),SMALL(4) / O000000, O000000 /                      MCHD5540
C                                                                       MCHD5560
C      DATA LARGE(1),LARGE(2) / O077777, O177777 /                      MCHD5580
C      DATA LARGE(3),LARGE(4) / O177777, O177777 /                      MCHD5600
C                                                                       MCHD5620
C      DATA RIGHT(1),RIGHT(2) / O022200, O000000 /                      MCHD5640
C      DATA RIGHT(3),RIGHT(4) / O000000, O000000 /                      MCHD5660
C                                                                       MCHD5680
C      DATA DIVER(1),DIVER(2) / O022400, O000000 /                      MCHD5700
C      DATA DIVER(3),DIVER(4) / O000000, O000000 /                      MCHD5720
C                                                                       MCHD5740
C      DATA LOG10(1),LOG10(2) / O037632, O020232 /                      MCHD5760
C      DATA LOG10(3),LOG10(4) / O102373, O147770 /, SC/987/             MCHD5780
C                                                                       MCHD5800
C     MACHINE CONSTANTS FOR THE PRIME 50 SERIES SYSTEMS                 MCHD5820
C     WITH 32-BIT INTEGERS AND 64V MODE INSTRUCTIONS,                   MCHD5840
C     SUPPLIED BY IGOR BRAY.                                            MCHD5860
C                                                                       MCHD5880
C      DATA SMALL(1),SMALL(2) / :10000000000, :00000100001 /            MCHD5900
C      DATA LARGE(1),LARGE(2) / :17777777777, :37777677775 /            MCHD5920
C      DATA RIGHT(1),RIGHT(2) / :10000000000, :00000000122 /            MCHD5940
C      DATA DIVER(1),DIVER(2) / :10000000000, :00000000123 /            MCHD5960
C      DATA LOG10(1),LOG10(2) / :11504046501, :07674600177 /, SC/987/   MCHD5980
C                                                                       MCHD6000
C     MACHINE CONSTANTS FOR THE SEQUENT BALANCE 8000                    MCHD6020
C                                                                       MCHD6040
C      DATA SMALL(1),SMALL(2) / $00000000,  $00100000 /                 MCHD6060
C      DATA LARGE(1),LARGE(2) / $FFFFFFFF,  $7FEFFFFF /                 MCHD6080
C      DATA RIGHT(1),RIGHT(2) / $00000000,  $3CA00000 /                 MCHD6100
C      DATA DIVER(1),DIVER(2) / $00000000,  $3CB00000 /                 MCHD6120
C      DATA LOG10(1),LOG10(2) / $509F79FF,  $3FD34413 /, SC/987/        MCHD6140
C                                                                       MCHD6160
C     MACHINE CONSTANTS FOR THE UNIVAC 1100 SERIES.                     MCHD6180
C                                                                       MCHD6200
C      DATA SMALL(1),SMALL(2) / O000040000000, O000000000000 /          MCHD6220
C      DATA LARGE(1),LARGE(2) / O377777777777, O777777777777 /          MCHD6240
C      DATA RIGHT(1),RIGHT(2) / O170540000000, O000000000000 /          MCHD6260
C      DATA DIVER(1),DIVER(2) / O170640000000, O000000000000 /          MCHD6280
C      DATA LOG10(1),LOG10(2) / O177746420232, O411757177572 /, SC/987/ MCHD6300
C                                                                       MCHD6320
C     MACHINE CONSTANTS FOR THE VAX UNIX F77 COMPILER                   MCHD6340
C                                                                       MCHD6360
C      DATA SMALL(1),SMALL(2) /        128,           0 /               MCHD6380
C      DATA LARGE(1),LARGE(2) /     -32769,          -1 /               MCHD6400
C      DATA RIGHT(1),RIGHT(2) /       9344,           0 /               MCHD6420
C      DATA DIVER(1),DIVER(2) /       9472,           0 /               MCHD6440
C      DATA LOG10(1),LOG10(2) /  546979738,  -805796613 /, SC/987/      MCHD6460
C                                                                       MCHD6480
C     MACHINE CONSTANTS FOR THE VAX-11 WITH                             MCHD6500
C     FORTRAN IV-PLUS COMPILER                                          MCHD6520
C                                                                       MCHD6540
C      DATA SMALL(1),SMALL(2) / Z00000080, Z00000000 /                  MCHD6560
C      DATA LARGE(1),LARGE(2) / ZFFFF7FFF, ZFFFFFFFF /                  MCHD6580
C      DATA RIGHT(1),RIGHT(2) / Z00002480, Z00000000 /                  MCHD6600
C      DATA DIVER(1),DIVER(2) / Z00002500, Z00000000 /                  MCHD6620
C      DATA LOG10(1),LOG10(2) / Z209A3F9A, ZCFF884FB /, SC/987/         MCHD6640
C                                                                       MCHD6660
C     MACHINE CONSTANTS FOR VAX/VMS VERSION 2.2                         MCHD6680
C                                                                       MCHD6700
C      DATA SMALL(1),SMALL(2) /       '80'X,        '0'X /              MCHD6720
C      DATA LARGE(1),LARGE(2) / 'FFFF7FFF'X, 'FFFFFFFF'X /              MCHD6740
C      DATA RIGHT(1),RIGHT(2) /     '2480'X,        '0'X /              MCHD6760
C      DATA DIVER(1),DIVER(2) /     '2500'X,        '0'X /              MCHD6780
C      DATA LOG10(1),LOG10(2) / '209A3F9A'X, 'CFF884FB'X /, SC/987/     MCHD6800
C                                                                       MCHD6820
C  ***  ISSUE STOP 779 IF ALL DATA STATEMENTS ARE COMMENTED...          MCHD6840
      IF (SC .NE. 987) STOP 779                                         MCHD6860
C/6S                                                                    MCHD6880
C     IF (I .LT. 1  .OR.  I .GT. 5)                                     MCHD6900
C    1   CALL SETERR(24HD1MACH - I OUT OF BOUNDS,24,1,2)                MCHD6920
C/7S                                                                    MCHD6940
      IF (I .LT. 1  .OR.  I .GT. 5)                                     MCHD6960
     1   CALL SETERR('D1MACH - I OUT OF BOUNDS',24,1,2)                 MCHD6980
C/                                                                      MCHD7000
C                                                                       MCHD7020
      D1MACH = DMACH(I)                                                 MCHD7040
      RETURN                                                            MCHD7060
C                                                                       MCHD7080
      END                                                               MCHD7100
      SUBROUTINE N5ERR(MESSG, NMESSG, NERR, IOPT)                       BURY0000
      INTEGER NMESSG, NERR, IOPT                                        BURY0020
C/6S                                                                    BURY0040
C     INTEGER MESSG(1)                                                  BURY0060
C/7S                                                                    BURY0080
      CHARACTER*1 MESSG(NMESSG)                                         BURY0100
C/                                                                      BURY0120
C  N5ERR IS A PROCEDURE USED TO REDEFINE AN ERROR STATE.                BURY0140
      CALL ERROFF                                                       BURY0160
      CALL SETERR(MESSG, NMESSG, NERR, IOPT)                            BURY0180
      RETURN                                                            BURY0200
      END                                                               BURY0220
      INTEGER FUNCTION NERROR(NERR)                                     ERRN0000
C                                                                       ERRN0020
C  RETURNS NERROR = NERR = THE VALUE OF THE ERROR FLAG LERROR.          ERRN0040
C                                                                       ERRN0060
      NERROR=I8SAVE(1,0,.FALSE.)                                        ERRN0080
      NERR=NERROR                                                       ERRN0100
      RETURN                                                            ERRN0120
C                                                                       ERRN0140
      END                                                               ERRN0160
      SUBROUTINE ERROFF                                                 ERRF0000
C                                                                       ERRF0020
C  TURNS OFF THE ERROR STATE OFF BY SETTING LERROR=0.                   ERRF0040
C                                                                       ERRF0060
      I=I8SAVE(1,0,.TRUE.)                                              ERRF0080
      RETURN                                                            ERRF0100
C                                                                       ERRF0120
      END                                                               ERRF0140
      SUBROUTINE SETERR(MESSG,NMESSG,NERR,IOPT)                         ERRS0000
C                                                                       ERRS0020
C  SETERR SETS LERROR = NERR, OPTIONALLY PRINTS THE MESSAGE AND DUMPS   ERRS0040
C  ACCORDING TO THE FOLLOWING RULES...                                  ERRS0060
C                                                                       ERRS0080
C    IF IOPT = 1 AND RECOVERING      - JUST REMEMBER THE ERROR.         ERRS0100
C    IF IOPT = 1 AND NOT RECOVERING  - PRINT AND STOP.                  ERRS0120
C    IF IOPT = 2                     - PRINT, DUMP AND STOP.            ERRS0140
C                                                                       ERRS0160
C  INPUT                                                                ERRS0180
C                                                                       ERRS0200
C    MESSG  - THE ERROR MESSAGE.                                        ERRS0220
C    NMESSG - THE LENGTH OF THE MESSAGE, IN CHARACTERS.                 ERRS0240
C    NERR   - THE ERROR NUMBER. MUST HAVE NERR NON-ZERO.                ERRS0260
C    IOPT   - THE OPTION. MUST HAVE IOPT=1 OR 2.                        ERRS0280
C                                                                       ERRS0300
C  ERROR STATES -                                                       ERRS0320
C                                                                       ERRS0340
C    1 - MESSAGE LENGTH NOT POSITIVE.                                   ERRS0360
C    2 - CANNOT HAVE NERR=0.                                            ERRS0380
C    3 - AN UNRECOVERED ERROR FOLLOWED BY ANOTHER ERROR.                ERRS0400
C    4 - BAD VALUE FOR IOPT.                                            ERRS0420
C                                                                       ERRS0440
C  ONLY THE FIRST 72 CHARACTERS OF THE MESSAGE ARE PRINTED.             ERRS0460
C                                                                       ERRS0480
C  THE ERROR HANDLER CALLS A SUBROUTINE NAMED SDUMP TO PRODUCE A        ERRS0500
C  SYMBOLIC DUMP.                                                       ERRS0520
C                                                                       ERRS0540
C/6S                                                                    ERRS0560
C     INTEGER MESSG(1)                                                  ERRS0580
C/7S                                                                    ERRS0600
      CHARACTER*1 MESSG(NMESSG)                                         ERRS0620
C/                                                                      ERRS0640
C                                                                       ERRS0660
C  THE UNIT FOR ERROR MESSAGES.                                         ERRS0680
C                                                                       ERRS0700
      IWUNIT=I1MACH(4)                                                  ERRS0720
C                                                                       ERRS0740
      IF (NMESSG.GE.1) GO TO 10                                         ERRS0760
C                                                                       ERRS0780
C  A MESSAGE OF NON-POSITIVE LENGTH IS FATAL.                           ERRS0800
C                                                                       ERRS0820
        WRITE(IWUNIT,9000)                                              ERRS0840
 9000   FORMAT(52H1ERROR    1 IN SETERR - MESSAGE LENGTH NOT POSITIVE.) ERRS0860
        GO TO 60                                                        ERRS0880
C                                                                       ERRS0900
C  NW IS THE NUMBER OF WORDS THE MESSAGE OCCUPIES.                      ERRS0920
C  (I1MACH(6) IS THE NUMBER OF CHARACTERS PER WORD.)                    ERRS0940
C                                                                       ERRS0960
 10   NW=(MIN0(NMESSG,72)-1)/I1MACH(6)+1                                ERRS0980
C                                                                       ERRS1000
      IF (NERR.NE.0) GO TO 20                                           ERRS1020
C                                                                       ERRS1040
C  CANNOT TURN THE ERROR STATE OFF USING SETERR.                        ERRS1060
C  (I8SAVE SETS A FATAL ERROR HERE.)                                    ERRS1080
C                                                                       ERRS1100
        WRITE(IWUNIT,9001)                                              ERRS1120
 9001   FORMAT(42H1ERROR    2 IN SETERR - CANNOT HAVE NERR=0//          ERRS1140
     1         34H THE CURRENT ERROR MESSAGE FOLLOWS///)                ERRS1160
        CALL E9RINT(MESSG,NW,NERR,.TRUE.)                               ERRS1180
        ITEMP=I8SAVE(1,1,.TRUE.)                                        ERRS1200
        GO TO 50                                                        ERRS1220
C                                                                       ERRS1240
C  SET LERROR AND TEST FOR A PREVIOUS UNRECOVERED ERROR.                ERRS1260
C                                                                       ERRS1280
 20   IF (I8SAVE(1,NERR,.TRUE.).EQ.0) GO TO 30                          ERRS1300
C                                                                       ERRS1320
        WRITE(IWUNIT,9002)                                              ERRS1340
 9002   FORMAT(23H1ERROR    3 IN SETERR -,                              ERRS1360
     1         48H AN UNRECOVERED ERROR FOLLOWED BY ANOTHER ERROR.//    ERRS1380
     2         48H THE PREVIOUS AND CURRENT ERROR MESSAGES FOLLOW.///)  ERRS1400
        CALL EPRINT                                                     ERRS1420
        CALL E9RINT(MESSG,NW,NERR,.TRUE.)                               ERRS1440
        GO TO 50                                                        ERRS1460
C                                                                       ERRS1480
C  SAVE THIS MESSAGE IN CASE IT IS NOT RECOVERED FROM PROPERLY.         ERRS1500
C                                                                       ERRS1520
 30   CALL E9RINT(MESSG,NW,NERR,.TRUE.)                                 ERRS1540
C                                                                       ERRS1560
      IF (IOPT.EQ.1 .OR. IOPT.EQ.2) GO TO 40                            ERRS1580
C                                                                       ERRS1600
C  MUST HAVE IOPT = 1 OR 2.                                             ERRS1620
C                                                                       ERRS1640
        WRITE(IWUNIT,9003)                                              ERRS1660
 9003   FORMAT(42H1ERROR    4 IN SETERR - BAD VALUE FOR IOPT//          ERRS1680
     1         34H THE CURRENT ERROR MESSAGE FOLLOWS///)                ERRS1700
        GO TO 50                                                        ERRS1720
C                                                                       ERRS1740
C  IF THE ERROR IS FATAL, PRINT, DUMP, AND STOP                         ERRS1760
C                                                                       ERRS1780
 40   IF (IOPT.EQ.2) GO TO 50                                           ERRS1800
C                                                                       ERRS1820
C  HERE THE ERROR IS RECOVERABLE                                        ERRS1840
C                                                                       ERRS1860
C  IF THE RECOVERY MODE IS IN EFFECT, OK, JUST RETURN                   ERRS1880
C                                                                       ERRS1900
      IF (I8SAVE(2,0,.FALSE.).EQ.1) RETURN                              ERRS1920
C                                                                       ERRS1940
C  OTHERWISE PRINT AND STOP                                             ERRS1960
C                                                                       ERRS1980
      CALL EPRINT                                                       ERRS2000
      STOP                                                              ERRS2020
C                                                                       ERRS2040
 50   CALL EPRINT                                                       ERRS2060
 60   CALL SDUMP                                                        ERRS2080
      STOP                                                              ERRS2100
C                                                                       ERRS2120
      END                                                               ERRS2140
      SUBROUTINE SDUMP                                                  ERRT0000
C   THIS IS THE STANDARD DUMP ROUTINE FOR THE PORT LIBRARY.             ERRT0020
C   FIRST IT PROVIDES A FORMATTED DUMP OF THE PORT STACK.               ERRT0040
C   THEN IT CALLS THE LOCAL (PREFERABLY SYMBOLIC) DUMP ROUTINE.         ERRT0060
      CALL STKDMP                                                       ERRT0080
      CALL FDUMP                                                        ERRT0100
      RETURN                                                            ERRT0120
      END                                                               ERRT0140
      SUBROUTINE STKDMP                                                 ERRK0000
C                                                                       ERRK0020
C  THIS PROCEDURE PROVIDES A DUMP OF THE PORT STACK.                    ERRK0040
C                                                                       ERRK0060
C  WRITTEN BY D. D. WARNER.                                             ERRK0080
C                                                                       ERRK0100
C  MOSTLY REWRITTEN BY P. A. FOX, OCTOBER 13, 1982                      ERRK0120
C  AND COMMENTS ADDED.                                                  ERRK0140
C                                                                       ERRK0160
C  ALLOCATED REGIONS OF THE STACK ARE PRINTED OUT IN THE APPROPRIATE    ERRK0180
C  FORMAT, EXCEPT IF THE STACK APPEARS TO HAVE BEEN OVERWRITTEN.        ERRK0200
C  IF OVERWRITE SEEMS TO HAVE HAPPENED, THE ENTIRE STACK IS PRINTED OUT ERRK0220
C  IN UNSTRUCTURED FORM, ONCE FOR EACH OF THE POSSIBLE                  ERRK0240
C  (LOGICAL, INTEGER, REAL, DOUBLE PRECISION, OR COMPLEX) FORMATS.      ERRK0260
C                                                                       ERRK0280
      COMMON /CSTAK/ DSTAK                                              ERRK0300
      DOUBLE PRECISION DSTAK(500)                                       ERRK0320
      REAL RSTAK(1000)                                                  ERRK0340
C/R                                                                     ERRK0360
C     REAL CMSTAK(2,500)                                                ERRK0380
C/C                                                                     ERRK0400
      COMPLEX CMSTAK(500)                                               ERRK0420
C/                                                                      ERRK0440
      INTEGER ISTAK(1000)                                               ERRK0460
      LOGICAL LSTAK(1000)                                               ERRK0480
C                                                                       ERRK0500
      INTEGER LOUT, LNOW, LUSED, LMAX, LBOOK                            ERRK0520
      INTEGER LLOUT, BPNTR                                              ERRK0540
      INTEGER IPTR, ERROUT, MCOL, NITEMS                                ERRK0560
      INTEGER WR, DR, WD, DD, WI                                        ERRK0580
      INTEGER LNG(5), ISIZE(5)                                          ERRK0600
      INTEGER I, LNEXT, ITYPE, I1MACH                                   ERRK0620
C                                                                       ERRK0640
      LOGICAL INIT, TRBL1, TRBL2                                        ERRK0660
C                                                                       ERRK0680
      EQUIVALENCE (DSTAK(1), ISTAK(1))                                  ERRK0700
      EQUIVALENCE (DSTAK(1), LSTAK(1))                                  ERRK0720
      EQUIVALENCE (DSTAK(1), RSTAK(1))                                  ERRK0740
C/R                                                                     ERRK0760
C     EQUIVALENCE (DSTAK(1), CMSTAK(1,1))                               ERRK0780
C/C                                                                     ERRK0800
      EQUIVALENCE (DSTAK(1), CMSTAK(1))                                 ERRK0820
C/                                                                      ERRK0840
      EQUIVALENCE (ISTAK(1), LOUT)                                      ERRK0860
      EQUIVALENCE (ISTAK(2), LNOW)                                      ERRK0880
      EQUIVALENCE (ISTAK(3), LUSED)                                     ERRK0900
      EQUIVALENCE (ISTAK(4), LMAX)                                      ERRK0920
      EQUIVALENCE (ISTAK(5), LBOOK)                                     ERRK0940
      EQUIVALENCE (ISTAK(6), ISIZE(1))                                  ERRK0960
C                                                                       ERRK0980
      DATA MCOL/132/                                                    ERRK1000
      DATA INIT/.TRUE./                                                 ERRK1020
C                                                                       ERRK1040
C  I0TK00 CHECKS TO SEE IF THE FIRST TEN, BOOKKEEPING, LOCATIONS OF     ERRK1060
C  THE STACK HAVE BEEN INITIALIZED (AND DOES IT, IF NEEDED).            ERRK1080
C                                                                       ERRK1100
      IF (INIT) CALL I0TK00(INIT, 500, 4)                               ERRK1120
C                                                                       ERRK1140
C                                                                       ERRK1160
C  I1MACH(4) IS THE STANDARD ERROR MESSAGE WRITE UNIT.                  ERRK1180
C                                                                       ERRK1200
      ERROUT = I1MACH(4)                                                ERRK1220
      WRITE (ERROUT,  9901)                                             ERRK1240
 9901   FORMAT (11H1STACK DUMP)                                         ERRK1260
C                                                                       ERRK1280
C                                                                       ERRK1300
C  FIND THE MACHINE-DEPENDENT FORMATS FOR PRINTING - BUT ADD 1 TO       ERRK1320
C  THE WIDTH TO GET SEPARATION BETWEEN ITEMS, AND SUBTRACT 1 FROM       ERRK1340
C  THE NUMBER OF DIGITS AFTER THE DECIMAL POINT TO ALLOW FOR THE        ERRK1360
C  1P IN THE DUMP FORMAT OF 1PEW.D                                      ERRK1380
C                                                                       ERRK1400
C  (NOTE, THAT ALTHOUGH IT IS NOT NECESSARY, 2 HAS BEEN ADDED TO        ERRK1420
C   THE INTEGER WIDTH, WI, TO CONFORM WITH DAN WARNERS PREVIOUS         ERRK1440
C   USAGE - SO PEOPLE CAN COMPARE DUMPS WITH ONES THEY HAVE HAD         ERRK1460
C   AROUND FOR A LONG TIME.)                                            ERRK1480
C                                                                       ERRK1500
       CALL FRMATR(WR,DR)                                               ERRK1520
       CALL FRMATD(WD,DD)                                               ERRK1540
       CALL FRMATI(WI)                                                  ERRK1560
C                                                                       ERRK1580
       WR = WR+1                                                        ERRK1600
       WD = WD+1                                                        ERRK1620
       WI = WI+2                                                        ERRK1640
       DR = DR-1                                                        ERRK1660
       DD = DD-1                                                        ERRK1680
C                                                                       ERRK1700
C  CHECK, IN VARIOUS WAYS, THE BOOKKEEPING PART OF THE STACK TO SEE     ERRK1720
C  IF THINGS WERE OVERWRITTEN.                                          ERRK1740
C                                                                       ERRK1760
C  LOUT  IS THE NUMBER OF CURRENT ALLOCATIONS                           ERRK1780
C  LNOW  IS THE CURRENT ACTIVE LENGTH OF THE STACK                      ERRK1800
C  LUSED IS THE MAXIMUM VALUE OF LNOW ACHIEVED                          ERRK1820
C  LMAX  IS THE MAXIMUM LENGTH OF THE STACK                             ERRK1840
C  LBOOK IS THE NUMBER OF WORDS USED FOR BOOK-KEEPING                   ERRK1860
C                                                                       ERRK1880
      TRBL1 = LBOOK .NE. 10                                             ERRK1900
      IF (.NOT. TRBL1) TRBL1 = LMAX .LT. 12                             ERRK1920
      IF (.NOT. TRBL1) TRBL1 = LMAX .LT. LUSED                          ERRK1940
      IF (.NOT. TRBL1) TRBL1 = LUSED .LT. LNOW                          ERRK1960
      IF (.NOT. TRBL1) TRBL1 = LNOW .LT. LBOOK                          ERRK1980
      IF (.NOT. TRBL1) TRBL1 = LOUT .LT. 0                              ERRK2000
      IF (.NOT. TRBL1) GO TO 10                                         ERRK2020
C                                                                       ERRK2040
         WRITE (ERROUT,  9902)                                          ERRK2060
 9902      FORMAT (29H0STACK HEADING IS OVERWRITTEN)                    ERRK2080
         WRITE (ERROUT,  9903)                                          ERRK2100
 9903      FORMAT (47H UNSTRUCTURED DUMP OF THE DEFAULT STACK FOLLOWS)  ERRK2120
C                                                                       ERRK2140
C  SINCE INFORMATION IS LOST, SIMPLY SET THE USUAL DEFAULT VALUES FOR   ERRK2160
C  THE LENGTH OF THE ENTIRE STACK IN TERMS OF EACH (LOGICAL, INTEGER,   ERRK2180
C  ETC.,) TYPE.                                                         ERRK2200
C                                                                       ERRK2220
      LNG(1) = 1000                                                     ERRK2240
      LNG(2) = 1000                                                     ERRK2260
      LNG(3) = 1000                                                     ERRK2280
      LNG(4) = 500                                                      ERRK2300
      LNG(5) = 500                                                      ERRK2320
C                                                                       ERRK2340
C                                                                       ERRK2360
         CALL U9DMP(LNG, MCOL, WI, WR, DR, WD, DD)                      ERRK2380
         GO TO  110                                                     ERRK2400
C                                                                       ERRK2420
C  WRITE OUT THE STORAGE UNITS USED BY EACH TYPE OF VARIABLE            ERRK2440
C                                                                       ERRK2460
   10    WRITE (ERROUT,  9904)                                          ERRK2480
 9904      FORMAT (19H0STORAGE PARAMETERS)                              ERRK2500
         WRITE (ERROUT,  9905) ISIZE(1)                                 ERRK2520
 9905      FORMAT (18H LOGICAL          , I7, 14H STORAGE UNITS)        ERRK2540
         WRITE (ERROUT,  9906) ISIZE(2)                                 ERRK2560
 9906      FORMAT (18H INTEGER          , I7, 14H STORAGE UNITS)        ERRK2580
         WRITE (ERROUT,  9907) ISIZE(3)                                 ERRK2600
 9907      FORMAT (18H REAL             , I7, 14H STORAGE UNITS)        ERRK2620
         WRITE (ERROUT,  9908) ISIZE(4)                                 ERRK2640
 9908      FORMAT (18H DOUBLE PRECISION , I7, 14H STORAGE UNITS)        ERRK2660
         WRITE (ERROUT,  9909) ISIZE(5)                                 ERRK2680
 9909      FORMAT (18H COMPLEX          , I7, 14H STORAGE UNITS)        ERRK2700
C                                                                       ERRK2720
C  WRITE OUT THE CURRENT STACK STATISTICS (I.E. USAGE)                  ERRK2740
C                                                                       ERRK2760
         WRITE (ERROUT,  9910)                                          ERRK2780
 9910      FORMAT (17H0STACK STATISTICS)                                ERRK2800
         WRITE (ERROUT,  9911) LMAX                                     ERRK2820
 9911      FORMAT (23H STACK SIZE            , I7)                      ERRK2840
         WRITE (ERROUT,  9912) LUSED                                    ERRK2860
 9912      FORMAT (23H MAXIMUM STACK USED    , I7)                      ERRK2880
         WRITE (ERROUT,  9913) LNOW                                     ERRK2900
 9913      FORMAT (23H CURRENT STACK USED    , I7)                      ERRK2920
         WRITE (ERROUT,  9914) LOUT                                     ERRK2940
 9914      FORMAT (23H NUMBER OF ALLOCATIONS , I7)                      ERRK2960
C                                                                       ERRK2980
C  HERE AT LEAST THE BOOKKEEPING PART OF THE STACK HAS NOT BEEN         ERRK3000
C  OVERWRITTEN.                                                         ERRK3020
C                                                                       ERRK3040
C  STACKDUMP WORKS BACKWARDS FROM THE END (MOST RECENT ALLOCATION) OF   ERRK3060
C  THE STACK, PRINTING INFORMATION, BUT ALWAYS CHECKING TO SEE IF       ERRK3080
C  THE POINTERS FOR AN ALLOCATION HAVE BEEN OVERWRITTEN.                ERRK3100
C                                                                       ERRK3120
C  LLOUT COUNTS THE NUMBER OF ALLOCATIONS STILL LEFT TO PRINT           ERRK3140
C  SO LLOUT IS INITIALLY LOUT OR ISTAK(1).                              ERRK3160
C                                                                       ERRK3180
C  THE STACK ALLOCATION ROUTINE PUTS, AT THE END OF EACH ALLOCATION,    ERRK3200
C  TWO EXTRA SPACES - ONE FOR THE TYPE OF THE ALLOCATION AND THE NEXT   ERRK3220
C  TO HOLD A BACK POINTER TO THE PREVIOUS ALLOCATION.                   ERRK3240
C  THE BACK POINTER IS THEREFORE INITIALLY LOCATED AT THE INITIAL END,  ERRK3260
C  LNOW, OF THE STACK.                                                  ERRK3280
C  CALL THIS LOCATION BPNTR.                                            ERRK3300
C                                                                       ERRK3320
          LLOUT = LOUT                                                  ERRK3340
          BPNTR = LNOW                                                  ERRK3360
C                                                                       ERRK3380
C  IF WE ARE DONE, THE BACK POINTER POINTS BACK INTO THE BOOKKEEPING    ERRK3400
C  PART OF THE STACK.                                                   ERRK3420
C                                                                       ERRK3440
C  IF WE ARE NOT DONE, OBTAIN THE NEXT REGION TO PRINT AND GET ITS TYPE.ERRK3460
C                                                                       ERRK3480
   20    IF (BPNTR .LE. LBOOK) GO TO  110                               ERRK3500
C                                                                       ERRK3520
            LNEXT = ISTAK(BPNTR)                                        ERRK3540
            ITYPE = ISTAK(BPNTR-1)                                      ERRK3560
C                                                                       ERRK3580
C  SEE IF ANY OF THESE NEW DATA ARE INCONSISTENT - WHICH WOULD SIGNAL   ERRK3600
C  AN OVERWRITE.                                                        ERRK3620
C                                                                       ERRK3640
            TRBL2 = LNEXT .LT. LBOOK                                    ERRK3660
            IF (.NOT. TRBL2) TRBL2 = BPNTR .LE. LNEXT                   ERRK3680
            IF (.NOT. TRBL2) TRBL2 = ITYPE .LT. 0                       ERRK3700
            IF (.NOT. TRBL2) TRBL2 = 5 .LT. ITYPE                       ERRK3720
            IF (.NOT. TRBL2) GO TO 40                                   ERRK3740
C                                                                       ERRK3760
C  HERE THERE SEEMS TO HAVE BEEN A PARTIAL OVERWRITE.                   ERRK3780
C  COMPUTE THE LENGTH OF THE ENTIRE STACK IN TERMS OF THE VALUES GIVEN  ERRK3800
C  IN THE BOOKKEEPING PART OF THE STACK (WHICH, AT LEAST, SEEMS NOT TO  ERRK3820
C  HAVE BEEN OVERWRITTEN), AND DO AN UNFORMATTED DUMP, AND RETURN.      ERRK3840
C                                                                       ERRK3860
               WRITE (ERROUT,  9915)                                    ERRK3880
 9915            FORMAT (28H0STACK PARTIALLY OVERWRITTEN)               ERRK3900
               WRITE (ERROUT,  9916)                                    ERRK3920
 9916          FORMAT (45H UNSTRUCTURED DUMP OF REMAINING STACK FOLLOWS)ERRK3940
C                                                                       ERRK3960
         DO  30 I = 1, 5                                                ERRK3980
            LNG(I) = (BPNTR*ISIZE(2)-1)/ISIZE(I)+1                      ERRK4000
   30    CONTINUE                                                       ERRK4020
C                                                                       ERRK4040
               CALL U9DMP(LNG, MCOL, WI, WR, DR, WD, DD)                ERRK4060
               GO TO  110                                               ERRK4080
C                                                                       ERRK4100
C                                                                       ERRK4120
C  COMES HERE EACH TIME TO PRINT NEXT (BACK) ALLOCATION.                ERRK4140
C                                                                       ERRK4160
C  AT THIS POINT BPNTR POINTS TO THE END OF THE ALLOCATION ABOUT TO     ERRK4180
C  BE PRINTED, LNEXT = ISTAK(BPNTR) POINTS BACK TO THE END OF THE       ERRK4200
C  PREVIOUS ALLOCATION, AND ITYPE = ISTAK(BPNTR-1) GIVES THE TYPE OF    ERRK4220
C  THE ALLOCATION ABOUT TO BE PRINTED.                                  ERRK4240
C                                                                       ERRK4260
C  THE PRINTING ROUTINES NEED TO KNOW THE START OF THE ALLOCATION AND   ERRK4280
C  THE NUMBER OF ITEMS.                                                 ERRK4300
C  THESE ARE COMPUTED FROM THE EQUATIONS USED WHEN THE FUNCTION ISTKGT  ERRK4320
C  COMPUTED THE ORIGINAL ALLOCATION - THE POINTER TO THE                ERRK4340
C  START OF THE ALLOCATION WAS COMPUTED BY ISTKGT FROM THE (THEN)       ERRK4360
C  END OF THE PREVIOUS ALLOCATION VIA THE FORMULA,                      ERRK4380
C                                                                       ERRK4400
C           ISTKGT = (LNOW*ISIZE(2)-1)/ISIZE(ITYPE) + 2                 ERRK4420
C                                                                       ERRK4440
   40       IPTR   = (LNEXT*ISIZE(2)-1)/ISIZE(ITYPE) + 2                ERRK4460
C                                                                       ERRK4480
C  THE FUNCTION ISTKGT THEN FOUND NEW END OF THE STACK, LNOW, FROM THE  ERRK4500
C  FORMULA                                                              ERRK4520
C                                                                       ERRK4540
C          I = ( (ISTKGT-1+NITEMS)*ISIZE(ITYPE) - 1 )/ISIZE(2) + 3      ERRK4560
C                                                                       ERRK4580
C  HERE WE SOLVE THIS FOR NITEMS TO DETERMINE THE NUMBER OF LOCATIONS   ERRK4600
C  IN THIS ALLOCATION.                                                  ERRK4620
C                                                                       ERRK4640
            NITEMS = 1-IPTR + ((BPNTR-3)*ISIZE(2)+1)/ISIZE(ITYPE)       ERRK4660
C                                                                       ERRK4680
C                                                                       ERRK4700
C  USE THE TYPE (INTEGER, REAL, ETC.) TO DTERMINE WHICH PRINTING        ERRK4720
C  ROUTINE TO USE.                                                      ERRK4740
C                                                                       ERRK4760
               IF (ITYPE .EQ. 1) GO TO  50                              ERRK4780
               IF (ITYPE .EQ. 2) GO TO  60                              ERRK4800
               IF (ITYPE .EQ. 3) GO TO  70                              ERRK4820
               IF (ITYPE .EQ. 4) GO TO  80                              ERRK4840
               IF (ITYPE .EQ. 5) GO TO  90                              ERRK4860
C                                                                       ERRK4880
   50          WRITE (ERROUT,  9917) LLOUT, IPTR                        ERRK4900
 9917            FORMAT (13H0ALLOCATION =, I7, 20H,          POINTER =, ERRK4920
     1            I7, 23H,          TYPE LOGICAL)                       ERRK4940
               CALL A9RNTL(LSTAK(IPTR), NITEMS, ERROUT, MCOL)           ERRK4960
               GO TO  100                                               ERRK4980
C                                                                       ERRK5000
   60          WRITE (ERROUT,  9918) LLOUT, IPTR                        ERRK5020
 9918            FORMAT (13H0ALLOCATION =, I7, 20H,          POINTER =, ERRK5040
     1            I7, 23H,          TYPE INTEGER)                       ERRK5060
               CALL A9RNTI(ISTAK(IPTR), NITEMS, ERROUT, MCOL, WI)       ERRK5080
               GO TO  100                                               ERRK5100
C                                                                       ERRK5120
   70          WRITE (ERROUT,  9919) LLOUT, IPTR                        ERRK5140
 9919            FORMAT (13H0ALLOCATION =, I7, 20H,          POINTER =, ERRK5160
     1            I7, 20H,          TYPE REAL)                          ERRK5180
               CALL A9RNTR(RSTAK(IPTR), NITEMS, ERROUT, MCOL, WR, DR)   ERRK5200
               GO TO  100                                               ERRK5220
C                                                                       ERRK5240
   80          WRITE (ERROUT,  9920) LLOUT, IPTR                        ERRK5260
 9920            FORMAT (13H0ALLOCATION =, I7, 20H,          POINTER =, ERRK5280
     1            I7, 32H,          TYPE DOUBLE PRECISION)              ERRK5300
               CALL A9RNTD(DSTAK(IPTR), NITEMS, ERROUT, MCOL, WD, DD)   ERRK5320
               GO TO  100                                               ERRK5340
C                                                                       ERRK5360
   90          WRITE (ERROUT,  9921) LLOUT, IPTR                        ERRK5380
 9921            FORMAT (13H0ALLOCATION =, I7, 20H,          POINTER =, ERRK5400
     1            I7, 23H,          TYPE COMPLEX)                       ERRK5420
C/R                                                                     ERRK5440
C              CALL A9RNTC(CMSTAK(1,IPTR), NITEMS, ERROUT, MCOL, WR,DR) ERRK5460
C/C                                                                     ERRK5480
               CALL A9RNTC(CMSTAK(IPTR), NITEMS, ERROUT, MCOL, WR, DR)  ERRK5500
C/                                                                      ERRK5520
C                                                                       ERRK5540
 100        BPNTR = LNEXT                                               ERRK5560
            LLOUT = LLOUT-1                                             ERRK5580
            GO TO 20                                                    ERRK5600
C                                                                       ERRK5620
  110  WRITE (ERROUT,  9922)                                            ERRK5640
 9922   FORMAT (18H0END OF STACK DUMP)                                  ERRK5660
      RETURN                                                            ERRK5680
      END                                                               ERRK5700
      SUBROUTINE U9DMP(LNG, NCOL, WI, WR, DR, WD, DD)                   ERRU0000
C                                                                       ERRU0020
C  THIS SUBROUTINE ASSUMES THAT THE TYPE (INTEGER, ETC.) OF THE DATA    ERRU0040
C  IN THE PORT STACK IS NOT KNOWN - SO IT PRINTS OUT, IN ALL FORMATS    ERRU0060
C  THE STACK CONTENTS, USING THE ARRAY OUTPUT ROUTINES APRNTX.          ERRU0080
C                                                                       ERRU0100
C  WRITTEN BY DAN WARNER, REVISED BY PHYL FOX, NOVEMBER 8, 1982.        ERRU0120
C                                                                       ERRU0140
C  INPUT PARAMETERS -                                                   ERRU0160
C                                                                       ERRU0180
C    LNG      - AN INTEGER VECTOR ARRAY CONTAINING IN                   ERRU0200
C               LNG(1) THE LENGTH OF THE ARRAY IF LOGICAL               ERRU0220
C               LNG(2) THE LENGTH OF THE ARRAY IF INTEGER               ERRU0240
C               LNG(3) THE LENGTH OF THE ARRAY IF REAL                  ERRU0260
C               LNG(4) THE LENGTH OF THE ARRAY IF DOUBLE PRECISION      ERRU0280
C               LNG(5) THE LENGTH OF THE ARRAY IF COMPLEX               ERRU0300
C                                                                       ERRU0320
C    NCOL     - THE NUMBER OF SPACES ACROSS A PRINTED LINE              ERRU0340
C                                                                       ERRU0360
C    WI       - THE FORMAT WIDTH FOR AN INTEGER                         ERRU0380
C                                                                       ERRU0400
C    WR       - THE FORMAT WIDTH FOR A REAL (W IN 1PEW.D)               ERRU0420
C                                                                       ERRU0440
C    DR       - THE NUMBER OF DIGITS AFTER THE DECIMAL POINT            ERRU0460
C               (THE D IN THE 1PEW.D FORMULA)                           ERRU0480
C                                                                       ERRU0500
C    WD       - THE FORMAT WIDTH FOR A REAL (W IN 1PDW.D)               ERRU0520
C                                                                       ERRU0540
C    DD       - THE NUMBER OF DIGITS AFTER THE DECIMAL POINT            ERRU0560
C               (THE D IN THE 1PDW.D FORMULA)                           ERRU0580
C                                                                       ERRU0600
C                                                                       ERRU0620
C  ERROR STATES - NONE.  U9DMP IS CALLED BY SETERR,                     ERRU0640
C  SO IT CANNOT CALL SETERR.                                            ERRU0660
C                                                                       ERRU0680
C                                                                       ERRU0700
      INTEGER LNG(5), NCOL, WI, WR, DR, WD                              ERRU0720
      INTEGER DD                                                        ERRU0740
      COMMON /CSTAK/ DSTAK                                              ERRU0760
      DOUBLE PRECISION DSTAK(500)                                       ERRU0780
      INTEGER ERROUT, ISTAK(1000), I1MACH                               ERRU0800
      REAL RSTAK(1000)                                                  ERRU0820
      LOGICAL LSTAK(1000)                                               ERRU0840
C/R                                                                     ERRU0860
C     REAL CMSTAK(2,500)                                                ERRU0880
C     EQUIVALENCE (DSTAK(1), CMSTAK(1,1))                               ERRU0900
C/C                                                                     ERRU0920
      COMPLEX CMSTAK(500)                                               ERRU0940
      EQUIVALENCE (DSTAK(1), CMSTAK(1))                                 ERRU0960
C/                                                                      ERRU0980
      EQUIVALENCE (DSTAK(1), ISTAK(1))                                  ERRU1000
      EQUIVALENCE (DSTAK(1), LSTAK(1))                                  ERRU1020
      EQUIVALENCE (DSTAK(1), RSTAK(1))                                  ERRU1040
C                                                                       ERRU1060
      ERROUT = I1MACH(4)                                                ERRU1080
C                                                                       ERRU1100
      WRITE (ERROUT,  1)                                                ERRU1120
   1  FORMAT (14H0LOGICAL STACK)                                        ERRU1140
      CALL A9RNTL(LSTAK, LNG(1), ERROUT, NCOL)                          ERRU1160
      WRITE (ERROUT,  2)                                                ERRU1180
   2  FORMAT (14H0INTEGER STACK)                                        ERRU1200
      CALL A9RNTI(ISTAK, LNG(2), ERROUT, NCOL, WI)                      ERRU1220
      WRITE (ERROUT,  3)                                                ERRU1240
   3  FORMAT (11H0REAL STACK)                                           ERRU1260
      CALL A9RNTR(RSTAK, LNG(3), ERROUT, NCOL, WR, DR)                  ERRU1280
      WRITE (ERROUT,  4)                                                ERRU1300
   4  FORMAT (23H0DOUBLE PRECISION STACK)                               ERRU1320
      CALL A9RNTD(DSTAK, LNG(4), ERROUT, NCOL, WD, DD)                  ERRU1340
      WRITE (ERROUT,  5)                                                ERRU1360
   5  FORMAT (14H0COMPLEX STACK)                                        ERRU1380
      CALL A9RNTC(CMSTAK, LNG(5), ERROUT, NCOL, WR, DR)                 ERRU1400
C                                                                       ERRU1420
      RETURN                                                            ERRU1440
      END                                                               ERRU1460
      SUBROUTINE A9RNTC(A, NITEMS, IOUT, MCOL, W, D)                    A9NC0000
C                                                                       A9NC0020
C  THIS IS THE DOCUMENTED ROUTINE APRNTC, BUT WITHOUT THE CALLS TO      A9NC0040
C  SETERR- BECAUSE IT IS CALLED BY SETERR.                              A9NC0060
C                                                                       A9NC0080
C  THIS SUBROUTINE PRINTS OUT NITEMS FROM THE COMPLEX ARRAY, A, ON      A9NC0100
C  OUTPUT UNIT IOUT, USING A MAXIMUM OF MCOL PRINT SPACES.              A9NC0120
C  THE OUTPUT FORMAT IS 2(1PEW.D).                                      A9NC0140
C  THE PROGRAM PUTS AS MANY VALUES ON A LINE AS POSSIBLE.               A9NC0160
C  W SHOULD BE INPUT AS THE ACTUAL WIDTH +1 FOR A SPACE BETWEEN VALUES. A9NC0180
C                                                                       A9NC0200
C  DUPLICATE LINES ARE NOT ALL PRINTED, BUT ARE INDICATED BY ASTERISKS. A9NC0220
C                                                                       A9NC0240
C  WRITTEN BY DAN WARNER, REVISED BY PHYL FOX, OCTOBER 21, 1982.        A9NC0260
C                                                                       A9NC0280
C  THE LINE WIDTH IS COMPUTED AS THE MINIMUM OF THE INPUT MCOL AND 160. A9NC0300
C  IF THE LINE WIDTH IS TO BE INCREASED ABOVE 160, THE BUFFERS LINE()   A9NC0320
C  AND LAST(), WHICH THE VALUES TO BE PRINTED ON ONE LINE, MUST         A9NC0340
C  BE DIMENSIONED ACCORDINGLY.                                          A9NC0360
C                                                                       A9NC0380
C  INPUT PARAMETERS -                                                   A9NC0400
C                                                                       A9NC0420
C    A        - THE START OF THE COMPLEX ARRAY TO BE PRINTED            A9NC0440
C                                                                       A9NC0460
C    NITEMS   - THE NUMBER OF ITEMS TO BE PRINTED                       A9NC0480
C                                                                       A9NC0500
C    IOUT     - THE OUTPUT UNIT FOR PRINTING                            A9NC0520
C                                                                       A9NC0540
C    MCOL     - THE NUMBER OF SPACES ACROSS THE LINE                    A9NC0560
C                                                                       A9NC0580
C    W        - THE WIDTH OF THE PRINTED VALUE (1PEW.D)                 A9NC0600
C                                                                       A9NC0620
C    D        - THE NUMBER OF DIGITS AFTER THE DECIMAL POINT (1PEW.D)   A9NC0640
C                                                                       A9NC0660
C                                                                       A9NC0680
C  ERROR STATES - NONE.  LOWER LEVEL ROUTINE CALLED BY                  A9NC0700
C  SETERR, SO IT CANNOT CALL SETERR.                                    A9NC0720
C                                                                       A9NC0740
      INTEGER  NITEMS, IOUT, MCOL, W, D                                 A9NC0760
C/R                                                                     A9NC0780
C     REAL A(2,NITEMS)                                                  A9NC0800
C/C                                                                     A9NC0820
      COMPLEX  A(NITEMS)                                                A9NC0840
C/                                                                      A9NC0860
C                                                                       A9NC0880
      INTEGER  MAX0, MIN0, WW, DD, EMIN, EMAX,                          A9NC0900
     1         EXPENT, I1MACH, ICEIL, IABS, I10WID                      A9NC0920
C/6S                                                                    A9NC0940
C     INTEGER  IFMT1(20), IFMT2(18), BLANK, STAR                        A9NC0960
C     INTEGER IFMT1C(20), IFMT2C(18)                                    A9NC0980
C     EQUIVALENCE (IFMT1(1),IFMT1C(1)), (IFMT2(1),IFMT2C(1))            A9NC1000
C/7S                                                                    A9NC1020
      CHARACTER*1  IFMT1(20), IFMT2(18), BLANK, STAR                    A9NC1040
      CHARACTER*20 IFMT1C                                               A9NC1060
      CHARACTER*18 IFMT2C                                               A9NC1080
      EQUIVALENCE (IFMT1(1),IFMT1C), (IFMT2(1),IFMT2C)                  A9NC1100
C/                                                                      A9NC1120
      INTEGER  INDW, NCOL, COUNT, I, J, K, ILINE, ILAST                 A9NC1140
      LOGICAL  DUP                                                      A9NC1160
C/R                                                                     A9NC1180
C     REAL LINE(2,18), LAST(2,18)                                       A9NC1200
C/C                                                                     A9NC1220
      COMPLEX  LINE(18), LAST(18)                                       A9NC1240
C/                                                                      A9NC1260
      REAL  LOGETA                                                      A9NC1280
C                                                                       A9NC1300
C/6S                                                                    A9NC1320
C     DATA BLANK/1H /, STAR/1H*/, INDW/7/, EXPENT/0/                    A9NC1340
C/7S                                                                    A9NC1360
      DATA BLANK/' '/, STAR/'*'/, INDW/7/, EXPENT/0/                    A9NC1380
C/                                                                      A9NC1400
C                                                                       A9NC1420
C  IFMT1 IS FOR THE ASTERISK LINES- IFMT2 FOR THE DATA LINES            A9NC1440
C                                                                       A9NC1460
C/6S                                                                    A9NC1480
C     DATA IFMT1( 1) /1H(/,  IFMT2( 1) /1H(/                            A9NC1500
C     DATA IFMT1( 2) /1H1/,  IFMT2( 2) /1H1/                            A9NC1520
C     DATA IFMT1( 3) /1HA/,  IFMT2( 3) /1HA/                            A9NC1540
C     DATA IFMT1( 4) /1H1/,  IFMT2( 4) /1H1/                            A9NC1560
C     DATA IFMT1( 5) /1H,/,  IFMT2( 5) /1H,/                            A9NC1580
C     DATA IFMT1( 6) /1H5/,  IFMT2( 6) /1HI/                            A9NC1600
C     DATA IFMT1( 7) /1HX/,  IFMT2( 7) /1H7/                            A9NC1620
C     DATA IFMT1( 8) /1H,/,  IFMT2( 8) /1H,/                            A9NC1640
C     DATA IFMT1( 9) /1H2/,  IFMT2( 9) /1H1/                            A9NC1660
C     DATA IFMT1(10) /1HA/,  IFMT2(10) /1HP/                            A9NC1680
C     DATA IFMT1(11) /1H1/,  IFMT2(11) /1H /                            A9NC1700
C     DATA IFMT1(12) /1H,/,  IFMT2(12) /1HE/                            A9NC1720
C     DATA IFMT1(13) /1H /,  IFMT2(13) /1H /                            A9NC1740
C     DATA IFMT1(14) /1H /,  IFMT2(14) /1H /                            A9NC1760
C     DATA IFMT1(15) /1HX/,  IFMT2(15) /1H./                            A9NC1780
C     DATA IFMT1(16) /1H,/,  IFMT2(16) /1H /                            A9NC1800
C     DATA IFMT1(17) /1H2/,  IFMT2(17) /1H /                            A9NC1820
C     DATA IFMT1(18) /1HA/,  IFMT2(18) /1H)/                            A9NC1840
C     DATA IFMT1(19) /1H1/                                              A9NC1860
C     DATA IFMT1(20) /1H)/                                              A9NC1880
C/7S                                                                    A9NC1900
      DATA IFMT1( 1) /'('/,  IFMT2( 1) /'('/                            A9NC1920
      DATA IFMT1( 2) /'1'/,  IFMT2( 2) /'1'/                            A9NC1940
      DATA IFMT1( 3) /'A'/,  IFMT2( 3) /'A'/                            A9NC1960
      DATA IFMT1( 4) /'1'/,  IFMT2( 4) /'1'/                            A9NC1980
      DATA IFMT1( 5) /','/,  IFMT2( 5) /','/                            A9NC2000
      DATA IFMT1( 6) /'5'/,  IFMT2( 6) /'I'/                            A9NC2020
      DATA IFMT1( 7) /'X'/,  IFMT2( 7) /'7'/                            A9NC2040
      DATA IFMT1( 8) /','/,  IFMT2( 8) /','/                            A9NC2060
      DATA IFMT1( 9) /'2'/,  IFMT2( 9) /'1'/                            A9NC2080
      DATA IFMT1(10) /'A'/,  IFMT2(10) /'P'/                            A9NC2100
      DATA IFMT1(11) /'1'/,  IFMT2(11) /' '/                            A9NC2120
      DATA IFMT1(12) /','/,  IFMT2(12) /'E'/                            A9NC2140
      DATA IFMT1(13) /' '/,  IFMT2(13) /' '/                            A9NC2160
      DATA IFMT1(14) /' '/,  IFMT2(14) /' '/                            A9NC2180
      DATA IFMT1(15) /'X'/,  IFMT2(15) /'.'/                            A9NC2200
      DATA IFMT1(16) /','/,  IFMT2(16) /' '/                            A9NC2220
      DATA IFMT1(17) /'2'/,  IFMT2(17) /' '/                            A9NC2240
      DATA IFMT1(18) /'A'/,  IFMT2(18) /')'/                            A9NC2260
      DATA IFMT1(19) /'1'/                                              A9NC2280
      DATA IFMT1(20) /')'/                                              A9NC2300
C/                                                                      A9NC2320
C                                                                       A9NC2340
C     EXPENT IS USED AS A FIRST-TIME SWITCH TO SIGNAL IF THE            A9NC2360
C     MACHINE-VALUE CONSTANTS HAVE BEEN COMPUTED.                       A9NC2380
C                                                                       A9NC2400
      IF (EXPENT .GT. 0) GO TO 10                                       A9NC2420
         LOGETA = ALOG10(FLOAT(I1MACH(10)))                             A9NC2440
         EMIN   = ICEIL(LOGETA*FLOAT(IABS(I1MACH(12)-1)))               A9NC2460
         EMAX   = ICEIL(LOGETA*FLOAT(I1MACH(13)))                       A9NC2480
         EXPENT = I10WID(MAX0(EMIN, EMAX))                              A9NC2500
C                                                                       A9NC2520
C     COMPUTE THE FORMATS.                                              A9NC2540
C                                                                       A9NC2560
   10 WW = MIN0(99, MAX0(W, 5+EXPENT))                                  A9NC2580
      CALL S88FMT(2, WW, IFMT2(13))                                     A9NC2600
      DD = MIN0(D, (WW-(5+EXPENT)))                                     A9NC2620
      CALL S88FMT(2, DD, IFMT2(16))                                     A9NC2640
C                                                                       A9NC2660
C  NCOL IS THE NUMBER OF VALUES TO BE PRINTED ACROSS THE LINE.          A9NC2680
C                                                                       A9NC2700
      NCOL = MAX0(1, MIN0(9, (MIN0(MCOL,160)-INDW)/(2*WW)))             A9NC2720
      CALL S88FMT(1, (2*NCOL), IFMT2(11))                               A9NC2740
      WW = WW-2                                                         A9NC2760
C                                                                       A9NC2780
C  THE ASTERISKS ARE POSITIONED RIGHT-ADJUSTED IN THE W-WIDTH SPACE.    A9NC2800
      CALL S88FMT(2, WW, IFMT1(13))                                     A9NC2820
C                                                                       A9NC2840
C  I COUNTS THE NUMBER OF ITEMS TO BE PRINTED,                          A9NC2860
C  J COUNTS THE NUMBER ON A GIVEN LINE,                                 A9NC2880
C  COUNT COUNTS THE NUMBER OF DUPLICATE LINES.                          A9NC2900
C                                                                       A9NC2920
      I = 1                                                             A9NC2940
      J = 0                                                             A9NC2960
      COUNT = 0                                                         A9NC2980
C                                                                       A9NC3000
C  THE LOGICAL OF THE FOLLOWING IS ROUGHLY THIS -                       A9NC3020
C  IF THERE ARE STILL MORE ITEMS TO BE PRINTED, A LINE-                 A9NC3040
C  FULL IS PUT INTO THE ARRAY, LINE.                                    A9NC3060
C  WHENEVER A LINE IS PRINTED OUT, IT IS ALSO STUFFED INTO              A9NC3080
C  THE ARRAY, LAST, TO COMPARE WITH THE NEXT ONE COMING IN              A9NC3100
C  TO CHECK FOR REPEAT OR DUPLICATED LINES.                             A9NC3120
C  ALSO WHENEVER A LINE IS WRITTEN OUT, THE DUPLICATION                 A9NC3140
C  COUNTER, COUNT, IS SET TO ONE.                                       A9NC3160
C  THE ONLY MILDLY TRICKY PART IS TO NOTE THAT COUNT HAS TO             A9NC3180
C  GO TO 3 BEFORE A LINE OF ASTERISKS IS PRINTED BECAUSE                A9NC3200
C  OF COURSE NO SUCH LINE IS PRINTED FOR JUST A PAIR OF                 A9NC3220
C  DUPLICATE LINES.                                                     A9NC3240
C                                                                       A9NC3260
C  ILINE IS PRINTED AS THE INDEX OF THE FIRST ARRAY ELEMENT             A9NC3280
C  IN A LINE.                                                           A9NC3300
C                                                                       A9NC3320
C                                                                       A9NC3340
   20 IF (I .GT. NITEMS)  GO TO 90                                      A9NC3360
        J = J+1                                                         A9NC3380
C/R                                                                     A9NC3400
C       LINE(1,J) = A(1,I)                                              A9NC3420
C       LINE(2,J) = A(2,I)                                              A9NC3440
C/C                                                                     A9NC3460
        LINE(J) = A(I)                                                  A9NC3480
C/                                                                      A9NC3500
        IF (J .EQ. 1) ILINE = I                                         A9NC3520
        IF (J .LT. NCOL .AND. I .LT. NITEMS) GO TO 80                   A9NC3540
          IF (COUNT .EQ. 0) GO TO 50                                    A9NC3560
            DUP = .TRUE.                                                A9NC3580
            DO 30 K=1,NCOL                                              A9NC3600
C/R                                                                     A9NC3620
C             IF (LAST(1,K) .NE. LINE(1,K)  .OR.                        A9NC3640
C    1            LAST(2,K) .NE. LINE(2,K))                             A9NC3660
C    2            DUP = .FALSE.                                         A9NC3680
C/C                                                                     A9NC3700
              IF (REAL(LAST(K)) .NE. REAL(LINE(K))  .OR.                A9NC3720
     1            AIMAG(LAST(K)) .NE. AIMAG(LINE(K)))                   A9NC3740
     2            DUP = .FALSE.                                         A9NC3760
C/                                                                      A9NC3780
   30       CONTINUE                                                    A9NC3800
            IF (I .EQ. NITEMS  .AND.  J .LT. NCOL) DUP = .FALSE.        A9NC3820
            IF (.NOT. DUP .AND. COUNT .EQ. 1) GO TO 50                  A9NC3840
              IF (.NOT. DUP) GO TO 40                                   A9NC3860
                COUNT = COUNT+1                                         A9NC3880
                IF (COUNT .EQ. 3) WRITE(IOUT, IFMT1C) BLANK,            A9NC3900
     1                                 STAR, STAR, STAR, STAR           A9NC3920
                IF (I .EQ. NITEMS)  GO TO 50                            A9NC3940
                  GO TO 70                                              A9NC3960
C/R                                                                     A9NC3980
C  40         WRITE(IOUT, IFMT2C) BLANK, ILAST, (LAST(1,K),             A9NC4000
C    1              LAST(2,K), K=1,NCOL)                                A9NC4020
C  50     WRITE(IOUT, IFMT2C) BLANK, ILINE, (LINE(1,K),                 A9NC4040
C    1              LINE(2,K), K=1,J)                                   A9NC4060
C/C                                                                     A9NC4080
   40         WRITE(IOUT, IFMT2C) BLANK, ILAST, (LAST(K), K=1,NCOL)     A9NC4100
   50     WRITE(IOUT, IFMT2C) BLANK, ILINE, (LINE(K), K=1,J)            A9NC4120
C/                                                                      A9NC4140
          COUNT = 1                                                     A9NC4160
          DO 60 K=1,NCOL                                                A9NC4180
C/R                                                                     A9NC4200
C           LAST(1,K) = LINE(1,K)                                       A9NC4220
C  60       LAST(2,K) = LINE(2,K)                                       A9NC4240
C/C                                                                     A9NC4260
   60       LAST(K) = LINE(K)                                           A9NC4280
C/                                                                      A9NC4300
   70     ILAST = ILINE                                                 A9NC4320
          J = 0                                                         A9NC4340
   80   I = I+1                                                         A9NC4360
        GO TO 20                                                        A9NC4380
   90 RETURN                                                            A9NC4400
      END                                                               A9NC4420
      SUBROUTINE A9RNTD(A, NITEMS, IOUT, MCOL, W, D)                    A9ND0000
C                                                                       A9ND0020
C  THIS IS THE DOCUMENTED ROUTINE APRNTD, BUT WITHOUT THE CALLS TO      A9ND0040
C  SETERR - BECAUSE IT IS CALLED BY SETERR.                             A9ND0060
C                                                                       A9ND0080
C  THIS SUBROUTINE PRINTS OUT NITEMS FROM THE DOUBLE PRECISION ARRAY,   A9ND0100
C  A, ON OUTPUT UNIT IOUT, USING A MAXIMUM OF MCOL PRINT SPACES.        A9ND0120
C  THE OUTPUT FORMAT IS 1PDW.D.                                         A9ND0140
C  THE PROGRAM PUTS AS MANY VALUES ON A LINE AS POSSIBLE.               A9ND0160
C  W SHOULD BE INPUT AS THE ACTUAL WIDTH +1 FOR A SPACE BETWEEN VALUES. A9ND0180
C                                                                       A9ND0200
C  DUPLICATE LINES ARE NOT ALL PRINTED, BUT ARE INDICATED BY ASTERISKS. A9ND0220
C                                                                       A9ND0240
C  WRITTEN BY DAN WARNER, REVISED BY PHYL FOX, OCTOBER 21, 1982.        A9ND0260
C                                                                       A9ND0280
C  THE LINE WIDTH IS COMPUTED AS THE MINIMUM OF THE INPUT MCOL AND 160. A9ND0300
C  IF THE LINE WIDTH IS TO BE INCREASED ABOVE 160, THE BUFFERS LINE()   A9ND0320
C  AND LAST(), WHICH THE VALUES TO BE PRINTED ON ONE LINE, MUST         A9ND0340
C  BE DIMENSIONED ACCORDINGLY.                                          A9ND0360
C                                                                       A9ND0380
C  INPUT PARAMETERS -                                                   A9ND0400
C                                                                       A9ND0420
C    A        - THE START OF THE DOUBLE PRECISION ARRAY TO BE PRINTED   A9ND0440
C                                                                       A9ND0460
C    NITEMS   - THE NUMBER OF ITEMS TO BE PRINTED                       A9ND0480
C                                                                       A9ND0500
C    IOUT     - THE OUTPUT UNIT FOR PRINTING                            A9ND0520
C                                                                       A9ND0540
C    MCOL     - THE NUMBER OF SPACES ACROSS THE LINE                    A9ND0560
C                                                                       A9ND0580
C    W        - THE WIDTH OF THE PRINTED VALUE (1PDW.D)                 A9ND0600
C                                                                       A9ND0620
C    D        - THE NUMBER OF DIGITS AFTER THE DECIMAL POINT (1PDW.D)   A9ND0640
C                                                                       A9ND0660
C                                                                       A9ND0680
C  ERROR STATES - NONE.  LOWER LEVEL ROUTINE CALLED BY                  A9ND0700
C  SETERR, SO IT CANNOT CALL SETERR.                                    A9ND0720
C                                                                       A9ND0740
      INTEGER  NITEMS, IOUT, MCOL, W, D                                 A9ND0760
      DOUBLE PRECISION  A(NITEMS)                                       A9ND0780
C                                                                       A9ND0800
      INTEGER  MAX0, MIN0, WW, DD, EMIN, EMAX,                          A9ND0820
     1         EXPENT, I1MACH, ICEIL, IABS, I10WID                      A9ND0840
C/6S                                                                    A9ND0860
C     INTEGER  IFMT1(20), IFMT1C(20), IFMT2(18), IFMT2C(18), BLANK, STARA9ND0880
C     EQUIVALENCE (IFMT1(1), IFMT1C(1)), (IFMT2(1), IFMT2C(1))          A9ND0900
C/7S                                                                    A9ND0920
      CHARACTER*1  IFMT1(20), IFMT2(18), BLANK, STAR                    A9ND0940
      CHARACTER*20 IFMT1C                                               A9ND0960
      CHARACTER*18 IFMT2C                                               A9ND0980
      EQUIVALENCE (IFMT1(1), IFMT1C), (IFMT2(1), IFMT2C)                A9ND1000
C/                                                                      A9ND1020
      INTEGER  INDW, NCOL, COUNT, I, J, K, ILINE, ILAST                 A9ND1040
      LOGICAL  DUP                                                      A9ND1060
      DOUBLE PRECISION  LINE(18), LAST(18)                              A9ND1080
      REAL  LOGETA                                                      A9ND1100
C                                                                       A9ND1120
C/6S                                                                    A9ND1140
C     DATA BLANK/1H /, STAR/1H*/, INDW/7/, EXPENT/0/                    A9ND1160
C/7S                                                                    A9ND1180
      DATA BLANK/' '/, STAR/'*'/, INDW/7/, EXPENT/0/                    A9ND1200
C/                                                                      A9ND1220
C                                                                       A9ND1240
C  IFMT1 IS FOR THE ASTERISK LINES- IFMT2 FOR THE DATA LINES            A9ND1260
C                                                                       A9ND1280
C/6S                                                                    A9ND1300
C     DATA IFMT1( 1) /1H(/,  IFMT2( 1) /1H(/                            A9ND1320
C     DATA IFMT1( 2) /1H1/,  IFMT2( 2) /1H1/                            A9ND1340
C     DATA IFMT1( 3) /1HA/,  IFMT2( 3) /1HA/                            A9ND1360
C     DATA IFMT1( 4) /1H1/,  IFMT2( 4) /1H1/                            A9ND1380
C     DATA IFMT1( 5) /1H,/,  IFMT2( 5) /1H,/                            A9ND1400
C     DATA IFMT1( 6) /1H5/,  IFMT2( 6) /1HI/                            A9ND1420
C     DATA IFMT1( 7) /1HX/,  IFMT2( 7) /1H7/                            A9ND1440
C     DATA IFMT1( 8) /1H,/,  IFMT2( 8) /1H,/                            A9ND1460
C     DATA IFMT1( 9) /1H2/,  IFMT2( 9) /1H1/                            A9ND1480
C     DATA IFMT1(10) /1HA/,  IFMT2(10) /1HP/                            A9ND1500
C     DATA IFMT1(11) /1H1/,  IFMT2(11) /1H /                            A9ND1520
C     DATA IFMT1(12) /1H,/,  IFMT2(12) /1HD/                            A9ND1540
C     DATA IFMT1(13) /1H /,  IFMT2(13) /1H /                            A9ND1560
C     DATA IFMT1(14) /1H /,  IFMT2(14) /1H /                            A9ND1580
C     DATA IFMT1(15) /1HX/,  IFMT2(15) /1H./                            A9ND1600
C     DATA IFMT1(16) /1H,/,  IFMT2(16) /1H /                            A9ND1620
C     DATA IFMT1(17) /1H2/,  IFMT2(17) /1H /                            A9ND1640
C     DATA IFMT1(18) /1HA/,  IFMT2(18) /1H)/                            A9ND1660
C     DATA IFMT1(19) /1H1/                                              A9ND1680
C     DATA IFMT1(20) /1H)/                                              A9ND1700
C/7S                                                                    A9ND1720
      DATA IFMT1( 1) /'('/,  IFMT2( 1) /'('/                            A9ND1740
      DATA IFMT1( 2) /'1'/,  IFMT2( 2) /'1'/                            A9ND1760
      DATA IFMT1( 3) /'A'/,  IFMT2( 3) /'A'/                            A9ND1780
      DATA IFMT1( 4) /'1'/,  IFMT2( 4) /'1'/                            A9ND1800
      DATA IFMT1( 5) /','/,  IFMT2( 5) /','/                            A9ND1820
      DATA IFMT1( 6) /'5'/,  IFMT2( 6) /'I'/                            A9ND1840
      DATA IFMT1( 7) /'X'/,  IFMT2( 7) /'7'/                            A9ND1860
      DATA IFMT1( 8) /','/,  IFMT2( 8) /','/                            A9ND1880
      DATA IFMT1( 9) /'2'/,  IFMT2( 9) /'1'/                            A9ND1900
      DATA IFMT1(10) /'A'/,  IFMT2(10) /'P'/                            A9ND1920
      DATA IFMT1(11) /'1'/,  IFMT2(11) /' '/                            A9ND1940
      DATA IFMT1(12) /','/,  IFMT2(12) /'D'/                            A9ND1960
      DATA IFMT1(13) /' '/,  IFMT2(13) /' '/                            A9ND1980
      DATA IFMT1(14) /' '/,  IFMT2(14) /' '/                            A9ND2000
      DATA IFMT1(15) /'X'/,  IFMT2(15) /'.'/                            A9ND2020
      DATA IFMT1(16) /','/,  IFMT2(16) /' '/                            A9ND2040
      DATA IFMT1(17) /'2'/,  IFMT2(17) /' '/                            A9ND2060
      DATA IFMT1(18) /'A'/,  IFMT2(18) /')'/                            A9ND2080
      DATA IFMT1(19) /'1'/                                              A9ND2100
      DATA IFMT1(20) /')'/                                              A9ND2120
C/                                                                      A9ND2140
C                                                                       A9ND2160
C     EXPENT IS USED AS A FIRST-TIME SWITCH TO SIGNAL IF THE            A9ND2180
C     MACHINE-VALUE CONSTANTS HAVE BEEN COMPUTED.                       A9ND2200
C                                                                       A9ND2220
      IF (EXPENT .GT. 0) GO TO 10                                       A9ND2240
         LOGETA = ALOG10(FLOAT(I1MACH(10)))                             A9ND2260
         EMIN = ICEIL(LOGETA*FLOAT(IABS(I1MACH(15)-1)))                 A9ND2280
         EMAX = ICEIL(LOGETA*FLOAT(I1MACH(16)))                         A9ND2300
         EXPENT = I10WID(MAX0(EMIN, EMAX))                              A9ND2320
C                                                                       A9ND2340
C     COMPUTE THE FORMATS.                                              A9ND2360
C                                                                       A9ND2380
   10 WW = MIN0(99, MAX0(W, 5+EXPENT))                                  A9ND2400
      CALL S88FMT(2, WW, IFMT2(13))                                     A9ND2420
      DD = MIN0(D, (WW-(5+EXPENT)))                                     A9ND2440
      CALL S88FMT(2, DD, IFMT2(16))                                     A9ND2460
C                                                                       A9ND2480
C  NCOL IS THE NUMBER OF VALUES TO BE PRINTED ACROSS THE LINE.          A9ND2500
C                                                                       A9ND2520
      NCOL = MAX0(1, MIN0(9, (MIN0(MCOL,160)-INDW)/WW))                 A9ND2540
      CALL S88FMT(1, NCOL, IFMT2(11))                                   A9ND2560
      WW = WW-2                                                         A9ND2580
C  THE ASTERISKS ARE POSITIONED RIGHT-ADJUSTED IN THE W-WIDTH SPACE.    A9ND2600
      CALL S88FMT(2, WW, IFMT1(13))                                     A9ND2620
C                                                                       A9ND2640
C  I COUNTS THE NUMBER OF ITEMS TO BE PRINTED,                          A9ND2660
C  J COUNTS THE NUMBER ON A GIVEN LINE,                                 A9ND2680
C  COUNT COUNTS THE NUMBER OF DUPLICATE LINES.                          A9ND2700
C                                                                       A9ND2720
      I = 1                                                             A9ND2740
      J = 0                                                             A9ND2760
      COUNT = 0                                                         A9ND2780
C                                                                       A9ND2800
C  THE LOGICAL OF THE FOLLOWING IS ROUGHLY THIS -                       A9ND2820
C  IF THERE ARE STILL MORE ITEMS TO BE PRINTED, A LINE-                 A9ND2840
C  FULL IS PUT INTO THE ARRAY, LINE.                                    A9ND2860
C  WHENEVER A LINE IS PRINTED OUT, IT IS ALSO STUFFED INTO              A9ND2880
C  THE ARRAY, LAST, TO COMPARE WITH THE NEXT ONE COMING IN              A9ND2900
C  TO CHECK FOR REPEAT OR DUPLICATED LINES.                             A9ND2920
C  ALSO WHENEVER A LINE IS WRITTEN OUT, THE DUPLICATION                 A9ND2940
C  COUNTER, COUNT, IS SET TO ONE.                                       A9ND2960
C  THE ONLY MILDLY TRICKY PART IS TO NOTE THAT COUNT HAS TO             A9ND2980
C  GO TO 3 BEFORE A LINE OF ASTERISKS IS PRINTED BECAUSE                A9ND3000
C  OF COURSE NO SUCH LINE IS PRINTED FOR JUST A PAIR OF                 A9ND3020
C  DUPLICATE LINES.                                                     A9ND3040
C                                                                       A9ND3060
C  ILINE IS PRINTED AS THE INDEX OF THE FIRST ARRAY ELEMENT             A9ND3080
C  IN A LINE.                                                           A9ND3100
C                                                                       A9ND3120
   20 IF (I .GT. NITEMS)  GO TO 90                                      A9ND3140
        J = J+1                                                         A9ND3160
        LINE(J) = A(I)                                                  A9ND3180
        IF (J .EQ. 1) ILINE = I                                         A9ND3200
        IF (J .LT. NCOL .AND. I .LT. NITEMS) GO TO 80                   A9ND3220
          IF (COUNT .EQ. 0) GO TO 50                                    A9ND3240
            DUP = .TRUE.                                                A9ND3260
            DO 30 K=1,NCOL                                              A9ND3280
   30         IF (LAST(K) .NE. LINE(K)) DUP = .FALSE.                   A9ND3300
            IF (I .EQ. NITEMS  .AND.  J .LT. NCOL) DUP = .FALSE.        A9ND3320
            IF (.NOT. DUP .AND. COUNT .EQ. 1) GO TO 50                  A9ND3340
              IF (.NOT. DUP) GO TO 40                                   A9ND3360
                COUNT = COUNT+1                                         A9ND3380
                IF (COUNT .EQ. 3) WRITE(IOUT, IFMT1C) BLANK,            A9ND3400
     1                                 STAR, STAR, STAR, STAR           A9ND3420
                IF (I .EQ. NITEMS)  GO TO 50                            A9ND3440
                  GO TO 70                                              A9ND3460
   40         WRITE(IOUT, IFMT2C) BLANK, ILAST, (LAST(K), K=1,NCOL)     A9ND3480
   50     WRITE(IOUT, IFMT2C) BLANK, ILINE, (LINE(K), K=1,J)            A9ND3500
          COUNT = 1                                                     A9ND3520
          DO 60 K=1,NCOL                                                A9ND3540
   60       LAST(K) = LINE(K)                                           A9ND3560
   70     ILAST = ILINE                                                 A9ND3580
          J = 0                                                         A9ND3600
   80   I = I+1                                                         A9ND3620
        GO TO 20                                                        A9ND3640
   90 RETURN                                                            A9ND3660
      END                                                               A9ND3680
      SUBROUTINE A9RNTI(A, NITEMS, IOUT, MCOL, W)                       A9NI0000
C                                                                       A9NI0020
C  THIS IS THE DOCUMENTED ROUTINE APRNTI, BUT WITHOUT THE CALLS TO      A9NI0040
C  SETERR - BECAUSE IT IS CALLED BY SETERR.                             A9NI0060
C                                                                       A9NI0080
C  THIS SUBROUTINE PRINTS OUT NITEMS FROM THE INTEGER ARRAY, A, ON      A9NI0100
C  OUTPUT UNIT IOUT, USING A MAXIMUM OF MCOL PRINT SPACES.              A9NI0120
C  THE OUTPUT FORMAT IS IW.                                             A9NI0140
C  THE PROGRAM PUTS AS MANY VALUES ON A LINE AS POSSIBLE.               A9NI0160
C  W SHOULD BE INPUT AS THE ACTUAL WIDTH +1 FOR A SPACE BETWEEN VALUES. A9NI0180
C                                                                       A9NI0200
C  DUPLICATE LINES ARE NOT ALL PRINTED, BUT ARE INDICATED BY ASTERISKS. A9NI0220
C                                                                       A9NI0240
C  WRITTEN BY DAN WARNER, REVISED BY PHYL FOX, OCTOBER 21, 1982.        A9NI0260
C                                                                       A9NI0280
C  THE LINE WIDTH IS COMPUTED AS THE MINIMUM OF THE INPUT MCOL AND 160. A9NI0300
C  IF THE LINE WIDTH IS TO BE INCREASED ABOVE 160, THE BUFFERS LINE()   A9NI0320
C  AND LAST(), WHICH THE VALUES TO BE PRINTED ON ONE LINE, MUST         A9NI0340
C  BE DIMENSIONED ACCORDINGLY.                                          A9NI0360
C                                                                       A9NI0380
C  INPUT PARAMETERS -                                                   A9NI0400
C                                                                       A9NI0420
C    A        - THE START OF THE INTEGER ARRAY TO BE PRINTED            A9NI0440
C                                                                       A9NI0460
C    NITEMS   - THE NUMBER OF ITEMS TO BE PRINTED                       A9NI0480
C                                                                       A9NI0500
C    IOUT     - THE OUTPUT UNIT FOR PRINTING                            A9NI0520
C                                                                       A9NI0540
C    MCOL     - THE NUMBER OF SPACES ACROSS THE LINE                    A9NI0560
C                                                                       A9NI0580
C    W        - THE WIDTH OF THE PRINTED VALUE (IW)                     A9NI0600
C                                                                       A9NI0620
C                                                                       A9NI0640
C  ERROR STATES - NONE. LOWER LEVEL ROUTINE CALLED BY                   A9NI0660
C  SETERR, SO IT CANNOT CALL SETERR.                                    A9NI0680
C                                                                       A9NI0700
C                                                                       A9NI0720
      INTEGER  NITEMS, IOUT, MCOL, W                                    A9NI0740
      INTEGER  A(NITEMS)                                                A9NI0760
C                                                                       A9NI0780
      INTEGER  MAX0, MIN0, WW                                           A9NI0800
C/6S                                                                    A9NI0820
C     INTEGER  IFMT1(20), IFMT1C(20), IFMT2(14), IFMT2C(14), BLANK, STARA9NI0840
C     EQUIVALENCE (IFMT1(1), IFMT1C(1)), (IFMT2(1), IFMT2C(1))          A9NI0860
C/7S                                                                    A9NI0880
      CHARACTER*1  IFMT1(20), IFMT2(14), BLANK, STAR                    A9NI0900
      CHARACTER*20 IFMT1C                                               A9NI0920
      CHARACTER*14 IFMT2C                                               A9NI0940
      EQUIVALENCE (IFMT1(1), IFMT1C), (IFMT2(1), IFMT2C)                A9NI0960
C/                                                                      A9NI0980
      INTEGER  INDW, NCOL, COUNT, I, J, K, ILINE, ILAST                 A9NI1000
      LOGICAL  DUP                                                      A9NI1020
      INTEGER  LINE(40), LAST(40)                                       A9NI1040
C                                                                       A9NI1060
C/6S                                                                    A9NI1080
C     DATA BLANK/1H /, STAR/1H*/, INDW/7/                               A9NI1100
C/7S                                                                    A9NI1120
      DATA BLANK/' '/, STAR/'*'/, INDW/7/                               A9NI1140
C/                                                                      A9NI1160
C                                                                       A9NI1180
C  IFMT1 IS FOR THE ASTERISK LINES- IFMT2 FOR THE DATA LINES            A9NI1200
C                                                                       A9NI1220
C/6S                                                                    A9NI1240
C     DATA IFMT1( 1) /1H(/,  IFMT2( 1) /1H(/                            A9NI1260
C     DATA IFMT1( 2) /1H1/,  IFMT2( 2) /1H1/                            A9NI1280
C     DATA IFMT1( 3) /1HA/,  IFMT2( 3) /1HA/                            A9NI1300
C     DATA IFMT1( 4) /1H1/,  IFMT2( 4) /1H1/                            A9NI1320
C     DATA IFMT1( 5) /1H,/,  IFMT2( 5) /1H,/                            A9NI1340
C     DATA IFMT1( 6) /1H5/,  IFMT2( 6) /1HI/                            A9NI1360
C     DATA IFMT1( 7) /1HX/,  IFMT2( 7) /1H7/                            A9NI1380
C     DATA IFMT1( 8) /1H,/,  IFMT2( 8) /1H,/                            A9NI1400
C     DATA IFMT1( 9) /1H2/,  IFMT2( 9) /1H /                            A9NI1420
C     DATA IFMT1(10) /1HA/,  IFMT2(10) /1H /                            A9NI1440
C     DATA IFMT1(11) /1H1/,  IFMT2(11) /1HI/                            A9NI1460
C     DATA IFMT1(12) /1H,/,  IFMT2(12) /1H /                            A9NI1480
C     DATA IFMT1(13) /1H /,  IFMT2(13) /1H /                            A9NI1500
C     DATA IFMT1(14) /1H /,  IFMT2(14) /1H)/                            A9NI1520
C     DATA IFMT1(15) /1HX/                                              A9NI1540
C     DATA IFMT1(16) /1H,/                                              A9NI1560
C     DATA IFMT1(17) /1H2/                                              A9NI1580
C     DATA IFMT1(18) /1HA/                                              A9NI1600
C     DATA IFMT1(19) /1H1/                                              A9NI1620
C     DATA IFMT1(20) /1H)/                                              A9NI1640
C/7S                                                                    A9NI1660
      DATA IFMT1( 1) /'('/,  IFMT2( 1) /'('/                            A9NI1680
      DATA IFMT1( 2) /'1'/,  IFMT2( 2) /'1'/                            A9NI1700
      DATA IFMT1( 3) /'A'/,  IFMT2( 3) /'A'/                            A9NI1720
      DATA IFMT1( 4) /'1'/,  IFMT2( 4) /'1'/                            A9NI1740
      DATA IFMT1( 5) /','/,  IFMT2( 5) /','/                            A9NI1760
      DATA IFMT1( 6) /'5'/,  IFMT2( 6) /'I'/                            A9NI1780
      DATA IFMT1( 7) /'X'/,  IFMT2( 7) /'7'/                            A9NI1800
      DATA IFMT1( 8) /','/,  IFMT2( 8) /','/                            A9NI1820
      DATA IFMT1( 9) /'2'/,  IFMT2( 9) /' '/                            A9NI1840
      DATA IFMT1(10) /'A'/,  IFMT2(10) /' '/                            A9NI1860
      DATA IFMT1(11) /'1'/,  IFMT2(11) /'I'/                            A9NI1880
      DATA IFMT1(12) /','/,  IFMT2(12) /' '/                            A9NI1900
      DATA IFMT1(13) /' '/,  IFMT2(13) /' '/                            A9NI1920
      DATA IFMT1(14) /' '/,  IFMT2(14) /')'/                            A9NI1940
      DATA IFMT1(15) /'X'/                                              A9NI1960
      DATA IFMT1(16) /','/                                              A9NI1980
      DATA IFMT1(17) /'2'/                                              A9NI2000
      DATA IFMT1(18) /'A'/                                              A9NI2020
      DATA IFMT1(19) /'1'/                                              A9NI2040
      DATA IFMT1(20) /')'/                                              A9NI2060
C/                                                                      A9NI2080
C                                                                       A9NI2100
C     COMPUTE THE FORMATS.                                              A9NI2120
C                                                                       A9NI2140
        WW = MIN0(99, MAX0(W, 2))                                       A9NI2160
        CALL S88FMT(2, WW, IFMT2(12))                                   A9NI2180
        NCOL = MAX0(1, MIN0(99, (MIN0(MCOL,160) - INDW)/WW))            A9NI2200
        CALL S88FMT(2, NCOL, IFMT2(9))                                  A9NI2220
        WW = WW-2                                                       A9NI2240
        CALL S88FMT(2, WW, IFMT1(13))                                   A9NI2260
C                                                                       A9NI2280
C  THE ASTERISKS ARE POSITIONED RIGHT-ADJUSTED IN THE W-WIDTH SPACE.    A9NI2300
      CALL S88FMT(2, WW, IFMT1(13))                                     A9NI2320
C                                                                       A9NI2340
C  I COUNTS THE NUMBER OF ITEMS TO BE PRINTED,                          A9NI2360
C  J COUNTS THE NUMBER ON A GIVEN LINE,                                 A9NI2380
C  COUNT COUNTS THE NUMBER OF DUPLICATE LINES.                          A9NI2400
C                                                                       A9NI2420
  10  I = 1                                                             A9NI2440
      J = 0                                                             A9NI2460
      COUNT = 0                                                         A9NI2480
C                                                                       A9NI2500
C  THE LOGICAL OF THE FOLLOWING IS ROUGHLY THIS -                       A9NI2520
C  IF THERE ARE STILL MORE ITEMS TO BE PRINTED, A LINE-                 A9NI2540
C  FULL IS PUT INTO THE ARRAY, LINE.                                    A9NI2560
C  WHENEVER A LINE IS PRINTED OUT, IT IS ALSO STUFFED INTO              A9NI2580
C  THE ARRAY, LAST, TO COMPARE WITH THE NEXT ONE COMING IN              A9NI2600
C  TO CHECK FOR REPEAT OR DUPLICATED LINES.                             A9NI2620
C  ALSO WHENEVER A LINE IS WRITTEN OUT, THE DUPLICATION                 A9NI2640
C  COUNTER, COUNT, IS SET TO ONE.                                       A9NI2660
C  THE ONLY MILDLY TRICKY PART IS TO NOTE THAT COUNT HAS TO             A9NI2680
C  GO TO 3 BEFORE A LINE OF ASTERISKS IS PRINTED BECAUSE                A9NI2700
C  OF COURSE NO SUCH LINE IS PRINTED FOR JUST A PAIR OF                 A9NI2720
C  DUPLICATE LINES.                                                     A9NI2740
C                                                                       A9NI2760
C  ILINE IS PRINTED AS THE INDEX OF THE FIRST ARRAY ELEMENT             A9NI2780
C  IN A LINE.                                                           A9NI2800
C                                                                       A9NI2820
   20 IF (I .GT. NITEMS)  GO TO 90                                      A9NI2840
        J = J+1                                                         A9NI2860
        LINE(J) = A(I)                                                  A9NI2880
        IF (J .EQ. 1) ILINE = I                                         A9NI2900
        IF (J .LT. NCOL .AND. I .LT. NITEMS) GO TO 80                   A9NI2920
          IF (COUNT .EQ. 0) GO TO 50                                    A9NI2940
            DUP = .TRUE.                                                A9NI2960
            DO 30 K=1,NCOL                                              A9NI2980
   30         IF (LAST(K) .NE. LINE(K)) DUP = .FALSE.                   A9NI3000
            IF (I .EQ. NITEMS  .AND.  J .LT. NCOL) DUP = .FALSE.        A9NI3020
            IF (.NOT. DUP .AND. COUNT .EQ. 1) GO TO 50                  A9NI3040
              IF (.NOT. DUP) GO TO 40                                   A9NI3060
                COUNT = COUNT+1                                         A9NI3080
                IF (COUNT .EQ. 3) WRITE(IOUT, IFMT1C) BLANK,            A9NI3100
     1                                 STAR, STAR, STAR, STAR           A9NI3120
                IF (I .EQ. NITEMS)  GO TO 50                            A9NI3140
                  GO TO 70                                              A9NI3160
   40         WRITE(IOUT, IFMT2C) BLANK, ILAST, (LAST(K), K=1,NCOL)     A9NI3180
   50     WRITE(IOUT, IFMT2C) BLANK, ILINE, (LINE(K), K=1,J)            A9NI3200
          COUNT = 1                                                     A9NI3220
          DO 60 K=1,NCOL                                                A9NI3240
   60       LAST(K) = LINE(K)                                           A9NI3260
   70     ILAST = ILINE                                                 A9NI3280
          J = 0                                                         A9NI3300
   80   I = I+1                                                         A9NI3320
        GO TO 20                                                        A9NI3340
   90 RETURN                                                            A9NI3360
      END                                                               A9NI3380
      SUBROUTINE A9RNTL(A, NITEMS, IOUT, MCOL)                          A9NL0000
C                                                                       A9NL0020
C  THIS IS THE DOCUMENTED ROUTINE APRNTL, BUT WITHOUT THE CALLS TO      A9NL0040
C  SETERR - BECAUSE IT IS CALLED BY SETERR.                             A9NL0060
C                                                                       A9NL0080
C  THIS SUBROUTINE PRINTS OUT NITEMS FROM THE LOGICAL ARRAY, A, ON      A9NL0100
C  OUTPUT UNIT IOUT, USING A MAXIMUM OF MCOL PRINT SPACES.              A9NL0120
C  THE T OR F VALUES ARE PRINTED RIGHT-ADJUSTED IN A FIELD OF WIDTH 4.  A9NL0140
C                                                                       A9NL0160
C  DUPLICATE LINES ARE NOT ALL PRINTED, BUT ARE INDICATED BY ASTERISKS. A9NL0180
C                                                                       A9NL0200
C  WRITTEN BY DAN WARNER, REVISED BY PHYL FOX, OCTOBER 21, 1982.        A9NL0220
C                                                                       A9NL0240
C  THE LINE WIDTH IS COMPUTED AS THE MINIMUM OF THE INPUT MCOL AND 160. A9NL0260
C  IF THE LINE WIDTH IS TO BE INCREASED ABOVE 160, THE BUFFERS LINE()   A9NL0280
C  AND LAST(), WHICH THE VALUES TO BE PRINTED ON ONE LINE, MUST         A9NL0300
C  BE DIMENSIONED ACCORDINGLY.                                          A9NL0320
C                                                                       A9NL0340
C  INPUT PARAMETERS -                                                   A9NL0360
C                                                                       A9NL0380
C    A        - THE START OF THE LOGICAL ARRAY TO BE PRINTED            A9NL0400
C                                                                       A9NL0420
C    NITEMS   - THE NUMBER OF ITEMS TO BE PRINTED                       A9NL0440
C                                                                       A9NL0460
C    IOUT     - THE OUTPUT UNIT FOR PRINTING                            A9NL0480
C                                                                       A9NL0500
C    MCOL     - THE NUMBER OF SPACES ACROSS THE LINE                    A9NL0520
C                                                                       A9NL0540
C                                                                       A9NL0560
C  ERROR STATES - NONE.  LOWER LEVEL ROUTINE CALLED BY                  A9NL0580
C  SETERR, SO IT CANNOT CALL SETERR.                                    A9NL0600
C                                                                       A9NL0620
C                                                                       A9NL0640
      INTEGER  NITEMS, IOUT, MCOL                                       A9NL0660
      LOGICAL  A(NITEMS)                                                A9NL0680
C                                                                       A9NL0700
      INTEGER  MAX0, MIN0                                               A9NL0720
C/6S                                                                    A9NL0740
C     INTEGER  IFMT1(20), IFMT1C(20), IFMT2(19), IFMT2C(19), BLANK,     A9NL0760
C    1         STAR, TCHAR, FCHAR                                       A9NL0780
C     INTEGER  LINE(40), LAST(40)                                       A9NL0800
C     EQUIVALENCE (IFMT1(1), IFMT1C(1)), (IFMT2(1), IFMT2C(1))          A9NL0820
C/7S                                                                    A9NL0840
      CHARACTER*1  IFMT1(20), IFMT2(19), BLANK, STAR, TCHAR, FCHAR      A9NL0860
      CHARACTER*20 IFMT1C                                               A9NL0880
      CHARACTER*19 IFMT2C                                               A9NL0900
      EQUIVALENCE (IFMT1(1), IFMT1C), (IFMT2(1), IFMT2C)                A9NL0920
      CHARACTER*1  LINE(40), LAST(40)                                   A9NL0940
C/                                                                      A9NL0960
      INTEGER  INDW, NCOL, COUNT, I, J, K, ILINE, ILAST                 A9NL0980
      LOGICAL  DUP                                                      A9NL1000
C                                                                       A9NL1020
C/6S                                                                    A9NL1040
C     DATA BLANK/1H /, STAR/1H*/, TCHAR/1HT/, FCHAR/1HF/, INDW/7/       A9NL1060
C/7S                                                                    A9NL1080
      DATA BLANK/' '/, STAR/'*'/, TCHAR/'T'/, FCHAR/'F'/, INDW/7/       A9NL1100
C/                                                                      A9NL1120
C                                                                       A9NL1140
C                                                                       A9NL1160
C  IFMT1 IS FOR THE ASTERISK LINES- IFMT2 FOR THE DATA LINES            A9NL1180
C                                                                       A9NL1200
C/6S                                                                    A9NL1220
C     DATA IFMT1( 1) /1H(/,  IFMT2( 1) /1H(/                            A9NL1240
C     DATA IFMT1( 2) /1H1/,  IFMT2( 2) /1H1/                            A9NL1260
C     DATA IFMT1( 3) /1HA/,  IFMT2( 3) /1HA/                            A9NL1280
C     DATA IFMT1( 4) /1H1/,  IFMT2( 4) /1H1/                            A9NL1300
C     DATA IFMT1( 5) /1H,/,  IFMT2( 5) /1H,/                            A9NL1320
C     DATA IFMT1( 6) /1H5/,  IFMT2( 6) /1HI/                            A9NL1340
C     DATA IFMT1( 7) /1HX/,  IFMT2( 7) /1H7/                            A9NL1360
C     DATA IFMT1( 8) /1H,/,  IFMT2( 8) /1H,/                            A9NL1380
C     DATA IFMT1( 9) /1H2/,  IFMT2( 9) /1H /                            A9NL1400
C     DATA IFMT1(10) /1HA/,  IFMT2(10) /1H /                            A9NL1420
C     DATA IFMT1(11) /1H1/,  IFMT2(11) /1H(/                            A9NL1440
C     DATA IFMT1(12) /1H,/,  IFMT2(12) /1H3/                            A9NL1460
C     DATA IFMT1(13) /1H /,  IFMT2(13) /1HX/                            A9NL1480
C     DATA IFMT1(14) /1H2/,  IFMT2(14) /1H,/                            A9NL1500
C     DATA IFMT1(15) /1HX/,  IFMT2(15) /1H1/                            A9NL1520
C     DATA IFMT1(16) /1H,/,  IFMT2(16) /1HA/                            A9NL1540
C     DATA IFMT1(17) /1H2/,  IFMT2(17) /1H1/                            A9NL1560
C     DATA IFMT1(18) /1HA/,  IFMT2(18) /1H)/                            A9NL1580
C     DATA IFMT1(19) /1H1/,  IFMT2(19) /1H)/                            A9NL1600
C     DATA IFMT1(20) /1H)/                                              A9NL1620
C/7S                                                                    A9NL1640
      DATA IFMT1( 1) /'('/,  IFMT2( 1) /'('/                            A9NL1660
      DATA IFMT1( 2) /'1'/,  IFMT2( 2) /'1'/                            A9NL1680
      DATA IFMT1( 3) /'A'/,  IFMT2( 3) /'A'/                            A9NL1700
      DATA IFMT1( 4) /'1'/,  IFMT2( 4) /'1'/                            A9NL1720
      DATA IFMT1( 5) /','/,  IFMT2( 5) /','/                            A9NL1740
      DATA IFMT1( 6) /'5'/,  IFMT2( 6) /'I'/                            A9NL1760
      DATA IFMT1( 7) /'X'/,  IFMT2( 7) /'7'/                            A9NL1780
      DATA IFMT1( 8) /','/,  IFMT2( 8) /','/                            A9NL1800
      DATA IFMT1( 9) /'2'/,  IFMT2( 9) /' '/                            A9NL1820
      DATA IFMT1(10) /'A'/,  IFMT2(10) /' '/                            A9NL1840
      DATA IFMT1(11) /'1'/,  IFMT2(11) /'('/                            A9NL1860
      DATA IFMT1(12) /','/,  IFMT2(12) /'3'/                            A9NL1880
      DATA IFMT1(13) /' '/,  IFMT2(13) /'X'/                            A9NL1900
      DATA IFMT1(14) /'2'/,  IFMT2(14) /','/                            A9NL1920
      DATA IFMT1(15) /'X'/,  IFMT2(15) /'1'/                            A9NL1940
      DATA IFMT1(16) /','/,  IFMT2(16) /'A'/                            A9NL1960
      DATA IFMT1(17) /'2'/,  IFMT2(17) /'1'/                            A9NL1980
      DATA IFMT1(18) /'A'/,  IFMT2(18) /')'/                            A9NL2000
      DATA IFMT1(19) /'1'/,  IFMT2(19) /')'/                            A9NL2020
      DATA IFMT1(20) /')'/                                              A9NL2040
C/                                                                      A9NL2060
C                                                                       A9NL2080
C                                                                       A9NL2100
C  COMPUTE THE NUMBER OF FIELDS OF 4 ACROSS A LINE.                     A9NL2120
C                                                                       A9NL2140
      NCOL = MAX0(1, MIN0(99, (MIN0(MCOL,160)-INDW)/4))                 A9NL2160
C                                                                       A9NL2180
C  THE ASTERISKS ARE POSITIONED RIGHT-ADJUSTED IN THE 4-CHARACTER SPACE.A9NL2200
      CALL S88FMT(2, NCOL, IFMT2(9))                                    A9NL2220
C                                                                       A9NL2240
C  I COUNTS THE NUMBER OF ITEMS TO BE PRINTED,                          A9NL2260
C  J COUNTS THE NUMBER ON A GIVEN LINE,                                 A9NL2280
C  COUNT COUNTS THE NUMBER OF DUPLICATE LINES.                          A9NL2300
C                                                                       A9NL2320
  10  I = 1                                                             A9NL2340
      J = 0                                                             A9NL2360
      COUNT = 0                                                         A9NL2380
C                                                                       A9NL2400
C  THE LOGICAL OF THE FOLLOWING IS ROUGHLY THIS -                       A9NL2420
C  IF THERE ARE STILL MORE ITEMS TO BE PRINTED, A LINE-                 A9NL2440
C  FULL IS PUT INTO THE ARRAY, LINE.                                    A9NL2460
C  WHENEVER A LINE IS PRINTED OUT, IT IS ALSO STUFFED INTO              A9NL2480
C  THE ARRAY, LAST, TO COMPARE WITH THE NEXT ONE COMING IN              A9NL2500
C  TO CHECK FOR REPEAT OR DUPLICATED LINES.                             A9NL2520
C  ALSO WHENEVER A LINE IS WRITTEN OUT, THE DUPLICATION                 A9NL2540
C  COUNTER, COUNT, IS SET TO ONE.                                       A9NL2560
C  THE ONLY MILDLY TRICKY PART IS TO NOTE THAT COUNT HAS TO             A9NL2580
C  GO TO 3 BEFORE A LINE OF ASTERISKS IS PRINTED BECAUSE                A9NL2600
C  OF COURSE NO SUCH LINE IS PRINTED FOR JUST A PAIR OF                 A9NL2620
C  DUPLICATE LINES.                                                     A9NL2640
C                                                                       A9NL2660
C  ILINE IS PRINTED AS THE INDEX OF THE FIRST ARRAY ELEMENT             A9NL2680
C  IN A LINE.                                                           A9NL2700
C                                                                       A9NL2720
   20 IF (I .GT. NITEMS)  GO TO 90                                      A9NL2740
        J = J+1                                                         A9NL2760
        LINE(J) = FCHAR                                                 A9NL2780
        IF ( A(I) )  LINE(J) = TCHAR                                    A9NL2800
        IF (J .EQ. 1) ILINE = I                                         A9NL2820
        IF (J .LT. NCOL .AND. I .LT. NITEMS) GO TO 80                   A9NL2840
          IF (COUNT .EQ. 0) GO TO 50                                    A9NL2860
            DUP = .TRUE.                                                A9NL2880
            DO 30 K=1,NCOL                                              A9NL2900
   30         IF (LAST(K) .NE. LINE(K)) DUP = .FALSE.                   A9NL2920
            IF (I .EQ. NITEMS  .AND.  J .LT. NCOL) DUP = .FALSE.        A9NL2940
            IF (.NOT. DUP .AND. COUNT .EQ. 1) GO TO 50                  A9NL2960
              IF (.NOT. DUP) GO TO 40                                   A9NL2980
                COUNT = COUNT+1                                         A9NL3000
                IF (COUNT .EQ. 3) WRITE(IOUT, IFMT1C) BLANK,            A9NL3020
     1                                 STAR, STAR, STAR, STAR           A9NL3040
                IF (I .EQ. NITEMS)  GO TO 50                            A9NL3060
                  GO TO 70                                              A9NL3080
   40         WRITE(IOUT, IFMT2C) BLANK, ILAST, (LAST(K), K=1,NCOL)     A9NL3100
   50     WRITE(IOUT, IFMT2C) BLANK, ILINE, (LINE(K), K=1,J)            A9NL3120
          COUNT = 1                                                     A9NL3140
          DO 60 K=1,NCOL                                                A9NL3160
   60       LAST(K) = LINE(K)                                           A9NL3180
   70     ILAST = ILINE                                                 A9NL3200
          J = 0                                                         A9NL3220
   80   I = I+1                                                         A9NL3240
        GO TO 20                                                        A9NL3260
   90 RETURN                                                            A9NL3280
      END                                                               A9NL3300
      SUBROUTINE A9RNTR(A, NITEMS, IOUT, MCOL, W, D)                    A9NR0000
C                                                                       A9NR0020
C  THIS IS THE DOCUMENTED ROUTINE APRNTR, BUT WITHOUT THE CALLS TO      A9NR0040
C  SETERR - BECAUSE IT IS CALLED BY SETERR.                             A9NR0060
C                                                                       A9NR0080
C  THIS SUBROUTINE PRINTS OUT NITEMS FROM THE REAL ARRAY, A, ON         A9NR0100
C  OUTPUT UNIT IOUT, USING A MAXIMUM OF MCOL PRINT SPACES.              A9NR0120
C  THE OUTPUT FORMAT IS 1PEW.D.                                         A9NR0140
C  THE PROGRAM PUTS AS MANY VALUES ON A LINE AS POSSIBLE.               A9NR0160
C  W SHOULD BE INPUT AS THE ACTUAL WIDTH +1 FOR A SPACE BETWEEN VALUES. A9NR0180
C                                                                       A9NR0200
C  DUPLICATE LINES ARE NOT ALL PRINTED, BUT ARE INDICATED BY ASTERISKS. A9NR0220
C                                                                       A9NR0240
C  WRITTEN BY DAN WARNER, REVISED BY PHYL FOX, OCTOBER 21, 1982.        A9NR0260
C                                                                       A9NR0280
C  THE LINE WIDTH IS COMPUTED AS THE MINIMUM OF THE INPUT MCOL AND 160. A9NR0300
C  IF THE LINE WIDTH IS TO BE INCREASED ABOVE 160, THE BUFFERS LINE()   A9NR0320
C  AND LAST(), WHICH THE VALUES TO BE PRINTED ON ONE LINE, MUST         A9NR0340
C  BE DIMENSIONED ACCORDINGLY.                                          A9NR0360
C                                                                       A9NR0380
C  INPUT PARAMETERS -                                                   A9NR0400
C                                                                       A9NR0420
C    A        - THE START OF THE REAL ARRAY TO BE PRINTED               A9NR0440
C                                                                       A9NR0460
C    NITEMS   - THE NUMBER OF ITEMS TO BE PRINTED                       A9NR0480
C                                                                       A9NR0500
C    IOUT     - THE OUTPUT UNIT FOR PRINTING                            A9NR0520
C                                                                       A9NR0540
C    MCOL     - THE NUMBER OF SPACES ACROSS THE LINE                    A9NR0560
C                                                                       A9NR0580
C    W        - THE WIDTH OF THE PRINTED VALUE (1PEW.D)                 A9NR0600
C                                                                       A9NR0620
C    D        - THE NUMBER OF DIGITS AFTER THE DECIMAL POINT (1PEW.D)   A9NR0640
C                                                                       A9NR0660
C                                                                       A9NR0680
C  ERROR STATES - NONE.  LOWER LEVEL ROUTINE CALLED BY                  A9NR0700
C  SETERR, SO IT CANNOT CALL SETERR.                                    A9NR0720
C                                                                       A9NR0740
C                                                                       A9NR0760
      INTEGER  NITEMS, IOUT, MCOL, W, D                                 A9NR0780
      REAL     A(NITEMS)                                                A9NR0800
C                                                                       A9NR0820
      INTEGER  MAX0, MIN0, WW, DD, EMIN, EMAX,                          A9NR0840
     1         EXPENT, I1MACH, ICEIL, IABS, I10WID                      A9NR0860
C/6S                                                                    A9NR0880
C     INTEGER  IFMT1(20), IFMT1C(20), IFMT2(18), IFMT2C(18), BLANK, STARA9NR0900
C     EQUIVALENCE (IFMT1(1), IFMT1C(1)), (IFMT2(1), IFMT2C(1))          A9NR0920
C/7S                                                                    A9NR0940
      CHARACTER*1  IFMT1(20), IFMT2(18), BLANK, STAR                    A9NR0960
      CHARACTER*20 IFMT1C                                               A9NR0980
      CHARACTER*18 IFMT2C                                               A9NR1000
      EQUIVALENCE (IFMT1(1), IFMT1C), (IFMT2(1), IFMT2C)                A9NR1020
C/                                                                      A9NR1040
      INTEGER  INDW, NCOL, COUNT, I, J, K, ILINE, ILAST                 A9NR1060
      LOGICAL  DUP                                                      A9NR1080
      REAL     LINE(18), LAST(18), LOGETA                               A9NR1100
C                                                                       A9NR1120
C/6S                                                                    A9NR1140
C     DATA BLANK/1H /, STAR/1H*/, INDW/7/, EXPENT/0/                    A9NR1160
C/7S                                                                    A9NR1180
      DATA BLANK/' '/, STAR/'*'/, INDW/7/, EXPENT/0/                    A9NR1200
C/                                                                      A9NR1220
C                                                                       A9NR1240
C  IFMT1 IS FOR THE ASTERISK LINES- IFMT2 FOR THE DATA LINES            A9NR1260
C                                                                       A9NR1280
C/6S                                                                    A9NR1300
C     DATA IFMT1( 1) /1H(/,  IFMT2( 1) /1H(/                            A9NR1320
C     DATA IFMT1( 2) /1H1/,  IFMT2( 2) /1H1/                            A9NR1340
C     DATA IFMT1( 3) /1HA/,  IFMT2( 3) /1HA/                            A9NR1360
C     DATA IFMT1( 4) /1H1/,  IFMT2( 4) /1H1/                            A9NR1380
C     DATA IFMT1( 5) /1H,/,  IFMT2( 5) /1H,/                            A9NR1400
C     DATA IFMT1( 6) /1H5/,  IFMT2( 6) /1HI/                            A9NR1420
C     DATA IFMT1( 7) /1HX/,  IFMT2( 7) /1H7/                            A9NR1440
C     DATA IFMT1( 8) /1H,/,  IFMT2( 8) /1H,/                            A9NR1460
C     DATA IFMT1( 9) /1H2/,  IFMT2( 9) /1H1/                            A9NR1480
C     DATA IFMT1(10) /1HA/,  IFMT2(10) /1HP/                            A9NR1500
C     DATA IFMT1(11) /1H1/,  IFMT2(11) /1H /                            A9NR1520
C     DATA IFMT1(12) /1H,/,  IFMT2(12) /1HE/                            A9NR1540
C     DATA IFMT1(13) /1H /,  IFMT2(13) /1H /                            A9NR1560
C     DATA IFMT1(14) /1H /,  IFMT2(14) /1H /                            A9NR1580
C     DATA IFMT1(15) /1HX/,  IFMT2(15) /1H./                            A9NR1600
C     DATA IFMT1(16) /1H,/,  IFMT2(16) /1H /                            A9NR1620
C     DATA IFMT1(17) /1H2/,  IFMT2(17) /1H /                            A9NR1640
C     DATA IFMT1(18) /1HA/,  IFMT2(18) /1H)/                            A9NR1660
C     DATA IFMT1(19) /1H1/                                              A9NR1680
C     DATA IFMT1(20) /1H)/                                              A9NR1700
C/7S                                                                    A9NR1720
      DATA IFMT1( 1) /'('/,  IFMT2( 1) /'('/                            A9NR1740
      DATA IFMT1( 2) /'1'/,  IFMT2( 2) /'1'/                            A9NR1760
      DATA IFMT1( 3) /'A'/,  IFMT2( 3) /'A'/                            A9NR1780
      DATA IFMT1( 4) /'1'/,  IFMT2( 4) /'1'/                            A9NR1800
      DATA IFMT1( 5) /','/,  IFMT2( 5) /','/                            A9NR1820
      DATA IFMT1( 6) /'5'/,  IFMT2( 6) /'I'/                            A9NR1840
      DATA IFMT1( 7) /'X'/,  IFMT2( 7) /'7'/                            A9NR1860
      DATA IFMT1( 8) /','/,  IFMT2( 8) /','/                            A9NR1880
      DATA IFMT1( 9) /'2'/,  IFMT2( 9) /'1'/                            A9NR1900
      DATA IFMT1(10) /'A'/,  IFMT2(10) /'P'/                            A9NR1920
      DATA IFMT1(11) /'1'/,  IFMT2(11) /' '/                            A9NR1940
      DATA IFMT1(12) /','/,  IFMT2(12) /'E'/                            A9NR1960
      DATA IFMT1(13) /' '/,  IFMT2(13) /' '/                            A9NR1980
      DATA IFMT1(14) /' '/,  IFMT2(14) /' '/                            A9NR2000
      DATA IFMT1(15) /'X'/,  IFMT2(15) /'.'/                            A9NR2020
      DATA IFMT1(16) /','/,  IFMT2(16) /' '/                            A9NR2040
      DATA IFMT1(17) /'2'/,  IFMT2(17) /' '/                            A9NR2060
      DATA IFMT1(18) /'A'/,  IFMT2(18) /')'/                            A9NR2080
      DATA IFMT1(19) /'1'/                                              A9NR2100
      DATA IFMT1(20) /')'/                                              A9NR2120
C/                                                                      A9NR2140
C                                                                       A9NR2160
C                                                                       A9NR2180
C     EXPENT IS USED AS A FIRST-TIME SWITCH TO SIGNAL IF THE            A9NR2200
C     MACHINE-VALUE CONSTANTS HAVE BEEN COMPUTED.                       A9NR2220
C                                                                       A9NR2240
      IF (EXPENT .GT. 0) GO TO 10                                       A9NR2260
         LOGETA = ALOG10(FLOAT(I1MACH(10)))                             A9NR2280
         EMIN   = ICEIL(LOGETA*FLOAT(IABS(I1MACH(12)-1)))               A9NR2300
         EMAX   = ICEIL(LOGETA*FLOAT(I1MACH(13)))                       A9NR2320
         EXPENT = I10WID(MAX0(EMIN, EMAX))                              A9NR2340
C                                                                       A9NR2360
C     COMPUTE THE FORMATS.                                              A9NR2380
C                                                                       A9NR2400
   10 WW = MIN0(99, MAX0(W, 5+EXPENT))                                  A9NR2420
      CALL S88FMT(2, WW, IFMT2(13))                                     A9NR2440
      DD = MIN0(D, (WW-(5+EXPENT)))                                     A9NR2460
      CALL S88FMT(2, DD, IFMT2(16))                                     A9NR2480
C                                                                       A9NR2500
C  NCOL IS THE NUMBER OF VALUES TO BE PRINTED ACROSS THE LINE.          A9NR2520
C                                                                       A9NR2540
      NCOL = MAX0(1, MIN0(9, (MIN0(MCOL,160)-INDW)/WW))                 A9NR2560
      CALL S88FMT(1, NCOL, IFMT2(11))                                   A9NR2580
      WW = WW-2                                                         A9NR2600
C                                                                       A9NR2620
C  THE ASTERISKS ARE POSITIONED RIGHT-ADJUSTED IN THE W-WIDTH SPACE.    A9NR2640
      CALL S88FMT(2, WW, IFMT1(13))                                     A9NR2660
C                                                                       A9NR2680
C  I COUNTS THE NUMBER OF ITEMS TO BE PRINTED,                          A9NR2700
C  J COUNTS THE NUMBER ON A GIVEN LINE,                                 A9NR2720
C  COUNT COUNTS THE NUMBER OF DUPLICATE LINES.                          A9NR2740
C                                                                       A9NR2760
      I = 1                                                             A9NR2780
      J = 0                                                             A9NR2800
      COUNT = 0                                                         A9NR2820
C                                                                       A9NR2840
C  THE LOGICAL OF THE FOLLOWING IS ROUGHLY THIS -                       A9NR2860
C  IF THERE ARE STILL MORE ITEMS TO BE PRINTED, A LINE-                 A9NR2880
C  FULL IS PUT INTO THE ARRAY, LINE.                                    A9NR2900
C  WHENEVER A LINE IS PRINTED OUT, IT IS ALSO STUFFED INTO              A9NR2920
C  THE ARRAY, LAST, TO COMPARE WITH THE NEXT ONE COMING IN              A9NR2940
C  TO CHECK FOR REPEAT OR DUPLICATED LINES.                             A9NR2960
C  ALSO WHENEVER A LINE IS WRITTEN OUT, THE DUPLICATION                 A9NR2980
C  COUNTER, COUNT, IS SET TO ONE.                                       A9NR3000
C  THE ONLY MILDLY TRICKY PART IS TO NOTE THAT COUNT HAS TO             A9NR3020
C  GO TO 3 BEFORE A LINE OF ASTERISKS IS PRINTED BECAUSE                A9NR3040
C  OF COURSE NO SUCH LINE IS PRINTED FOR JUST A PAIR OF                 A9NR3060
C  DUPLICATE LINES.                                                     A9NR3080
C                                                                       A9NR3100
C  ILINE IS PRINTED AS THE INDEX OF THE FIRST ARRAY ELEMENT             A9NR3120
C  IN A LINE.                                                           A9NR3140
C                                                                       A9NR3160
   20 IF (I .GT. NITEMS)  GO TO 90                                      A9NR3180
        J = J+1                                                         A9NR3200
        LINE(J) = A(I)                                                  A9NR3220
        IF (J .EQ. 1) ILINE = I                                         A9NR3240
        IF (J .LT. NCOL .AND. I .LT. NITEMS) GO TO 80                   A9NR3260
          IF (COUNT .EQ. 0) GO TO 50                                    A9NR3280
            DUP = .TRUE.                                                A9NR3300
            DO 30 K=1,NCOL                                              A9NR3320
   30         IF (LAST(K) .NE. LINE(K)) DUP = .FALSE.                   A9NR3340
            IF (I .EQ. NITEMS  .AND.  J .LT. NCOL) DUP = .FALSE.        A9NR3360
            IF (.NOT. DUP .AND. COUNT .EQ. 1) GO TO 50                  A9NR3380
              IF (.NOT. DUP) GO TO 40                                   A9NR3400
                COUNT = COUNT+1                                         A9NR3420
                IF (COUNT .EQ. 3) WRITE(IOUT, IFMT1C) BLANK,            A9NR3440
     1                                 STAR, STAR, STAR, STAR           A9NR3460
                IF (I .EQ. NITEMS)  GO TO 50                            A9NR3480
                  GO TO 70                                              A9NR3500
   40         WRITE(IOUT, IFMT2C) BLANK, ILAST, (LAST(K), K=1,NCOL)     A9NR3520
   50     WRITE(IOUT, IFMT2C) BLANK, ILINE, (LINE(K), K=1,J)            A9NR3540
          COUNT = 1                                                     A9NR3560
          DO 60 K=1,NCOL                                                A9NR3580
   60       LAST(K) = LINE(K)                                           A9NR3600
   70     ILAST = ILINE                                                 A9NR3620
          J = 0                                                         A9NR3640
   80   I = I+1                                                         A9NR3660
        GO TO 20                                                        A9NR3680
   90 RETURN                                                            A9NR3700
      END                                                               A9NR3720
      SUBROUTINE FRMATD(WWIDTH, EWIDTH)                                 FMTD0000
C                                                                       FMTD0020
C  THIS SUBROUTINE COMPUTES, FOR THE FORMAT SPECIFICATION, DW.E, THE    FMTD0040
C  NUMBER OF DIGITS TO THE RIGHT OF THE DECIMAL POINT, E=EWIDTH, AND    FMTD0060
C  THE FIELD WIDTH, W=WWIDTH.                                           FMTD0080
C                                                                       FMTD0100
C  WWIDTH INCLUDES THE FIVE POSITIONS NEEDED FOR THE SIGN OF THE        FMTD0120
C  MANTISSA, THE SIGN OF THE EXPONENT, THE 0, THE DECIMAL POINT AND THE FMTD0140
C  CHARACTER IN THE OUTPUT - +0.XXXXXXXXXD+YYYY                         FMTD0160
C                                                                       FMTD0180
C  THE FOLLOWING MACHINE-DEPENDENT VALUES ARE USED -                    FMTD0200
C                                                                       FMTD0220
C  I1MACH(10) - THE BASE, B                                             FMTD0240
C  I1MACH(14) - THE NUMBER OF BASE-B DIGITS IN THE MANTISSA             FMTD0260
C  I1MACH(15) - THE SMALLEST EXPONENT, EMIN                             FMTD0280
C  I1MACH(16) - THE LARGEST EXPONENT, EMAX                              FMTD0300
C                                                                       FMTD0320
      INTEGER I1MACH, ICEIL, IFLR, EWIDTH, WWIDTH                       FMTD0340
      INTEGER DEMIN, DEMAX, EXPWID                                      FMTD0360
      REAL BASE                                                         FMTD0380
C                                                                       FMTD0400
      BASE = I1MACH(10)                                                 FMTD0420
C                                                                       FMTD0440
      EWIDTH = ICEIL( ALOG10(BASE)*FLOAT(I1MACH(14)) )                  FMTD0460
C                                                                       FMTD0480
      DEMIN =  IFLR( ALOG10(BASE)*FLOAT(I1MACH(15)-1) ) + 1             FMTD0500
      DEMAX = ICEIL( ALOG10(BASE)*FLOAT(I1MACH(16)) )                   FMTD0520
      EXPWID = IFLR( ALOG10(FLOAT(MAX0(IABS(DEMIN),IABS(DEMAX)))) ) + 1 FMTD0540
      WWIDTH = EWIDTH + EXPWID + 5                                      FMTD0560
C                                                                       FMTD0580
      RETURN                                                            FMTD0600
      END                                                               FMTD0620
      SUBROUTINE FRMATI(IWIDTH)                                         FMTI0000
C                                                                       FMTI0020
C  THIS SUBROUTINE COMPUTES THE WIDTH, W=IWIDTH, IN THE FORMAT          FMTI0040
C  SPECIFICATION FOR INTEGER VARIABLES.                                 FMTI0060
C                                                                       FMTI0080
C  FRMATI SETS IWIDTH TO THE NUMBER OF CHARACTER POSITIONS NEEDED       FMTI0100
C  FOR WRITING OUT THE LARGEST INTEGER PLUS ONE POSITION FOR THE SIGN.  FMTI0120
C                                                                       FMTI0140
C  I1MACH(7) IS THE BASE, A, FOR INTEGER REPRESENTATION IN THE MACHINE. FMTI0160
C  I1MACH(8) IS THE (MAXIMUM) NUMBER OF BASE A DIGITS.                  FMTI0180
C                                                                       FMTI0200
      INTEGER I1MACH, ICEIL, IWIDTH                                     FMTI0220
C                                                                       FMTI0240
      IWIDTH = ICEIL( ALOG10(FLOAT(I1MACH(7)))*FLOAT(I1MACH(8)) ) + 1   FMTI0260
C                                                                       FMTI0280
      RETURN                                                            FMTI0300
      END                                                               FMTI0320
      SUBROUTINE FRMATR(WWIDTH, EWIDTH)                                 FMTR0000
C                                                                       FMTR0020
C  THIS SUBROUTINE COMPUTES, FOR THE FORMAT SPECIFICATION, EW.E, THE    FMTR0040
C  NUMBER OF DIGITS TO THE RIGHT OF THE DECIMAL POINT, E=EWIDTH, AND    FMTR0060
C  THE FIELD WIDTH, W=WWIDTH.                                           FMTR0080
C                                                                       FMTR0100
C  WWIDTH INCLUDES THE FIVE POSITIONS NEEDED FOR THE SIGN OF THE        FMTR0120
C  MANTISSA, THE SIGN OF THE EXPONENT, THE 0, THE DECIMAL POINT AND THE FMTR0140
C  CHARACTER IN THE OUTPUT - +0.XXXXXXXXXE+YYYY                         FMTR0160
C                                                                       FMTR0180
C  THE FOLLOWING MACHINE-DEPENDENT VALUES ARE USED -                    FMTR0200
C                                                                       FMTR0220
C  I1MACH(10) - THE BASE, B                                             FMTR0240
C  I1MACH(11) - THE NUMBER OF BASE-B DIGITS IN THE MANTISSA             FMTR0260
C  I1MACH(12) - THE SMALLEST EXPONENT, EMIN                             FMTR0280
C  I1MACH(13) - THE LARGEST EXPONENT, EMAX                              FMTR0300
C                                                                       FMTR0320
      INTEGER I1MACH, ICEIL, IFLR, EWIDTH, WWIDTH                       FMTR0340
      INTEGER DEMIN, DEMAX, EXPWID                                      FMTR0360
      REAL BASE                                                         FMTR0380
C                                                                       FMTR0400
      BASE = I1MACH(10)                                                 FMTR0420
C                                                                       FMTR0440
      EWIDTH = ICEIL( ALOG10(BASE)*FLOAT(I1MACH(11)) )                  FMTR0460
C                                                                       FMTR0480
      DEMIN =  IFLR( ALOG10(BASE)*FLOAT(I1MACH(12)-1) ) + 1             FMTR0500
      DEMAX = ICEIL( ALOG10(BASE)*FLOAT(I1MACH(13)) )                   FMTR0520
      EXPWID = IFLR( ALOG10(FLOAT(MAX0(IABS(DEMIN),IABS(DEMAX)))) ) + 1 FMTR0540
      WWIDTH = EWIDTH + EXPWID + 5                                      FMTR0560
C                                                                       FMTR0580
      RETURN                                                            FMTR0600
      END                                                               FMTR0620
      INTEGER FUNCTION I10WID(IX)                                       IWID0000
      INTEGER IX                                                        IWID0020
      INTEGER IABS, IY, DIGITS                                          IWID0040
C     THIS FUNCTION RETURNS THE NUMBER OF DECIMAL                       IWID0060
C     DIGITS REQUIRED TO REPRESENT THE INTEGER, IX.                     IWID0080
      DIGITS = 0                                                        IWID0100
      IY = IABS(IX)                                                     IWID0120
   1  IF (IY .LT. 1) GOTO  2                                            IWID0140
         DIGITS = DIGITS+1                                              IWID0160
         IY = IY/10                                                     IWID0180
         GOTO  1                                                        IWID0200
   2  I10WID = DIGITS                                                   IWID0220
      RETURN                                                            IWID0240
      END                                                               IWID0260
      SUBROUTINE I0TK00(LARG,NITEMS,ITYPE)                              STKG0000
C                                                                       STKG0020
C  INITIALIZES THE STACK TO NITEMS OF TYPE ITYPE                        STKG0040
C                                                                       STKG0060
      COMMON /CSTAK/DSTAK                                               STKG0080
C                                                                       STKG0100
      DOUBLE PRECISION DSTAK(500)                                       STKG0120
      INTEGER ISTAK(1000)                                               STKG0140
      LOGICAL LARG,INIT                                                 STKG0160
      INTEGER ISIZE(5)                                                  STKG0180
C                                                                       STKG0200
      EQUIVALENCE (DSTAK(1),ISTAK(1))                                   STKG0220
      EQUIVALENCE (ISTAK(1),LOUT)                                       STKG0240
      EQUIVALENCE (ISTAK(2),LNOW)                                       STKG0260
      EQUIVALENCE (ISTAK(3),LUSED)                                      STKG0280
      EQUIVALENCE (ISTAK(4),LMAX)                                       STKG0300
      EQUIVALENCE (ISTAK(5),LBOOK)                                      STKG0320
      EQUIVALENCE (ISTAK(6),ISIZE(1))                                   STKG0340
C                                                                       STKG0360
      DATA INIT/.FALSE./                                                STKG0380
C                                                                       STKG0400
      LARG = .FALSE.                                                    STKG0420
      IF (INIT) RETURN                                                  STKG0440
C                                                                       STKG0460
C  HERE TO INITIALIZE                                                   STKG0480
C                                                                       STKG0500
      INIT = .TRUE.                                                     STKG0520
C                                                                       STKG0540
C  SET DATA SIZES APPROPRIATE FOR A STANDARD CONFORMING                 STKG0560
C  FORTRAN SYSTEM USING THE FORTRAN STORAGE UNIT AS THE                 STKG0580
C  MEASURE OF SIZE.                                                     STKG0600
C                                                                       STKG0620
C  LOGICAL                                                              STKG0640
      ISIZE(1) = 1                                                      STKG0660
C  INTEGER                                                              STKG0680
      ISIZE(2) = 1                                                      STKG0700
C  REAL                                                                 STKG0720
      ISIZE(3) = 1                                                      STKG0740
C  DOUBLE PRECISION                                                     STKG0760
      ISIZE(4) = 2                                                      STKG0780
C  COMPLEX                                                              STKG0800
      ISIZE(5) = 2                                                      STKG0820
C                                                                       STKG0840
      LBOOK = 10                                                        STKG0860
      LNOW  = LBOOK                                                     STKG0880
      LUSED = LBOOK                                                     STKG0900
      LMAX  = MAX0( (NITEMS*ISIZE(ITYPE))/ISIZE(2), 12 )                STKG0920
      LOUT  = 0                                                         STKG0940
C                                                                       STKG0960
      RETURN                                                            STKG0980
C                                                                       STKG1000
      END                                                               STKG1020
      REAL FUNCTION CEIL(X)                                             CELA0000
C                                                                       CELA0020
C  CEIL RETURNS CEIL(X)                                                 CELA0040
C                                                                       CELA0060
      CEIL = FLOAT( INT(X) )                                            CELA0080
      IF (X .LE. 0.0) RETURN                                            CELA0100
      IF (CEIL .NE. X) CEIL = CEIL + 1.0                                CELA0120
C                                                                       CELA0140
      RETURN                                                            CELA0160
      END                                                               CELA0180
      DOUBLE PRECISION FUNCTION DCEIL(X)                                CEAD0000
C                                                                       CEAD0020
C  DCEIL RETURNS CEIL(X)                                                CEAD0040
C                                                                       CEAD0060
      DOUBLE PRECISION X                                                CEAD0080
C                                                                       CEAD0100
      DCEIL = DBLE( FLOAT ( IDINT(X) ) )                                CEAD0120
      IF (X .LE. 0.0D0) RETURN                                          CEAD0140
      IF (DCEIL .NE. X) DCEIL = DCEIL + 1.0D0                           CEAD0160
C                                                                       CEAD0180
      RETURN                                                            CEAD0200
      END                                                               CEAD0220
      INTEGER FUNCTION ICEIL(X)                                         CELB0000
C                                                                       CELB0020
C  ICEIL RETURNS CEIL(X)                                                CELB0040
C                                                                       CELB0060
      ICEIL = INT(X)                                                    CELB0080
      IF (X .LE. 0.0) RETURN                                            CELB0100
      IF (FLOAT(ICEIL) .NE. X) ICEIL = ICEIL + 1                        CELB0120
C                                                                       CELB0140
      RETURN                                                            CELB0160
      END                                                               CELB0180
      INTEGER FUNCTION IDCEIL(X)                                        CEBD0000
C                                                                       CEBD0020
C  IDCEIL RETURNS CEIL(X)                                               CEBD0040
C                                                                       CEBD0060
      DOUBLE PRECISION X                                                CEBD0080
C                                                                       CEBD0100
      IDCEIL = IDINT(X)                                                 CEBD0120
      IF (X .LE. 0.0D0) RETURN                                          CEBD0140
      IF (DBLE(FLOAT(IDCEIL)) .NE. X) IDCEIL = IDCEIL + 1               CEBD0160
C                                                                       CEBD0180
      RETURN                                                            CEBD0200
      END                                                               CEBD0220
      REAL FUNCTION FLR(X)                                              FLRA0000
C                                                                       FLRA0020
C  FLR RETURNS FLR(X)                                                   FLRA0040
C                                                                       FLRA0060
      FLR = FLOAT( INT(X) )                                             FLRA0080
      IF (X .GE. 0.0) RETURN                                            FLRA0100
      IF (FLR .NE. X) FLR = FLR - 1.0                                   FLRA0120
C                                                                       FLRA0140
      RETURN                                                            FLRA0160
      END                                                               FLRA0180
      DOUBLE PRECISION FUNCTION DFLR(X)                                 FLAD0000
C                                                                       FLAD0020
C  DFLR RETURNS FLR(X)                                                  FLAD0040
C                                                                       FLAD0060
      DOUBLE PRECISION X                                                FLAD0080
C                                                                       FLAD0100
      DFLR = DBLE( FLOAT ( IDINT(X) ) )                                 FLAD0120
      IF (X .GE. 0.0D0) RETURN                                          FLAD0140
      IF (DFLR .NE. X) DFLR = DFLR - 1.0D0                              FLAD0160
C                                                                       FLAD0180
      RETURN                                                            FLAD0200
      END                                                               FLAD0220
      INTEGER FUNCTION IFLR(X)                                          FLRB0000
C                                                                       FLRB0020
C  IFLR RETURNS FLR(X)                                                  FLRB0040
C                                                                       FLRB0060
      IFLR = INT(X)                                                     FLRB0080
      IF (X .GE. 0.0) RETURN                                            FLRB0100
      IF (FLOAT(IFLR) .NE. X) IFLR = IFLR - 1                           FLRB0120
C                                                                       FLRB0140
      RETURN                                                            FLRB0160
      END                                                               FLRB0180
      INTEGER FUNCTION IDFLR(X)                                         FLBD0000
C                                                                       FLBD0020
C  IDFLR RETURNS FLR(X)                                                 FLBD0040
C                                                                       FLBD0060
      DOUBLE PRECISION X                                                FLBD0080
C                                                                       FLBD0100
      IDFLR = IDINT(X)                                                  FLBD0120
      IF (X .GE. 0.0D0) RETURN                                          FLBD0140
      IF (DBLE(FLOAT(IDFLR)) .NE. X) IDFLR = IDFLR - 1                  FLBD0160
C                                                                       FLBD0180
      RETURN                                                            FLBD0200
      END                                                               FLBD0220
      SUBROUTINE EPRINT                                                 ERRP0000
C                                                                       ERRP0020
C  THIS SUBROUTINE PRINTS THE LAST ERROR MESSAGE, IF ANY.               ERRP0040
C                                                                       ERRP0060
C/6S                                                                    ERRP0080
C     INTEGER MESSG(1)                                                  ERRP0100
C/7S                                                                    ERRP0120
      CHARACTER*1 MESSG(1)                                              ERRP0140
C/                                                                      ERRP0160
C                                                                       ERRP0180
      CALL E9RINT(MESSG,1,1,.FALSE.)                                    ERRP0200
      RETURN                                                            ERRP0220
C                                                                       ERRP0240
      END                                                               ERRP0260
      SUBROUTINE E9RINT(MESSG,NW,NERR,SAVE)                             ERRR0000
C                                                                       ERRR0020
C  THIS ROUTINE STORES THE CURRENT ERROR MESSAGE OR PRINTS THE OLD ONE, ERRR0040
C  IF ANY, DEPENDING ON WHETHER OR NOT SAVE = .TRUE. .                  ERRR0060
C                                                                       ERRR0080
C  CHANGED, BY P.FOX, MAY 18, 1983, FROM THE ORIGINAL VERSION IN ORDER  ERRR0100
C  TO GET RID OF THE FORTRAN CARRIAGE CONTROL LINE OVERWRITE            ERRR0120
C  CHARACTER +, WHICH HAS ALWAYS CAUSED TROUBLE.                        ERRR0140
C  FOR THE RECORD, THE PREVIOUS VERSION HAD THE FOLLOWING ARRAY         ERRR0160
C  AND CALLS -   (WHERE CCPLUS WAS DECLARED OF TYPE INTEGER)            ERRR0180
C                                                                       ERRR0200
C      DATA CCPLUS  / 1H+ /                                             ERRR0220
C                                                                       ERRR0240
C      DATA FMT( 1) / 1H( /                                             ERRR0260
C      DATA FMT( 2) / 1HA /                                             ERRR0280
C      DATA FMT( 3) / 1H1 /                                             ERRR0300
C      DATA FMT( 4) / 1H, /                                             ERRR0320
C      DATA FMT( 5) / 1H1 /                                             ERRR0340
C      DATA FMT( 6) / 1H4 /                                             ERRR0360
C      DATA FMT( 7) / 1HX /                                             ERRR0380
C      DATA FMT( 8) / 1H, /                                             ERRR0400
C      DATA FMT( 9) / 1H7 /                                             ERRR0420
C      DATA FMT(10) / 1H2 /                                             ERRR0440
C      DATA FMT(11) / 1HA /                                             ERRR0460
C      DATA FMT(12) / 1HX /                                             ERRR0480
C      DATA FMT(13) / 1HX /                                             ERRR0500
C      DATA FMT(14) / 1H) /                                             ERRR0520
C                                                                       ERRR0540
C        CALL S88FMT(2,I1MACH(6),FMT(12))                               ERRR0560
C        WRITE(IWUNIT,FMT) CCPLUS,(MESSGP(I),I=1,NWP)                   ERRR0580
C                                                                       ERRR0600
C/6S                                                                    ERRR0620
C     INTEGER MESSG(NW)                                                 ERRR0640
C/7S                                                                    ERRR0660
      CHARACTER*1 MESSG(NW)                                             ERRR0680
C/                                                                      ERRR0700
      LOGICAL SAVE                                                      ERRR0720
C                                                                       ERRR0740
C  MESSGP STORES AT LEAST THE FIRST 72 CHARACTERS OF THE PREVIOUS       ERRR0760
C  MESSAGE. ITS LENGTH IS MACHINE DEPENDENT AND MUST BE AT LEAST        ERRR0780
C                                                                       ERRR0800
C       1 + 71/(THE NUMBER OF CHARACTERS STORED PER INTEGER WORD).      ERRR0820
C                                                                       ERRR0840
C/6S                                                                    ERRR0860
C     INTEGER MESSGP(36),FMT(10), FMT10(10)                             ERRR0880
C     EQUIVALENCE (FMT(1),FMT10(1))                                     ERRR0900
C/7S                                                                    ERRR0920
      CHARACTER*1 MESSGP(72),FMT(10)                                    ERRR0940
      CHARACTER*10 FMT10                                                ERRR0960
      EQUIVALENCE (FMT(1),FMT10)                                        ERRR0980
C/                                                                      ERRR1000
C                                                                       ERRR1020
C  START WITH NO PREVIOUS MESSAGE.                                      ERRR1040
C                                                                       ERRR1060
C/6S                                                                    ERRR1080
C     DATA MESSGP(1)/1H1/, NWP/0/, NERRP/0/                             ERRR1100
C/7S                                                                    ERRR1120
      DATA MESSGP(1)/'1'/, NWP/0/, NERRP/0/                             ERRR1140
C/                                                                      ERRR1160
C                                                                       ERRR1180
C  SET UP THE FORMAT FOR PRINTING THE ERROR MESSAGE.                    ERRR1200
C  THE FORMAT IS SIMPLY (A1,14X,72AXX) WHERE XX=I1MACH(6) IS THE        ERRR1220
C  NUMBER OF CHARACTERS STORED PER INTEGER WORD.                        ERRR1240
C                                                                       ERRR1260
C/6S                                                                    ERRR1280
C     DATA FMT( 1) / 1H( /                                              ERRR1300
C     DATA FMT( 2) / 1H3 /                                              ERRR1320
C     DATA FMT( 3) / 1HX /                                              ERRR1340
C     DATA FMT( 4) / 1H, /                                              ERRR1360
C     DATA FMT( 5) / 1H7 /                                              ERRR1380
C     DATA FMT( 6) / 1H2 /                                              ERRR1400
C     DATA FMT( 7) / 1HA /                                              ERRR1420
C     DATA FMT( 8) / 1HX /                                              ERRR1440
C     DATA FMT( 9) / 1HX /                                              ERRR1460
C     DATA FMT(10) / 1H) /                                              ERRR1480
C/7S                                                                    ERRR1500
      DATA FMT( 1) / '(' /                                              ERRR1520
      DATA FMT( 2) / '3' /                                              ERRR1540
      DATA FMT( 3) / 'X' /                                              ERRR1560
      DATA FMT( 4) / ',' /                                              ERRR1580
      DATA FMT( 5) / '7' /                                              ERRR1600
      DATA FMT( 6) / '2' /                                              ERRR1620
      DATA FMT( 7) / 'A' /                                              ERRR1640
      DATA FMT( 8) / 'X' /                                              ERRR1660
      DATA FMT( 9) / 'X' /                                              ERRR1680
      DATA FMT(10) / ')' /                                              ERRR1700
C/                                                                      ERRR1720
C                                                                       ERRR1740
      IF (.NOT.SAVE) GO TO 20                                           ERRR1760
C                                                                       ERRR1780
C  SAVE THE MESSAGE.                                                    ERRR1800
C                                                                       ERRR1820
        NWP=NW                                                          ERRR1840
        NERRP=NERR                                                      ERRR1860
        DO 10 I=1,NW                                                    ERRR1880
 10     MESSGP(I)=MESSG(I)                                              ERRR1900
C                                                                       ERRR1920
        GO TO 30                                                        ERRR1940
C                                                                       ERRR1960
 20   IF (I8SAVE(1,0,.FALSE.).EQ.0) GO TO 30                            ERRR1980
C                                                                       ERRR2000
C  PRINT THE MESSAGE.                                                   ERRR2020
C                                                                       ERRR2040
        IWUNIT=I1MACH(4)                                                ERRR2060
        WRITE(IWUNIT,9000) NERRP                                        ERRR2080
 9000   FORMAT(7H ERROR ,I4,4H IN )                                     ERRR2100
C                                                                       ERRR2120
        CALL S88FMT(2,I1MACH(6),FMT( 8))                                ERRR2140
        WRITE(IWUNIT,FMT10) (MESSGP(I),I=1,NWP)                         ERRR2160
C                                                                       ERRR2180
 30   RETURN                                                            ERRR2200
C                                                                       ERRR2220
      END                                                               ERRR2240
      INTEGER FUNCTION I1MACH(I)                                        MCHI0000
C                                                                       MCHI0020
C  I/O UNIT NUMBERS.                                                    MCHI0040
C                                                                       MCHI0060
C    I1MACH( 1) = THE STANDARD INPUT UNIT.                              MCHI0080
C                                                                       MCHI0100
C    I1MACH( 2) = THE STANDARD OUTPUT UNIT.                             MCHI0120
C                                                                       MCHI0140
C    I1MACH( 3) = THE STANDARD PUNCH UNIT.                              MCHI0160
C                                                                       MCHI0180
C    I1MACH( 4) = THE STANDARD ERROR MESSAGE UNIT.                      MCHI0200
C                                                                       MCHI0220
C  WORDS.                                                               MCHI0240
C                                                                       MCHI0260
C    I1MACH( 5) = THE NUMBER OF BITS PER INTEGER STORAGE UNIT.          MCHI0280
C                                                                       MCHI0300
C    I1MACH( 6) = THE NUMBER OF CHARACTERS PER CHARACTER STORAGE UNIT.  MCHI0320
C                 FOR FORTRAN 77, THIS IS ALWAYS 1.  FOR FORTRAN 66,    MCHI0340
C                 CHARACTER STORAGE UNIT = INTEGER STORAGE UNIT.        MCHI0360
C                                                                       MCHI0380
C  INTEGERS.                                                            MCHI0400
C                                                                       MCHI0420
C    ASSUME INTEGERS ARE REPRESENTED IN THE S-DIGIT, BASE-A FORM        MCHI0440
C                                                                       MCHI0460
C               SIGN ( X(S-1)*A**(S-1) + ... + X(1)*A + X(0) )          MCHI0480
C                                                                       MCHI0500
C               WHERE 0 .LE. X(I) .LT. A FOR I=0,...,S-1.               MCHI0520
C                                                                       MCHI0540
C    I1MACH( 7) = A, THE BASE.                                          MCHI0560
C                                                                       MCHI0580
C    I1MACH( 8) = S, THE NUMBER OF BASE-A DIGITS.                       MCHI0600
C                                                                       MCHI0620
C    I1MACH( 9) = A**S - 1, THE LARGEST MAGNITUDE.                      MCHI0640
C                                                                       MCHI0660
C  FLOATING-POINT NUMBERS.                                              MCHI0680
C                                                                       MCHI0700
C    ASSUME FLOATING-POINT NUMBERS ARE REPRESENTED IN THE T-DIGIT,      MCHI0720
C    BASE-B FORM                                                        MCHI0740
C                                                                       MCHI0760
C               SIGN (B**E)*( (X(1)/B) + ... + (X(T)/B**T) )            MCHI0780
C                                                                       MCHI0800
C               WHERE 0 .LE. X(I) .LT. B FOR I=1,...,T,                 MCHI0820
C               0 .LT. X(1), AND EMIN .LE. E .LE. EMAX.                 MCHI0840
C                                                                       MCHI0860
C    I1MACH(10) = B, THE BASE.                                          MCHI0880
C                                                                       MCHI0900
C  SINGLE-PRECISION                                                     MCHI0920
C                                                                       MCHI0940
C    I1MACH(11) = T, THE NUMBER OF BASE-B DIGITS.                       MCHI0960
C                                                                       MCHI0980
C    I1MACH(12) = EMIN, THE SMALLEST EXPONENT E.                        MCHI1000
C                                                                       MCHI1020
C    I1MACH(13) = EMAX, THE LARGEST EXPONENT E.                         MCHI1040
C                                                                       MCHI1060
C  DOUBLE-PRECISION                                                     MCHI1080
C                                                                       MCHI1100
C    I1MACH(14) = T, THE NUMBER OF BASE-B DIGITS.                       MCHI1120
C                                                                       MCHI1140
C    I1MACH(15) = EMIN, THE SMALLEST EXPONENT E.                        MCHI1160
C                                                                       MCHI1180
C    I1MACH(16) = EMAX, THE LARGEST EXPONENT E.                         MCHI1200
C                                                                       MCHI1220
C  TO ALTER THIS FUNCTION FOR A PARTICULAR ENVIRONMENT,                 MCHI1240
C  THE DESIRED SET OF DATA STATEMENTS SHOULD BE ACTIVATED BY            MCHI1260
C  REMOVING THE C FROM COLUMN 1.  ALSO, THE VALUES OF                   MCHI1280
C  I1MACH(1) - I1MACH(4) SHOULD BE CHECKED FOR CONSISTENCY              MCHI1300
C  WITH THE LOCAL OPERATING SYSTEM.  FOR FORTRAN 77, YOU MAY WISH       MCHI1320
C  TO ADJUST THE DATA STATEMENT SO IMACH(6) IS SET TO 1, AND            MCHI1340
C  THEN TO COMMENT OUT THE EXECUTABLE TEST ON I .EQ. 6 BELOW.           MCHI1360
C                                                                       MCHI1380
C  FOR IEEE-ARITHMETIC MACHINES (BINARY STANDARD), THE FIRST            MCHI1400
C  SET OF CONSTANTS BELOW SHOULD BE APPROPRIATE, EXCEPT PERHAPS         MCHI1420
C  FOR IMACH(1) - IMACH(4).                                             MCHI1440
C                                                                       MCHI1460
      INTEGER IMACH(16),OUTPUT,SANITY                                   MCHI1480
C                                                                       MCHI1500
      EQUIVALENCE (IMACH(4),OUTPUT)                                     MCHI1520
C                                                                       MCHI1540
C     MACHINE CONSTANTS FOR IEEE ARITHMETIC MACHINES, SUCH AS THE AT&T  MCHI1560
C     3B SERIES, MOTOROLA 68000 BASED MACHINES (E.G. SUN 3 AND AT&T     MCHI1580
C     PC 7300), AND 8087 BASED MICROS (E.G. IBM PC AND AT&T 6300).      MCHI1600
C                                                                       MCHI1620
C      DATA IMACH( 1) /    5 /                                          MCHI1640
C      DATA IMACH( 2) /    6 /                                          MCHI1660
C      DATA IMACH( 3) /    7 /                                          MCHI1680
C      DATA IMACH( 4) /    6 /                                          MCHI1700
C      DATA IMACH( 5) /   32 /                                          MCHI1720
C      DATA IMACH( 6) /    4 /                                          MCHI1740
C      DATA IMACH( 7) /    2 /                                          MCHI1760
C      DATA IMACH( 8) /   31 /                                          MCHI1780
C      DATA IMACH( 9) / 2147483647 /                                    MCHI1800
C      DATA IMACH(10) /    2 /                                          MCHI1820
C      DATA IMACH(11) /   24 /                                          MCHI1840
C      DATA IMACH(12) / -125 /                                          MCHI1860
C      DATA IMACH(13) /  128 /                                          MCHI1880
C      DATA IMACH(14) /   53 /                                          MCHI1900
C      DATA IMACH(15) / -1021 /                                         MCHI1920
C      DATA IMACH(16) /  1024 /, SANITY/987/                            MCHI1940
C                                                                       MCHI1960
C     MACHINE CONSTANTS FOR AMDAHL MACHINES.                            MCHI1980
C                                                                       MCHI2000
C      DATA IMACH( 1) /   5 /                                           MCHI2020
C      DATA IMACH( 2) /   6 /                                           MCHI2040
C      DATA IMACH( 3) /   7 /                                           MCHI2060
C      DATA IMACH( 4) /   6 /                                           MCHI2080
C      DATA IMACH( 5) /  32 /                                           MCHI2100
C      DATA IMACH( 6) /   4 /                                           MCHI2120
C      DATA IMACH( 7) /   2 /                                           MCHI2140
C      DATA IMACH( 8) /  31 /                                           MCHI2160
C      DATA IMACH( 9) / 2147483647 /                                    MCHI2180
C      DATA IMACH(10) /  16 /                                           MCHI2200
C      DATA IMACH(11) /   6 /                                           MCHI2220
C      DATA IMACH(12) / -64 /                                           MCHI2240
C      DATA IMACH(13) /  63 /                                           MCHI2260
C      DATA IMACH(14) /  14 /                                           MCHI2280
C      DATA IMACH(15) / -64 /                                           MCHI2300
C      DATA IMACH(16) /  63 /, SANITY/987/                              MCHI2320
C                                                                       MCHI2340
C     MACHINE CONSTANTS FOR THE BURROUGHS 1700 SYSTEM.                  MCHI2360
C                                                                       MCHI2380
C      DATA IMACH( 1) /    7 /                                          MCHI2400
C      DATA IMACH( 2) /    2 /                                          MCHI2420
C      DATA IMACH( 3) /    2 /                                          MCHI2440
C      DATA IMACH( 4) /    2 /                                          MCHI2460
C      DATA IMACH( 5) /   36 /                                          MCHI2480
C      DATA IMACH( 6) /    4 /                                          MCHI2500
C      DATA IMACH( 7) /    2 /                                          MCHI2520
C      DATA IMACH( 8) /   33 /                                          MCHI2540
C      DATA IMACH( 9) / Z1FFFFFFFF /                                    MCHI2560
C      DATA IMACH(10) /    2 /                                          MCHI2580
C      DATA IMACH(11) /   24 /                                          MCHI2600
C      DATA IMACH(12) / -256 /                                          MCHI2620
C      DATA IMACH(13) /  255 /                                          MCHI2640
C      DATA IMACH(14) /   60 /                                          MCHI2660
C      DATA IMACH(15) / -256 /                                          MCHI2680
C      DATA IMACH(16) /  255 /, SANITY/987/                             MCHI2700
C                                                                       MCHI2720
C     MACHINE CONSTANTS FOR THE BURROUGHS 5700 SYSTEM.                  MCHI2740
C                                                                       MCHI2760
C      DATA IMACH( 1) /   5 /                                           MCHI2780
C      DATA IMACH( 2) /   6 /                                           MCHI2800
C      DATA IMACH( 3) /   7 /                                           MCHI2820
C      DATA IMACH( 4) /   6 /                                           MCHI2840
C      DATA IMACH( 5) /  48 /                                           MCHI2860
C      DATA IMACH( 6) /   6 /                                           MCHI2880
C      DATA IMACH( 7) /   2 /                                           MCHI2900
C      DATA IMACH( 8) /  39 /                                           MCHI2920
C      DATA IMACH( 9) / O0007777777777777 /                             MCHI2940
C      DATA IMACH(10) /   8 /                                           MCHI2960
C      DATA IMACH(11) /  13 /                                           MCHI2980
C      DATA IMACH(12) / -50 /                                           MCHI3000
C      DATA IMACH(13) /  76 /                                           MCHI3020
C      DATA IMACH(14) /  26 /                                           MCHI3040
C      DATA IMACH(15) / -50 /                                           MCHI3060
C      DATA IMACH(16) /  76 /, SANITY/987/                              MCHI3080
C                                                                       MCHI3100
C     MACHINE CONSTANTS FOR THE BURROUGHS 6700/7700 SYSTEMS.            MCHI3120
C                                                                       MCHI3140
C      DATA IMACH( 1) /   5 /                                           MCHI3160
C      DATA IMACH( 2) /   6 /                                           MCHI3180
C      DATA IMACH( 3) /   7 /                                           MCHI3200
C      DATA IMACH( 4) /   6 /                                           MCHI3220
C      DATA IMACH( 5) /  48 /                                           MCHI3240
C      DATA IMACH( 6) /   6 /                                           MCHI3260
C      DATA IMACH( 7) /   2 /                                           MCHI3280
C      DATA IMACH( 8) /  39 /                                           MCHI3300
C      DATA IMACH( 9) / O0007777777777777 /                             MCHI3320
C      DATA IMACH(10) /   8 /                                           MCHI3340
C      DATA IMACH(11) /  13 /                                           MCHI3360
C      DATA IMACH(12) / -50 /                                           MCHI3380
C      DATA IMACH(13) /  76 /                                           MCHI3400
C      DATA IMACH(14) /  26 /                                           MCHI3420
C      DATA IMACH(15) / -32754 /                                        MCHI3440
C      DATA IMACH(16) /  32780 /, SANITY/987/                           MCHI3460
C                                                                       MCHI3480
C     MACHINE CONSTANTS FOR FTN4 ON THE CDC 6000/7000 SERIES.           MCHI3500
C                                                                       MCHI3520
C      DATA IMACH( 1) /    5 /                                          MCHI3540
C      DATA IMACH( 2) /    6 /                                          MCHI3560
C      DATA IMACH( 3) /    7 /                                          MCHI3580
C      DATA IMACH( 4) /    6 /                                          MCHI3600
C      DATA IMACH( 5) /   60 /                                          MCHI3620
C      DATA IMACH( 6) /   10 /                                          MCHI3640
C      DATA IMACH( 7) /    2 /                                          MCHI3660
C      DATA IMACH( 8) /   48 /                                          MCHI3680
C      DATA IMACH( 9) / 00007777777777777777B /                         MCHI3700
C      DATA IMACH(10) /    2 /                                          MCHI3720
C      DATA IMACH(11) /   47 /                                          MCHI3740
C      DATA IMACH(12) / -929 /                                          MCHI3760
C      DATA IMACH(13) / 1070 /                                          MCHI3780
C      DATA IMACH(14) /   94 /                                          MCHI3800
C      DATA IMACH(15) / -929 /                                          MCHI3820
C      DATA IMACH(16) / 1069 /, SANITY/987/                             MCHI3840
C                                                                       MCHI3860
C     MACHINE CONSTANTS FOR FTN5 ON THE CDC 6000/7000 SERIES.           MCHI3880
C                                                                       MCHI3900
C      DATA IMACH( 1) /    5 /                                          MCHI3920
C      DATA IMACH( 2) /    6 /                                          MCHI3940
C      DATA IMACH( 3) /    7 /                                          MCHI3960
C      DATA IMACH( 4) /    6 /                                          MCHI3980
C      DATA IMACH( 5) /   60 /                                          MCHI4000
C      DATA IMACH( 6) /   10 /                                          MCHI4020
C      DATA IMACH( 7) /    2 /                                          MCHI4040
C      DATA IMACH( 8) /   48 /                                          MCHI4060
C      DATA IMACH( 9) / O"00007777777777777777" /                       MCHI4080
C      DATA IMACH(10) /    2 /                                          MCHI4100
C      DATA IMACH(11) /   47 /                                          MCHI4120
C      DATA IMACH(12) / -929 /                                          MCHI4140
C      DATA IMACH(13) / 1070 /                                          MCHI4160
C      DATA IMACH(14) /   94 /                                          MCHI4180
C      DATA IMACH(15) / -929 /                                          MCHI4200
C      DATA IMACH(16) / 1069 /, SANITY/987/                             MCHI4220
C                                                                       MCHI4240
C     MACHINE CONSTANTS FOR CONVEX C-1.                                 MCHI4260
C                                                                       MCHI4280
C      DATA IMACH( 1) /    5 /                                          MCHI4300
C      DATA IMACH( 2) /    6 /                                          MCHI4320
C      DATA IMACH( 3) /    7 /                                          MCHI4340
C      DATA IMACH( 4) /    6 /                                          MCHI4360
C      DATA IMACH( 5) /   32 /                                          MCHI4380
C      DATA IMACH( 6) /    4 /                                          MCHI4400
C      DATA IMACH( 7) /    2 /                                          MCHI4420
C      DATA IMACH( 8) /   31 /                                          MCHI4440
C      DATA IMACH( 9) / 2147483647 /                                    MCHI4460
C      DATA IMACH(10) /    2 /                                          MCHI4480
C      DATA IMACH(11) /   24 /                                          MCHI4500
C      DATA IMACH(12) / -128 /                                          MCHI4520
C      DATA IMACH(13) /  127 /                                          MCHI4540
C      DATA IMACH(14) /   53 /                                          MCHI4560
C      DATA IMACH(15) /-1024 /                                          MCHI4580
C      DATA IMACH(16) / 1023 /, SANITY/987/                             MCHI4600
C                                                                       MCHI4620
C     MACHINE CONSTANTS FOR THE CRAY 1, XMP, 2, AND 3.                  MCHI4640
C                                                                       MCHI4660
C      DATA IMACH( 1) /     5 /                                         MCHI4680
C      DATA IMACH( 2) /     6 /                                         MCHI4700
C      DATA IMACH( 3) /   102 /                                         MCHI4720
C      DATA IMACH( 4) /     6 /                                         MCHI4740
C      DATA IMACH( 5) /    64 /                                         MCHI4760
C      DATA IMACH( 6) /     8 /                                         MCHI4780
C      DATA IMACH( 7) /     2 /                                         MCHI4800
C      DATA IMACH( 8) /    63 /                                         MCHI4820
C      DATA IMACH( 9) /  777777777777777777777B /                       MCHI4840
C      DATA IMACH(10) /     2 /                                         MCHI4860
C      DATA IMACH(11) /    47 /                                         MCHI4880
C      DATA IMACH(12) / -8189 /                                         MCHI4900
C      DATA IMACH(13) /  8190 /                                         MCHI4920
C      DATA IMACH(14) /    94 /                                         MCHI4940
C      DATA IMACH(15) / -8099 /                                         MCHI4960
C      DATA IMACH(16) /  8190 /, SANITY/987/                            MCHI4980
C                                                                       MCHI5000
C     MACHINE CONSTANTS FOR THE DATA GENERAL ECLIPSE S/200.             MCHI5020
C                                                                       MCHI5040
C      DATA IMACH( 1) /   11 /                                          MCHI5060
C      DATA IMACH( 2) /   12 /                                          MCHI5080
C      DATA IMACH( 3) /    8 /                                          MCHI5100
C      DATA IMACH( 4) /   10 /                                          MCHI5120
C      DATA IMACH( 5) /   16 /                                          MCHI5140
C      DATA IMACH( 6) /    2 /                                          MCHI5160
C      DATA IMACH( 7) /    2 /                                          MCHI5180
C      DATA IMACH( 8) /   15 /                                          MCHI5200
C      DATA IMACH( 9) /32767 /                                          MCHI5220
C      DATA IMACH(10) /   16 /                                          MCHI5240
C      DATA IMACH(11) /    6 /                                          MCHI5260
C      DATA IMACH(12) /  -64 /                                          MCHI5280
C      DATA IMACH(13) /   63 /                                          MCHI5300
C      DATA IMACH(14) /   14 /                                          MCHI5320
C      DATA IMACH(15) /  -64 /                                          MCHI5340
C      DATA IMACH(16) /   63 /, SANITY/987/                             MCHI5360
C                                                                       MCHI5380
C     MACHINE CONSTANTS FOR THE HARRIS SLASH 6 AND SLASH 7.             MCHI5400
C                                                                       MCHI5420
C      DATA IMACH( 1) /       5 /                                       MCHI5440
C      DATA IMACH( 2) /       6 /                                       MCHI5460
C      DATA IMACH( 3) /       0 /                                       MCHI5480
C      DATA IMACH( 4) /       6 /                                       MCHI5500
C      DATA IMACH( 5) /      24 /                                       MCHI5520
C      DATA IMACH( 6) /       3 /                                       MCHI5540
C      DATA IMACH( 7) /       2 /                                       MCHI5560
C      DATA IMACH( 8) /      23 /                                       MCHI5580
C      DATA IMACH( 9) / 8388607 /                                       MCHI5600
C      DATA IMACH(10) /       2 /                                       MCHI5620
C      DATA IMACH(11) /      23 /                                       MCHI5640
C      DATA IMACH(12) /    -127 /                                       MCHI5660
C      DATA IMACH(13) /     127 /                                       MCHI5680
C      DATA IMACH(14) /      38 /                                       MCHI5700
C      DATA IMACH(15) /    -127 /                                       MCHI5720
C      DATA IMACH(16) /     127 /, SANITY/987/                          MCHI5740
C                                                                       MCHI5760
C     MACHINE CONSTANTS FOR THE HONEYWELL DPS 8/70 SERIES.              MCHI5780
C                                                                       MCHI5800
C      DATA IMACH( 1) /    5 /                                          MCHI5820
C      DATA IMACH( 2) /    6 /                                          MCHI5840
C      DATA IMACH( 3) /   43 /                                          MCHI5860
C      DATA IMACH( 4) /    6 /                                          MCHI5880
C      DATA IMACH( 5) /   36 /                                          MCHI5900
C      DATA IMACH( 6) /    4 /                                          MCHI5920
C      DATA IMACH( 7) /    2 /                                          MCHI5940
C      DATA IMACH( 8) /   35 /                                          MCHI5960
C      DATA IMACH( 9) / O377777777777 /                                 MCHI5980
C      DATA IMACH(10) /    2 /                                          MCHI6000
C      DATA IMACH(11) /   27 /                                          MCHI6020
C      DATA IMACH(12) / -127 /                                          MCHI6040
C      DATA IMACH(13) /  127 /                                          MCHI6060
C      DATA IMACH(14) /   63 /                                          MCHI6080
C      DATA IMACH(15) / -127 /                                          MCHI6100
C      DATA IMACH(16) /  127 /, SANITY/987/                             MCHI6120
C                                                                       MCHI6140
C     MACHINE CONSTANTS FOR THE IBM 360/370 SERIES,                     MCHI6160
C     THE XEROX SIGMA 5/7/9 AND THE SEL SYSTEMS 85/86.                  MCHI6180
C                                                                       MCHI6200
C      DATA IMACH( 1) /   5 /                                           MCHI6220
C      DATA IMACH( 2) /   6 /                                           MCHI6240
C      DATA IMACH( 3) /   7 /                                           MCHI6260
C      DATA IMACH( 4) /   6 /                                           MCHI6280
C      DATA IMACH( 5) /  32 /                                           MCHI6300
C      DATA IMACH( 6) /   4 /                                           MCHI6320
C      DATA IMACH( 7) /   2 /                                           MCHI6340
C      DATA IMACH( 8) /  31 /                                           MCHI6360
C      DATA IMACH( 9) / Z7FFFFFFF /                                     MCHI6380
C      DATA IMACH(10) /  16 /                                           MCHI6400
C      DATA IMACH(11) /   6 /                                           MCHI6420
C      DATA IMACH(12) / -64 /                                           MCHI6440
C      DATA IMACH(13) /  63 /                                           MCHI6460
C      DATA IMACH(14) /  14 /                                           MCHI6480
C      DATA IMACH(15) / -64 /                                           MCHI6500
C      DATA IMACH(16) /  63 /, SANITY/987/                              MCHI6520
C                                                                       MCHI6540
C     MACHINE CONSTANTS FOR THE INTERDATA 8/32                          MCHI6560
C     WITH THE UNIX SYSTEM FORTRAN 77 COMPILER.                         MCHI6580
C                                                                       MCHI6600
C     FOR THE INTERDATA FORTRAN VII COMPILER REPLACE                    MCHI6620
C     THE Z'S SPECIFYING HEX CONSTANTS WITH Y'S.                        MCHI6640
C                                                                       MCHI6660
C      DATA IMACH( 1) /   5 /                                           MCHI6680
C      DATA IMACH( 2) /   6 /                                           MCHI6700
C      DATA IMACH( 3) /   6 /                                           MCHI6720
C      DATA IMACH( 4) /   6 /                                           MCHI6740
C      DATA IMACH( 5) /  32 /                                           MCHI6760
C      DATA IMACH( 6) /   4 /                                           MCHI6780
C      DATA IMACH( 7) /   2 /                                           MCHI6800
C      DATA IMACH( 8) /  31 /                                           MCHI6820
C      DATA IMACH( 9) / Z'7FFFFFFF' /                                   MCHI6840
C      DATA IMACH(10) /  16 /                                           MCHI6860
C      DATA IMACH(11) /   6 /                                           MCHI6880
C      DATA IMACH(12) / -64 /                                           MCHI6900
C      DATA IMACH(13) /  62 /                                           MCHI6920
C      DATA IMACH(14) /  14 /                                           MCHI6940
C      DATA IMACH(15) / -64 /                                           MCHI6960
C      DATA IMACH(16) /  62 /, SANITY/987/                              MCHI6980
C                                                                       MCHI7000
C     MACHINE CONSTANTS FOR THE PDP-10 (KA PROCESSOR).                  MCHI7020
C                                                                       MCHI7040
C      DATA IMACH( 1) /    5 /                                          MCHI7060
C      DATA IMACH( 2) /    6 /                                          MCHI7080
C      DATA IMACH( 3) /    7 /                                          MCHI7100
C      DATA IMACH( 4) /    6 /                                          MCHI7120
C      DATA IMACH( 5) /   36 /                                          MCHI7140
C      DATA IMACH( 6) /    5 /                                          MCHI7160
C      DATA IMACH( 7) /    2 /                                          MCHI7180
C      DATA IMACH( 8) /   35 /                                          MCHI7200
C      DATA IMACH( 9) / "377777777777 /                                 MCHI7220
C      DATA IMACH(10) /    2 /                                          MCHI7240
C      DATA IMACH(11) /   27 /                                          MCHI7260
C      DATA IMACH(12) / -128 /                                          MCHI7280
C      DATA IMACH(13) /  127 /                                          MCHI7300
C      DATA IMACH(14) /   54 /                                          MCHI7320
C      DATA IMACH(15) / -101 /                                          MCHI7340
C      DATA IMACH(16) /  127 /, SANITY/987/                             MCHI7360
C                                                                       MCHI7380
C     MACHINE CONSTANTS FOR THE PDP-10 (KI PROCESSOR).                  MCHI7400
C                                                                       MCHI7420
C      DATA IMACH( 1) /    5 /                                          MCHI7440
C      DATA IMACH( 2) /    6 /                                          MCHI7460
C      DATA IMACH( 3) /    7 /                                          MCHI7480
C      DATA IMACH( 4) /    6 /                                          MCHI7500
C      DATA IMACH( 5) /   36 /                                          MCHI7520
C      DATA IMACH( 6) /    5 /                                          MCHI7540
C      DATA IMACH( 7) /    2 /                                          MCHI7560
C      DATA IMACH( 8) /   35 /                                          MCHI7580
C      DATA IMACH( 9) / "377777777777 /                                 MCHI7600
C      DATA IMACH(10) /    2 /                                          MCHI7620
C      DATA IMACH(11) /   27 /                                          MCHI7640
C      DATA IMACH(12) / -128 /                                          MCHI7660
C      DATA IMACH(13) /  127 /                                          MCHI7680
C      DATA IMACH(14) /   62 /                                          MCHI7700
C      DATA IMACH(15) / -128 /                                          MCHI7720
C      DATA IMACH(16) /  127 /, SANITY/987/                             MCHI7740
C                                                                       MCHI7760
C     MACHINE CONSTANTS FOR PDP-11 FORTRANS SUPPORTING                  MCHI7780
C     32-BIT INTEGER ARITHMETIC.                                        MCHI7800
C                                                                       MCHI7820
C      DATA IMACH( 1) /    5 /                                          MCHI7840
C      DATA IMACH( 2) /    6 /                                          MCHI7860
C      DATA IMACH( 3) /    7 /                                          MCHI7880
C      DATA IMACH( 4) /    6 /                                          MCHI7900
C      DATA IMACH( 5) /   32 /                                          MCHI7920
C      DATA IMACH( 6) /    4 /                                          MCHI7940
C      DATA IMACH( 7) /    2 /                                          MCHI7960
C      DATA IMACH( 8) /   31 /                                          MCHI7980
C      DATA IMACH( 9) / 2147483647 /                                    MCHI8000
C      DATA IMACH(10) /    2 /                                          MCHI8020
C      DATA IMACH(11) /   24 /                                          MCHI8040
C      DATA IMACH(12) / -127 /                                          MCHI8060
C      DATA IMACH(13) /  127 /                                          MCHI8080
C      DATA IMACH(14) /   56 /                                          MCHI8100
C      DATA IMACH(15) / -127 /                                          MCHI8120
C      DATA IMACH(16) /  127 /, SANITY/987/                             MCHI8140
C                                                                       MCHI8160
C     MACHINE CONSTANTS FOR PDP-11 FORTRANS SUPPORTING                  MCHI8180
C     16-BIT INTEGER ARITHMETIC.                                        MCHI8200
C                                                                       MCHI8220
C      DATA IMACH( 1) /    5 /                                          MCHI8240
C      DATA IMACH( 2) /    6 /                                          MCHI8260
C      DATA IMACH( 3) /    7 /                                          MCHI8280
C      DATA IMACH( 4) /    6 /                                          MCHI8300
C      DATA IMACH( 5) /   16 /                                          MCHI8320
C      DATA IMACH( 6) /    2 /                                          MCHI8340
C      DATA IMACH( 7) /    2 /                                          MCHI8360
C      DATA IMACH( 8) /   15 /                                          MCHI8380
C      DATA IMACH( 9) / 32767 /                                         MCHI8400
C      DATA IMACH(10) /    2 /                                          MCHI8420
C      DATA IMACH(11) /   24 /                                          MCHI8440
C      DATA IMACH(12) / -127 /                                          MCHI8460
C      DATA IMACH(13) /  127 /                                          MCHI8480
C      DATA IMACH(14) /   56 /                                          MCHI8500
C      DATA IMACH(15) / -127 /                                          MCHI8520
C      DATA IMACH(16) /  127 /, SANITY/987/                             MCHI8540
C                                                                       MCHI8560
C     MACHINE CONSTANTS FOR THE PRIME 50 SERIES SYSTEMS                 MCHI8580
C     WTIH 32-BIT INTEGERS AND 64V MODE INSTRUCTIONS,                   MCHI8600
C     SUPPLIED BY IGOR BRAY.                                            MCHI8620
C                                                                       MCHI8640
C      DATA IMACH( 1) /            1 /                                  MCHI8660
C      DATA IMACH( 2) /            1 /                                  MCHI8680
C      DATA IMACH( 3) /            2 /                                  MCHI8700
C      DATA IMACH( 4) /            1 /                                  MCHI8720
C      DATA IMACH( 5) /           32 /                                  MCHI8740
C      DATA IMACH( 6) /            4 /                                  MCHI8760
C      DATA IMACH( 7) /            2 /                                  MCHI8780
C      DATA IMACH( 8) /           31 /                                  MCHI8800
C      DATA IMACH( 9) / :17777777777 /                                  MCHI8820
C      DATA IMACH(10) /            2 /                                  MCHI8840
C      DATA IMACH(11) /           23 /                                  MCHI8860
C      DATA IMACH(12) /         -127 /                                  MCHI8880
C      DATA IMACH(13) /         +127 /                                  MCHI8900
C      DATA IMACH(14) /           47 /                                  MCHI8920
C      DATA IMACH(15) /       -32895 /                                  MCHI8940
C      DATA IMACH(16) /       +32637 /, SANITY/987/                     MCHI8960
C                                                                       MCHI8980
C     MACHINE CONSTANTS FOR THE SEQUENT BALANCE 8000.                   MCHI9000
C                                                                       MCHI9020
C      DATA IMACH( 1) /     0 /                                         MCHI9040
C      DATA IMACH( 2) /     0 /                                         MCHI9060
C      DATA IMACH( 3) /     7 /                                         MCHI9080
C      DATA IMACH( 4) /     0 /                                         MCHI9100
C      DATA IMACH( 5) /    32 /                                         MCHI9120
C      DATA IMACH( 6) /     1 /                                         MCHI9140
C      DATA IMACH( 7) /     2 /                                         MCHI9160
C      DATA IMACH( 8) /    31 /                                         MCHI9180
C      DATA IMACH( 9) /  2147483647 /                                   MCHI9200
C      DATA IMACH(10) /     2 /                                         MCHI9220
C      DATA IMACH(11) /    24 /                                         MCHI9240
C      DATA IMACH(12) /  -125 /                                         MCHI9260
C      DATA IMACH(13) /   128 /                                         MCHI9280
C      DATA IMACH(14) /    53 /                                         MCHI9300
C      DATA IMACH(15) / -1021 /                                         MCHI9320
C      DATA IMACH(16) /  1024 /, SANITY/987/                            MCHI9340
C                                                                       MCHI9360
C     MACHINE CONSTANTS FOR THE UNIVAC 1100 SERIES.                     MCHI9380
C                                                                       MCHI9400
C     NOTE THAT THE PUNCH UNIT, I1MACH(3), HAS BEEN SET TO 7            MCHI9420
C     WHICH IS APPROPRIATE FOR THE UNIVAC-FOR SYSTEM.                   MCHI9440
C     IF YOU HAVE THE UNIVAC-FTN SYSTEM, SET IT TO 1.                   MCHI9460
C                                                                       MCHI9480
C      DATA IMACH( 1) /    5 /                                          MCHI9500
C      DATA IMACH( 2) /    6 /                                          MCHI9520
C      DATA IMACH( 3) /    7 /                                          MCHI9540
C      DATA IMACH( 4) /    6 /                                          MCHI9560
C      DATA IMACH( 5) /   36 /                                          MCHI9580
C      DATA IMACH( 6) /    6 /                                          MCHI9600
C      DATA IMACH( 7) /    2 /                                          MCHI9620
C      DATA IMACH( 8) /   35 /                                          MCHI9640
C      DATA IMACH( 9) / O377777777777 /                                 MCHI9660
C      DATA IMACH(10) /    2 /                                          MCHI9680
C      DATA IMACH(11) /   27 /                                          MCHI9700
C      DATA IMACH(12) / -128 /                                          MCHI9720
C      DATA IMACH(13) /  127 /                                          MCHI9740
C      DATA IMACH(14) /   60 /                                          MCHI9760
C      DATA IMACH(15) /-1024 /                                          MCHI9780
C      DATA IMACH(16) / 1023 /, SANITY/987/                             MCHI9800
C                                                                       MCHI9820
C     MACHINE CONSTANTS FOR VAX.                                        MCHI9840
C                                                                       MCHI9860
C      DATA IMACH( 1) /    5 /                                          MCHI9880
C      DATA IMACH( 2) /    6 /                                          MCHI9900
C      DATA IMACH( 3) /    7 /                                          MCHI9920
C      DATA IMACH( 4) /    6 /                                          MCHI9940
C      DATA IMACH( 5) /   32 /                                          MCHI9960
C      DATA IMACH( 6) /    4 /                                          MCHI9980
C      DATA IMACH( 7) /    2 /                                          MCHI0000
C      DATA IMACH( 8) /   31 /                                          MCHI0020
C      DATA IMACH( 9) / 2147483647 /                                    MCHI0040
C      DATA IMACH(10) /    2 /                                          MCHI0060
C      DATA IMACH(11) /   24 /                                          MCHI0080
C      DATA IMACH(12) / -127 /                                          MCHI0100
C      DATA IMACH(13) /  127 /                                          MCHI0120
C      DATA IMACH(14) /   56 /                                          MCHI0140
C      DATA IMACH(15) / -127 /                                          MCHI0160
C      DATA IMACH(16) /  127 /, SANITY/987/                             MCHI0180
C                                                                       MCHI0200
C  ***  ISSUE STOP 777 IF ALL DATA STATEMENTS ARE COMMENTED...          MCHI0220
      IF (SANITY .NE. 987) STOP 777                                     MCHI0240
      IF (I .LT. 1  .OR.  I .GT. 16) GO TO 10                           MCHI0260
C                                                                       MCHI0280
      I1MACH = IMACH(I)                                                 MCHI0300
C/6S                                                                    MCHI0320
C/7S                                                                    MCHI0340
      IF (I .EQ. 6) I1MACH = 1                                          MCHI0360
C/                                                                      MCHI0380
      RETURN                                                            MCHI0400
C                                                                       MCHI0420
 10   WRITE(OUTPUT,9000)                                                MCHI0440
 9000 FORMAT(39H1ERROR    1 IN I1MACH - I OUT OF BOUNDS)                MCHI0460
C                                                                       MCHI0480
      CALL FDUMP                                                        MCHI0500
C                                                                       MCHI0520
      STOP                                                              MCHI0540
C                                                                       MCHI0560
      END                                                               MCHI0580
      INTEGER FUNCTION I8SAVE(ISW,IVALUE,SET)                           ERRV0000
C                                                                       ERRV0020
C  IF (ISW = 1) I8SAVE RETURNS THE CURRENT ERROR NUMBER AND             ERRV0040
C               SETS IT TO IVALUE IF SET = .TRUE. .                     ERRV0060
C                                                                       ERRV0080
C  IF (ISW = 2) I8SAVE RETURNS THE CURRENT RECOVERY SWITCH AND          ERRV0100
C               SETS IT TO IVALUE IF SET = .TRUE. .                     ERRV0120
C                                                                       ERRV0140
      LOGICAL SET                                                       ERRV0160
C                                                                       ERRV0180
      INTEGER IPARAM(2)                                                 ERRV0200
      EQUIVALENCE (IPARAM(1),LERROR) , (IPARAM(2),LRECOV)               ERRV0220
C                                                                       ERRV0240
C  START EXECUTION ERROR FREE AND WITH RECOVERY TURNED OFF.             ERRV0260
C                                                                       ERRV0280
      DATA LERROR/0/ , LRECOV/2/                                        ERRV0300
C                                                                       ERRV0320
      I8SAVE=IPARAM(ISW)                                                ERRV0340
      IF (SET) IPARAM(ISW)=IVALUE                                       ERRV0360
C                                                                       ERRV0380
      RETURN                                                            ERRV0400
C                                                                       ERRV0420
      END                                                               ERRV0440
      SUBROUTINE S88FMT( N, W, IFMT )                                   ERRM0000
C                                                                       ERRM0020
C  S88FMT  REPLACES IFMT(1), ... , IFMT(N) WITH                         ERRM0040
C  THE CHARACTERS CORRESPONDING TO THE N LEAST SIGNIFICANT              ERRM0060
C  DIGITS OF W.                                                         ERRM0080
C                                                                       ERRM0100
      INTEGER N,W                                                       ERRM0120
C/6S                                                                    ERRM0140
C     INTEGER IFMT(N)                                                   ERRM0160
C/7S                                                                    ERRM0180
      CHARACTER*1 IFMT(N)                                               ERRM0200
C/                                                                      ERRM0220
C                                                                       ERRM0240
      INTEGER NT,WT                                                     ERRM0260
C                                                                       ERRM0280
C/6S                                                                    ERRM0300
C     INTEGER DIGITS(10)                                                ERRM0320
C     DATA DIGITS( 1) / 1H0 /                                           ERRM0340
C     DATA DIGITS( 2) / 1H1 /                                           ERRM0360
C     DATA DIGITS( 3) / 1H2 /                                           ERRM0380
C     DATA DIGITS( 4) / 1H3 /                                           ERRM0400
C     DATA DIGITS( 5) / 1H4 /                                           ERRM0420
C     DATA DIGITS( 6) / 1H5 /                                           ERRM0440
C     DATA DIGITS( 7) / 1H6 /                                           ERRM0460
C     DATA DIGITS( 8) / 1H7 /                                           ERRM0480
C     DATA DIGITS( 9) / 1H8 /                                           ERRM0500
C     DATA DIGITS(10) / 1H9 /                                           ERRM0520
C/7S                                                                    ERRM0540
      CHARACTER*1 DIGITS(10)                                            ERRM0560
      DATA DIGITS( 1) / '0' /                                           ERRM0580
      DATA DIGITS( 2) / '1' /                                           ERRM0600
      DATA DIGITS( 3) / '2' /                                           ERRM0620
      DATA DIGITS( 4) / '3' /                                           ERRM0640
      DATA DIGITS( 5) / '4' /                                           ERRM0660
      DATA DIGITS( 6) / '5' /                                           ERRM0680
      DATA DIGITS( 7) / '6' /                                           ERRM0700
      DATA DIGITS( 8) / '7' /                                           ERRM0720
      DATA DIGITS( 9) / '8' /                                           ERRM0740
      DATA DIGITS(10) / '9' /                                           ERRM0760
C/                                                                      ERRM0780
C                                                                       ERRM0800
      NT = N                                                            ERRM0820
      WT = W                                                            ERRM0840
C                                                                       ERRM0860
 10   IF (NT .LE. 0) RETURN                                             ERRM0880
        IDIGIT = MOD( WT, 10 )                                          ERRM0900
        IFMT(NT) = DIGITS(IDIGIT+1)                                     ERRM0920
        WT = WT/10                                                      ERRM0940
        NT = NT - 1                                                     ERRM0960
        GO TO 10                                                        ERRM0980
C                                                                       ERRM1000
      END                                                               ERRM1020
      SUBROUTINE FDUMP                                                  FDMP0000
C  THIS IS A DUMMY ROUTINE TO BE SENT OUT ON                            FDMP0020
C  THE PORT SEDIT TAPE                                                  FDMP0040
C                                                                       FDMP0060
      RETURN                                                            FDMP0080
      END                                                               FDMP0100
C****END OF ROUTINES NEEDED FOR PORT 3 FRAMEWORK CHAPTER****************ZZZZ0000
