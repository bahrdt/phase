      SUBROUTINE EIGEN(NM,N,A,WR,WI,Z)                                  
      COMMON/CSTAK/DSTAK(500)                                           
C                                                                       
      REAL A(NM,N),WR(N),WI(N),Z(NM,N)                                  
      REAL RSTAK(1000)                                                  
C                                                                       
      EQUIVALENCE (DSTAK(1),RSTAK(1))                                   
C                                                                       
C EIGEN FINDS THE EIGENVALUES AND EIGENVECTORS                          
C OF A REAL MATRIX (NOT IMAGINARY) BY                                   
C CALLING THE SEQUENCE OF SUBROUTINES                                   
C ORTHE,ORTRA, AND HQR2, WHICH, IN TURN, ARE                            
C THE EISPACK ROUTINES ORTHES, ORTRAN, AND HQR2,                        
C ADJUSTED FOR USE IN THE PORT LIBRARY.                                 
C                                                                       
C ON INPUT -                                                            
C                                                                       
C   NM - AN INTEGER INPUT VARIABLE SET EQUAL TO                         
C        THE ROW DIMENSION OF THE TWO-DIMENSIONAL ARRAYS                
C        A AND Z AS SPECIFIED IN THE DIMENSION STATEMENTS               
C        FOR A AND Z IN THE CALLING PROGRAM.                            
C                                                                       
C   N -  AN INTEGER INPUT VARIABLE SET EQUAL TO THE                     
C        ORDER OF THE MATRIX A.                                         
C                                                                       
C     N MUST NOT BE GREATER THAN NM.                                    
C                                                                       
C   A - THE MATRIX, A REAL TWO-DIMENSIONAL                              
C       ARRAY WITH ROW DIMENSION NM AND COLUMN                          
C       DIMENSION AT LEAST N.                                           
C                                                                       
C     A IS OVERWRITTEN.                                                 
C                                                                       
C                                                                       
C                                                                       
C ON OUTPUT -                                                           
C                                                                       
C   WR - A REAL ARRAY OF DIMENSION                                      
C        AT LEAST N CONTAINING THE REAL PARTS OF THE EIGENVALUES        
C                                                                       
C   WI - A REAL ARRAY OF DIMENSION                                      
C        AT LEAST N CONTAINING THE IMAGINARY PARTS OF THE EIGENVALUES.  
C                                                                       
C     THE EIGENVALUES ARE UNORDERED EXCEPT THAT                         
C     COMPLEX CONJUGATE PAIRS OF EIGENVALUES                            
C     APPEAR CONSECUTIVELY WITH THE EIGENVALUE HAVING                   
C     THE POSITIVE IMAGINARY PART FIRST.                                
C                                                                       
C   Z - A REAL TWO-DIMENSIONAL ARRAY                                    
C       WITH ROW DIMENSION NM AND COLUMN DIMENSION                      
C       AT LEAST N CONTAINING THE REAL AND IMAGINARY PARTS              
C       OF THE EIGENVECTORS.                                            
C                                                                       
C       IF THE J-TH EIGENVALUE IS REAL, THE J-TH                        
C       COLUMN OF Z CONTAINS ITS EIGENVECTOR.                           
C                                                                       
C       IF THE J-TH EIGENVALUE IS COMPLEX WITH                          
C       POSITIVE REAL PART, THE J-TH AND (J+1)-TH                       
C       COLUMNS OF Z CONTAIN THE REAL AND IMAGINARY                     
C       PARTS OF ITS EIGENVECTOR.                                       
C                                                                       
C       THE CONJUGATE OF THIS VECTOR IS THE                             
C       EIGENVECTOR FOR THE CONJUGATE EIGENVALUE.                       
C       THE EIGENVECTORS ARE NOT NORMALIZED.                            
C                                                                       
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C          1 - N IS GREATER THAN NM                                     
C                                                                       
C          K - THE K-TH EIGENVALUE COULD NOT BE COMPUTED                
C              WITHIN 30 ITERATIONS.                                    
C                                                                       
C              THE EIGENVALUES IN THE WR AND WRI ARRAYS                 
C              SHOULD BE CORRECT FOR INDICES                            
C              K+1, K+2,...,N, BUT NO EIGENVECTORS ARE COMPUTED.        
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C CHECK FOR INPUT ERROR IN N                                            
C                                                                       
C/6S                                                                    
C     IF (N .GT. NM) CALL SETERR(                                       
C    1   29H EIGEN - N IS GREATER THAN NM,29,1,2)                       
C/7S                                                                    
      IF (N .GT. NM) CALL SETERR(                                       
     1   ' EIGEN - N IS GREATER THAN NM',29,1,2)                        
C/                                                                      
C                                                                       
C ALLOCATE A SCRATCH VECTOR                                             
      IORT = ISTKGT(N,3)                                                
C                                                                       
      CALL ORTHE (NM,N,1,N,A,RSTAK(IORT))                               
      CALL ORTRA (NM,N,1,N,A,RSTAK(IORT),Z)                             
      CALL HQR2 (NM,N,1,N,A,WR,WI,Z,IERR)                               
C                                                                       
      IF (IERR .NE. 0) GO TO 10                                         
      CALL ISTKRL(1)                                                    
      RETURN                                                            
C/6S                                                                    
C 10  CALL SETERR(                                                      
C    1   34H EIGEN - FAILED ON THAT EIGENVALUE,34,IERR,1)               
C/7S                                                                    
  10  CALL SETERR(                                                      
     1   ' EIGEN - FAILED ON THAT EIGENVALUE',34,IERR,1)                
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
      RETURN                                                            
      END                                                               
      SUBROUTINE HQR2(NM,N,LOW,IGH,H,WR,WI,Z,IERR)                      
C                                                                       
      INTEGER I,J,K,L,M,N,EN,II,JJ,LL,MM,NA,NM,NN,                      
     X        IGH,ITN,ITS,LOW,MP2,ENM2,IERR                             
      REAL H(NM,N),WR(N),WI(N),Z(NM,N)                                  
      REAL P,Q,R,S,T,W,X,Y,RA,SA,VI,VR,ZZ,NORM,TST1,TST2                
      COMPLEX Z3                                                        
      LOGICAL NOTLAS                                                    
C                                                                       
C     THIS SUBROUTINE IS A TRANSLATION OF THE ALGOL PROCEDURE HQR2,     
C     NUM. MATH. 16, 181-204(1970) BY PETERS AND WILKINSON.             
C     HANDBOOK FOR AUTO. COMP., VOL.II-LINEAR ALGEBRA, 372-395(1971).   
C                                                                       
C     THIS SUBROUTINE FINDS THE EIGENVALUES AND EIGENVECTORS            
C     OF A REAL UPPER HESSENBERG MATRIX BY THE QR METHOD.  THE          
C     EIGENVECTORS OF A REAL GENERAL MATRIX CAN ALSO BE FOUND           
C     IF  ELMHES  AND  ELTRAN  OR  ORTHES  AND  ORTRAN  HAVE            
C     BEEN USED TO REDUCE THIS GENERAL MATRIX TO HESSENBERG FORM        
C     AND TO ACCUMULATE THE SIMILARITY TRANSFORMATIONS.                 
C                                                                       
C     ON INPUT                                                          
C                                                                       
C        NM MUST BE SET TO THE ROW DIMENSION OF TWO-DIMENSIONAL         
C          ARRAY PARAMETERS AS DECLARED IN THE CALLING PROGRAM          
C          DIMENSION STATEMENT.                                         
C                                                                       
C        N IS THE ORDER OF THE MATRIX.                                  
C                                                                       
C        LOW AND IGH ARE INTEGERS DETERMINED BY THE BALANCING           
C          SUBROUTINE  BALANC.  IF  BALANC  HAS NOT BEEN USED,          
C          SET LOW=1, IGH=N.                                            
C                                                                       
C        H CONTAINS THE UPPER HESSENBERG MATRIX.                        
C                                                                       
C        Z CONTAINS THE TRANSFORMATION MATRIX PRODUCED BY  ELTRAN       
C          AFTER THE REDUCTION BY  ELMHES, OR BY  ORTRAN  AFTER THE     
C          REDUCTION BY  ORTHES, IF PERFORMED.  IF THE EIGENVECTORS     
C          OF THE HESSENBERG MATRIX ARE DESIRED, Z MUST CONTAIN THE     
C          IDENTITY MATRIX.                                             
C                                                                       
C     ON OUTPUT                                                         
C                                                                       
C        H HAS BEEN DESTROYED.                                          
C                                                                       
C        WR AND WI CONTAIN THE REAL AND IMAGINARY PARTS,                
C          RESPECTIVELY, OF THE EIGENVALUES.  THE EIGENVALUES           
C          ARE UNORDERED EXCEPT THAT COMPLEX CONJUGATE PAIRS            
C          OF VALUES APPEAR CONSECUTIVELY WITH THE EIGENVALUE           
C          HAVING THE POSITIVE IMAGINARY PART FIRST.  IF AN             
C          ERROR EXIT IS MADE, THE EIGENVALUES SHOULD BE CORRECT        
C          FOR INDICES IERR+1,...,N.                                    
C                                                                       
C        Z CONTAINS THE REAL AND IMAGINARY PARTS OF THE EIGENVECTORS.   
C          IF THE I-TH EIGENVALUE IS REAL, THE I-TH COLUMN OF Z         
C          CONTAINS ITS EIGENVECTOR.  IF THE I-TH EIGENVALUE IS COMPLEX 
C          WITH POSITIVE IMAGINARY PART, THE I-TH AND (I+1)-TH          
C          COLUMNS OF Z CONTAIN THE REAL AND IMAGINARY PARTS OF ITS     
C          EIGENVECTOR.  THE EIGENVECTORS ARE UNNORMALIZED.  IF AN      
C          ERROR EXIT IS MADE, NONE OF THE EIGENVECTORS HAS BEEN FOUND. 
C                                                                       
C        IERR IS SET TO                                                 
C          ZERO       FOR NORMAL RETURN,                                
C          J          IF THE LIMIT OF 30*N ITERATIONS IS EXHAUSTED      
C                     WHILE THE J-TH EIGENVALUE IS BEING SOUGHT.        
C                                                                       
C     THIS ROUTINE IS FROM EISPACK (VERSION DATED AUGUST 1983), WITH    
C     CALLS ON CDIV REPLACED BY COMPLEX DIVISION.                       
C                                                                       
C     ------------------------------------------------------------------
C                                                                       
      IERR = 0                                                          
      NORM = 0.0E0                                                      
      K = 1                                                             
C     .......... STORE ROOTS ISOLATED BY BALANC                         
C                AND COMPUTE MATRIX NORM ..........                     
      DO 50 I = 1, N                                                    
C                                                                       
         DO 40 J = K, N                                                 
   40    NORM = NORM + ABS(H(I,J))                                      
C                                                                       
         K = I                                                          
         IF (I .GE. LOW .AND. I .LE. IGH) GO TO 50                      
         WR(I) = H(I,I)                                                 
         WI(I) = 0.0E0                                                  
   50 CONTINUE                                                          
C                                                                       
      EN = IGH                                                          
      T = 0.0E0                                                         
      ITN = 30*N                                                        
C     .......... SEARCH FOR NEXT EIGENVALUES ..........                 
   60 IF (EN .LT. LOW) GO TO 340                                        
      ITS = 0                                                           
      NA = EN - 1                                                       
      ENM2 = NA - 1                                                     
C     .......... LOOK FOR SINGLE SMALL SUB-DIAGONAL ELEMENT             
C                FOR L=EN STEP -1 UNTIL LOW DO -- ..........            
   70 DO 80 LL = LOW, EN                                                
         L = EN + LOW - LL                                              
         IF (L .EQ. LOW) GO TO 100                                      
         S = ABS(H(L-1,L-1)) + ABS(H(L,L))                              
         IF (S .EQ. 0.0E0) S = NORM                                     
         TST1 = S                                                       
         TST2 = TST1 + ABS(H(L,L-1))                                    
         IF (TST2 .EQ. TST1) GO TO 100                                  
   80 CONTINUE                                                          
C     .......... FORM SHIFT ..........                                  
  100 X = H(EN,EN)                                                      
      IF (L .EQ. EN) GO TO 270                                          
      Y = H(NA,NA)                                                      
      W = H(EN,NA) * H(NA,EN)                                           
      IF (L .EQ. NA) GO TO 280                                          
      IF (ITN .EQ. 0) GO TO 1000                                        
      IF (ITS .NE. 10 .AND. ITS .NE. 20) GO TO 130                      
C     .......... FORM EXCEPTIONAL SHIFT ..........                      
      T = T + X                                                         
C                                                                       
      DO 120 I = LOW, EN                                                
  120 H(I,I) = H(I,I) - X                                               
C                                                                       
      S = ABS(H(EN,NA)) + ABS(H(NA,ENM2))                               
      X = 0.75E0 * S                                                    
      Y = X                                                             
      W = -0.4375E0 * S * S                                             
  130 ITS = ITS + 1                                                     
      ITN = ITN - 1                                                     
C     .......... LOOK FOR TWO CONSECUTIVE SMALL                         
C                SUB-DIAGONAL ELEMENTS.                                 
C                FOR M=EN-2 STEP -1 UNTIL L DO -- ..........            
      DO 140 MM = L, ENM2                                               
         M = ENM2 + L - MM                                              
         ZZ = H(M,M)                                                    
         R = X - ZZ                                                     
         S = Y - ZZ                                                     
         P = (R * S - W) / H(M+1,M) + H(M,M+1)                          
         Q = H(M+1,M+1) - ZZ - R - S                                    
         R = H(M+2,M+1)                                                 
         S = ABS(P) + ABS(Q) + ABS(R)                                   
         P = P / S                                                      
         Q = Q / S                                                      
         R = R / S                                                      
         IF (M .EQ. L) GO TO 150                                        
         TST1 = ABS(P)*(ABS(H(M-1,M-1)) + ABS(ZZ) + ABS(H(M+1,M+1)))    
         TST2 = TST1 + ABS(H(M,M-1))*(ABS(Q) + ABS(R))                  
         IF (TST2 .EQ. TST1) GO TO 150                                  
  140 CONTINUE                                                          
C                                                                       
  150 MP2 = M + 2                                                       
C                                                                       
      DO 160 I = MP2, EN                                                
         H(I,I-2) = 0.0E0                                               
         IF (I .EQ. MP2) GO TO 160                                      
         H(I,I-3) = 0.0E0                                               
  160 CONTINUE                                                          
C     .......... DOUBLE QR STEP INVOLVING ROWS L TO EN AND              
C                COLUMNS M TO EN ..........                             
      DO 260 K = M, NA                                                  
         NOTLAS = K .NE. NA                                             
         IF (K .EQ. M) GO TO 170                                        
         P = H(K,K-1)                                                   
         Q = H(K+1,K-1)                                                 
         R = 0.0E0                                                      
         IF (NOTLAS) R = H(K+2,K-1)                                     
         X = ABS(P) + ABS(Q) + ABS(R)                                   
         IF (X .EQ. 0.0E0) GO TO 260                                    
         P = P / X                                                      
         Q = Q / X                                                      
         R = R / X                                                      
  170    S = SIGN(SQRT(P*P+Q*Q+R*R),P)                                  
         IF (K .EQ. M) GO TO 180                                        
         H(K,K-1) = -S * X                                              
         GO TO 190                                                      
  180    IF (L .NE. M) H(K,K-1) = -H(K,K-1)                             
  190    P = P + S                                                      
         X = P / S                                                      
         Y = Q / S                                                      
         ZZ = R / S                                                     
         Q = Q / P                                                      
         R = R / P                                                      
         IF (NOTLAS) GO TO 225                                          
C     .......... ROW MODIFICATION ..........                            
         DO 200 J = K, N                                                
            P = H(K,J) + Q * H(K+1,J)                                   
            H(K,J) = H(K,J) - P * X                                     
            H(K+1,J) = H(K+1,J) - P * Y                                 
  200    CONTINUE                                                       
C                                                                       
         J = MIN0(EN,K+3)                                               
C     .......... COLUMN MODIFICATION ..........                         
         DO 210 I = 1, J                                                
            P = X * H(I,K) + Y * H(I,K+1)                               
            H(I,K) = H(I,K) - P                                         
            H(I,K+1) = H(I,K+1) - P * Q                                 
  210    CONTINUE                                                       
C     .......... ACCUMULATE TRANSFORMATIONS ..........                  
         DO 220 I = LOW, IGH                                            
            P = X * Z(I,K) + Y * Z(I,K+1)                               
            Z(I,K) = Z(I,K) - P                                         
            Z(I,K+1) = Z(I,K+1) - P * Q                                 
  220    CONTINUE                                                       
         GO TO 255                                                      
  225    CONTINUE                                                       
C     .......... ROW MODIFICATION ..........                            
         DO 230 J = K, N                                                
            P = H(K,J) + Q * H(K+1,J) + R * H(K+2,J)                    
            H(K,J) = H(K,J) - P * X                                     
            H(K+1,J) = H(K+1,J) - P * Y                                 
            H(K+2,J) = H(K+2,J) - P * ZZ                                
  230    CONTINUE                                                       
C                                                                       
         J = MIN0(EN,K+3)                                               
C     .......... COLUMN MODIFICATION ..........                         
         DO 240 I = 1, J                                                
            P = X * H(I,K) + Y * H(I,K+1) + ZZ * H(I,K+2)               
            H(I,K) = H(I,K) - P                                         
            H(I,K+1) = H(I,K+1) - P * Q                                 
            H(I,K+2) = H(I,K+2) - P * R                                 
  240    CONTINUE                                                       
C     .......... ACCUMULATE TRANSFORMATIONS ..........                  
         DO 250 I = LOW, IGH                                            
            P = X * Z(I,K) + Y * Z(I,K+1) + ZZ * Z(I,K+2)               
            Z(I,K) = Z(I,K) - P                                         
            Z(I,K+1) = Z(I,K+1) - P * Q                                 
            Z(I,K+2) = Z(I,K+2) - P * R                                 
  250    CONTINUE                                                       
  255    CONTINUE                                                       
C                                                                       
  260 CONTINUE                                                          
C                                                                       
      GO TO 70                                                          
C     .......... ONE ROOT FOUND ..........                              
  270 H(EN,EN) = X + T                                                  
      WR(EN) = H(EN,EN)                                                 
      WI(EN) = 0.0E0                                                    
      EN = NA                                                           
      GO TO 60                                                          
C     .......... TWO ROOTS FOUND ..........                             
  280 P = (Y - X) / 2.0E0                                               
      Q = P * P + W                                                     
      ZZ = SQRT(ABS(Q))                                                 
      H(EN,EN) = X + T                                                  
      X = H(EN,EN)                                                      
      H(NA,NA) = Y + T                                                  
      IF (Q .LT. 0.0E0) GO TO 320                                       
C     .......... REAL PAIR ..........                                   
      ZZ = P + SIGN(ZZ,P)                                               
      WR(NA) = X + ZZ                                                   
      WR(EN) = WR(NA)                                                   
      IF (ZZ .NE. 0.0E0) WR(EN) = X - W / ZZ                            
      WI(NA) = 0.0E0                                                    
      WI(EN) = 0.0E0                                                    
      X = H(EN,NA)                                                      
      S = ABS(X) + ABS(ZZ)                                              
      P = X / S                                                         
      Q = ZZ / S                                                        
      R = SQRT(P*P+Q*Q)                                                 
      P = P / R                                                         
      Q = Q / R                                                         
C     .......... ROW MODIFICATION ..........                            
      DO 290 J = NA, N                                                  
         ZZ = H(NA,J)                                                   
         H(NA,J) = Q * ZZ + P * H(EN,J)                                 
         H(EN,J) = Q * H(EN,J) - P * ZZ                                 
  290 CONTINUE                                                          
C     .......... COLUMN MODIFICATION ..........                         
      DO 300 I = 1, EN                                                  
         ZZ = H(I,NA)                                                   
         H(I,NA) = Q * ZZ + P * H(I,EN)                                 
         H(I,EN) = Q * H(I,EN) - P * ZZ                                 
  300 CONTINUE                                                          
C     .......... ACCUMULATE TRANSFORMATIONS ..........                  
      DO 310 I = LOW, IGH                                               
         ZZ = Z(I,NA)                                                   
         Z(I,NA) = Q * ZZ + P * Z(I,EN)                                 
         Z(I,EN) = Q * Z(I,EN) - P * ZZ                                 
  310 CONTINUE                                                          
C                                                                       
      GO TO 330                                                         
C     .......... COMPLEX PAIR ..........                                
  320 WR(NA) = X + P                                                    
      WR(EN) = X + P                                                    
      WI(NA) = ZZ                                                       
      WI(EN) = -ZZ                                                      
  330 EN = ENM2                                                         
      GO TO 60                                                          
C     .......... ALL ROOTS FOUND.  BACKSUBSTITUTE TO FIND               
C                VECTORS OF UPPER TRIANGULAR FORM ..........            
  340 IF (NORM .EQ. 0.0E0) GO TO 1001                                   
C     .......... FOR EN=N STEP -1 UNTIL 1 DO -- ..........              
      DO 800 NN = 1, N                                                  
         EN = N + 1 - NN                                                
         P = WR(EN)                                                     
         Q = WI(EN)                                                     
         NA = EN - 1                                                    
         IF (Q) 710, 600, 800                                           
C     .......... REAL VECTOR ..........                                 
  600    M = EN                                                         
         H(EN,EN) = 1.0E0                                               
         IF (NA .EQ. 0) GO TO 800                                       
C     .......... FOR I=EN-1 STEP -1 UNTIL 1 DO -- ..........            
         DO 700 II = 1, NA                                              
            I = EN - II                                                 
            W = H(I,I) - P                                              
            R = 0.0E0                                                   
C                                                                       
            DO 610 J = M, EN                                            
  610       R = R + H(I,J) * H(J,EN)                                    
C                                                                       
            IF (WI(I) .GE. 0.0E0) GO TO 630                             
            ZZ = W                                                      
            S = R                                                       
            GO TO 700                                                   
  630       M = I                                                       
            IF (WI(I) .NE. 0.0E0) GO TO 640                             
            T = W                                                       
            IF (T .NE. 0.0E0) GO TO 635                                 
               TST1 = NORM                                              
               T = TST1                                                 
  632          T = 0.01E0 * T                                           
               TST2 = NORM + T                                          
               IF (TST2 .GT. TST1) GO TO 632                            
  635       H(I,EN) = -R / T                                            
            GO TO 680                                                   
C     .......... SOLVE REAL EQUATIONS ..........                        
  640       X = H(I,I+1)                                                
            Y = H(I+1,I)                                                
            Q = (WR(I) - P) * (WR(I) - P) + WI(I) * WI(I)               
            T = (X * S - ZZ * R) / Q                                    
            H(I,EN) = T                                                 
            IF (ABS(X) .LE. ABS(ZZ)) GO TO 650                          
            H(I+1,EN) = (-R - W * T) / X                                
            GO TO 680                                                   
  650       H(I+1,EN) = (-S - Y * T) / ZZ                               
C                                                                       
C     .......... OVERFLOW CONTROL ..........                            
  680       T = ABS(H(I,EN))                                            
            IF (T .EQ. 0.0E0) GO TO 700                                 
            TST1 = T                                                    
            TST2 = TST1 + 1.0E0/TST1                                    
            IF (TST2 .GT. TST1) GO TO 700                               
            DO 690 J = I, EN                                            
               H(J,EN) = H(J,EN)/T                                      
  690       CONTINUE                                                    
C                                                                       
  700    CONTINUE                                                       
C     .......... END REAL VECTOR ..........                             
         GO TO 800                                                      
C     .......... COMPLEX VECTOR ..........                              
  710    M = NA                                                         
C     .......... LAST VECTOR COMPONENT CHOSEN IMAGINARY SO THAT         
C                EIGENVECTOR MATRIX IS TRIANGULAR ..........            
         IF (ABS(H(EN,NA)) .LE. ABS(H(NA,EN))) GO TO 720                
         H(NA,NA) = Q / H(EN,NA)                                        
         H(NA,EN) = -(H(EN,EN) - P) / H(EN,NA)                          
         GO TO 730                                                      
  720    Z3 = CMPLX(0.0,-H(NA,EN)) / CMPLX(H(NA,NA)-P,Q)                
         H(NA,NA) = REAL(Z3)                                            
         H(NA,EN) = AIMAG(Z3)                                           
  730    H(EN,NA) = 0.0E0                                               
         H(EN,EN) = 1.0E0                                               
         ENM2 = NA - 1                                                  
         IF (ENM2 .EQ. 0) GO TO 800                                     
C     .......... FOR I=EN-2 STEP -1 UNTIL 1 DO -- ..........            
         DO 795 II = 1, ENM2                                            
            I = NA - II                                                 
            W = H(I,I) - P                                              
            RA = 0.0E0                                                  
            SA = 0.0E0                                                  
C                                                                       
            DO 760 J = M, EN                                            
               RA = RA + H(I,J) * H(J,NA)                               
               SA = SA + H(I,J) * H(J,EN)                               
  760       CONTINUE                                                    
C                                                                       
            IF (WI(I) .GE. 0.0E0) GO TO 770                             
            ZZ = W                                                      
            R = RA                                                      
            S = SA                                                      
            GO TO 795                                                   
  770       M = I                                                       
            IF (WI(I) .NE. 0.0E0) GO TO 780                             
            Z3 = CMPLX(-RA,-SA) / CMPLX(W,Q)                            
            H(I,NA) = REAL(Z3)                                          
            H(I,EN) = AIMAG(Z3)                                         
            GO TO 790                                                   
C     .......... SOLVE COMPLEX EQUATIONS ..........                     
  780       X = H(I,I+1)                                                
            Y = H(I+1,I)                                                
            VR = (WR(I) - P) * (WR(I) - P) + WI(I) * WI(I) - Q * Q      
            VI = (WR(I) - P) * 2.0E0 * Q                                
            IF (VR .NE. 0.0E0 .OR. VI .NE. 0.0E0) GO TO 784             
               TST1 = NORM * (ABS(W) + ABS(Q) + ABS(X)                  
     X                      + ABS(Y) + ABS(ZZ))                         
               VR = TST1                                                
  783          VR = 0.01E0 * VR                                         
               TST2 = TST1 + VR                                         
               IF (TST2 .GT. TST1) GO TO 783                            
  784       Z3 = CMPLX(X*R-ZZ*RA+Q*SA,X*S-ZZ*SA-Q*RA) / CMPLX(VR,VI)    
            H(I,NA) = REAL(Z3)                                          
            H(I,EN) = AIMAG(Z3)                                         
            IF (ABS(X) .LE. ABS(ZZ) + ABS(Q)) GO TO 785                 
            H(I+1,NA) = (-RA - W * H(I,NA) + Q * H(I,EN)) / X           
            H(I+1,EN) = (-SA - W * H(I,EN) - Q * H(I,NA)) / X           
            GO TO 790                                                   
  785       Z3 = CMPLX(-R-Y*H(I,NA),-S-Y*H(I,EN)) / CMPLX(ZZ,Q)         
            H(I+1,NA) = REAL(Z3)                                        
            H(I+1,EN) = AIMAG(Z3)                                       
C                                                                       
C     .......... OVERFLOW CONTROL ..........                            
  790       T = AMAX1(ABS(H(I,NA)), ABS(H(I,EN)))                       
            IF (T .EQ. 0.0E0) GO TO 795                                 
            TST1 = T                                                    
            TST2 = TST1 + 1.0E0/TST1                                    
            IF (TST2 .GT. TST1) GO TO 795                               
            DO 792 J = I, EN                                            
               H(J,NA) = H(J,NA)/T                                      
               H(J,EN) = H(J,EN)/T                                      
  792       CONTINUE                                                    
C                                                                       
  795    CONTINUE                                                       
C     .......... END COMPLEX VECTOR ..........                          
  800 CONTINUE                                                          
C     .......... END BACK SUBSTITUTION.                                 
C                VECTORS OF ISOLATED ROOTS ..........                   
      DO 840 I = 1, N                                                   
         IF (I .GE. LOW .AND. I .LE. IGH) GO TO 840                     
C                                                                       
         DO 820 J = I, N                                                
  820    Z(I,J) = H(I,J)                                                
C                                                                       
  840 CONTINUE                                                          
C     .......... MULTIPLY BY TRANSFORMATION MATRIX TO GIVE              
C                VECTORS OF ORIGINAL FULL MATRIX.                       
C                FOR J=N STEP -1 UNTIL LOW DO -- ..........             
      DO 880 JJ = LOW, N                                                
         J = N + LOW - JJ                                               
         M = MIN0(J,IGH)                                                
C                                                                       
         DO 880 I = LOW, IGH                                            
            ZZ = 0.0E0                                                  
C                                                                       
            DO 860 K = LOW, M                                           
  860       ZZ = ZZ + Z(I,K) * H(K,J)                                   
C                                                                       
            Z(I,J) = ZZ                                                 
  880 CONTINUE                                                          
C                                                                       
      GO TO 1001                                                        
C     .......... SET ERROR -- ALL EIGENVALUES HAVE NOT                  
C                CONVERGED AFTER 30*N ITERATIONS ..........             
 1000 IERR = EN                                                         
 1001 RETURN                                                            
      END                                                               
      SUBROUTINE ORTHE(NM,N,LOW,IGH,A,ORT)                              
C                                                                       
      INTEGER I,J,M,N,II,JJ,LA,MP,NM,IGH,KP1,LOW                        
      REAL A(NM,N),ORT(IGH)                                             
      REAL F,G,H,SCALE                                                  
      REAL SQRT,ABS,SIGN                                                
C                                                                       
C     THIS IS THE EISPACK ROUTINE, ORTHES, PUT INTO PORT                
C     AUGUST 18, 1976.                                                  
C                                                                       
C     THE NAME CHANGE IS DUE TO THE PORT CONVENTION THAT ALL DOUBLE     
C     PRECISION NAMES HAVE A D PUT IN FRONT OF THE SINGLE-PRECISION     
C     ONES, WHICH THEREFORE HAVE TO HAVE ONLY 5 CHARACTERS.             
C                                                                       
C                                                                       
C     THIS SUBROUTINE IS A TRANSLATION OF THE ALGOL PROCEDURE ORTHES,   
C     NUM. MATH. 12, 349-368(1968) BY MARTIN AND WILKINSON.             
C     HANDBOOK FOR AUTO. COMP., VOL.II-LINEAR ALGEBRA, 339-358(1971).   
C                                                                       
C     GIVEN A REAL GENERAL MATRIX, THIS SUBROUTINE                      
C     REDUCES A SUBMATRIX SITUATED IN ROWS AND COLUMNS                  
C     LOW THROUGH IGH TO UPPER HESSENBERG FORM BY                       
C     ORTHOGONAL SIMILARITY TRANSFORMATIONS.                            
C                                                                       
C     ON INPUT-                                                         
C                                                                       
C        NM MUST BE SET TO THE ROW DIMENSION OF TWO-DIMENSIONAL         
C          ARRAY PARAMETERS AS DECLARED IN THE CALLING PROGRAM          
C          DIMENSION STATEMENT,                                         
C                                                                       
C        N IS THE ORDER OF THE MATRIX,                                  
C                                                                       
C        LOW AND IGH ARE INTEGERS DETERMINED BY THE BALANCING           
C          SUBROUTINE  BALANC.  IF  BALANC  HAS NOT BEEN USED,          
C          SET LOW=1, IGH=N,                                            
C                                                                       
C        A CONTAINS THE INPUT MATRIX.                                   
C                                                                       
C     ON OUTPUT-                                                        
C                                                                       
C        A CONTAINS THE HESSENBERG MATRIX.  INFORMATION ABOUT           
C          THE ORTHOGONAL TRANSFORMATIONS USED IN THE REDUCTION         
C          IS STORED IN THE REMAINING TRIANGLE UNDER THE                
C          HESSENBERG MATRIX,                                           
C                                                                       
C        ORT CONTAINS FURTHER INFORMATION ABOUT THE TRANSFORMATIONS.    
C          ONLY ELEMENTS LOW THROUGH IGH ARE USED.                      
C                                                                       
C     ------------------------------------------------------------------
C                                                                       
      LA = IGH - 1                                                      
      KP1 = LOW + 1                                                     
      IF (LA .LT. KP1) GO TO 200                                        
C                                                                       
      DO 180 M = KP1, LA                                                
         H = 0.0                                                        
         ORT(M) = 0.0                                                   
         SCALE = 0.0                                                    
C     ********** SCALE COLUMN (ALGOL TOL THEN NOT NEEDED) **********    
         DO 90 I = M, IGH                                               
   90    SCALE = SCALE + ABS(A(I,M-1))                                  
C                                                                       
         IF (SCALE .EQ. 0.0) GO TO 180                                  
         MP = M + IGH                                                   
C     ********** FOR I=IGH STEP -1 UNTIL M DO -- **********             
         DO 100 II = M, IGH                                             
            I = MP - II                                                 
            ORT(I) = A(I,M-1) / SCALE                                   
            H = H + ORT(I) * ORT(I)                                     
  100    CONTINUE                                                       
C                                                                       
         G = -SIGN(SQRT(H),ORT(M))                                      
         H = H - ORT(M) * G                                             
         ORT(M) = ORT(M) - G                                            
C     ********** FORM (I-(U*UT)/H) * A **********                       
         DO 130 J = M, N                                                
            F = 0.0                                                     
C     ********** FOR I=IGH STEP -1 UNTIL M DO -- **********             
            DO 110 II = M, IGH                                          
               I = MP - II                                              
               F = F + ORT(I) * A(I,J)                                  
  110       CONTINUE                                                    
C                                                                       
            F = F / H                                                   
C                                                                       
            DO 120 I = M, IGH                                           
  120       A(I,J) = A(I,J) - F * ORT(I)                                
C                                                                       
  130    CONTINUE                                                       
C     ********** FORM (I-(U*UT)/H)*A*(I-(U*UT)/H) **********            
         DO 160 I = 1, IGH                                              
            F = 0.0                                                     
C     ********** FOR J=IGH STEP -1 UNTIL M DO -- **********             
            DO 140 JJ = M, IGH                                          
               J = MP - JJ                                              
               F = F + ORT(J) * A(I,J)                                  
  140       CONTINUE                                                    
C                                                                       
            F = F / H                                                   
C                                                                       
            DO 150 J = M, IGH                                           
  150       A(I,J) = A(I,J) - F * ORT(J)                                
C                                                                       
  160    CONTINUE                                                       
C                                                                       
         ORT(M) = SCALE * ORT(M)                                        
         A(M,M-1) = SCALE * G                                           
  180 CONTINUE                                                          
C                                                                       
  200 RETURN                                                            
C     ********** LAST CARD OF ORTHE **********                          
      END                                                               
      SUBROUTINE ORTRA(NM,N,LOW,IGH,A,ORT,Z)                            
C                                                                       
      INTEGER I,J,N,KL,MM,MP,NM,IGH,LOW,MP1                             
      REAL A(NM,IGH),ORT(IGH),Z(NM,N)                                   
      REAL G                                                            
C                                                                       
C     THIS IS THE EISPACK ROUTINE, ORTRAN, PUT INTO PORT                
C     AUGUST 18, 1976.                                                  
C                                                                       
C     THE NAME CHANGE IS DUE TO THE PORT CONVENTION THAT ALL DOUBLE     
C     PRECISION NAMES HAVE A D PUT IN FRONT OF THE SINGLE-              
C     PRECISION ONES, WHICH THEREFORE CAN HAVE ONLY 5 CHARACTERS.       
C                                                                       
C     THIS SUBROUTINE IS A TRANSLATION OF THE ALGOL PROCEDURE ORTRANS,  
C     NUM. MATH. 16, 181-204(1970) BY PETERS AND WILKINSON.             
C     HANDBOOK FOR AUTO. COMP., VOL.II-LINEAR ALGEBRA, 372-395(1971).   
C                                                                       
C     THIS SUBROUTINE ACCUMULATES THE ORTHOGONAL SIMILARITY             
C     TRANSFORMATIONS USED IN THE REDUCTION OF A REAL GENERAL           
C   MATRIX TO UPPER HESSENBERG FORM BY ORTHE.                           
C                                                                       
C     ON INPUT-                                                         
C                                                                       
C        NM MUST BE SET TO THE ROW DIMENSION OF TWO-DIMENSIONAL         
C          ARRAY PARAMETERS AS DECLARED IN THE CALLING PROGRAM          
C          DIMENSION STATEMENT,                                         
C                                                                       
C        N IS THE ORDER OF THE MATRIX,                                  
C                                                                       
C        LOW AND IGH ARE INTEGERS DETERMINED BY THE BALANCING           
C          SUBROUTINE  BALANC.  IF  BALANC  HAS NOT BEEN USED,          
C          SET LOW=1, IGH=N,                                            
C                                                                       
C        A CONTAINS INFORMATION ABOUT THE ORTHOGONAL TRANS-             
C          FORMATIONS USED IN THE REDUCTION BY ORTHE                    
C          IN ITS STRICT LOWER TRIANGLE,                                
C                                                                       
C        ORT CONTAINS FURTHER INFORMATION ABOUT THE TRANS-              
C          FORMATIONS USED IN THE REDUCTION BY ORTHE.                   
C          ONLY ELEMENTS LOW THROUGH IGH ARE USED.                      
C                                                                       
C     ON OUTPUT-                                                        
C                                                                       
C        Z CONTAINS THE TRANSFORMATION MATRIX PRODUCED IN THE           
C          REDUCTION BY ORTHE,                                          
C                                                                       
C        ORT HAS BEEN ALTERED.                                          
C                                                                       
C     ------------------------------------------------------------------
C                                                                       
C     ********** INITIALIZE Z TO IDENTITY MATRIX **********             
      DO 80 I = 1, N                                                    
C                                                                       
         DO 60 J = 1, N                                                 
   60    Z(I,J) = 0.0                                                   
C                                                                       
         Z(I,I) = 1.0                                                   
   80 CONTINUE                                                          
C                                                                       
      KL = IGH - LOW - 1                                                
      IF (KL .LT. 1) GO TO 200                                          
C     ********** FOR MP=IGH-1 STEP -1 UNTIL LOW+1 DO -- **********      
      DO 140 MM = 1, KL                                                 
         MP = IGH - MM                                                  
         IF (A(MP,MP-1) .EQ. 0.0) GO TO 140                             
         MP1 = MP + 1                                                   
C                                                                       
         DO 100 I = MP1, IGH                                            
  100    ORT(I) = A(I,MP-1)                                             
C                                                                       
         DO 130 J = MP, IGH                                             
            G = 0.0                                                     
C                                                                       
            DO 110 I = MP, IGH                                          
  110       G = G + ORT(I) * Z(I,J)                                     
C     ********** DIVISOR BELOW IS NEGATIVE OF H FORMED IN ORTHE.        
C                DOUBLE DIVISION AVOIDS POSSIBLE UNDERFLOW **********   
            G = (G / ORT(MP)) / A(MP,MP-1)                              
C                                                                       
            DO 120 I = MP, IGH                                          
  120       Z(I,J) = Z(I,J) + G * ORT(I)                                
C                                                                       
  130    CONTINUE                                                       
C                                                                       
  140 CONTINUE                                                          
C                                                                       
  200 RETURN                                                            
C     ********** LAST CARD OF ORTRA **********                          
      END                                                               
      SUBROUTINE DEIGEN(NM,N,A,WR,WI,Z)                                 
      DOUBLE PRECISION A(NM,N),WR(N),WI(N),Z(NM,N)                      
C                                                                       
      COMMON/CSTAK/D                                                    
      DOUBLE PRECISION D(500)                                           
C                                                                       
C DEIGEN FINDS THE EIGENVALUES AND EIGENVECTORS                         
C OF A DOUBLE-PRECISION MATRIX (NOT IMAGINARY) BY                       
C CALLING THE SEQUENCE OF SUBROUTINES                                   
C DORTHE,DORTRA, AND DHQR2, WHICH, IN TURN, ARE                         
C THE EISPACK ROUTINES ORTHES, ORTRAN, AND HQR2,                        
C ADJUSTED FOR DOUBLE PRECISION.                                        
C                                                                       
C ON INPUT -                                                            
C                                                                       
C   NM - AN INTEGER INPUT VARIABLE SET EQUAL TO                         
C        THE ROW DIMENSION OF THE TWO-DIMENSIONAL ARRAYS                
C        A AND Z AS SPECIFIED IN THE DIMENSION STATEMENTS               
C        FOR A AND Z IN THE CALLING PROGRAM.                            
C                                                                       
C   N -  AN INTEGER INPUT VARIABLE SET EQUAL TO THE                     
C        ORDER OF THE MATRIX A.                                         
C                                                                       
C     N MUST NOT BE GREATER THAN NM.                                    
C                                                                       
C   A - THE MATRIX, A DOUBLE-PRECISION TWO-DIMENSIONAL                  
C       ARRAY WITH ROW DIMENSION NM AND COLUMN                          
C       DIMENSION AT LEAST N.                                           
C                                                                       
C     A IS OVERWRITTEN.                                                 
C                                                                       
C                                                                       
C                                                                       
C ON OUTPUT -                                                           
C                                                                       
C   WR - A DOUBLE-PRECISION ARRAY OF DIMENSION                          
C        AT LEAST N CONTAINING THE REAL PARTS OF THE EIGENVALUES        
C                                                                       
C   WI - A DOUBLE-PRECISION ARRAY OF DIMENSION                          
C        AT LEAST N CONTAINING THE IMAGINARY PARTS OF THE EIGENVALUES.  
C                                                                       
C     THE EIGENVALUES ARE UNORDERED EXCEPT THAT                         
C     COMPLEX CONJUGATE PAIRS OF EIGENVALUES                            
C     APPEAR CONSECUTIVELY WITH THE EIGENVALUE HAVING                   
C     THE POSITIVE IMAGINARY PART FIRST.                                
C                                                                       
C   Z - A DOUBLE-PRECISION TWO-DIMENSIONAL ARRAY                        
C       WITH ROW DIMENSION NM AND COLUMN DIMENSION                      
C       AT LEAST N CONTAINING THE REAL AND IMAGINARY PARTS              
C       OF THE EIGENVECTORS.                                            
C                                                                       
C       IF THE J-TH EIGENVALUE IS REAL, THE J-TH                        
C       COLUMN OF Z CONTAINS ITS EIGENVECTOR.                           
C                                                                       
C       IF THE J-TH EIGENVALUE IS COMPLEX WITH                          
C       POSITIVE REAL PART, THE J-TH AND (J+1)-TH                       
C       COLUMNS OF Z CONTAIN THE REAL AND IMAGINARY                     
C       PARTS OF ITS EIGENVECTOR.                                       
C                                                                       
C       THE CONJUGATE OF THIS VECTOR IS THE                             
C       EIGENVECTOR FOR THE CONJUGATE EIGENVALUE.                       
C       THE EIGENVECTORS ARE NOT NORMALIZED.                            
C                                                                       
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C          1 - N IS GREATER THAN NM                                     
C                                                                       
C          K - THE K-TH EIGENVALUE COULD NOT BE COMPUTED                
C              WITHIN 30 ITERATIONS.                                    
C                                                                       
C              THE EIGENVALUES IN THE WR AND WRI ARRAYS                 
C              SHOULD BE CORRECT FOR INDICES                            
C              K+1, K+2,...,N, BUT NO EIGENVECTORS ARE COMPUTED.        
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C CHECK FOR INPUT ERROR IN N                                            
C                                                                       
C/6S                                                                    
C     IF (N .GT. NM) CALL SETERR(                                       
C    1   29HDEIGEN - N IS GREATER THAN NM,29,1,2)                       
C/7S                                                                    
      IF (N .GT. NM) CALL SETERR(                                       
     1   'DEIGEN - N IS GREATER THAN NM',29,1,2)                        
C/                                                                      
C                                                                       
C ALLOCATE A SCRATCH VECTOR                                             
      IORT = ISTKGT(N,4)                                                
C                                                                       
      CALL DORTHE (NM,N,1,N,A,D(IORT))                                  
      CALL DORTRA (NM,N,1,N,A,D(IORT),Z)                                
      CALL DHQR2 (NM,N,1,N,A,WR,WI,Z,IERR)                              
C                                                                       
      IF (IERR .NE. 0) GO TO 10                                         
      CALL ISTKRL(1)                                                    
      RETURN                                                            
C/6S                                                                    
C 10  CALL SETERR(                                                      
C    1   34HDEIGEN - FAILED ON THAT EIGENVALUE,34,IERR,1)               
C/7S                                                                    
  10  CALL SETERR(                                                      
     1   'DEIGEN - FAILED ON THAT EIGENVALUE',34,IERR,1)                
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
      RETURN                                                            
      END                                                               
      SUBROUTINE DHQR2(NM,N,LOW,IGH,H,WR,WI,Z,IERR)                     
C                                                                       
      INTEGER I,J,K,L,M,N,EN,II,JJ,LL,MM,NA,NM,NN,                      
     X        IGH,ITN,ITS,LOW,MP2,ENM2,IERR                             
      DOUBLE PRECISION H(NM,N),WR(N),WI(N),Z(NM,N)                      
C                                                                       
      DOUBLE PRECISION CMPLXN(2),CMPLXD(2),CMPLXC(2)                    
C  THE ABOVE ARE TO BE USED WITH THE PORT CDDIV                         
C  ROUTINE NEEDED HERE FOR DOUBLE COMPLEX IN                            
C  PLACE OF THE RATIOS USED IN THE ORIGINAL HQR2.                       
C  THEY ARE, RESPECTIVELY, NUMERATOR, DENOMINATOR, AND COMPLEX ANSWER.  
C                                                                       
      DOUBLE PRECISION P,Q,R,S,T,W,X,Y,RA,SA,VI,VR,ZZ,NORM,TST1,TST2    
      LOGICAL NOTLAS                                                    
C                                                                       
C     THIS SUBROUTINE IS A TRANSLATION OF THE ALGOL PROCEDURE HQR2,     
C     NUM. MATH. 16, 181-204(1970) BY PETERS AND WILKINSON.             
C     HANDBOOK FOR AUTO. COMP., VOL.II-LINEAR ALGEBRA, 372-395(1971).   
C                                                                       
C     THIS SUBROUTINE FINDS THE EIGENVALUES AND EIGENVECTORS            
C     OF A REAL UPPER HESSENBERG MATRIX BY THE QR METHOD.  THE          
C     EIGENVECTORS OF A REAL GENERAL MATRIX CAN ALSO BE FOUND           
C     IF  ELMHES  AND  ELTRAN  OR  ORTHES  AND  ORTRAN  HAVE            
C     BEEN USED TO REDUCE THIS GENERAL MATRIX TO HESSENBERG FORM        
C     AND TO ACCUMULATE THE SIMILARITY TRANSFORMATIONS.                 
C                                                                       
C     ON INPUT                                                          
C                                                                       
C        NM MUST BE SET TO THE ROW DIMENSION OF TWO-DIMENSIONAL         
C          ARRAY PARAMETERS AS DECLARED IN THE CALLING PROGRAM          
C          DIMENSION STATEMENT.                                         
C                                                                       
C        N IS THE ORDER OF THE MATRIX.                                  
C                                                                       
C        LOW AND IGH ARE INTEGERS DETERMINED BY THE BALANCING           
C          SUBROUTINE  BALANC.  IF  BALANC  HAS NOT BEEN USED,          
C          SET LOW=1, IGH=N.                                            
C                                                                       
C        H CONTAINS THE UPPER HESSENBERG MATRIX.                        
C                                                                       
C        Z CONTAINS THE TRANSFORMATION MATRIX PRODUCED BY  ELTRAN       
C          AFTER THE REDUCTION BY  ELMHES, OR BY  ORTRAN  AFTER THE     
C          REDUCTION BY  ORTHES, IF PERFORMED.  IF THE EIGENVECTORS     
C          OF THE HESSENBERG MATRIX ARE DESIRED, Z MUST CONTAIN THE     
C          IDENTITY MATRIX.                                             
C                                                                       
C     ON OUTPUT                                                         
C                                                                       
C        H HAS BEEN DESTROYED.                                          
C                                                                       
C        WR AND WI CONTAIN THE REAL AND IMAGINARY PARTS,                
C          RESPECTIVELY, OF THE EIGENVALUES.  THE EIGENVALUES           
C          ARE UNORDERED EXCEPT THAT COMPLEX CONJUGATE PAIRS            
C          OF VALUES APPEAR CONSECUTIVELY WITH THE EIGENVALUE           
C          HAVING THE POSITIVE IMAGINARY PART FIRST.  IF AN             
C          ERROR EXIT IS MADE, THE EIGENVALUES SHOULD BE CORRECT        
C          FOR INDICES IERR+1,...,N.                                    
C                                                                       
C        Z CONTAINS THE REAL AND IMAGINARY PARTS OF THE EIGENVECTORS.   
C          IF THE I-TH EIGENVALUE IS REAL, THE I-TH COLUMN OF Z         
C          CONTAINS ITS EIGENVECTOR.  IF THE I-TH EIGENVALUE IS COMPLEX 
C          WITH POSITIVE IMAGINARY PART, THE I-TH AND (I+1)-TH          
C          COLUMNS OF Z CONTAIN THE REAL AND IMAGINARY PARTS OF ITS     
C          EIGENVECTOR.  THE EIGENVECTORS ARE UNNORMALIZED.  IF AN      
C          ERROR EXIT IS MADE, NONE OF THE EIGENVECTORS HAS BEEN FOUND. 
C                                                                       
C        IERR IS SET TO                                                 
C          ZERO       FOR NORMAL RETURN,                                
C          J          IF THE LIMIT OF 30*N ITERATIONS IS EXHAUSTED      
C                     WHILE THE J-TH EIGENVALUE IS BEING SOUGHT.        
C                                                                       
C     THIS ROUTINE IS FROM EISPACK (VERSION DATED AUGUST 1983), WITH    
C     NAMES CHANGED IN ACCORDANCE WITH PORT CONVENTIONS FOR DOUBLE      
C     PRECISION, AND WITH PROCEDURE CDIV REPLACED BY THE PORT DOUBLE-   
C     PRECISION COMPLEX DIVISION ROUTINE, CDDIV.                        
C                                                                       
C     ------------------------------------------------------------------
C                                                                       
      IERR = 0                                                          
      NORM = 0.0D0                                                      
      K = 1                                                             
C     .......... STORE ROOTS ISOLATED BY BALANC                         
C                AND COMPUTE MATRIX NORM ..........                     
      DO 50 I = 1, N                                                    
C                                                                       
         DO 40 J = K, N                                                 
   40    NORM = NORM + DABS(H(I,J))                                     
C                                                                       
         K = I                                                          
         IF (I .GE. LOW .AND. I .LE. IGH) GO TO 50                      
         WR(I) = H(I,I)                                                 
         WI(I) = 0.0D0                                                  
   50 CONTINUE                                                          
C                                                                       
      EN = IGH                                                          
      T = 0.0D0                                                         
      ITN = 30*N                                                        
C     .......... SEARCH FOR NEXT EIGENVALUES ..........                 
   60 IF (EN .LT. LOW) GO TO 340                                        
      ITS = 0                                                           
      NA = EN - 1                                                       
      ENM2 = NA - 1                                                     
C     .......... LOOK FOR SINGLE SMALL SUB-DIAGONAL ELEMENT             
C                FOR L=EN STEP -1 UNTIL LOW DO -- ..........            
   70 DO 80 LL = LOW, EN                                                
         L = EN + LOW - LL                                              
         IF (L .EQ. LOW) GO TO 100                                      
         S = DABS(H(L-1,L-1)) + DABS(H(L,L))                            
         IF (S .EQ. 0.0D0) S = NORM                                     
         TST1 = S                                                       
         TST2 = TST1 + DABS(H(L,L-1))                                   
         IF (TST2 .EQ. TST1) GO TO 100                                  
   80 CONTINUE                                                          
C     .......... FORM SHIFT ..........                                  
  100 X = H(EN,EN)                                                      
      IF (L .EQ. EN) GO TO 270                                          
      Y = H(NA,NA)                                                      
      W = H(EN,NA) * H(NA,EN)                                           
      IF (L .EQ. NA) GO TO 280                                          
      IF (ITN .EQ. 0) GO TO 1000                                        
      IF (ITS .NE. 10 .AND. ITS .NE. 20) GO TO 130                      
C     .......... FORM EXCEPTIONAL SHIFT ..........                      
      T = T + X                                                         
C                                                                       
      DO 120 I = LOW, EN                                                
  120 H(I,I) = H(I,I) - X                                               
C                                                                       
      S = DABS(H(EN,NA)) + DABS(H(NA,ENM2))                             
      X = 0.75D0 * S                                                    
      Y = X                                                             
      W = -0.4375D0 * S * S                                             
  130 ITS = ITS + 1                                                     
      ITN = ITN - 1                                                     
C     .......... LOOK FOR TWO CONSECUTIVE SMALL                         
C                SUB-DIAGONAL ELEMENTS.                                 
C                FOR M=EN-2 STEP -1 UNTIL L DO -- ..........            
      DO 140 MM = L, ENM2                                               
         M = ENM2 + L - MM                                              
         ZZ = H(M,M)                                                    
         R = X - ZZ                                                     
         S = Y - ZZ                                                     
         P = (R * S - W) / H(M+1,M) + H(M,M+1)                          
         Q = H(M+1,M+1) - ZZ - R - S                                    
         R = H(M+2,M+1)                                                 
         S = DABS(P) + DABS(Q) + DABS(R)                                
         P = P / S                                                      
         Q = Q / S                                                      
         R = R / S                                                      
         IF (M .EQ. L) GO TO 150                                        
         TST1 = DABS(P)*(DABS(H(M-1,M-1)) + DABS(ZZ) + DABS(H(M+1,M+1)))
         TST2 = TST1 + DABS(H(M,M-1))*(DABS(Q) + DABS(R))               
         IF (TST2 .EQ. TST1) GO TO 150                                  
  140 CONTINUE                                                          
C                                                                       
  150 MP2 = M + 2                                                       
C                                                                       
      DO 160 I = MP2, EN                                                
         H(I,I-2) = 0.0D0                                               
         IF (I .EQ. MP2) GO TO 160                                      
         H(I,I-3) = 0.0D0                                               
  160 CONTINUE                                                          
C     .......... DOUBLE QR STEP INVOLVING ROWS L TO EN AND              
C                COLUMNS M TO EN ..........                             
      DO 260 K = M, NA                                                  
         NOTLAS = K .NE. NA                                             
         IF (K .EQ. M) GO TO 170                                        
         P = H(K,K-1)                                                   
         Q = H(K+1,K-1)                                                 
         R = 0.0D0                                                      
         IF (NOTLAS) R = H(K+2,K-1)                                     
         X = DABS(P) + DABS(Q) + DABS(R)                                
         IF (X .EQ. 0.0D0) GO TO 260                                    
         P = P / X                                                      
         Q = Q / X                                                      
         R = R / X                                                      
  170    S = DSIGN(DSQRT(P*P+Q*Q+R*R),P)                                
         IF (K .EQ. M) GO TO 180                                        
         H(K,K-1) = -S * X                                              
         GO TO 190                                                      
  180    IF (L .NE. M) H(K,K-1) = -H(K,K-1)                             
  190    P = P + S                                                      
         X = P / S                                                      
         Y = Q / S                                                      
         ZZ = R / S                                                     
         Q = Q / P                                                      
         R = R / P                                                      
         IF (NOTLAS) GO TO 225                                          
C     .......... ROW MODIFICATION ..........                            
         DO 200 J = K, N                                                
            P = H(K,J) + Q * H(K+1,J)                                   
            H(K,J) = H(K,J) - P * X                                     
            H(K+1,J) = H(K+1,J) - P * Y                                 
  200    CONTINUE                                                       
C                                                                       
         J = MIN0(EN,K+3)                                               
C     .......... COLUMN MODIFICATION ..........                         
         DO 210 I = 1, J                                                
            P = X * H(I,K) + Y * H(I,K+1)                               
            H(I,K) = H(I,K) - P                                         
            H(I,K+1) = H(I,K+1) - P * Q                                 
  210    CONTINUE                                                       
C     .......... ACCUMULATE TRANSFORMATIONS ..........                  
         DO 220 I = LOW, IGH                                            
            P = X * Z(I,K) + Y * Z(I,K+1)                               
            Z(I,K) = Z(I,K) - P                                         
            Z(I,K+1) = Z(I,K+1) - P * Q                                 
  220    CONTINUE                                                       
         GO TO 255                                                      
  225    CONTINUE                                                       
C     .......... ROW MODIFICATION ..........                            
         DO 230 J = K, N                                                
            P = H(K,J) + Q * H(K+1,J) + R * H(K+2,J)                    
            H(K,J) = H(K,J) - P * X                                     
            H(K+1,J) = H(K+1,J) - P * Y                                 
            H(K+2,J) = H(K+2,J) - P * ZZ                                
  230    CONTINUE                                                       
C                                                                       
         J = MIN0(EN,K+3)                                               
C     .......... COLUMN MODIFICATION ..........                         
         DO 240 I = 1, J                                                
            P = X * H(I,K) + Y * H(I,K+1) + ZZ * H(I,K+2)               
            H(I,K) = H(I,K) - P                                         
            H(I,K+1) = H(I,K+1) - P * Q                                 
            H(I,K+2) = H(I,K+2) - P * R                                 
  240    CONTINUE                                                       
C     .......... ACCUMULATE TRANSFORMATIONS ..........                  
         DO 250 I = LOW, IGH                                            
            P = X * Z(I,K) + Y * Z(I,K+1) + ZZ * Z(I,K+2)               
            Z(I,K) = Z(I,K) - P                                         
            Z(I,K+1) = Z(I,K+1) - P * Q                                 
            Z(I,K+2) = Z(I,K+2) - P * R                                 
  250    CONTINUE                                                       
  255    CONTINUE                                                       
C                                                                       
  260 CONTINUE                                                          
C                                                                       
      GO TO 70                                                          
C     .......... ONE ROOT FOUND ..........                              
  270 H(EN,EN) = X + T                                                  
      WR(EN) = H(EN,EN)                                                 
      WI(EN) = 0.0D0                                                    
      EN = NA                                                           
      GO TO 60                                                          
C     .......... TWO ROOTS FOUND ..........                             
  280 P = (Y - X) / 2.0D0                                               
      Q = P * P + W                                                     
      ZZ = DSQRT(DABS(Q))                                               
      H(EN,EN) = X + T                                                  
      X = H(EN,EN)                                                      
      H(NA,NA) = Y + T                                                  
      IF (Q .LT. 0.0D0) GO TO 320                                       
C     .......... REAL PAIR ..........                                   
      ZZ = P + DSIGN(ZZ,P)                                              
      WR(NA) = X + ZZ                                                   
      WR(EN) = WR(NA)                                                   
      IF (ZZ .NE. 0.0D0) WR(EN) = X - W / ZZ                            
      WI(NA) = 0.0D0                                                    
      WI(EN) = 0.0D0                                                    
      X = H(EN,NA)                                                      
      S = DABS(X) + DABS(ZZ)                                            
      P = X / S                                                         
      Q = ZZ / S                                                        
      R = DSQRT(P*P+Q*Q)                                                
      P = P / R                                                         
      Q = Q / R                                                         
C     .......... ROW MODIFICATION ..........                            
      DO 290 J = NA, N                                                  
         ZZ = H(NA,J)                                                   
         H(NA,J) = Q * ZZ + P * H(EN,J)                                 
         H(EN,J) = Q * H(EN,J) - P * ZZ                                 
  290 CONTINUE                                                          
C     .......... COLUMN MODIFICATION ..........                         
      DO 300 I = 1, EN                                                  
         ZZ = H(I,NA)                                                   
         H(I,NA) = Q * ZZ + P * H(I,EN)                                 
         H(I,EN) = Q * H(I,EN) - P * ZZ                                 
  300 CONTINUE                                                          
C     .......... ACCUMULATE TRANSFORMATIONS ..........                  
      DO 310 I = LOW, IGH                                               
         ZZ = Z(I,NA)                                                   
         Z(I,NA) = Q * ZZ + P * Z(I,EN)                                 
         Z(I,EN) = Q * Z(I,EN) - P * ZZ                                 
  310 CONTINUE                                                          
C                                                                       
      GO TO 330                                                         
C     .......... COMPLEX PAIR ..........                                
  320 WR(NA) = X + P                                                    
      WR(EN) = X + P                                                    
      WI(NA) = ZZ                                                       
      WI(EN) = -ZZ                                                      
  330 EN = ENM2                                                         
      GO TO 60                                                          
C     .......... ALL ROOTS FOUND.  BACKSUBSTITUTE TO FIND               
C                VECTORS OF UPPER TRIANGULAR FORM ..........            
  340 IF (NORM .EQ. 0.0D0) GO TO 1001                                   
C     .......... FOR EN=N STEP -1 UNTIL 1 DO -- ..........              
      DO 800 NN = 1, N                                                  
         EN = N + 1 - NN                                                
         P = WR(EN)                                                     
         Q = WI(EN)                                                     
         NA = EN - 1                                                    
         IF (Q) 710, 600, 800                                           
C     .......... REAL VECTOR ..........                                 
  600    M = EN                                                         
         H(EN,EN) = 1.0D0                                               
         IF (NA .EQ. 0) GO TO 800                                       
C     .......... FOR I=EN-1 STEP -1 UNTIL 1 DO -- ..........            
         DO 700 II = 1, NA                                              
            I = EN - II                                                 
            W = H(I,I) - P                                              
            R = 0.0D0                                                   
C                                                                       
            DO 610 J = M, EN                                            
  610       R = R + H(I,J) * H(J,EN)                                    
C                                                                       
            IF (WI(I) .GE. 0.0D0) GO TO 630                             
            ZZ = W                                                      
            S = R                                                       
            GO TO 700                                                   
  630       M = I                                                       
            IF (WI(I) .NE. 0.0D0) GO TO 640                             
            T = W                                                       
            IF (T .NE. 0.0D0) GO TO 635                                 
               TST1 = NORM                                              
               T = TST1                                                 
  632          T = 0.01D0 * T                                           
               TST2 = NORM + T                                          
               IF (TST2 .GT. TST1) GO TO 632                            
  635       H(I,EN) = -R / T                                            
            GO TO 680                                                   
C     .......... SOLVE REAL EQUATIONS ..........                        
  640       X = H(I,I+1)                                                
            Y = H(I+1,I)                                                
            Q = (WR(I) - P) * (WR(I) - P) + WI(I) * WI(I)               
            T = (X * S - ZZ * R) / Q                                    
            H(I,EN) = T                                                 
            IF (DABS(X) .LE. DABS(ZZ)) GO TO 650                        
            H(I+1,EN) = (-R - W * T) / X                                
            GO TO 680                                                   
  650       H(I+1,EN) = (-S - Y * T) / ZZ                               
C                                                                       
C     .......... OVERFLOW CONTROL ..........                            
  680       T = DABS(H(I,EN))                                           
            IF (T .EQ. 0.0D0) GO TO 700                                 
            TST1 = T                                                    
            TST2 = TST1 + 1.0D0/TST1                                    
            IF (TST2 .GT. TST1) GO TO 700                               
            DO 690 J = I, EN                                            
               H(J,EN) = H(J,EN)/T                                      
  690       CONTINUE                                                    
C                                                                       
  700    CONTINUE                                                       
C     .......... END REAL VECTOR ..........                             
         GO TO 800                                                      
C     .......... COMPLEX VECTOR ..........                              
  710    M = NA                                                         
C     .......... LAST VECTOR COMPONENT CHOSEN IMAGINARY SO THAT         
C                EIGENVECTOR MATRIX IS TRIANGULAR ..........            
         IF (DABS(H(EN,NA)) .LE. DABS(H(NA,EN))) GO TO 720              
         H(NA,NA) = Q / H(EN,NA)                                        
         H(NA,EN) = -(H(EN,EN) - P) / H(EN,NA)                          
         GO TO 730                                                      
  720    CMPLXN(1) = 0.D0                                               
         CMPLXN(2) = -H(NA,EN)                                          
         CMPLXD(1) = H(NA,NA)-P                                         
         CMPLXD(2) = Q                                                  
         CALL CDDIV(CMPLXN,CMPLXD,CMPLXC)                               
         H(NA,NA) = CMPLXC(1)                                           
         H(NA,EN) = CMPLXC(2)                                           
  730    H(EN,NA) = 0.0D0                                               
         H(EN,EN) = 1.0D0                                               
         ENM2 = NA - 1                                                  
         IF (ENM2 .EQ. 0) GO TO 800                                     
C     .......... FOR I=EN-2 STEP -1 UNTIL 1 DO -- ..........            
         DO 795 II = 1, ENM2                                            
            I = NA - II                                                 
            W = H(I,I) - P                                              
            RA = 0.0D0                                                  
            SA = 0.0D0                                                  
C                                                                       
            DO 760 J = M, EN                                            
               RA = RA + H(I,J) * H(J,NA)                               
               SA = SA + H(I,J) * H(J,EN)                               
  760       CONTINUE                                                    
C                                                                       
            IF (WI(I) .GE. 0.0D0) GO TO 770                             
            ZZ = W                                                      
            R = RA                                                      
            S = SA                                                      
            GO TO 795                                                   
  770       M = I                                                       
            IF (WI(I) .NE. 0.0D0) GO TO 780                             
            CMPLXN(1) = -RA                                             
            CMPLXN(2) = -SA                                             
            CMPLXD(1) = W                                               
            CMPLXD(2) = Q                                               
            CALL CDDIV(CMPLXN,CMPLXD,CMPLXC)                            
            H(I,NA) = CMPLXC(1)                                         
            H(I,EN) = CMPLXC(2)                                         
            GO TO 790                                                   
C     .......... SOLVE COMPLEX EQUATIONS ..........                     
  780       X = H(I,I+1)                                                
            Y = H(I+1,I)                                                
            VR = (WR(I) - P) * (WR(I) - P) + WI(I) * WI(I) - Q * Q      
            VI = (WR(I) - P) * 2.0D0 * Q                                
            IF (VR .NE. 0.0D0 .OR. VI .NE. 0.0D0) GO TO 784             
               TST1 = NORM * (DABS(W) + DABS(Q) + DABS(X)               
     X                      + DABS(Y) + DABS(ZZ))                       
               VR = TST1                                                
  783          VR = 0.01D0 * VR                                         
               TST2 = TST1 + VR                                         
               IF (TST2 .GT. TST1) GO TO 783                            
  784       CMPLXN(1) = X*R-ZZ*RA+Q*SA                                  
            CMPLXN(2) = X*S-ZZ*SA-Q*RA                                  
            CMPLXD(1) = VR                                              
            CMPLXD(2) = VI                                              
            CALL CDDIV(CMPLXN,CMPLXD,CMPLXC)                            
            H(I,NA) = CMPLXC(1)                                         
            H(I,EN) = CMPLXC(2)                                         
            IF (DABS(X) .LE. DABS(ZZ) + DABS(Q)) GO TO 785              
            H(I+1,NA) = (-RA - W * H(I,NA) + Q * H(I,EN)) / X           
            H(I+1,EN) = (-SA - W * H(I,EN) - Q * H(I,NA)) / X           
            GO TO 790                                                   
  785       CMPLXN(1) = -R-Y*H(I,NA)                                    
            CMPLXN(2) = -S-Y*H(I,EN)                                    
            CMPLXD(1) = ZZ                                              
            CMPLXD(2) = Q                                               
            CALL CDDIV(CMPLXN,CMPLXD,CMPLXC)                            
            H(I+1,NA) = CMPLXC(1)                                       
            H(I+1,EN) = CMPLXC(2)                                       
C                                                                       
C     .......... OVERFLOW CONTROL ..........                            
  790       T = DMAX1(DABS(H(I,NA)), DABS(H(I,EN)))                     
            IF (T .EQ. 0.0D0) GO TO 795                                 
            TST1 = T                                                    
            TST2 = TST1 + 1.0D0/TST1                                    
            IF (TST2 .GT. TST1) GO TO 795                               
            DO 792 J = I, EN                                            
               H(J,NA) = H(J,NA)/T                                      
               H(J,EN) = H(J,EN)/T                                      
  792       CONTINUE                                                    
C                                                                       
  795    CONTINUE                                                       
C     .......... END COMPLEX VECTOR ..........                          
  800 CONTINUE                                                          
C     .......... END BACK SUBSTITUTION.                                 
C                VECTORS OF ISOLATED ROOTS ..........                   
      DO 840 I = 1, N                                                   
         IF (I .GE. LOW .AND. I .LE. IGH) GO TO 840                     
C                                                                       
         DO 820 J = I, N                                                
  820    Z(I,J) = H(I,J)                                                
C                                                                       
  840 CONTINUE                                                          
C     .......... MULTIPLY BY TRANSFORMATION MATRIX TO GIVE              
C                VECTORS OF ORIGINAL FULL MATRIX.                       
C                FOR J=N STEP -1 UNTIL LOW DO -- ..........             
      DO 880 JJ = LOW, N                                                
         J = N + LOW - JJ                                               
         M = MIN0(J,IGH)                                                
C                                                                       
         DO 880 I = LOW, IGH                                            
            ZZ = 0.0D0                                                  
C                                                                       
            DO 860 K = LOW, M                                           
  860       ZZ = ZZ + Z(I,K) * H(K,J)                                   
C                                                                       
            Z(I,J) = ZZ                                                 
  880 CONTINUE                                                          
C                                                                       
      GO TO 1001                                                        
C     .......... SET ERROR -- ALL EIGENVALUES HAVE NOT                  
C                CONVERGED AFTER 30*N ITERATIONS ..........             
 1000 IERR = EN                                                         
 1001 RETURN                                                            
      END                                                               
      SUBROUTINE DORTHE(NM,N,LOW,IGH,A,ORT)                             
C                                                                       
      INTEGER I,J,M,N,II,JJ,LA,MP,NM,IGH,KP1,LOW                        
      DOUBLE PRECISION A(NM,N),ORT(IGH)                                 
      DOUBLE PRECISION F,G,H,SCALE                                      
      DOUBLE PRECISION DSQRT                                            
C                                                                       
C     THIS IS A DOUBLE-PRECISION VERSION OF THE                         
C     EISPACK SINGLE-PRECISION ROUTINE ORTHES.                          
C     IT WAS ADAPTED BY PHYLLIS FOX, MAY 28, 1975.                      
C                                                                       
C     ORTHES IS A TRANSLATION OF THE ALGOL PROCEDURE ORTHES,            
C     NUM. MATH. 12, 349-368(1968) BY MARTIN AND WILKINSON.             
C     HANDBOOK FOR AUTO. COMP., VOL.II-LINEAR ALGEBRA, 339-358(1971).   
C                                                                       
C     GIVEN A REAL (DOUBLE PRECISION) GENERAL MATRIX, THIS SUBROUTINE   
C     REDUCES A SUBMATRIX SITUATED IN ROWS AND COLUMNS                  
C     LOW THROUGH IGH TO UPPER HESSENBERG FORM BY                       
C     ORTHOGONAL SIMILARITY TRANSFORMATIONS.                            
C                                                                       
C     ON INPUT-                                                         
C                                                                       
C        NM MUST BE SET TO THE ROW DIMENSION OF TWO-DIMENSIONAL         
C          ARRAY PARAMETERS AS DECLARED IN THE CALLING PROGRAM          
C          DIMENSION STATEMENT,                                         
C                                                                       
C        N IS THE ORDER OF THE MATRIX,                                  
C                                                                       
C        LOW AND IGH ARE INTEGERS DETERMINED BY THE BALANCING           
C          SUBROUTINE  BALANC.  IF  BALANC  HAS NOT BEEN USED,          
C          SET LOW=1, IGH=N,                                            
C                                                                       
C        A CONTAINS THE INPUT MATRIX.                                   
C                                                                       
C     ON OUTPUT-                                                        
C                                                                       
C        A CONTAINS THE HESSENBERG MATRIX.  INFORMATION ABOUT           
C          THE ORTHOGONAL TRANSFORMATIONS USED IN THE REDUCTION         
C          IS STORED IN THE REMAINING TRIANGLE UNDER THE                
C          HESSENBERG MATRIX,                                           
C                                                                       
C        ORT CONTAINS FURTHER INFORMATION ABOUT THE TRANSFORMATIONS.    
C          ONLY ELEMENTS LOW THROUGH IGH ARE USED.                      
C                                                                       
C                                                                       
C     ------------------------------------------------------------------
C                                                                       
      LA = IGH - 1                                                      
      KP1 = LOW + 1                                                     
      IF (LA .LT. KP1) GO TO 200                                        
C                                                                       
      DO 180 M = KP1, LA                                                
         H = 0.0D0                                                      
         ORT(M) = 0.0D0                                                 
         SCALE = 0.0D0                                                  
C     ********** SCALE COLUMN (ALGOL TOL THEN NOT NEEDED) **********    
         DO 90 I = M, IGH                                               
   90    SCALE = SCALE + DABS(A(I,M-1))                                 
C                                                                       
         IF (SCALE .EQ. 0.0D0) GO TO 180                                
         MP = M + IGH                                                   
C     ********** FOR I=IGH STEP -1 UNTIL M DO -- **********             
         DO 100 II = M, IGH                                             
            I = MP - II                                                 
            ORT(I) = A(I,M-1) / SCALE                                   
            H = H + ORT(I) * ORT(I)                                     
  100    CONTINUE                                                       
C                                                                       
         G = -DSIGN(DSQRT(H),ORT(M))                                    
         H = H - ORT(M) * G                                             
         ORT(M) = ORT(M) - G                                            
C     ********** FORM (I-(U*UT)/H) * A **********                       
         DO 130 J = M, N                                                
            F = 0.0D0                                                   
C     ********** FOR I=IGH STEP -1 UNTIL M DO -- **********             
            DO 110 II = M, IGH                                          
               I = MP - II                                              
               F = F + ORT(I) * A(I,J)                                  
  110       CONTINUE                                                    
C                                                                       
            F = F / H                                                   
C                                                                       
            DO 120 I = M, IGH                                           
  120       A(I,J) = A(I,J) - F * ORT(I)                                
C                                                                       
  130    CONTINUE                                                       
C     ********** FORM (I-(U*UT)/H)*A*(I-(U*UT)/H) **********            
         DO 160 I = 1, IGH                                              
            F = 0.0D0                                                   
C     ********** FOR J=IGH STEP -1 UNTIL M DO -- **********             
            DO 140 JJ = M, IGH                                          
               J = MP - JJ                                              
               F = F + ORT(J) * A(I,J)                                  
  140       CONTINUE                                                    
C                                                                       
            F = F / H                                                   
C                                                                       
            DO 150 J = M, IGH                                           
  150       A(I,J) = A(I,J) - F * ORT(J)                                
C                                                                       
  160    CONTINUE                                                       
C                                                                       
         ORT(M) = SCALE * ORT(M)                                        
         A(M,M-1) = SCALE * G                                           
  180 CONTINUE                                                          
C                                                                       
  200 RETURN                                                            
C     ********** LAST CARD OF DORTHE **********                         
      END                                                               
      SUBROUTINE DORTRA(NM,N,LOW,IGH,A,ORT,Z)                           
C                                                                       
      INTEGER I,J,N,KL,MM,MP,NM,IGH,LOW,MP1                             
      DOUBLE PRECISION A(NM,IGH),ORT(IGH),Z(NM,N)                       
      DOUBLE PRECISION G                                                
C                                                                       
C     THIS IS A DOUBLE-PRECISION VERSION OF THE                         
C     EISPACK SINGLE-PRECISION ROUTINE ORTRAN.                          
C     IT WAS ADAPTED BY PHYLLIS FOX, MAY 28, 1975.                      
C                                                                       
C     ORTRAN IS A TRANSLATION OF THE ALGOL PROCEDURE ORTRANS,           
C     NUM. MATH. 16, 181-204(1970) BY PETERS AND WILKINSON.             
C     HANDBOOK FOR AUTO. COMP., VOL.II-LINEAR ALGEBRA, 372-395(1971).   
C                                                                       
C     THIS SUBROUTINE ACCUMULATES THE ORTHOGONAL SIMILARITY             
C     TRANSFORMATIONS USED IN THE REDUCTION OF A REAL GENERAL           
C     MATRIX TO UPPER HESSENBERG FORM BY  DORTHE.                       
C                                                                       
C     ON INPUT-                                                         
C                                                                       
C        NM MUST BE SET TO THE ROW DIMENSION OF TWO-DIMENSIONAL         
C          ARRAY PARAMETERS AS DECLARED IN THE CALLING PROGRAM          
C          DIMENSION STATEMENT,                                         
C                                                                       
C        N IS THE ORDER OF THE MATRIX,                                  
C                                                                       
C        LOW AND IGH ARE INTEGERS DETERMINED BY THE BALANCING           
C          SUBROUTINE  BALANC.  IF  BALANC  HAS NOT BEEN USED,          
C          SET LOW=1, IGH=N,                                            
C                                                                       
C        A CONTAINS INFORMATION ABOUT THE ORTHOGONAL TRANS-             
C          FORMATIONS USED IN THE REDUCTION BY  DORTHE                  
C          IN ITS STRICT LOWER TRIANGLE,                                
C                                                                       
C        ORT CONTAINS FURTHER INFORMATION ABOUT THE TRANS-              
C          FORMATIONS USED IN THE REDUCTION BY  DORTHE.                 
C          ONLY ELEMENTS LOW THROUGH IGH ARE USED.                      
C                                                                       
C     ON OUTPUT-                                                        
C                                                                       
C        Z CONTAINS THE TRANSFORMATION MATRIX PRODUCED IN THE           
C          REDUCTION BY  DORTHE,                                        
C                                                                       
C        ORT HAS BEEN ALTERED.                                          
C                                                                       
C                                                                       
C     ------------------------------------------------------------------
C                                                                       
C     ********** INITIALIZE Z TO IDENTITY MATRIX **********             
      DO 80 I = 1, N                                                    
C                                                                       
         DO 60 J = 1, N                                                 
   60    Z(I,J) = 0.0D0                                                 
C                                                                       
         Z(I,I) = 1.0D0                                                 
   80 CONTINUE                                                          
C                                                                       
      KL = IGH - LOW - 1                                                
      IF (KL .LT. 1) GO TO 200                                          
C     ********** FOR MP=IGH-1 STEP -1 UNTIL LOW+1 DO -- **********      
      DO 140 MM = 1, KL                                                 
         MP = IGH - MM                                                  
         IF (A(MP,MP-1) .EQ. 0.0D0) GO TO 140                           
         MP1 = MP + 1                                                   
C                                                                       
         DO 100 I = MP1, IGH                                            
  100    ORT(I) = A(I,MP-1)                                             
C                                                                       
         DO 130 J = MP, IGH                                             
            G = 0.0D0                                                   
C                                                                       
            DO 110 I = MP, IGH                                          
  110       G = G + ORT(I) * Z(I,J)                                     
C     ********** DIVISOR BELOW IS NEGATIVE OF H FORMED IN DORTHE.       
C                DOUBLE DIVISION AVOIDS POSSIBLE UNDERFLOW **********   
            G = (G / ORT(MP)) / A(MP,MP-1)                              
C                                                                       
            DO 120 I = MP, IGH                                          
  120       Z(I,J) = Z(I,J) + G * ORT(I)                                
C                                                                       
  130    CONTINUE                                                       
C                                                                       
  140 CONTINUE                                                          
C                                                                       
  200 RETURN                                                            
C     ********** LAST CARD OF DORTRA **********                         
      END                                                               
      SUBROUTINE LTSQ(M,N,A,NA,B,IRHS,W)                                
      INTEGER NA,M,N,IRHS,MFLAG                                         
      INTEGER ISTKGT,IERR                                               
      INTEGER IRV1, ICD, IV                                             
      REAL A(NA,N),B(NA,IRHS),W(N)                                      
      LOGICAL MATU, MATV                                                
      DOUBLE PRECISION DSTAK(500)                                       
      REAL RSTAK(1000)                                                  
      COMMON /CSTAK/DSTAK                                               
      EQUIVALENCE(DSTAK(1),RSTAK(1))                                    
C                                                                       
      CALL ENTER(0)                                                     
C/6S                                                                    
C     IF (IRHS .LT. 0) CALL SETERR(15HLTSQ  IRHS.LT.0,15,1,2)           
C     IF (M .LT. N) CALL SETERR(12HLTSQ  M.LT.N,12,2,2)                 
C     IF (NA .LT. M) CALL SETERR (13HLTSQ  NA.LT.M,13,3,2)              
C     IF (M .LT. 1) CALL SETERR (12HLTSQ  M.LT.1,12,4,2)                
C     IF (N .LT.1) CALL SETERR (12HLTSQ  N.LT.1,12,5,2)                 
C/7S                                                                    
      IF (IRHS .LT. 0) CALL SETERR('LTSQ  IRHS.LT.0',15,1,2)            
      IF (M .LT. N) CALL SETERR('LTSQ  M.LT.N',12,2,2)                  
      IF (NA .LT. M) CALL SETERR ('LTSQ  NA.LT.M',13,3,2)               
      IF (M .LT. 1) CALL SETERR ('LTSQ  M.LT.1',12,4,2)                 
      IF (N .LT.1) CALL SETERR ('LTSQ  N.LT.1',12,5,2)                  
C/                                                                      
      IRV1 = ISTKGT(N,3)                                                
      ICD = ISTKGT(N,3)                                                 
      IV = ISTKGT(N**2,3)                                               
      MATV = .TRUE.                                                     
      MATU = .FALSE.                                                    
      CALL C1RSS(M,N,MATU,MATV,MFLAG)                                   
      CALL G1SVD(NA,N,M,N,A,W,MATU,A,MATV,RSTAK(IV),                    
     1   A,B,IRHS,RSTAK(IRV1),RSTAK(ICD),MFLAG)                         
      IERR = NERROR(NERR)                                               
      IF (IERR.LE.10) GOTO 200                                          
         CALL ERROFF                                                    
C/6S                                                                    
C        CALL SETERR(34HLTSQ  NO CONVERGENCE AFTER 30 ITER,             
C    1      34,IERR,1)                                                  
C/7S                                                                    
         CALL SETERR('LTSQ  NO CONVERGENCE AFTER 30 ITER',              
     1      34,IERR,1)                                                  
C/                                                                      
         GO TO 210                                                      
C                                                                       
 200  CALL C2LSQ(RSTAK(ICD),W,B,RSTAK(IV),N,M,IRHS,NA)                  
 210  CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE DLTSQ(M,N,A,NA,B,IRHS,W)                               
      INTEGER NA,M,N,IRHS,MFLAG                                         
      INTEGER ISTKGT,IERR                                               
      INTEGER IRV1, ICD, IV                                             
      DOUBLE PRECISION A(NA,N),B(NA,IRHS),W(N)                          
      LOGICAL MATU, MATV                                                
      DOUBLE PRECISION DSTAK(500)                                       
      COMMON /CSTAK/DSTAK                                               
C                                                                       
      CALL ENTER(0)                                                     
C/6S                                                                    
C     IF (IRHS .LT. 0) CALL SETERR(16HDLTSQ  IRHS.LT.0,16,1,2)          
C     IF (M .LT. N) CALL SETERR(13HDLTSQ  M.LT.N,13,2,2)                
C     IF (NA .LT. M) CALL SETERR (14HDLTSQ  NA.LT.M,14,3,2)             
C     IF (M .LT. 1) CALL SETERR (13HDLTSQ  M.LT.1,13,4,2)               
C     IF (N .LT.1) CALL SETERR (13HDLTSQ  N.LT.1,13,5,2)                
C/7S                                                                    
      IF (IRHS .LT. 0) CALL SETERR('DLTSQ  IRHS.LT.0',16,1,2)           
      IF (M .LT. N) CALL SETERR('DLTSQ  M.LT.N',13,2,2)                 
      IF (NA .LT. M) CALL SETERR ('DLTSQ  NA.LT.M',14,3,2)              
      IF (M .LT. 1) CALL SETERR ('DLTSQ  M.LT.1',13,4,2)                
      IF (N .LT.1) CALL SETERR ('DLTSQ  N.LT.1',13,5,2)                 
C/                                                                      
      IRV1 = ISTKGT(N,4)                                                
      ICD = ISTKGT(N,4)                                                 
      IV = ISTKGT(N**2,4)                                               
      MATV = .TRUE.                                                     
      MATU = .FALSE.                                                    
      CALL DC1RSS(M,N,MATU,MATV,MFLAG)                                  
      CALL DG1SVD(NA,N,M,N,A,W,MATU,A,MATV,DSTAK(IV),                   
     1   A,B,IRHS,DSTAK(IRV1),DSTAK(ICD),MFLAG)                         
      IERR = NERROR(NERR)                                               
      IF (IERR.LE.10) GOTO 200                                          
         CALL ERROFF                                                    
C/6S                                                                    
C        CALL SETERR(35HDLTSQ  NO CONVERGENCE AFTER 30 ITER,            
C    1      35,IERR,1)                                                  
C/7S                                                                    
         CALL SETERR('DLTSQ  NO CONVERGENCE AFTER 30 ITER',             
     1      35,IERR,1)                                                  
C/                                                                      
         GO TO 210                                                      
C                                                                       
 200  CALL DC2LSQ(DSTAK(ICD),W,B,DSTAK(IV),N,M,IRHS,NA)                 
 210  CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE SVD(M,N,A,NAU,U,MATU,W,V,NV,MATV)                      
      INTEGER NAU,NV,M,N,MFLAG                                          
      INTEGER ISTKGT,IERR                                               
      INTEGER ID, IRV1, IZ                                              
      REAL A(NAU,N),W(N),U(NAU,N),V(NV,N)                               
      LOGICAL MATU, MATV                                                
      DOUBLE PRECISION DSTAK(500)                                       
      REAL RSTAK(1000)                                                  
      COMMON /CSTAK/DSTAK                                               
      EQUIVALENCE(DSTAK(1),RSTAK(1))                                    
C                                                                       
      CALL ENTER(0)                                                     
C/6S                                                                    
C     IF (M .LT. N) CALL SETERR(11HSVD- M.LT.N,11,1,2)                  
C     IF (NAU .LT. M) CALL SETERR (13HSVD- NAU.LT.M,13,2,2)             
C     IF (NV .LT. N) CALL SETERR (12HSVD- NV.LT.N,12,3,2)               
C     IF (M .LT. 1) CALL SETERR (11HSVD- M.LT.1,11,4,2)                 
C     IF (N .LT.1) CALL SETERR (11HSVD- N.LT.1,11,5,2)                  
C/7S                                                                    
      IF (M .LT. N) CALL SETERR('SVD- M.LT.N',11,1,2)                   
      IF (NAU .LT. M) CALL SETERR ('SVD- NAU.LT.M',13,2,2)              
      IF (NV .LT. N) CALL SETERR ('SVD- NV.LT.N',12,3,2)                
      IF (M .LT. 1) CALL SETERR ('SVD- M.LT.1',11,4,2)                  
      IF (N .LT.1) CALL SETERR ('SVD- N.LT.1',11,5,2)                   
C/                                                                      
      IRV1 = ISTKGT(N,3)                                                
      ID = ISTKGT(N,3)                                                  
      CALL C1RSS(M,N,MATU,MATV,MFLAG)                                   
      IF ((.NOT. MATU).OR.(MFLAG.EQ.0))  GO TO 100                      
      IZ = ISTKGT(N**2,3)                                               
      CALL G1SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,RSTAK(IZ),                
     1   A,0,RSTAK(IRV1),RSTAK(ID),MFLAG)                               
      GOTO 300                                                          
 100  CALL G1SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,A,                        
     1   A,0,RSTAK(IRV1),RSTAK(ID),MFLAG)                               
 300  IERR = NERROR(NERR)                                               
      IF (IERR.LE.10) GOTO 200                                          
         CALL ERROFF                                                    
C/6S                                                                    
C        CALL SETERR(33HSVD- NO CONVERGENCE AFTER 30 ITER,              
C    1   33,IERR,1)                                                     
C/7S                                                                    
         CALL SETERR('SVD- NO CONVERGENCE AFTER 30 ITER',               
     1   33,IERR,1)                                                     
C/                                                                      
 200  CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE SVDLS(M,N,A,NAU,U,MATU,W,V,NV,MATV,B,IRHS)             
      INTEGER NAU,NV,M,N,IRHS,MFLAG                                     
      INTEGER IRV1, ICD, IZ, IV                                         
      INTEGER ISTKGT,IERR                                               
C/6S                                                                    
C     REAL A(NAU,N),W(N),U(NAU,N),V(NV,N),B(NAU,1)                      
C/7S                                                                    
      REAL A(NAU,N),W(N),U(NAU,N),V(NV,N),B(NAU,*)                      
C/                                                                      
      LOGICAL MATU, MATV                                                
      DOUBLE PRECISION DSTAK(500)                                       
      REAL RSTAK(1000)                                                  
      COMMON /CSTAK/DSTAK                                               
      EQUIVALENCE(DSTAK(1),RSTAK(1))                                    
C                                                                       
      CALL ENTER(0)                                                     
C/6S                                                                    
C     IF (IRHS .LT. 0) CALL SETERR(16HSVDLS- IRHS.LT.0,16,1,2)          
C     IF (M .LT. N) CALL SETERR(13HSVDLS- M.LT.N,13,2,2)                
C     IF (NAU .LT. M) CALL SETERR (15HSVDLS- NAU.LT.M,15,3,2)           
C     IF (NV .LT. N) CALL SETERR (14HSVDLS- NV.LT.N,14,4,2)             
C     IF (M .LT. 1) CALL SETERR (13HSVDLS- M.LT.1,13,5,2)               
C     IF (N .LT.1) CALL SETERR (13HSVDLS- N.LT.1,13,6,2)                
C/7S                                                                    
      IF (IRHS .LT. 0) CALL SETERR('SVDLS- IRHS.LT.0',16,1,2)           
      IF (M .LT. N) CALL SETERR('SVDLS- M.LT.N',13,2,2)                 
      IF (NAU .LT. M) CALL SETERR ('SVDLS- NAU.LT.M',15,3,2)            
      IF (NV .LT. N) CALL SETERR ('SVDLS- NV.LT.N',14,4,2)              
      IF (M .LT. 1) CALL SETERR ('SVDLS- M.LT.1',13,5,2)                
      IF (N .LT.1) CALL SETERR ('SVDLS- N.LT.1',13,6,2)                 
C/                                                                      
      IRV1 = ISTKGT(N,3)                                                
      ICD = ISTKGT(N,3)                                                 
      CALL C1RSS(M,N,MATU,MATV,MFLAG)                                   
      IF ((IRHS .GT. 0) .AND. (.NOT.MATV)) GO TO 180                    
      IF ((.NOT. MATU) .OR. (MFLAG .EQ. 0)) GO TO 170                   
          IZ = ISTKGT(N**2,3)                                           
          CALL G1SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,RSTAK(IZ),B,          
     1       IRHS,RSTAK(IRV1),RSTAK(ICD),MFLAG)                         
      GO TO 190                                                         
 170  CALL G1SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,A,B,                      
     1   IRHS,RSTAK(IRV1),RSTAK(ICD),MFLAG)                             
      GO TO 190                                                         
 180  IV = ISTKGT(N**2,3)                                               
      IF ((.NOT. MATU) .OR. (MFLAG .EQ. 0)) GO TO 185                   
          IZ = ISTKGT(N**2,3)                                           
          CALL G1SVD(NAU,N,M,N,A,W,MATU,U,.TRUE.,RSTAK(IV),RSTAK(IZ),B, 
     1       IRHS,RSTAK(IRV1),RSTAK(ICD),MFLAG)                         
      GO TO 190                                                         
 185  CALL G1SVD(NAU,N,M,N,A,W,MATU,U,.TRUE.,RSTAK(IV),A,B,             
     1   IRHS,RSTAK(IRV1),RSTAK(ICD),MFLAG)                             
 190  IERR = NERROR(NERR)                                               
      IF (IERR.LE.10) GOTO 200                                          
         CALL ERROFF                                                    
C/6S                                                                    
C        CALL SETERR(35HSVDLS- NO CONVERGENCE AFTER 30 ITER,            
C    1   35,IERR,1)                                                     
C/7S                                                                    
         CALL SETERR('SVDLS- NO CONVERGENCE AFTER 30 ITER',             
     1   35,IERR,1)                                                     
C/                                                                      
         GO TO 210                                                      
 200  IF ((IRHS .GT. 0) .AND. (.NOT. MATV)) GO TO 205                   
         IF (IRHS .GT. 0) CALL C2LSQ(RSTAK(ICD),W,B,V,N,M,IRHS,NAU)     
         GO TO 210                                                      
 205  CALL C2LSQ(RSTAK(ICD),W,B,RSTAK(IV),N,M,IRHS,NAU)                 
 210  CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE C1RSS(M,N,MATU,MATV,MFLAG)                             
      INTEGER M, N, MFLAG                                               
      REAL C, XOVRPT, R, FLOAT                                          
      LOGICAL MATU, MATV                                                
C     ----------------------------------------------------------------- 
C                                                                       
C     SET VALUE FOR C. THE VALUE FOR C DEPENDS ON THE RELATIVE          
C     EFFICIENCY OF FLOATING POINT MULTIPLICATIONS, FLOATING POINT      
C     ADDITIONS AND TWO-DIMENSIONAL ARRAY INDEXINGS ON THE              
C     COMPUTER WHERE THIS SUBROUTINE IS TO BE RUN.  C SHOULD            
C     USUALLY BE BETWEEN 2 AND 4.  FOR DETAILS ON CHOOSING C, SEE       
C     (2).  THE ALGORITHM IS NOT SENSITIVE TO THE VALUE OF C            
C     ACTUALLY USED AS LONG AS C IS BETWEEN 2 AND 4.                    
C                                                                       
      C = 4.0                                                           
C                                                                       
C     DETERMINE CROSS-OVER POINT                                        
C                                                                       
      IF (MATU .AND. MATV) XOVRPT = (C+7.0/3.0)/C                       
      IF (MATU .AND. .NOT.MATV) XOVRPT = (C+7.0/3.0)/C                  
      IF (.NOT.MATU .AND. MATV) XOVRPT = 5.0/3.0                        
      IF (.NOT.MATU .AND. .NOT.MATV) XOVRPT = 5.0/3.0                   
C                                                                       
C     DETERMINE WHETHER TO USE GOLUB-REINSCH OR THE MODIFIED            
C     ALGORITHM.                                                        
C                                                                       
      R = FLOAT(M)/FLOAT(N)                                             
      MFLAG = 0                                                         
      IF (R .GE. XOVRPT) MFLAG = 1                                      
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE C2LSQ(C,W,B,V,N,M,IRHS,NA)                             
C                                                                       
C                    T         T                                        
C COMPUTE SOLUTION VW B WHERE W (I)=0 IF W(I) IS SMALL AND              
C OTHERWISE IS 1/W(I)                                                   
      INTEGER I,J,K                                                     
      INTEGER N,M,IRHS,NA                                               
      REAL C(N),W(N),B(NA,IRHS),V(N,N)                                  
      REAL BB                                                           
      DO 100 K=1,IRHS                                                   
      DO 101 I=1,N                                                      
         C(I) = 0.0                                                     
 101  CONTINUE                                                          
      DO 102 I=1,N                                                      
         BB = 0.0                                                       
         IF (W(I).GT.0.0) BB = B(I,K)/W(I)                              
         DO 102 J=1,N                                                   
            C(J) = C(J) + BB*V(J,I)                                     
 102  CONTINUE                                                          
      DO 103 I=1,N                                                      
         B(I,K) = C(I)                                                  
 103  CONTINUE                                                          
 100  CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE G1SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,Z,B,                
     1   IRHS,RV1,D, MFLAG)                                             
      INTEGER NAU,NV,M,N,IRHS,IP1,I,J,K,IM1                             
      INTEGER MFLAG                                                     
      REAL A(NAU,N),W(N),U(NAU,N),V(NV,N),                              
     1  B(NAU,IRHS),Z(N,N),RV1(N),D(N)                                  
      REAL G,SCALE,SIGN,ABS,SQRT,F,S,H                                  
      LOGICAL MATU,MATV                                                 
C                                                                       
C     THIS SUBROUTINE IS A MODIFICATION OF THE GOLUB-REINSCH PROCEDURE  
C                                                               T       
C     (1) FOR COMPUTING THE SINGULAR VALUE DECOMPOSITION A = UWV  OF A  
C     REAL M BY N RECTANGULAR MATRIX.  THE ALGORITHM IMPLEMENTED IN THIS
C     ROUTINE HAS A HYBRID NATURE.  WHEN M IS APPROXIMATELY EQUAL TO N, 
C     THE GOLUB-REINSCH ALGORITHM IS USED, BUT WHEN M IS GREATER THAN   
C     APPROXIMATELY 2*N, A MODIFIED VERSION OF THE GOLUB-REINSCH        
C     ALGORITHM IS USED.  THIS MODIFIED ALGORITHM FIRST TRANSFORMS A    
C                                                                T      
C     INTO UPPER TRIANGULAR FORM BY HOUSEHOLDER TRANSFORMATIONS L       
C     AND THEN USES THE GOLUB-REINSCH ALGORITHM TO FIND THE SINGULAR    
C     VALUE DECOMPOSITION OF THE RESULTING UPPER TRIANGULAR MATRIX R.   
C     WHEN U IS NEEDED EXPLICITLY, AN EXTRA ARRAY Z (OF SIZE AT LEAST   
C     N BY N) IS NEEDED, BUT OTHERWISE Z MAY COINCIDE WITH EITHER       
C     A OR V AND NO EXTRA STORAGE IS REQUIRED.  THIS HYBRID METHOD      
C     SHOULD BE MORE EFFICIENT THAN THE GOLUB-REINSCH ALGORITHM WHEN    
C     M IS MUCH BIGGER THAN N.  FOR DETAILS, SEE (2).                   
C                                                                       
C     HYBSVD CAN ALSO BE USED TO COMPUTE THE MINIMAL LENGTH LEAST       
C     SQUARES SOLUTION TO THE OVERDETERMINED LINEAR SYSTEM A*X=B.       
C                                                                       
C     NOTICE THAT THE SINGULAR VALUE DECOMPOSITION OF A MATRIX          
C     IS UNIQUE ONLY UP TO THE SIGN OF THE CORRESPONDING COLUMNS        
C     OF U AND V.                                                       
C                                                                       
C     THIS ROUTINE HAS BEEN CHECKED BY THE PFORT VERIFIER (3) FOR       
C     ADHERENCE TO A LARGE, CAREFULLY DEFINED, PORTABLE SUBSET OF       
C     AMERICAN NATIONAL STANDARD FORTRAN CALLED PFORT.                  
C                                                                       
C     REFERENCES                                                        
C                                                                       
C     (1) GOLUB,G.H. AND REINSCH,C. (1970) SINGULAR VALUE               
C         DECOMPOSITION AND LEAST SQUARES SOLUTIONS,                    
C         NUMER. MATH. 14,403-420, 1970.                                
C                                                                       
C     (2) CHAN,T.F. (1977) AN IMPROVED ALGORITHM FOR COMPUTING THE      
C         SINGULAR VALUE DECOMPOSITION,                                 
C         TOMS, 8, PP. 72-83 (1982).                                    
C                                                                       
C     (3) RYDER,B.G. (1974) THE PFORT VERIFIER, SOFTWARE -              
C         PRACTICE AND EXPERIENCE, VOL.4, 359-377, 1974.                
C                                                                       
C     HYBSVD ASSUMES M .GE. N.  IF M .LT. N, THEN COMPUTE THE           
C                                      T      T    T            T       
C     SINGULAR VALUE DECOMPOSITION OF A . IF A =UWV , THEN A=VWU .      
C                                                                       
C     ON INPUT                                                          
C                                                                       
C        NAU MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL    
C          ARRAY PARAMETERS A,U AND B AS DECLARED IN THE CALLING PROGRAM
C          DIMENSION STATEMENT.  NOTE THAT NAU MUST BE AT LEAST         
C          AS LARGE AS M,                                               
C                                                                       
C        NV MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL     
C          ARRAY PARAMETER V AS DECLARED IN THE CALLING PROGRAM         
C          DIMENSION STATEMENT. NV MUST BE AT LEAST AS LARGE AS N,      
C                                                                       
C        NZ MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL     
C          ARRAY PARAMETER Z AS DECLARED IN THE CALLING PROGRAM         
C          DIMENSION STATEMENT.  NOTE THAT NZ MUST BE AT LEAST          
C          AS LARGE AS N,                                               
C                                                                       
C        M IS THE NUMBER OF ROWS OF A (AND U),                          
C                                                                       
C        N IS THE NUMBER OF COLUMNS OF A (AND U) AND THE ORDER OF V,    
C                                                                       
C        A CONTAINS THE RECTANGULAR INPUT MATRIX TO BE DECOMPOSED,      
C                                                                       
C        B CONTAINS THE IRHS RIGHT-HAND-SIDES OF THE OVERDETERMINED     
C         LINEAR SYSTEM A*X=B. IF IRHS .GT. 0,                          
C         THEN ON OUTPUT, THESE IRHS COLUMNS IN B                       
C                       T                                               
C         WILL CONTAIN U B. THUS, TO COMPUTE THE MINIMAL LENGTH LEAST   
C                                               +                       
C         SQUARES SOLUTION, ONE MUST COMPUTE V*W  TIMES THE COLUMNS OF  
C                   +                        +                          
C         B, WHERE W  IS A DIAGONAL MATRIX, W (I)=0 IF W(I) IS          
C         NEGLIGIBLE, OTHERWISE IS 1/W(I). IF IRHS=0, B MAY COINCIDE    
C         WITH A OR U AND WILL NOT BE REFERENCED,                       
C                                                                       
C        IRHS IS THE NUMBER OF RIGHT-HAND-SIDES OF THE OVERDETERMINED   
C         SYSTEM A*X=B. IRHS SHOULD BE SET TO ZERO IF ONLY THE SINGULAR 
C         VALUE DECOMPOSITION OF A IS DESIRED,                          
C                                                                       
C        MATU SHOULD BE SET TO .TRUE. IF THE U MATRIX IN THE            
C          DECOMPOSITION IS DESIRED, AND TO .FALSE. OTHERWISE,          
C                                                                       
C        MATV SHOULD BE SET TO .TRUE. IF THE V MATRIX IN THE            
C          DECOMPOSITION IS DESIRED, AND TO .FALSE. OTHERWISE.          
C                                                                       
C        WHEN HYBSVD IS USED TO COMPUTE THE MINIMAL LENGTH LEAST        
C        SQUARES SOLUTION TO AN OVERDETERMINED SYSTEM, MATU SHOULD      
C        BE SET TO .FALSE. , AND MATV SHOULD BE SET TO .TRUE.  .        
C                                                                       
C     ON OUTPUT                                                         
C                                                                       
C        A IS UNALTERED (UNLESS OVERWRITTEN BY U OR V),                 
C                                                                       
C        W CONTAINS THE N (NON-NEGATIVE) SINGULAR VALUES OF A (THE      
C          DIAGONAL ELEMENTS OF W).  THEY ARE UNORDERED.  IF AN         
C          ERROR EXIT IS MADE, THE SINGULAR VALUES SHOULD BE CORRECT    
C          FOR INDICES IERR-10+1,IERR-10+2,...,N,                       
C                                                                       
C        U CONTAINS THE MATRIX U (ORTHOGONAL COLUMN VECTORS) OF THE     
C          DECOMPOSITION IF MATU HAS BEEN SET TO .TRUE.  OTHERWISE      
C          U IS USED AS A TEMPORARY ARRAY.  U MAY COINCIDE WITH A.      
C          IF AN ERROR EXIT IS MADE, THE COLUMNS OF U CORRESPONDING     
C          TO INDICES OF CORRECT SINGULAR VALUES SHOULD BE CORRECT,     
C                                                                       
C        V CONTAINS THE MATRIX V (ORTHOGONAL) OF THE DECOMPOSITION IF   
C          MATV HAS BEEN SET TO .TRUE.  OTHERWISE V IS NOT REFERENCED.  
C          V MAY ALSO COINCIDE WITH A IF U IS NOT NEEDED.  IF AN ERROR  
C          EXIT IS MADE, THE COLUMNS OF V CORRESPONDING TO INDICES OF   
C          CORRECT SINGULAR VALUES SHOULD BE CORRECT,                   
C                                                                       
C        Z CONTAINS THE MATRIX X IN THE SINGULAR VALUE DECOMPOSITION    
C                  T                                                    
C          OF R=XSY,  IF THE MODIFIED ALGORITHM IS USED. IF THE         
C          GOLUB-REINSCH PROCEDURE IS USED, THEN IT IS NOT REFERENCED.  
C          IF MATU HAS BEEN SET TO .FALSE.,  Z MAY COINCIDE             
C          WITH A OR V AND IS NOT REFERENCED,                           
C                                                                       
C        ERROR CONDITIONS-                                              
C          10+K       IF THE K-TH SINGULAR VALUE HAS NOT BEEN           
C                     DETERMINED AFTER 30 ITERATIONS (RECOVERABLE)      
C          1          IF IRHS .LT. 0                                    
C          2          IF M .LT. N                                       
C          3          IF NAU .LT. M                                     
C          4          IF NV .LT. N                                      
C                                                                       
C     PROGRAMMED BY   TONY CHAN, APPLIED MATH DEPT.,101-50,             
C                     CALTECH,PASADENA, CA 91125.                       
C     MODIFIED   MARCH,1979.                                            
C     MODIFIED   NOVEMBER,1982.                                         
C                                                                       
C     ----------------------------------------------------------------- 
C                                                                       
C     SET VALUE FOR C. THE VALUE FOR C DEPENDS ON THE RELATIVE          
C     EFFICIENCY OF FLOATING POINT MULTIPLICATIONS, FLOATING POINT      
C     ADDITIONS AND TWO-DIMENSIONAL ARRAY INDEXINGS ON THE              
C     COMPUTER WHERE THIS SUBROUTINE IS TO BE RUN.  C SHOULD            
C     USUALLY BE BETWEEN 2 AND 4.  FOR DETAILS ON CHOOSING C, SEE       
C     (2).  THE ALGORITHM IS NOT SENSITIVE TO THE VALUE OF C            
C     ACTUALLY USED AS LONG AS C IS BETWEEN 2 AND 4.                    
C                                                                       
      IF (MFLAG.EQ.1) GO TO 8                                           
C                                                                       
C     USE GOLUB-REINSCH PROCEDURE                                       
C                                                                       
      CALL G2SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,B,IRHS,RV1)               
      RETURN                                                            
C                                                                       
C     USE MODIFIED ALGORITHM                                            
C                                                                       
  8   DO 10 I=1,M                                                       
          DO 10 J=1,N                                                   
   10         U(I,J)=A(I,J)                                             
C                                                                       
C     TRIANGULARIZE U BY HOUSEHOLDER TRANSFORMATIONS, USING             
C     W AND RV1 AS TEMPORARY STORAGE.                                   
C                                                                       
      DO 20 I=1,N                                                       
          G=0.0                                                         
          S=0.0                                                         
          SCALE=0.0                                                     
C                                                                       
C         PERFORM SCALING OF COLUMNS TO AVOID UNNECSSARY OVERFLOW       
C         OR UNDERFLOW                                                  
C                                                                       
          DO 30 K=I,M                                                   
              SCALE = SCALE + ABS(U(K,I))                               
  30      CONTINUE                                                      
              RV1(I) = 0.0                                              
          IF (SCALE .EQ. 0.0) GO TO 20                                  
          DO 40 K=I,M                                                   
              U(K,I) = U(K,I)/SCALE                                     
              S = S + U(K,I)**2                                         
  40      CONTINUE                                                      
C                                                                       
C         THE VECTOR E OF THE HOUSEHOLDER TRANSFORMATION I + EE-/H      
C         WILL BE STORED IN COLUMN I OF U. THE TRANSFORMED ELEMENT      
C         U(I,I) WILL BE STORED IN W(I) AND THE SCALAR H IN             
C         RV1(I-1).                                                     
C                                                                       
          F = U(I,I)                                                    
          G = -SIGN(SQRT(S),F)                                          
          H = F*G - S                                                   
          U(I,I) = F - G                                                
          RV1(I) = H                                                    
          W(I) = SCALE * G                                              
C                                                                       
          IF (I .EQ. N) GO TO 85                                        
C                                                                       
C         APPLY TRANSFORMATIONS TO REMAINING COLUMNS OF A               
C                                                                       
          IP1 = I + 1                                                   
          DO 50 J=IP1,N                                                 
              S = 0.0                                                   
              DO 60 K=I,M                                               
   60             S = S + U(K,I)*U(K,J)                                 
              F = S/H                                                   
              DO 70 K=I,M                                               
                  U(K,J) = U(K,J) + F*U(K,I)                            
  70          CONTINUE                                                  
  50      CONTINUE                                                      
C                                                                       
C         APPLY TRANSFORMATIONS TO COLUMNS OF B IF IRHS .GT. 0          
C                                                                       
 85       IF (IRHS .EQ. 0) GO TO 20                                     
          DO 80 J=1,IRHS                                                
              S = 0.0                                                   
              DO 90 K=I,M                                               
  90              S = S + U(K,I)*B(K,J)                                 
              F = S/H                                                   
              DO 100 K=I,M                                              
                  B(K,J) = B(K,J) + F*U(K,I)                            
  100         CONTINUE                                                  
  80      CONTINUE                                                      
  20  CONTINUE                                                          
C                                                                       
C     COPY R INTO Z IF MATU = .TRUE.                                    
C                                                                       
      IF (.NOT.MATU) GO TO 300                                          
C                                                                       
      DO 110 I=1,N                                                      
          DO 105 J=I,N                                                  
              Z(J,I) = U(J,I)                                           
              U(J,I) = 0.0                                              
 105      CONTINUE                                                      
          U(I,I) = W(I)                                                 
 110  CONTINUE                                                          
      CALL G2SVD(NAU,NV,N,N,U,W,MATU,U,MATV,V,B,IRHS,D)                 
      CALL M1THB(M, N, U, NAU, Z, RV1, D)                               
      RETURN                                                            
C                                                                       
C     FORM R IN U BY ZEROING THE LOWER TRIANGULAR PART OF R IN U        
C                                                                       
  300 IF (N .EQ. 1) GO TO 280                                           
      DO 260 I=2,N                                                      
          IM1 = I - 1                                                   
          DO 270 J=1,IM1                                                
  270         U(I,J) = 0.0                                              
          U(I,I) = W(I)                                                 
  260 CONTINUE                                                          
 280  U(1,1) = W(1)                                                     
C                                                                       
      CALL G2SVD(NAU,NV,N,N,U,W,MATU,U,MATV,V,B,IRHS,RV1)               
      RETURN                                                            
C     THE BODY OF SUBROUTINE G2SVD SHOULD BE INCLUDED WITH HYBSVD       
C                                                                       
      END                                                               
      SUBROUTINE G2SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,B,IRHS,RV1)         
C                                                                       
      INTEGER I,J,K,L,M,N,II,I1,KK,K1,LL,L1,MN,NAU,NV,ITS,IRHS          
      REAL A(NAU,N),W(N),U(NAU,N),V(NV,N),B(NAU,IRHS),RV1(N)            
      REAL C,F,G,H,S,X,Y,Z,EPS,SCALE,MACHEP,R1MACH                      
      REAL SQRT,AMAX1,ABS,SIGN                                          
      LOGICAL MATU,MATV                                                 
C                                                                       
C     THIS SUBROUTINE IS A TRANSLATION OF THE ALGOL PROCEDURE SVD,      
C     NUM. MATH. 14, 403-420(1970) BY GOLUB AND REINSCH.                
C     HANDBOOK FOR AUTO. COMP., VOL II-LINEAR ALGEBRA, 134-151(1971).   
C                                                                       
C     THIS SUBROUTINE DETERMINES THE SINGULAR VALUE DECOMPOSITION       
C          T                                                            
C     A=UWV  OF A REAL M BY N RECTANGULAR MATRIX.  HOUSEHOLDER          
C     BIDIAGONALIZATION AND A VARIANT OF THE QR ALGORITHM ARE USED.     
C     G2SVD ASSUMES M .GE. N.  IF M .LT. N, THEN COMPUTE THE SINGULAR   
C                             T       T    T            T               
C     VALUE DECOMPOSITION OF A .  IF A =UWV , THEN A=VWU .              
C                                                                       
C     G2SVD CAN ALSO BE USED TO COMPUTE THE MINIMAL LENGTH LEAST SQUARES
C     SOLUTION TO THE OVERDETERMINED LINEAR SYSTEM A*X=B.               
C                                                                       
C     ON INPUT -                                                        
C                                                                       
C        NAU MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL    
C          ARRAY PARAMETERS A,U AND B AS DECLARED IN THE CALLING PROGRAM
C          DIMENSION STATEMENT.  NOTE THAT NAU MUST BE AT LEAST         
C          AS LARGE AS M,                                               
C                                                                       
C        NV MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL     
C          ARRAY PARAMETER V AS DECLARED IN THE CALLING PROGRAM         
C          DIMENSION STATEMENT. NV MUST BE AT LEAST AS LARGE AS N,      
C                                                                       
C        M IS THE NUMBER OF ROWS OF A (AND U),                          
C                                                                       
C        N IS THE NUMBER OF COLUMNS OF A (AND U) AND THE ORDER OF V,    
C                                                                       
C        A CONTAINS THE RECTANGULAR INPUT MATRIX TO BE DECOMPOSED,      
C                                                                       
C        B CONTAINS THE IRHS RIGHT-HAND-SIDES OF THE OVERDETERMINED     
C         LINEAR SYSTEM A*X=B. IF IRHS .GT. 0,                          
C         THEN ON OUTPUT, THESE IRHS COLUMNS                            
C                       T                                               
C         WILL CONTAIN U B. THUS, TO COMPUTE THE MINIMAL LENGTH LEAST   
C                                               +                       
C         SQUARES SOLUTION, ONE MUST COMPUTE V*W  TIMES THE COLUMNS OF  
C                   +                        +                          
C         B, WHERE W  IS A DIAGONAL MATRIX, W (I)=0 IF W(I) IS          
C         NEGLIGIBLE, OTHERWISE IS 1/W(I). IF IRHS=0, B MAY COINCIDE    
C         WITH A OR U AND WILL NOT BE REFERENCED,                       
C                                                                       
C        IRHS IS THE NUMBER OF RIGHT-HAND-SIDES OF THE OVERDETERMINED   
C         SYSTEM A*X=B. IRHS SHOULD BE SET TO ZERO IF ONLY THE SINGULAR 
C         VALUE DECOMPOSITION OF A IS DESIRED,                          
C                                                                       
C        MATU SHOULD BE SET TO .TRUE. IF THE U MATRIX IN THE            
C          DECOMPOSITION IS DESIRED, AND TO .FALSE. OTHERWISE,          
C                                                                       
C        MATV SHOULD BE SET TO .TRUE. IF THE V MATRIX IN THE            
C          DECOMPOSITION IS DESIRED, AND TO .FALSE. OTHERWISE.          
C                                                                       
C     ON OUTPUT -                                                       
C                                                                       
C        A IS UNALTERED (UNLESS OVERWRITTEN BY U OR V),                 
C                                                                       
C        W CONTAINS THE N (NON-NEGATIVE) SINGULAR VALUES OF A (THE      
C          DIAGONAL ELEMENTS OF W).  THEY ARE UNORDERED.  IF AN         
C          ERROR EXIT IS MADE, THE SINGULAR VALUES SHOULD BE CORRECT    
C          FOR INDICES IERR-10+1,IERR-10+2,...,N,                       
C                                                                       
C        U CONTAINS THE MATRIX U (ORTHOGONAL COLUMN VECTORS) OF THE     
C          DECOMPOSITION IF MATU HAS BEEN SET TO .TRUE.  OTHERWISE      
C          U IS USED AS A TEMPORARY ARRAY.  U MAY COINCIDE WITH A.      
C          IF AN ERROR EXIT IS MADE, THE COLUMNS OF U CORRESPONDING     
C          TO INDICES OF CORRECT SINGULAR VALUES SHOULD BE CORRECT,     
C                                                                       
C        V CONTAINS THE MATRIX V (ORTHOGONAL) OF THE DECOMPOSITION IF   
C          MATV HAS BEEN SET TO .TRUE.  OTHERWISE V IS NOT REFERENCED.  
C          V MAY ALSO COINCIDE WITH A IF U IS NOT NEEDED.  IF AN ERROR  
C          EXIT IS MADE, THE COLUMNS OF V CORRESPONDING TO INDICES OF   
C          CORRECT SINGULAR VALUES SHOULD BE CORRECT,                   
C                                                                       
C        ERROR CONDITIONS-                                              
C          10+K       IF THE K-TH SINGULAR VALUE HAS NOT BEEN           
C                     DETERMINED AFTER 30 ITERATIONS,                   
C          1          IF IRHS .LT. 0 .                                  
C          2          IF M .LT. N .                                     
C          3          IF NAU .LT.M .                                    
C          4          IF NV .LT. N .                                    
C                                                                       
C        RV1 IS A TEMPORARY STORAGE ARRAY (OF LENGTH N).                
C                                                                       
C                                                                       
C     THIS SUBROUTINE HAS BEEN CHECKED BY THE PFORT VERIFIER            
C     (RYDER,B.G. THE PFORT VERIFIER, SOFTWARE - PRACTICE AND           
C     EXPERIENCE, VOL.4, 359-377, 1974) FOR ADHERENCE TO A LARGE,       
C     CAREFULLY DEFINED, PORTABLE SUBSET OF AMERICAN NATIONAL STANDARD  
C     FORTRAN CALLED PFORT.                                             
C                                                                       
C     ORIGINAL VERSION OF THIS CODE IS SUBROUTINE SVD IN RELEASE 2 OF   
C         EISPACK.                                                      
C     MODIFIED BY TONY CHAN, COMP. SCI. DEPT. STANFORD UNIV.,CA94305.   
C     LAST MODIFIED  2 SEPTEMBER, 1976.                                 
C                                                                       
C     ------------------------------------------------------------------
C                                                                       
       MACHEP = R1MACH(4)                                               
C                                                                       
      DO 100 I = 1, M                                                   
C                                                                       
         DO 100 J = 1, N                                                
            U(I,J) = A(I,J)                                             
  100 CONTINUE                                                          
C     ********** HOUSEHOLDER REDUCTION TO BIDIAGONAL FORM **********    
      G = 0.0                                                           
      SCALE = 0.0                                                       
      X = 0.0                                                           
C                                                                       
      DO 300 I = 1, N                                                   
         L = I + 1                                                      
         RV1(I) = SCALE * G                                             
         G = 0.0                                                        
         S = 0.0                                                        
         SCALE = 0.0                                                    
C                                                                       
C     COMPUTE LEFT TRANSFORMATIONS THAT ZEROS THE SUBDIAGONAL ELEMENTS  
C         OF THE I-TH COLUMN.                                           
C                                                                       
         DO 120 K = I, M                                                
  120    SCALE = SCALE + ABS(U(K,I))                                    
C                                                                       
         IF (SCALE .EQ. 0.0) GO TO 210                                  
C                                                                       
         DO 130 K = I, M                                                
            U(K,I) = U(K,I) / SCALE                                     
            S = S + U(K,I)**2                                           
  130    CONTINUE                                                       
C                                                                       
         F = U(I,I)                                                     
         G = -SIGN(SQRT(S),F)                                           
         H = F * G - S                                                  
         U(I,I) = F - G                                                 
         IF (I .EQ. N) GO TO 155                                        
C                                                                       
C     APPLY LEFT TRANSFORMATIONS TO REMAINING COLUMNS OF A              
C                                                                       
         DO 150 J = L, N                                                
            S = 0.0                                                     
C                                                                       
            DO 140 K = I, M                                             
  140       S = S + U(K,I) * U(K,J)                                     
C                                                                       
            F = S / H                                                   
C                                                                       
            DO 150 K = I, M                                             
               U(K,J) = U(K,J) + F * U(K,I)                             
  150    CONTINUE                                                       
C                                                                       
C     APPLY LEFT TRANSFORMATIONS TO THE COLUMNS OF B IF IRHS .GT. 0.    
C                                                                       
 155      IF (IRHS .EQ. 0) GO TO 190                                    
          DO 160 J=1,IRHS                                               
              S=0.0                                                     
              DO 170 K=I,M                                              
  170             S = S + U(K,I)*B(K,J)                                 
              F = S/H                                                   
              DO 180 K=I,M                                              
  180             B(K,J) = B(K,J) + F*U(K,I)                            
  160     CONTINUE                                                      
C                                                                       
C     COMPUTE RIGHT TRANSFORMATIONS.                                    
C                                                                       
  190    DO 200 K = I, M                                                
  200    U(K,I) = SCALE * U(K,I)                                        
C                                                                       
  210    W(I) = SCALE * G                                               
         G = 0.0                                                        
         S = 0.0                                                        
         SCALE = 0.0                                                    
         IF (I .GT. M .OR. I .EQ. N) GO TO 290                          
C                                                                       
         DO 220 K = L, N                                                
  220    SCALE = SCALE + ABS(U(I,K))                                    
C                                                                       
         IF (SCALE .EQ. 0.0) GO TO 290                                  
C                                                                       
         DO 230 K = L, N                                                
            U(I,K) = U(I,K) / SCALE                                     
            S = S + U(I,K)**2                                           
  230    CONTINUE                                                       
C                                                                       
         F = U(I,L)                                                     
         G = -SIGN(SQRT(S),F)                                           
         H = F * G - S                                                  
         U(I,L) = F - G                                                 
C                                                                       
         DO 240 K = L, N                                                
  240    RV1(K) = U(I,K) / H                                            
C                                                                       
         IF (I .EQ. M) GO TO 270                                        
C                                                                       
         DO 260 J = L, M                                                
            S = 0.0                                                     
C                                                                       
            DO 250 K = L, N                                             
  250       S = S + U(J,K) * U(I,K)                                     
C                                                                       
            DO 260 K = L, N                                             
               U(J,K) = U(J,K) + S * RV1(K)                             
  260    CONTINUE                                                       
C                                                                       
  270    DO 280 K = L, N                                                
  280    U(I,K) = SCALE * U(I,K)                                        
C                                                                       
  290    X = AMAX1(X,ABS(W(I))+ABS(RV1(I)))                             
  300 CONTINUE                                                          
C     ********** ACCUMULATION OF RIGHT-HAND TRANSFORMATIONS **********  
      IF (.NOT. MATV) GO TO 410                                         
C     ********** FOR I=N STEP -1 UNTIL 1 DO -- **********               
      DO 400 II = 1, N                                                  
         I = N + 1 - II                                                 
         IF (I .EQ. N) GO TO 390                                        
         IF (G .EQ. 0.0) GO TO 360                                      
C                                                                       
         DO 320 J = L, N                                                
C     ********** DOUBLE DIVISION AVOIDS POSSIBLE UNDERFLOW **********   
  320    V(J,I) = (U(I,J) / U(I,L)) / G                                 
C                                                                       
         DO 350 J = L, N                                                
            S = 0.0                                                     
C                                                                       
            DO 340 K = L, N                                             
  340       S = S + U(I,K) * V(K,J)                                     
C                                                                       
            DO 350 K = L, N                                             
               V(K,J) = V(K,J) + S * V(K,I)                             
  350    CONTINUE                                                       
C                                                                       
  360    DO 380 J = L, N                                                
            V(I,J) = 0.0                                                
            V(J,I) = 0.0                                                
  380    CONTINUE                                                       
C                                                                       
  390    V(I,I) = 1.0                                                   
         G = RV1(I)                                                     
         L = I                                                          
  400 CONTINUE                                                          
C     ********** ACCUMULATION OF LEFT-HAND TRANSFORMATIONS **********   
  410 IF (.NOT. MATU) GO TO 510                                         
C     **********FOR I=MIN(M,N) STEP -1 UNTIL 1 DO -- **********         
      MN = N                                                            
      IF (M .LT. N) MN = M                                              
C                                                                       
      DO 500 II = 1, MN                                                 
         I = MN + 1 - II                                                
         L = I + 1                                                      
         G = W(I)                                                       
         IF (I .EQ. N) GO TO 430                                        
C                                                                       
         DO 420 J = L, N                                                
  420    U(I,J) = 0.0                                                   
C                                                                       
  430    IF (G .EQ. 0.0) GO TO 475                                      
         IF (I .EQ. MN) GO TO 460                                       
C                                                                       
         DO 450 J = L, N                                                
            S = 0.0                                                     
C                                                                       
            DO 440 K = L, M                                             
  440       S = S + U(K,I) * U(K,J)                                     
C     ********** DOUBLE DIVISION AVOIDS POSSIBLE UNDERFLOW **********   
            F = (S / U(I,I)) / G                                        
C                                                                       
            DO 450 K = I, M                                             
               U(K,J) = U(K,J) + F * U(K,I)                             
  450    CONTINUE                                                       
C                                                                       
  460    DO 470 J = I, M                                                
  470    U(J,I) = U(J,I) / G                                            
C                                                                       
         GO TO 490                                                      
C                                                                       
  475    DO 480 J = I, M                                                
  480    U(J,I) = 0.0                                                   
C                                                                       
  490    U(I,I) = U(I,I) + 1.0                                          
  500 CONTINUE                                                          
C     ********** DIAGONALIZATION OF THE BIDIAGONAL FORM **********      
  510 EPS = MACHEP * X                                                  
C     ********** FOR K=N STEP -1 UNTIL 1 DO -- **********               
      DO 700 KK = 1, N                                                  
         K1 = N - KK                                                    
         K = K1 + 1                                                     
         ITS = 0                                                        
C     ********** TEST FOR SPLITTING.                                    
C                FOR L=K STEP -1 UNTIL 1 DO -- **********               
  520    DO 530 LL = 1, K                                               
            L1 = K - LL                                                 
            L = L1 + 1                                                  
            IF (ABS(RV1(L)) .LE. EPS) GO TO 565                         
C     ********** RV1(1) IS ALWAYS ZERO, SO THERE IS NO EXIT             
C                THROUGH THE BOTTOM OF THE LOOP **********              
            IF (ABS(W(L1)) .LE. EPS) GO TO 540                          
  530    CONTINUE                                                       
C     ********** CANCELLATION OF RV1(L) IF L GREATER THAN 1 **********  
  540    C = 0.0                                                        
         S = 1.0                                                        
C                                                                       
         DO 560 I = L, K                                                
            F = S * RV1(I)                                              
            RV1(I) = C * RV1(I)                                         
            IF (ABS(F) .LE. EPS) GO TO 565                              
            G = W(I)                                                    
            H = SQRT(F*F+G*G)                                           
            W(I) = H                                                    
            C = G / H                                                   
            S = -F / H                                                  
C                                                                       
C     APPLY LEFT TRANSFORMATIONS TO B IF IRHS .GT. 0.                   
C                                                                       
              IF (IRHS .EQ. 0) GO TO 542                                
              DO 545 J=1,IRHS                                           
                  Y=B(L1,J)                                             
                  Z=B(I,J)                                              
                  B(L1,J) = Y*C + Z*S                                   
                  B(I,J) = -Y*S + Z*C                                   
  545         CONTINUE                                                  
  542         CONTINUE                                                  
C                                                                       
            IF (.NOT. MATU) GO TO 560                                   
C                                                                       
            DO 550 J = 1, M                                             
               Y = U(J,L1)                                              
               Z = U(J,I)                                               
               U(J,L1) = Y * C + Z * S                                  
               U(J,I) = -Y * S + Z * C                                  
  550       CONTINUE                                                    
C                                                                       
  560    CONTINUE                                                       
C     ********** TEST FOR CONVERGENCE **********                        
  565    Z = W(K)                                                       
         IF (L .EQ. K) GO TO 650                                        
C     ********** SHIFT FROM BOTTOM 2 BY 2 MINOR **********              
         IF (ITS .EQ. 30) GO TO 1000                                    
         ITS = ITS + 1                                                  
         X = W(L)                                                       
         Y = W(K1)                                                      
         G = RV1(K1)                                                    
         H = RV1(K)                                                     
         F=0.5*(((G+Z)/H)*((G-Z)/Y)+Y/H-H/Y)                            
         SCALE=ABS(F)+1.0                                               
         G=SCALE*SQRT((F/SCALE)**2+(1.0/SCALE)**2)                      
         F=X-(Z/X)*Z+(H/X)*(Y/(F+SIGN(G,F))-H)                          
C     ********** NEXT QR TRANSFORMATION **********                      
         C = 1.0                                                        
         S = 1.0                                                        
C                                                                       
         DO 600 I1 = L, K1                                              
            I = I1 + 1                                                  
            G = RV1(I)                                                  
            Y = W(I)                                                    
            H = S * G                                                   
            G = C * G                                                   
            SCALE=ABS(F)+ABS(H)                                         
            Z=SCALE*SQRT((F/SCALE)**2+(H/SCALE)**2)                     
            RV1(I1) = Z                                                 
            C = F / Z                                                   
            S = H / Z                                                   
            F = X * C + G * S                                           
            G = -X * S + G * C                                          
            H = Y * S                                                   
            Y = Y * C                                                   
            IF (.NOT. MATV) GO TO 575                                   
C                                                                       
            DO 570 J = 1, N                                             
               X = V(J,I1)                                              
               Z = V(J,I)                                               
               V(J,I1) = X * C + Z * S                                  
               V(J,I) = -X * S + Z * C                                  
  570       CONTINUE                                                    
C                                                                       
  575       Z=ABS(F)+ABS(H)                                             
            IF(Z.NE.0.0)Z=Z*SQRT((F/Z)**2+(H/Z)**2)                     
            W(I1) = Z                                                   
C     ********** ROTATION CAN BE ARBITRARY IF Z IS ZERO **********      
            IF (Z .EQ. 0.0) GO TO 580                                   
            C = F / Z                                                   
            S = H / Z                                                   
  580       F = C * G + S * Y                                           
            X = -S * G + C * Y                                          
C                                                                       
C     APPLY LEFT TRANSFORMATIONS TO B IF IRHS .GT. 0.                   
C                                                                       
              IF (IRHS .EQ. 0) GO TO 582                                
              DO 585 J=1,IRHS                                           
                  Y = B(I1,J)                                           
                  Z = B(I,J)                                            
                  B(I1,J) = Y*C + Z*S                                   
                  B(I,J) = -Y*S + Z*C                                   
  585         CONTINUE                                                  
  582         CONTINUE                                                  
C                                                                       
            IF (.NOT. MATU) GO TO 600                                   
C                                                                       
            DO 590 J = 1, M                                             
               Y = U(J,I1)                                              
               Z = U(J,I)                                               
               U(J,I1) = Y * C + Z * S                                  
               U(J,I) = -Y * S + Z * C                                  
  590       CONTINUE                                                    
C                                                                       
  600    CONTINUE                                                       
C                                                                       
         RV1(L) = 0.0                                                   
         RV1(K) = F                                                     
         W(K) = X                                                       
         GO TO 520                                                      
C     ********** CONVERGENCE **********                                 
  650    IF (Z .GE. 0.0) GO TO 700                                      
C     ********** W(K) IS MADE NON-NEGATIVE **********                   
         W(K) = -Z                                                      
         IF (.NOT. MATV) GO TO 700                                      
C                                                                       
         DO 690 J = 1, N                                                
  690    V(J,K) = -V(J,K)                                               
C                                                                       
  700 CONTINUE                                                          
C                                                                       
      GO TO 1001                                                        
C     SET ERROR -- NO CONVERGENCE TO A                                  
C     SINGULAR VALUE AFTER 30 ITERATIONS                                
C/6S                                                                    
C1000 CALL SETERR(35HG2SVD- NO CONVERGENCE AFTER 30 ITER,35,K+10,1)     
C/7S                                                                    
 1000 CALL SETERR('G2SVD- NO CONVERGENCE AFTER 30 ITER',35,K+10,1)      
C/                                                                      
 1001 RETURN                                                            
      END                                                               
      SUBROUTINE M1THB(M, N, U, IU, Z, BETA, D)                         
      INTEGER N, IU                                                     
      INTEGER M                                                         
      REAL U(IU, N), Z(N, N), BETA(N), D(N)                             
      INTEGER I, J, K, IP1, NP1                                         
      REAL BETAI, S                                                     
C CALCULATE U                                                           
      I = N                                                             
      NP1 = N+1                                                         
   1     IF (I .LE. 0) GOTO  14                                         
         BETAI = BETA(I)                                                
         IF (BETAI .EQ. 0.0) GOTO 20                                    
         IP1 = I+1                                                      
         IF (I .GE. N) GOTO 7                                           
            IF (N .LT. M) GOTO 3                                        
               DO  2 J = IP1, N                                         
                  BETA(J) = 0.0                                         
   2              CONTINUE                                              
               GOTO  6                                                  
   3           DO  5 J = IP1, N                                         
                  S = 0.0                                               
                  DO  4 K = NP1, M                                      
                     S = S+U(K, I)*U(K, J)                              
   4                 CONTINUE                                           
                  BETA(J) = S                                           
   5              CONTINUE                                              
   6     CONTINUE                                                       
   7     DO  12 J = 1, N                                                
            S = 0.0                                                     
            DO  8 K = I, N                                              
               S = S+Z(K, I)*U(K, J)                                    
   8           CONTINUE                                                 
            IF (I .GE. N) GOTO 10                                       
               DO  9 K = IP1, N                                         
                  S = S+BETA(K)*Z(J, K)                                 
   9              CONTINUE                                              
  10        S = S/BETAI                                                 
            DO  11 K = I, N                                             
               U(K, J) = U(K, J)+S*Z(K, I)                              
  11           CONTINUE                                                 
            D(J) = S                                                    
  12        CONTINUE                                                    
         DO  13 J = 1, N                                                
            Z(J, I) = D(J)                                              
  13        CONTINUE                                                    
         GO TO 22                                                       
  20     DO 21 J=1,N                                                    
            Z(J,I) = 0.0                                                
  21     CONTINUE                                                       
  22     I = I-1                                                        
         GOTO  1                                                        
  14  IF (N .GE. M) GOTO 19                                             
         DO  18 I = NP1, M                                              
            DO  16 J = 1, N                                             
               S = 0.0                                                  
               DO  15 K = 1, N                                          
                  S = S+U(I, K)*Z(J, K)                                 
  15              CONTINUE                                              
               D(J) = S                                                 
  16           CONTINUE                                                 
            DO  17 J = 1, N                                             
               U(I, J) = D(J)                                           
  17           CONTINUE                                                 
  18        CONTINUE                                                    
  19  RETURN                                                            
      END                                                               
      SUBROUTINE DSVD(M,N,A,NAU,U,MATU,W,V,NV,MATV)                     
      INTEGER NAU,NV,M,N,MFLAG                                          
      INTEGER ISTKGT,IERR                                               
      INTEGER ID, IRV1, IZ                                              
      DOUBLE PRECISION A(NAU,N),W(N),U(NAU,N),V(NV,N)                   
      LOGICAL MATU, MATV                                                
      DOUBLE PRECISION DSTAK(500)                                       
      COMMON /CSTAK/DSTAK                                               
C                                                                       
      CALL ENTER(0)                                                     
C/6S                                                                    
C     IF (M .LT. N) CALL SETERR(12HDSVD- M.LT.N,12,1,2)                 
C     IF (NAU .LT. M) CALL SETERR (14HDSVD- NAU.LT.M,14,2,2)            
C     IF (NV .LT. N) CALL SETERR (13HDSVD- NV.LT.N,13,3,2)              
C     IF (M .LT. 1) CALL SETERR (12HDSVD- M.LT.1,12,4,2)                
C     IF (N .LT.1) CALL SETERR (12HDSVD- N.LT.1,12,5,2)                 
C/7S                                                                    
      IF (M .LT. N) CALL SETERR('DSVD- M.LT.N',12,1,2)                  
      IF (NAU .LT. M) CALL SETERR ('DSVD- NAU.LT.M',14,2,2)             
      IF (NV .LT. N) CALL SETERR ('DSVD- NV.LT.N',13,3,2)               
      IF (M .LT. 1) CALL SETERR ('DSVD- M.LT.1',12,4,2)                 
      IF (N .LT.1) CALL SETERR ('DSVD- N.LT.1',12,5,2)                  
C/                                                                      
      IRV1 = ISTKGT(N,4)                                                
      ID = ISTKGT(N,4)                                                  
      CALL DC1RSS(M,N,MATU,MATV,MFLAG)                                  
      IF ((.NOT. MATU).OR.(MFLAG.EQ.0))  GO TO 100                      
      IZ = ISTKGT(N**2,4)                                               
      CALL DG1SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,DSTAK(IZ),               
     1   A,0,DSTAK(IRV1),DSTAK(ID),MFLAG)                               
      GOTO 300                                                          
 100  CALL DG1SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,A,                       
     1   A,0,DSTAK(IRV1),DSTAK(ID),MFLAG)                               
 300  IERR = NERROR(NERR)                                               
      IF (IERR.LE.10) GOTO 200                                          
         CALL ERROFF                                                    
C/6S                                                                    
C        CALL SETERR(34HDSVD- NO CONVERGENCE AFTER 30 ITER,             
C    1   34,IERR,1)                                                     
C/7S                                                                    
         CALL SETERR('DSVD- NO CONVERGENCE AFTER 30 ITER',              
     1   34,IERR,1)                                                     
C/                                                                      
 200  CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE DSVDLS(M,N,A,NAU,U,MATU,W,V,NV,MATV,B,IRHS)            
      INTEGER NAU,NV,M,N,IRHS,MFLAG                                     
      INTEGER IRV1, ICD, IZ, IV                                         
      INTEGER ISTKGT,IERR                                               
C/6S                                                                    
C     DOUBLE PRECISION A(NAU,N),W(N),U(NAU,N),V(NV,N),B(NAU,1)          
C/7S                                                                    
      DOUBLE PRECISION A(NAU,N),W(N),U(NAU,N),V(NV,N),B(NAU,*)          
C/                                                                      
      LOGICAL MATU, MATV                                                
      DOUBLE PRECISION DSTAK(500)                                       
      COMMON /CSTAK/DSTAK                                               
C                                                                       
      CALL ENTER(0)                                                     
C/6S                                                                    
C     IF (IRHS .LT. 0) CALL SETERR(17HDSVDLS- IRHS.LT.0,17,1,2)         
C     IF (M .LT. N) CALL SETERR(14HDSVDLS- M.LT.N,14,2,2)               
C     IF (NAU .LT. M) CALL SETERR (16HDSVDLS- NAU.LT.M,16,3,2)          
C     IF (NV .LT. N) CALL SETERR (15HDSVDLS- NV.LT.N,15,4,2)            
C     IF (M .LT. 1) CALL SETERR (14HDSVDLS- M.LT.1,14,5,2)              
C     IF (N .LT.1) CALL SETERR (14HDSVDLS- N.LT.1,14,6,2)               
C/7S                                                                    
      IF (IRHS .LT. 0) CALL SETERR('DSVDLS- IRHS.LT.0',17,1,2)          
      IF (M .LT. N) CALL SETERR('DSVDLS- M.LT.N',14,2,2)                
      IF (NAU .LT. M) CALL SETERR ('DSVDLS- NAU.LT.M',16,3,2)           
      IF (NV .LT. N) CALL SETERR ('DSVDLS- NV.LT.N',15,4,2)             
      IF (M .LT. 1) CALL SETERR ('DSVDLS- M.LT.1',14,5,2)               
      IF (N .LT.1) CALL SETERR ('DSVDLS- N.LT.1',14,6,2)                
C/                                                                      
      IRV1 = ISTKGT(N,4)                                                
      ICD = ISTKGT(N,4)                                                 
      CALL DC1RSS(M,N,MATU,MATV,MFLAG)                                  
      IF ((IRHS .GT. 0) .AND. (.NOT.MATV)) GO TO 180                    
      IF ((.NOT. MATU) .OR. (MFLAG .EQ. 0)) GO TO 170                   
          IZ = ISTKGT(N**2,4)                                           
          CALL DG1SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,DSTAK(IZ),B,         
     1       IRHS,DSTAK(IRV1),DSTAK(ICD),MFLAG)                         
      GO TO 190                                                         
 170  CALL DG1SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,A,B,                     
     1   IRHS,DSTAK(IRV1),DSTAK(ICD),MFLAG)                             
      GO TO 190                                                         
 180  IV = ISTKGT(N**2,4)                                               
      IF ((.NOT. MATU) .OR. (MFLAG .EQ. 0)) GO TO 185                   
          IZ = ISTKGT(N**2,4)                                           
          CALL DG1SVD(NAU,N,M,N,A,W,MATU,U,.TRUE.,DSTAK(IV),DSTAK(IZ),B,
     1       IRHS,DSTAK(IRV1),DSTAK(ICD),MFLAG)                         
      GO TO 190                                                         
 185  CALL DG1SVD(NAU,N,M,N,A,W,MATU,U,.TRUE.,DSTAK(IV),A,B,            
     1   IRHS,DSTAK(IRV1),DSTAK(ICD),MFLAG)                             
 190  IERR = NERROR(NERR)                                               
      IF (IERR.LE.10) GOTO 200                                          
         CALL ERROFF                                                    
C/6S                                                                    
C        CALL SETERR(36HDSVDLS- NO CONVERGENCE AFTER 30 ITER,           
C    1   35,IERR,1)                                                     
C/7S                                                                    
         CALL SETERR('DSVDLS- NO CONVERGENCE AFTER 30 ITER',            
     1   35,IERR,1)                                                     
C/                                                                      
         GO TO 210                                                      
 200  IF ((IRHS .GT. 0) .AND. (.NOT. MATV)) GO TO 205                   
         IF (IRHS .GT. 0) CALL DC2LSQ(DSTAK(ICD),W,B,V,N,M,IRHS,NAU)    
         GO TO 210                                                      
 205  CALL DC2LSQ(DSTAK(ICD),W,B,DSTAK(IV),N,M,IRHS,NAU)                
 210  CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE DC1RSS(M,N,MATU,MATV,MFLAG)                            
      INTEGER M, N, MFLAG                                               
      DOUBLE PRECISION C, XOVRPT, R, DFLOAT                             
      LOGICAL MATU, MATV                                                
C     ----------------------------------------------------------------- 
C                                                                       
C     SET VALUE FOR C. THE VALUE FOR C DEPENDS ON THE RELATIVE          
C     EFFICIENCY OF FLOATING POINT MULTIPLICATIONS, FLOATING POINT      
C     ADDITIONS AND TWO-DIMENSIONAL ARRAY INDEXINGS ON THE              
C     COMPUTER WHERE THIS SUBROUTINE IS TO BE RUN.  C SHOULD            
C     USUALLY BE BETWEEN 2 AND 4.  FOR DETAILS ON CHOOSING C, SEE       
C     (2).  THE ALGORITHM IS NOT SENSITIVE TO THE VALUE OF C            
C     ACTUALLY USED AS LONG AS C IS BETWEEN 2 AND 4.                    
C                                                                       
      C = 4.D0                                                          
C                                                                       
C     DETERMINE CROSS-OVER POINT                                        
C                                                                       
      IF (MATU .AND. MATV) XOVRPT = (C+7.D0/3.D0)/C                     
      IF (MATU .AND. .NOT.MATV) XOVRPT = (C+7.D0/3.D0)/C                
      IF (.NOT.MATU .AND. MATV) XOVRPT = 5.D0/3.D0                      
      IF (.NOT.MATU .AND. .NOT.MATV) XOVRPT = 5.D0/3.D0                 
C                                                                       
C     DETERMINE WHETHER TO USE GOLUB-REINSCH OR THE MODIFIED            
C     ALGORITHM.                                                        
C                                                                       
      R = DFLOAT(M)/DFLOAT(N)                                           
      MFLAG = 0                                                         
      IF (R .GE. XOVRPT) MFLAG = 1                                      
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE DC2LSQ(C,W,B,V,N,M,IRHS,NA)                            
C                                                                       
C                    T         T                                        
C COMPUTE SOLUTION VW B WHERE W (I)=0 IF W(I) IS SMALL AND              
C OTHERWISE IS 1/W(I)                                                   
      INTEGER I,J,K                                                     
      INTEGER N,M,IRHS,NA                                               
      DOUBLE PRECISION C(N),W(N),B(NA,IRHS),V(N,N)                      
      DOUBLE PRECISION BB                                               
      DO 100 K=1,IRHS                                                   
      DO 101 I=1,N                                                      
         C(I) = 0.D0                                                    
 101  CONTINUE                                                          
      DO 102 I=1,N                                                      
         BB = 0.D0                                                      
         IF (W(I).GT.0.D0) BB = B(I,K)/W(I)                             
         DO 102 J=1,N                                                   
            C(J) = C(J) + BB*V(J,I)                                     
 102  CONTINUE                                                          
      DO 103 I=1,N                                                      
         B(I,K) = C(I)                                                  
 103  CONTINUE                                                          
 100  CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE DG1SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,Z,B,               
     1   IRHS,RV1,D, MFLAG)                                             
      INTEGER NAU,NV,M,N,IRHS,IP1,I,J,K,IM1                             
      INTEGER MFLAG                                                     
      DOUBLE PRECISION A(NAU,N),W(N),U(NAU,N),V(NV,N),                  
     1  B(NAU,IRHS),Z(N,N),RV1(N),D(N)                                  
      DOUBLE PRECISION G,SCALE,DSQRT,F,S,H                              
      LOGICAL MATU,MATV                                                 
C                                                                       
C     THIS SUBROUTINE IS A MODIFICATION OF THE GOLUB-REINSCH PROCEDURE  
C                                                               T       
C     (1) FOR COMPUTING THE SINGULAR VALUE DECOMPOSITION A = UWV  OF A  
C     DOUBLE PRECISION M BY N RECTANGULAR MATRIX.                       
C     THE ALGORITHM IMPLEMENTED IN THIS                                 
C     ROUTINE HAS A HYBRID NATURE.  WHEN M IS APPROXIMATELY EQUAL TO N, 
C     THE GOLUB-REINSCH ALGORITHM IS USED, BUT WHEN M IS GREATER THAN   
C     APPROXIMATELY 2*N, A MODIFIED VERSION OF THE GOLUB-REINSCH        
C     ALGORITHM IS USED.  THIS MODIFIED ALGORITHM FIRST TRANSFORMS A    
C                                                                T      
C     INTO UPPER TRIANGULAR FORM BY HOUSEHOLDER TRANSFORMATIONS L       
C     AND THEN USES THE GOLUB-REINSCH ALGORITHM TO FIND THE SINGULAR    
C     VALUE DECOMPOSITION OF THE RESULTING UPPER TRIANGULAR MATRIX R.   
C     WHEN U IS NEEDED EXPLICITLY, AN EXTRA ARRAY Z (OF SIZE AT LEAST   
C     N BY N) IS NEEDED, BUT OTHERWISE Z MAY COINCIDE WITH EITHER       
C     A OR V AND NO EXTRA STORAGE IS REQUIRED.  THIS HYBRID METHOD      
C     SHOULD BE MORE EFFICIENT THAN THE GOLUB-REINSCH ALGORITHM WHEN    
C     M IS MUCH BIGGER THAN N.  FOR DETAILS, SEE (2).                   
C                                                                       
C     HYBSVD CAN ALSO BE USED TO COMPUTE THE MINIMAL LENGTH LEAST       
C     SQUARES SOLUTION TO THE OVERDETERMINED LINEAR SYSTEM A*X=B.       
C                                                                       
C     NOTICE THAT THE SINGULAR VALUE DECOMPOSITION OF A MATRIX          
C     IS UNIQUE ONLY UP TO THE SIGN OF THE CORRESPONDING COLUMNS        
C     OF U AND V.                                                       
C                                                                       
C     THIS ROUTINE HAS BEEN CHECKED BY THE PFORT VERIFIER (3) FOR       
C     ADHERENCE TO A LARGE, CAREFULLY DEFINED, PORTABLE SUBSET OF       
C     AMERICAN NATIONAL STANDARD FORTRAN CALLED PFORT.                  
C                                                                       
C     REFERENCES                                                        
C                                                                       
C     (1) GOLUB,G.H. AND REINSCH,C. (1970) SINGULAR VALUE               
C         DECOMPOSITION AND LEAST SQUARES SOLUTIONS,                    
C         NUMER. MATH. 14,403-420, 1970.                                
C                                                                       
C     (2) CHAN,T.F (1977) AN IMPROVED ALGORITHM  FOR COMPUTING THE      
C         SINGULAR VALUE DECOMPOSITION.                                 
C         TOMS, 8, PP. 72-83, (1982).                                   
C                                                                       
C     (3) RYDER,B.G (1974) THE PFORT VERIFIER, SOFTWARE -               
C         PRACTICE AND EXPERIENCE, VOL.4, 359-377, 1974.                
C                                                                       
C     HYBSVD ASSUMES M .GE. N.  IF M .LT. N, THEN COMPUTE THE           
C                                      T      T    T            T       
C     SINGULAR VALUE DECOMPOSITION OF A . IF A =UWV , THEN A=VWU .      
C                                                                       
C     ON INPUT                                                          
C                                                                       
C        NAU MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL    
C          ARRAY PARAMETERS A,U AND B AS DECLARED IN THE CALLING PROGRAM
C          DIMENSION STATEMENT.  NOTE THAT NAU MUST BE AT LEAST         
C          AS LARGE AS M,                                               
C                                                                       
C        NV MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL     
C          ARRAY PARAMETER V AS DECLARED IN THE CALLING PROGRAM         
C          DIMENSION STATEMENT. NV MUST BE AT LEAST AS LARGE AS N,      
C                                                                       
C        NZ MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL     
C          ARRAY PARAMETER Z AS DECLARED IN THE CALLING PROGRAM         
C          DIMENSION STATEMENT.  NOTE THAT NZ MUST BE AT LEAST          
C          AS LARGE AS N,                                               
C                                                                       
C        M IS THE NUMBER OF ROWS OF A (AND U),                          
C                                                                       
C        N IS THE NUMBER OF COLUMNS OF A (AND U) AND THE ORDER OF V,    
C                                                                       
C        A CONTAINS THE RECTANGULAR INPUT MATRIX TO BE DECOMPOSED,      
C                                                                       
C        B CONTAINS THE IRHS RIGHT-HAND-SIDES OF THE OVERDETERMINED     
C         LINEAR SYSTEM A*X=B. IF IRHS .GT. 0,                          
C         THEN ON OUTPUT, THESE IRHS COLUMNS IN B                       
C                       T                                               
C         WILL CONTAIN U B. THUS, TO COMPUTE THE MINIMAL LENGTH LEAST   
C                                               +                       
C         SQUARES SOLUTION, ONE MUST COMPUTE V*W  TIMES THE COLUMNS OF  
C                   +                        +                          
C         B, WHERE W  IS A DIAGONAL MATRIX, W (I)=0 IF W(I) IS          
C         NEGLIGIBLE, OTHERWISE IS 1/W(I). IF IRHS=0, B MAY COINCIDE    
C         WITH A OR U AND WILL NOT BE REFERENCED,                       
C                                                                       
C        IRHS IS THE NUMBER OF RIGHT-HAND-SIDES OF THE OVERDETERMINED   
C         SYSTEM A*X=B. IRHS SHOULD BE SET TO ZERO IF ONLY THE SINGULAR 
C         VALUE DECOMPOSITION OF A IS DESIRED,                          
C                                                                       
C        MATU SHOULD BE SET TO .TRUE. IF THE U MATRIX IN THE            
C          DECOMPOSITION IS DESIRED, AND TO .FALSE. OTHERWISE,          
C                                                                       
C        MATV SHOULD BE SET TO .TRUE. IF THE V MATRIX IN THE            
C          DECOMPOSITION IS DESIRED, AND TO .FALSE. OTHERWISE.          
C                                                                       
C        WHEN HYBSVD IS USED TO COMPUTE THE MINIMAL LENGTH LEAST        
C        SQUARES SOLUTION TO AN OVERDETERMINED SYSTEM, MATU SHOULD      
C        BE SET TO .FALSE. , AND MATV SHOULD BE SET TO .TRUE.  .        
C                                                                       
C     ON OUTPUT                                                         
C                                                                       
C        A IS UNALTERED (UNLESS OVERWRITTEN BY U OR V),                 
C                                                                       
C        W CONTAINS THE N (NON-NEGATIVE) SINGULAR VALUES OF A (THE      
C          DIAGONAL ELEMENTS OF W).  THEY ARE UNORDERED.  IF AN         
C          ERROR EXIT IS MADE, THE SINGULAR VALUES SHOULD BE CORRECT    
C          FOR INDICES IERR-10+1,IERR-10+2,...,N,                       
C                                                                       
C        U CONTAINS THE MATRIX U (ORTHOGONAL COLUMN VECTORS) OF THE     
C          DECOMPOSITION IF MATU HAS BEEN SET TO .TRUE.  OTHERWISE      
C          U IS USED AS A TEMPORARY ARRAY.  U MAY COINCIDE WITH A.      
C          IF AN ERROR EXIT IS MADE, THE COLUMNS OF U CORRESPONDING     
C          TO INDICES OF CORRECT SINGULAR VALUES SHOULD BE CORRECT,     
C                                                                       
C        V CONTAINS THE MATRIX V (ORTHOGONAL) OF THE DECOMPOSITION IF   
C          MATV HAS BEEN SET TO .TRUE.  OTHERWISE V IS NOT REFERENCED.  
C          V MAY ALSO COINCIDE WITH A IF U IS NOT NEEDED.  IF AN ERROR  
C          EXIT IS MADE, THE COLUMNS OF V CORRESPONDING TO INDICES OF   
C          CORRECT SINGULAR VALUES SHOULD BE CORRECT,                   
C                                                                       
C        Z CONTAINS THE MATRIX X IN THE SINGULAR VALUE DECOMPOSITION    
C                  T                                                    
C          OF R=XSY,  IF THE MODIFIED ALGORITHM IS USED. IF THE         
C          GOLUB-REINSCH PROCEDURE IS USED, THEN IT IS NOT REFERENCED.  
C          IF MATU HAS BEEN SET TO .FALSE.,  Z MAY COINCIDE             
C          WITH A OR V AND IS NOT REFERENCED,                           
C                                                                       
C        ERROR CONDITIONS-                                              
C          10+K       IF THE K-TH SINGULAR VALUE HAS NOT BEEN           
C                     DETERMINED AFTER 30 ITERATIONS (RECOVERABLE)      
C          1          IF IRHS .LT. 0                                    
C          2          IF M .LT. N                                       
C          3          IF NAU .LT. M                                     
C          4          IF NV .LT. N                                      
C                                                                       
C     PROGRAMMED BY   TONY CHAN, APPLIED MATH DEPT.,101-50,             
C                     CALTECH,PASADENA, CA 91125.                       
C     MODIFIED   MARCH,1979.                                            
C     MODIFIED   NOVEMBER,1982.                                         
C                                                                       
C     ----------------------------------------------------------------- 
C                                                                       
C     SET VALUE FOR C. THE VALUE FOR C DEPENDS ON THE RELATIVE          
C     EFFICIENCY OF FLOATING POINT MULTIPLICATIONS, FLOATING POINT      
C     ADDITIONS AND TWO-DIMENSIONAL ARRAY INDEXINGS ON THE              
C     COMPUTER WHERE THIS SUBROUTINE IS TO BE RUN.  C SHOULD            
C     USUALLY BE BETWEEN 2 AND 4.  FOR DETAILS ON CHOOSING C, SEE       
C     (2).  THE ALGORITHM IS NOT SENSITIVE TO THE VALUE OF C            
C     ACTUALLY USED AS LONG AS C IS BETWEEN 2 AND 4.                    
C                                                                       
      IF (MFLAG.EQ.1) GO TO 8                                           
C                                                                       
C     USE GOLUB-REINSCH PROCEDURE                                       
C                                                                       
      CALL DG2SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,B,IRHS,RV1)              
      RETURN                                                            
C                                                                       
C     USE MODIFIED ALGORITHM                                            
C                                                                       
  8   DO 10 I=1,M                                                       
          DO 10 J=1,N                                                   
   10         U(I,J)=A(I,J)                                             
C                                                                       
C     TRIANGULARIZE U BY HOUSEHOLDER TRANSFORMATIONS, USING             
C     W AND RV1 AS TEMPORARY STORAGE.                                   
C                                                                       
      DO 20 I=1,N                                                       
          G=0.0                                                         
          S=0.0                                                         
          SCALE=0.0                                                     
C                                                                       
C         PERFORM SCALING OF COLUMNS TO AVOID UNNECESSARY OVERFLOW      
C         OR UNDERFLOW                                                  
C                                                                       
          DO 30 K=I,M                                                   
              SCALE = SCALE + DABS(U(K,I))                              
  30      CONTINUE                                                      
              RV1(I) = 0.D0                                             
          IF (SCALE .EQ. 0.0) GO TO 20                                  
          DO 40 K=I,M                                                   
              U(K,I) = U(K,I)/SCALE                                     
              S = S + U(K,I)**2                                         
  40      CONTINUE                                                      
C                                                                       
C         THE VECTOR E OF THE HOUSEHOLDER TRANSFORMATION I + EE-/H      
C         WILL BE STORED IN COLUMN I OF U. THE TRANSFORMED ELEMENT      
C         U(I,I) WILL BE STORED IN W(I) AND THE SCALAR H IN             
C         RV1(I-1).                                                     
C                                                                       
          F = U(I,I)                                                    
          G = -DSIGN(DSQRT(S),F)                                        
          H = F*G - S                                                   
          U(I,I) = F - G                                                
          RV1(I) = H                                                    
          W(I) = SCALE * G                                              
C                                                                       
          IF (I .EQ. N) GO TO 85                                        
C                                                                       
C         APPLY TRANSFORMATIONS TO REMAINING COLUMNS OF A               
C                                                                       
          IP1 = I + 1                                                   
          DO 50 J=IP1,N                                                 
              S = 0.0                                                   
              DO 60 K=I,M                                               
   60             S = S + U(K,I)*U(K,J)                                 
              F = S/H                                                   
              DO 70 K=I,M                                               
                  U(K,J) = U(K,J) + F*U(K,I)                            
  70          CONTINUE                                                  
  50      CONTINUE                                                      
C                                                                       
C         APPLY TRANSFORMATIONS TO COLUMNS OF B IF IRHS .GT. 0          
C                                                                       
 85       IF (IRHS .EQ. 0) GO TO 20                                     
          DO 80 J=1,IRHS                                                
              S = 0.0                                                   
              DO 90 K=I,M                                               
  90              S = S + U(K,I)*B(K,J)                                 
              F = S/H                                                   
              DO 100 K=I,M                                              
                  B(K,J) = B(K,J) + F*U(K,I)                            
  100         CONTINUE                                                  
  80      CONTINUE                                                      
  20  CONTINUE                                                          
C                                                                       
C     COPY R INTO Z IF MATU = .TRUE.                                    
C                                                                       
      IF (.NOT.MATU) GO TO 300                                          
C                                                                       
      DO 110 I=1,N                                                      
          DO 105 J=I,N                                                  
              Z(J,I) = U(J,I)                                           
              U(J,I) = 0.0                                              
 105      CONTINUE                                                      
          U(I,I) = W(I)                                                 
 110  CONTINUE                                                          
      CALL DG2SVD(NAU,NV,N,N,U,W,MATU,U,MATV,V,B,IRHS,D)                
      CALL DM1THB(M, N, U, NAU, Z, RV1, D)                              
      RETURN                                                            
C                                                                       
C     FORM R IN U BY ZEROING THE LOWER TRIANGULAR PART OF R IN U        
C                                                                       
  300 IF (N .EQ. 1) GO TO 280                                           
      DO 260 I=2,N                                                      
          IM1 = I - 1                                                   
          DO 270 J=1,IM1                                                
  270         U(I,J) = 0.0                                              
          U(I,I) = W(I)                                                 
  260 CONTINUE                                                          
 280  U(1,1) = W(1)                                                     
C                                                                       
      CALL DG2SVD(NAU,NV,N,N,U,W,MATU,U,MATV,V,B,IRHS,RV1)              
      RETURN                                                            
C     THE BODY OF SUBROUTINE DG2SVD SHOULD BE INCLUDED WITH HYBSVD      
C                                                                       
      END                                                               
      SUBROUTINE DG2SVD(NAU,NV,M,N,A,W,MATU,U,MATV,V,B,IRHS,RV1)        
C                                                                       
      INTEGER I,J,K,L,M,N,II,I1,KK,K1,LL,L1,MN,NAU,NV,ITS,IRHS          
      DOUBLE PRECISION A(NAU,N),W(N),U(NAU,N),V(NV,N),B(NAU,IRHS),RV1(N)
      DOUBLE PRECISION C,F,G,H,S,X,Y,Z,EPS,SCALE,MACHEP,D1MACH          
      DOUBLE PRECISION DSQRT                                            
      LOGICAL MATU,MATV                                                 
C                                                                       
C     THIS SUBROUTINE IS A TRANSLATION OF THE ALGOL PROCEDURE SVD,      
C     NUM. MATH. 14, 403-420(1970) BY GOLUB AND REINSCH.                
C     HANDBOOK FOR AUTO. COMP., VOL II-LINEAR ALGEBRA, 134-151(1971).   
C                                                                       
C     THIS SUBROUTINE DETERMINES THE SINGULAR VALUE DECOMPOSITION       
C          T                                                            
C     A=UWV  OF A DOUBLE PRECISION M BY N RECTANGULAR MATRIX.  HOUSEHOLD
C     BIDIAGONALIZATION AND A VARIANT OF THE QR ALGORITHM ARE USED.     
C     DG2SVD ASSUMES M .GE. N.  IF M .LT. N, THEN COMPUTE THE SINGULAR  
C                             T       T    T            T               
C     VALUE DECOMPOSITION OF A .  IF A =UWV , THEN A=VWU .              
C                                                                       
C     DG2SVD CAN ALSO BE USED TO COMPUTE THE MINIMAL LENGTH LEAST SQUARE
C     SOLUTION TO THE OVERDETERMINED LINEAR SYSTEM A*X=B.               
C                                                                       
C     ON INPUT -                                                        
C                                                                       
C        NAU MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL    
C          ARRAY PARAMETERS A,U AND B AS DECLARED IN THE CALLING PROGRAM
C          DIMENSION STATEMENT.  NOTE THAT NAU MUST BE AT LEAST         
C          AS LARGE AS M,                                               
C                                                                       
C        NV MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL     
C          ARRAY PARAMETER V AS DECLARED IN THE CALLING PROGRAM         
C          DIMENSION STATEMENT. NV MUST BE AT LEAST AS LARGE AS N,      
C                                                                       
C        M IS THE NUMBER OF ROWS OF A (AND U),                          
C                                                                       
C        N IS THE NUMBER OF COLUMNS OF A (AND U) AND THE ORDER OF V,    
C                                                                       
C        A CONTAINS THE RECTANGULAR INPUT MATRIX TO BE DECOMPOSED,      
C                                                                       
C        B CONTAINS THE IRHS RIGHT-HAND-SIDES OF THE OVERDETERMINED     
C         LINEAR SYSTEM A*X=B. IF IRHS .GT. 0,                          
C         THEN ON OUTPUT, THESE IRHS COLUMNS                            
C                       T                                               
C         WILL CONTAIN U B. THUS, TO COMPUTE THE MINIMAL LENGTH LEAST   
C                                               +                       
C         SQUARES SOLUTION, ONE MUST COMPUTE V*W  TIMES THE COLUMNS OF  
C                   +                        +                          
C         B, WHERE W  IS A DIAGONAL MATRIX, W (I)=0 IF W(I) IS          
C         NEGLIGIBLE, OTHERWISE IS 1/W(I). IF IRHS=0, B MAY COINCIDE    
C         WITH A OR U AND WILL NOT BE REFERENCED,                       
C                                                                       
C        IRHS IS THE NUMBER OF RIGHT-HAND-SIDES OF THE OVERDETERMINED   
C         SYSTEM A*X=B. IRHS SHOULD BE SET TO ZERO IF ONLY THE SINGULAR 
C         VALUE DECOMPOSITION OF A IS DESIRED,                          
C                                                                       
C        MATU SHOULD BE SET TO .TRUE. IF THE U MATRIX IN THE            
C          DECOMPOSITION IS DESIRED, AND TO .FALSE. OTHERWISE,          
C                                                                       
C        MATV SHOULD BE SET TO .TRUE. IF THE V MATRIX IN THE            
C          DECOMPOSITION IS DESIRED, AND TO .FALSE. OTHERWISE.          
C                                                                       
C     ON OUTPUT -                                                       
C                                                                       
C        A IS UNALTERED (UNLESS OVERWRITTEN BY U OR V),                 
C                                                                       
C        W CONTAINS THE N (NON-NEGATIVE) SINGULAR VALUES OF A (THE      
C          DIAGONAL ELEMENTS OF W).  THEY ARE UNORDERED.  IF AN         
C          ERROR EXIT IS MADE, THE SINGULAR VALUES SHOULD BE CORRECT    
C          FOR INDICES IERR-10+1,IERR-10+2,...,N,                       
C                                                                       
C        U CONTAINS THE MATRIX U (ORTHOGONAL COLUMN VECTORS) OF THE     
C          DECOMPOSITION IF MATU HAS BEEN SET TO .TRUE.  OTHERWISE      
C          U IS USED AS A TEMPORARY ARRAY.  U MAY COINCIDE WITH A.      
C          IF AN ERROR EXIT IS MADE, THE COLUMNS OF U CORRESPONDING     
C          TO INDICES OF CORRECT SINGULAR VALUES SHOULD BE CORRECT,     
C                                                                       
C        V CONTAINS THE MATRIX V (ORTHOGONAL) OF THE DECOMPOSITION IF   
C          MATV HAS BEEN SET TO .TRUE.  OTHERWISE V IS NOT REFERENCED.  
C          V MAY ALSO COINCIDE WITH A IF U IS NOT NEEDED.  IF AN ERROR  
C          EXIT IS MADE, THE COLUMNS OF V CORRESPONDING TO INDICES OF   
C          CORRECT SINGULAR VALUES SHOULD BE CORRECT,                   
C                                                                       
C        ERROR CONDITIONS-                                              
C          10+K       IF THE K-TH SINGULAR VALUE HAS NOT BEEN           
C                     DETERMINED AFTER 30 ITERATIONS,                   
C          1          IF IRHS .LT. 0 .                                  
C          2          IF M .LT. N .                                     
C          3          IF NAU .LT.M .                                    
C          4          IF NV .LT. N .                                    
C                                                                       
C        RV1 IS A TEMPORARY STORAGE ARRAY (OF LENGTH N).                
C                                                                       
C                                                                       
C     THIS SUBROUTINE HAS BEEN CHECKED BY THE PFORT VERIFIER            
C     (RYDER,B.G. THE PFORT VERIFIER, SOFTWARE - PRACTICE AND           
C     EXPERIENCE, VOL.4, 359-377, 1974) FOR ADHERENCE TO A LARGE,       
C     CAREFULLY DEFINED, PORTABLE SUBSET OF AMERICAN NATIONAL STANDARD  
C     FORTRAN CALLED PFORT.                                             
C                                                                       
C     ORIGINAL VERSION OF THIS CODE IS SUBROUTINE SVD IN RELEASE 2 OF   
C         EISPACK.                                                      
C     MODIFIED BY TONY CHAN, COMP. SCI. DEPT. STANFORD UNIV.,CA94305.   
C     LAST MODIFIED  2 SEPTEMBER, 1976.                                 
C                                                                       
C     ------------------------------------------------------------------
C                                                                       
       MACHEP = D1MACH(4)                                               
C                                                                       
      DO 100 I = 1, M                                                   
C                                                                       
         DO 100 J = 1, N                                                
            U(I,J) = A(I,J)                                             
  100 CONTINUE                                                          
C     ********** HOUSEHOLDER REDUCTION TO BIDIAGONAL FORM **********    
      G = 0.D0                                                          
      SCALE = 0.D0                                                      
      X = 0.D0                                                          
C                                                                       
      DO 300 I = 1, N                                                   
         L = I + 1                                                      
         RV1(I) = SCALE * G                                             
         G = 0.D0                                                       
         S = 0.D0                                                       
         SCALE = 0.D0                                                   
C                                                                       
C     COMPUTE LEFT TRANSFORMATIONS THAT ZEROS THE SUBDIAGONAL ELEMENTS  
C         OF THE I-TH COLUMN.                                           
C                                                                       
         DO 120 K = I, M                                                
  120    SCALE = SCALE + DABS(U(K,I))                                   
C                                                                       
         IF (SCALE .EQ. 0.D0) GO TO 210                                 
C                                                                       
         DO 130 K = I, M                                                
            U(K,I) = U(K,I) / SCALE                                     
            S = S + U(K,I)**2                                           
  130    CONTINUE                                                       
C                                                                       
         F = U(I,I)                                                     
         G = -DSIGN(DSQRT(S),F)                                         
         H = F * G - S                                                  
         U(I,I) = F - G                                                 
         IF (I .EQ. N) GO TO 155                                        
C                                                                       
C     APPLY LEFT TRANSFORMATIONS TO REMAINING COLUMNS OF A              
C                                                                       
         DO 150 J = L, N                                                
            S = 0.D0                                                    
C                                                                       
            DO 140 K = I, M                                             
  140       S = S + U(K,I) * U(K,J)                                     
C                                                                       
            F = S / H                                                   
C                                                                       
            DO 150 K = I, M                                             
               U(K,J) = U(K,J) + F * U(K,I)                             
  150    CONTINUE                                                       
C                                                                       
C     APPLY LEFT TRANSFORMATIONS TO THE COLUMNS OF B IF IRHS .GT. 0.D0  
C                                                                       
 155      IF (IRHS .EQ. 0) GO TO 190                                    
          DO 160 J=1,IRHS                                               
              S=0.D0                                                    
              DO 170 K=I,M                                              
  170             S = S + U(K,I)*B(K,J)                                 
              F = S/H                                                   
              DO 180 K=I,M                                              
  180             B(K,J) = B(K,J) + F*U(K,I)                            
  160     CONTINUE                                                      
C                                                                       
C     COMPUTE RIGHT TRANSFORMATIONS.                                    
C                                                                       
  190    DO 200 K = I, M                                                
  200    U(K,I) = SCALE * U(K,I)                                        
C                                                                       
  210    W(I) = SCALE * G                                               
         G = 0.D0                                                       
         S = 0.D0                                                       
         SCALE = 0.D0                                                   
         IF (I .GT. M .OR. I .EQ. N) GO TO 290                          
C                                                                       
         DO 220 K = L, N                                                
  220    SCALE = SCALE + DABS(U(I,K))                                   
C                                                                       
         IF (SCALE .EQ. 0.D0) GO TO 290                                 
C                                                                       
         DO 230 K = L, N                                                
            U(I,K) = U(I,K) / SCALE                                     
            S = S + U(I,K)**2                                           
  230    CONTINUE                                                       
C                                                                       
         F = U(I,L)                                                     
         G = -DSIGN(DSQRT(S),F)                                         
         H = F * G - S                                                  
         U(I,L) = F - G                                                 
C                                                                       
         DO 240 K = L, N                                                
  240    RV1(K) = U(I,K) / H                                            
C                                                                       
         IF (I .EQ. M) GO TO 270                                        
C                                                                       
         DO 260 J = L, M                                                
            S = 0.D0                                                    
C                                                                       
            DO 250 K = L, N                                             
  250       S = S + U(J,K) * U(I,K)                                     
C                                                                       
            DO 260 K = L, N                                             
               U(J,K) = U(J,K) + S * RV1(K)                             
  260    CONTINUE                                                       
C                                                                       
  270    DO 280 K = L, N                                                
  280    U(I,K) = SCALE * U(I,K)                                        
C                                                                       
  290    X = DMAX1(X,DABS(W(I))+DABS(RV1(I)))                           
  300 CONTINUE                                                          
C     ********** ACCUMULATION OF RIGHT-HAND TRANSFORMATIONS **********  
      IF (.NOT. MATV) GO TO 410                                         
C     ********** FOR I=N STEP -1 UNTIL 1 DO -- **********               
      DO 400 II = 1, N                                                  
         I = N + 1 - II                                                 
         IF (I .EQ. N) GO TO 390                                        
         IF (G .EQ. 0.D0) GO TO 360                                     
C                                                                       
         DO 320 J = L, N                                                
C     ********** DOUBLE DIVISION AVOIDS POSSIBLE UNDERFLOW **********   
  320    V(J,I) = (U(I,J) / U(I,L)) / G                                 
C                                                                       
         DO 350 J = L, N                                                
            S = 0.D0                                                    
C                                                                       
            DO 340 K = L, N                                             
  340       S = S + U(I,K) * V(K,J)                                     
C                                                                       
            DO 350 K = L, N                                             
               V(K,J) = V(K,J) + S * V(K,I)                             
  350    CONTINUE                                                       
C                                                                       
  360    DO 380 J = L, N                                                
            V(I,J) = 0.D0                                               
            V(J,I) = 0.D0                                               
  380    CONTINUE                                                       
C                                                                       
  390    V(I,I) = 1.D0                                                  
         G = RV1(I)                                                     
         L = I                                                          
  400 CONTINUE                                                          
C     ********** ACCUMULATION OF LEFT-HAND TRANSFORMATIONS **********   
  410 IF (.NOT. MATU) GO TO 510                                         
C     **********FOR I=MIN(M,N) STEP -1 UNTIL 1 DO -- **********         
      MN = N                                                            
      IF (M .LT. N) MN = M                                              
C                                                                       
      DO 500 II = 1, MN                                                 
         I = MN + 1 - II                                                
         L = I + 1                                                      
         G = W(I)                                                       
         IF (I .EQ. N) GO TO 430                                        
C                                                                       
         DO 420 J = L, N                                                
  420    U(I,J) = 0.D0                                                  
C                                                                       
  430    IF (G .EQ. 0.D0) GO TO 475                                     
         IF (I .EQ. MN) GO TO 460                                       
C                                                                       
         DO 450 J = L, N                                                
            S = 0.D0                                                    
C                                                                       
            DO 440 K = L, M                                             
  440       S = S + U(K,I) * U(K,J)                                     
C     ********** DOUBLE DIVISION AVOIDS POSSIBLE UNDERFLOW **********   
            F = (S / U(I,I)) / G                                        
C                                                                       
            DO 450 K = I, M                                             
               U(K,J) = U(K,J) + F * U(K,I)                             
  450    CONTINUE                                                       
C                                                                       
  460    DO 470 J = I, M                                                
  470    U(J,I) = U(J,I) / G                                            
C                                                                       
         GO TO 490                                                      
C                                                                       
  475    DO 480 J = I, M                                                
  480    U(J,I) = 0.D0                                                  
C                                                                       
  490    U(I,I) = U(I,I) + 1.D0                                         
  500 CONTINUE                                                          
C     ********** DIAGONALIZATION OF THE BIDIAGONAL FORM **********      
  510 EPS = MACHEP * X                                                  
C     ********** FOR K=N STEP -1 UNTIL 1 DO -- **********               
      DO 700 KK = 1, N                                                  
         K1 = N - KK                                                    
         K = K1 + 1                                                     
         ITS = 0                                                        
C     ********** TEST FOR SPLITTING.                                    
C                FOR L=K STEP -1 UNTIL 1 DO -- **********               
  520    DO 530 LL = 1, K                                               
            L1 = K - LL                                                 
            L = L1 + 1                                                  
            IF (DABS(RV1(L)) .LE. EPS) GO TO 565                        
C     ********** RV1(1) IS ALWAYS ZERO, SO THERE IS NO EXIT             
C                THROUGH THE BOTTOM OF THE LOOP **********              
            IF (DABS(W(L1)) .LE. EPS) GO TO 540                         
  530    CONTINUE                                                       
C     ********** CANCELLATION OF RV1(L) IF L GREATER THAN 1 **********  
  540    C = 0.D0                                                       
         S = 1.D0                                                       
C                                                                       
         DO 560 I = L, K                                                
            F = S * RV1(I)                                              
            RV1(I) = C * RV1(I)                                         
            IF (DABS(F) .LE. EPS) GO TO 565                             
            G = W(I)                                                    
            H = DSQRT(F*F+G*G)                                          
            W(I) = H                                                    
            C = G / H                                                   
            S = -F / H                                                  
C                                                                       
C     APPLY LEFT TRANSFORMATIONS TO B IF IRHS .GT. 0.                   
C                                                                       
              IF (IRHS .EQ. 0) GO TO 542                                
              DO 545 J=1,IRHS                                           
                  Y=B(L1,J)                                             
                  Z=B(I,J)                                              
                  B(L1,J) = Y*C + Z*S                                   
                  B(I,J) = -Y*S + Z*C                                   
  545         CONTINUE                                                  
  542         CONTINUE                                                  
C                                                                       
            IF (.NOT. MATU) GO TO 560                                   
C                                                                       
            DO 550 J = 1, M                                             
               Y = U(J,L1)                                              
               Z = U(J,I)                                               
               U(J,L1) = Y * C + Z * S                                  
               U(J,I) = -Y * S + Z * C                                  
  550       CONTINUE                                                    
C                                                                       
  560    CONTINUE                                                       
C     ********** TEST FOR CONVERGENCE **********                        
  565    Z = W(K)                                                       
         IF (L .EQ. K) GO TO 650                                        
C     ********** SHIFT FROM BOTTOM 2 BY 2 MINOR **********              
         IF (ITS .EQ. 30) GO TO 1000                                    
         ITS = ITS + 1                                                  
         X = W(L)                                                       
         Y = W(K1)                                                      
         G = RV1(K1)                                                    
         H = RV1(K)                                                     
         F=0.D5*(((G+Z)/H)*((G-Z)/Y)+Y/H-H/Y)                           
         SCALE=DABS(F)+1.D0                                             
         G=SCALE*DSQRT((F/SCALE)**2+(1.D0/SCALE)**2)                    
         F=X-(Z/X)*Z+(H/X)*(Y/(F+DSIGN(G,F))-H)                         
C     ********** NEXT QR TRANSFORMATION **********                      
         C = 1.D0                                                       
         S = 1.D0                                                       
C                                                                       
         DO 600 I1 = L, K1                                              
            I = I1 + 1                                                  
            G = RV1(I)                                                  
            Y = W(I)                                                    
            H = S * G                                                   
            G = C * G                                                   
            SCALE=DABS(F)+DABS(H)                                       
            Z=SCALE*DSQRT((F/SCALE)**2+(H/SCALE)**2)                    
            RV1(I1) = Z                                                 
            C = F / Z                                                   
            S = H / Z                                                   
            F = X * C + G * S                                           
            G = -X * S + G * C                                          
            H = Y * S                                                   
            Y = Y * C                                                   
            IF (.NOT. MATV) GO TO 575                                   
C                                                                       
            DO 570 J = 1, N                                             
               X = V(J,I1)                                              
               Z = V(J,I)                                               
               V(J,I1) = X * C + Z * S                                  
               V(J,I) = -X * S + Z * C                                  
  570       CONTINUE                                                    
C                                                                       
  575       Z=DABS(F)+DABS(H)                                           
            IF(Z.NE.0.D0)Z=Z*DSQRT((F/Z)**2+(H/Z)**2)                   
            W(I1) = Z                                                   
C     ********** ROTATION CAN BE ARBITRARY IF Z IS ZERO **********      
            IF (Z .EQ. 0.D0) GO TO 580                                  
            C = F / Z                                                   
            S = H / Z                                                   
  580       F = C * G + S * Y                                           
            X = -S * G + C * Y                                          
C                                                                       
C     APPLY LEFT TRANSFORMATIONS TO B IF IRHS .GT. 0.                   
C                                                                       
              IF (IRHS .EQ. 0) GO TO 582                                
              DO 585 J=1,IRHS                                           
                  Y = B(I1,J)                                           
                  Z = B(I,J)                                            
                  B(I1,J) = Y*C + Z*S                                   
                  B(I,J) = -Y*S + Z*C                                   
  585         CONTINUE                                                  
  582         CONTINUE                                                  
C                                                                       
            IF (.NOT. MATU) GO TO 600                                   
C                                                                       
            DO 590 J = 1, M                                             
               Y = U(J,I1)                                              
               Z = U(J,I)                                               
               U(J,I1) = Y * C + Z * S                                  
               U(J,I) = -Y * S + Z * C                                  
  590       CONTINUE                                                    
C                                                                       
  600    CONTINUE                                                       
C                                                                       
         RV1(L) = 0.D0                                                  
         RV1(K) = F                                                     
         W(K) = X                                                       
         GO TO 520                                                      
C     ********** CONVERGENCE **********                                 
  650    IF (Z .GE. 0.D0) GO TO 700                                     
C     ********** W(K) IS MADE NON-NEGATIVE **********                   
         W(K) = -Z                                                      
         IF (.NOT. MATV) GO TO 700                                      
C                                                                       
         DO 690 J = 1, N                                                
  690    V(J,K) = -V(J,K)                                               
C                                                                       
  700 CONTINUE                                                          
C                                                                       
      GO TO 1001                                                        
C     SET ERROR -- NO CONVERGENCE TO A                                  
C     SINGULAR VALUE AFTER 30 ITERATIONS                                
C/6S                                                                    
C1000 CALL SETERR(36HDG2SVD- NO CONVERGENCE AFTER 30 ITER,36,K+10,1)    
C/7S                                                                    
 1000 CALL SETERR('DG2SVD- NO CONVERGENCE AFTER 30 ITER',36,K+10,1)     
C/                                                                      
 1001 RETURN                                                            
      END                                                               
      SUBROUTINE DM1THB(M, N, U, IU, Z, BETA, D)                        
      INTEGER N, IU                                                     
      INTEGER M                                                         
      DOUBLE PRECISION U(IU, N), Z(N, N), BETA(N), D(N)                 
      INTEGER I, J, K, IP1, NP1                                         
      DOUBLE PRECISION BETAI, S                                         
C CALCULATE U                                                           
      I = N                                                             
      NP1 = N+1                                                         
   1     IF (I .LE. 0) GOTO  14                                         
         BETAI = BETA(I)                                                
         IF (BETAI .EQ. 0.D0) GOTO 20                                   
         IP1 = I+1                                                      
         IF (I .GE. N) GOTO 7                                           
            IF (N .LT. M) GOTO 3                                        
               DO  2 J = IP1, N                                         
                  BETA(J) = 0.D0                                        
   2              CONTINUE                                              
               GOTO  6                                                  
   3           DO  5 J = IP1, N                                         
                  S = 0.D0                                              
                  DO  4 K = NP1, M                                      
                     S = S+U(K, I)*U(K, J)                              
   4                 CONTINUE                                           
                  BETA(J) = S                                           
   5              CONTINUE                                              
   6     CONTINUE                                                       
   7     DO  12 J = 1, N                                                
            S = 0.D0                                                    
            DO  8 K = I, N                                              
               S = S+Z(K, I)*U(K, J)                                    
   8           CONTINUE                                                 
            IF (I .GE. N) GOTO 10                                       
               DO  9 K = IP1, N                                         
                  S = S+BETA(K)*Z(J, K)                                 
   9              CONTINUE                                              
  10        S = S/BETAI                                                 
            DO  11 K = I, N                                             
               U(K, J) = U(K, J)+S*Z(K, I)                              
  11           CONTINUE                                                 
            D(J) = S                                                    
  12        CONTINUE                                                    
         DO  13 J = 1, N                                                
            Z(J, I) = D(J)                                              
  13        CONTINUE                                                    
         GO TO 22                                                       
  20     DO 21 J=1,N                                                    
            Z(J,I) = 0.D0                                               
  21     CONTINUE                                                       
  22     I = I-1                                                        
         GOTO  1                                                        
  14  IF (N .GE. M) GOTO 19                                             
         DO  18 I = NP1, M                                              
            DO  16 J = 1, N                                             
               S = 0.D0                                                 
               DO  15 K = 1, N                                          
                  S = S+U(I, K)*Z(J, K)                                 
  15              CONTINUE                                              
               D(J) = S                                                 
  16           CONTINUE                                                 
            DO  17 J = 1, N                                             
               U(I, J) = D(J)                                           
  17           CONTINUE                                                 
  18        CONTINUE                                                    
  19  RETURN                                                            
      END                                                               
      SUBROUTINE LZ(N,A,NA,B,NB,X,NX,WANTX,EIGA,EIGB)                   
C                                                                       
C THIS SUBROUTINE SOLVES THE GENERALIZED EIGENVALUE PROBLEM             
C              A X  = LAMBDA B X                                        
C WHERE A AND B ARE COMPLEX MATRICES OF ORDER N                         
C                                                                       
C                                                                       
C INPUT PARAMETERS                                                      
C                                                                       
C                                                                       
C N      ORDER OF A AND B                                               
C                                                                       
C A      AN N X N COMPLEX MATRIX                                        
C                                                                       
C NA     THE ROW DIMENSION OF THE A MATRIX                              
C                                                                       
C B      AN N X N COMPLEX MATRIX                                        
C                                                                       
C NB     THE ROW DIMENSION OF THE B MATRIX                              
C                                                                       
C NX     THE ROW DIMENSION OF THE X MATRIX                              
C                                                                       
C WANTX  LOGICAL VARIABLE WHICH SHOULD BE SET TO .TRUE.                 
C        IF EIGENVECTORS ARE WANTED. OTHERWISE IT                       
C        SHOULD BE SET TO .FALSE.                                       
C                                                                       
C                                                                       
C                                                                       
C OUTPUT PARAMETERS                                                     
C                                                                       
C                                                                       
C X      THE ITH COLUMN CONTAINS THE ITH EIGENVECTOR                    
C        IF EIGENVECTORS ARE REQUESTED                                  
C                                                                       
C EIGA   A COMPLEX ARRAY OF LENGTH N CONTAINING THE DIAGONAL OF A       
C                                                                       
C EIGB   A COMPLEX ARRAY OF LENGTH N CONTAINING THE DIAGONAL OF B       
C                                                                       
C THE ITH EIGENVALUE CAN BE FOUND BY DIVIDING EIGA(I) BY                
C EIGB(I). WATCH OUT FOR EIGB(I) BEING ZERO                             
C                                                                       
C                                                                       
C                                                                       
C                                                                       
      INTEGER N,NA,NB,NX                                                
      COMPLEX X(NX,N)                                                   
      COMPLEX A(NA,N),B(NB,N),EIGA(N),EIGB(N)                           
      LOGICAL WANTX                                                     
C/6S                                                                    
C     IF (N.LT.1)CALL SETERR(10H LZ-N.LT.1,10,1,2)                      
C     IF (NA.LT.N)CALL SETERR(11H LZ-NA.LT.N,11,2,2)                    
C     IF (NB.LT.N)CALL SETERR(11H LZ-NB.LT.N,11,3,2)                    
C     IF (WANTX.AND.NX.LT.N)CALL SETERR(11H LZ-NX.LT.N,11,4,2)          
C/7S                                                                    
      IF (N.LT.1)CALL SETERR(' LZ-N.LT.1',10,1,2)                       
      IF (NA.LT.N)CALL SETERR(' LZ-NA.LT.N',11,2,2)                     
      IF (NB.LT.N)CALL SETERR(' LZ-NB.LT.N',11,3,2)                     
      IF (WANTX.AND.NX.LT.N)CALL SETERR(' LZ-NX.LT.N',11,4,2)           
C/                                                                      
      CALL L4ZHES(N,A,NA,B,NB,X,NX,WANTX)                               
      CALL L4ZIT(N,A,NA,B,NB,X,NX,WANTX,EIGA,EIGB,ITER,30)              
C/6S                                                                    
C     IF (ITER.EQ.-1)                                                   
C    1 CALL SETERR(18H LZ-NO CONVERGENCE,18,5,1)                        
C/7S                                                                    
      IF (ITER.EQ.-1)                                                   
     1 CALL SETERR(' LZ-NO CONVERGENCE',18,5,1)                         
C/                                                                      
      RETURN                                                            
      END                                                               
      SUBROUTINE L4ZHES(N,A,NA,B,NB,X,NX,WANTX)                         
C                                                                       
C THIS SUBROUTINE REDUCES THE COMPLEX MATRIX A TO UPPER                 
C HESSENBERG FORM AND REDUCES THE COMPLEX MATRIX B TO                   
C TRIANGULAR FORM                                                       
C                                                                       
C INPUT PARAMETERS-                                                     
C                                                                       
C N   THE ORDER OF THE A AND B MATRICES                                 
C                                                                       
C A   A COMPLEX MATRIX                                                  
C                                                                       
C NA  THE ROW DIMENSION OF THE A MATRIX                                 
C                                                                       
C B   A COMPLEX MATRIX                                                  
C                                                                       
C NB  THE ROW DIMENSION OF THE B MATRIX                                 
C                                                                       
C NX  THE ROW DIMENSION OF THE X MATRIX                                 
C                                                                       
C WANTX A LOGICAL VARIABLE WHICH IS SET TO .TRUE. IF                    
C       THE EIGENVECTORS ARE WANTED. OTHERWISE IT SHOULD                
C     BE SET TO .FALSE.                                                 
C                                                                       
C OUTPUT PARAMETERS-                                                    
C                                                                       
C A  ON OUTPUT A IS AN UPPER HESSENBERG MATRIX, THE                     
C    ORIGINAL MATRIX HAS BEEN DESTROYED                                 
C                                                                       
C B  AN UPPER TRIANGULAR MATRIX, THE ORIGINAL MATRIX                    
C    HAS BEEN DESTROYED                                                 
C                                                                       
C X  CONTAINS THE TRANSFORMATIONS NEEDED TO COMPUTE                     
C    THE EIGENVECTORS OF THE ORIGINAL SYSTEM                            
C                                                                       
C                                                                       
      COMPLEX Y,W,Z,A(NA,N),B(NB,N),X(NX,N)                             
      REAL C,D                                                          
      LOGICAL WANTX                                                     
      NM1=N-1                                                           
C                                                                       
C REDUCE B TO TRIANGULAR FORM USING ELEMENTARY                          
C TRANSFORMATIONS                                                       
C                                                                       
      DO 30 I=1,NM1                                                     
      D=0.00                                                            
        IP1=I+1                                                         
        DO 10 K=IP1,N                                                   
          Y=B(K,I)                                                      
          C= ABS(REAL(Y))+ABS(AIMAG(Y))                                 
          IF (C.LE.D) GO TO 10                                          
                  D=C                                                   
                  II=K                                                  
   10   CONTINUE                                                        
        IF (D.EQ.0.0) GO TO 30                                          
        Y=B(I,I)                                                        
        IF(D.LE.ABS(REAL(Y))+ABS(AIMAG(Y))) GO TO 15                    
C                                                                       
C MUST INTERCHANGE                                                      
C                                                                       
          DO 11 J=1,N                                                   
            Y=A(I,J)                                                    
            A(I,J)=A(II,J)                                              
            A(II,J)=Y                                                   
   11     CONTINUE                                                      
          DO 12 J=I,N                                                   
            Y=B(I,J)                                                    
            B(I,J)=B(II,J)                                              
            B(II,J)=Y                                                   
   12   CONTINUE                                                        
   15   DO 20 J=IP1,N                                                   
          Y=B(J,I)/B(I,I)                                               
          IF (REAL(Y).EQ.0.0.AND.AIMAG(Y).EQ.0.0) GO TO 20              
          DO 18 K=1,N                                                   
            A(J,K)=A(J,K)-Y*A(I,K)                                      
   18     CONTINUE                                                      
          DO 19 K=IP1,N                                                 
            B(J,K)=B(J,K)-Y*B(I,K)                                      
   19     CONTINUE                                                      
   20   CONTINUE                                                        
        B(IP1,I)=(0.0,0.0)                                              
   30 CONTINUE                                                          
C                                                                       
C INITIALIZE X                                                          
C                                                                       
      IF (.NOT.WANTX) GO TO 40                                          
      DO 38 I=1,N                                                       
        DO 37 J=1,N                                                     
          X(I,J)=(0.0,0.0)                                              
   37   CONTINUE                                                        
        X(I,I)=(1.0,0.00)                                               
   38 CONTINUE                                                          
C                                                                       
C REDUCE A TO UPPER HESSENBERG FORM                                     
C                                                                       
   40 NM2=N-2                                                           
      IF (NM2.LT.1) GO TO 100                                           
      DO 90 J=1,NM2                                                     
        JM2=NM1-J                                                       
        JP1=J+1                                                         
        DO 80 II=1,JM2                                                  
          I=N+1-II                                                      
          IM1=I-1                                                       
          IMJ=I-J                                                       
          W=A(I,J)                                                      
          Z=A(IM1,J)                                                    
          IF (ABS(REAL(W))+ABS(AIMAG(W)).LE.                            
     C    ABS(REAL(Z))+ABS(AIMAG(Z))) GO TO 50                          
C                                                                       
C MUST INTERCHANGE ROWS                                                 
C                                                                       
            DO 45 K=J,N                                                 
              Y=A(I,K)                                                  
              A(I,K)=A(IM1,K)                                           
              A(IM1,K)=Y                                                
   45       CONTINUE                                                    
            DO 46 K=IM1,N                                               
              Y=B(I,K)                                                  
              B(I,K)=B(IM1,K)                                           
              B(IM1,K)=Y                                                
   46       CONTINUE                                                    
   50     Z=A(I,J)                                                      
          IF (REAL(Z).EQ.0.0.AND.AIMAG(Z).EQ.0.0) GO TO 58              
          Y=Z/A(IM1,J)                                                  
          DO 52 K=JP1,N                                                 
            A(I,K)=A(I,K)-Y*A(IM1,K)                                    
   52     CONTINUE                                                      
          DO 54 K=IM1,N                                                 
            B(I,K)=B(I,K)-Y*B(IM1,K)                                    
   54     CONTINUE                                                      
C                                                                       
C TRANSFORMATION FROM THE RIGHT                                         
C                                                                       
   58       W=B(I,IM1)                                                  
            Z=B(I,I)                                                    
            IF(ABS(REAL(W))+ABS(AIMAG(W)).LE.                           
     1      ABS(REAL(Z))+ABS(AIMAG(Z))) GO TO 70                        
C                                                                       
C MUST INTERCHANGE COLUMNS                                              
C                                                                       
            DO 60 K=1,I                                                 
              Y=B(K,I)                                                  
              B(K,I)=B(K,IM1)                                           
              B(K,IM1)=Y                                                
   60       CONTINUE                                                    
            DO 64 K=1,N                                                 
              Y=A(K,I)                                                  
              A(K,I)=A(K,IM1)                                           
              A(K,IM1)=Y                                                
   64       CONTINUE                                                    
            IF (.NOT.WANTX) GO TO 70                                    
            DO 68 K=IMJ,N                                               
              Y=X(K,I)                                                  
              X(K,I)=X(K,IM1)                                           
              X(K,IM1)=Y                                                
   68       CONTINUE                                                    
   70     Z=B(I,IM1)                                                    
          IF (REAL(Z).EQ.0.0.AND.AIMAG(Z).EQ.0.0) GO TO 80              
          Y=Z/B(I,I)                                                    
          DO 72 K=1,IM1                                                 
            B(K,IM1)=B(K,IM1)-Y*B(K,I)                                  
   72     CONTINUE                                                      
          B(I,IM1)=(0.0,0.0)                                            
          DO 74 K=1,N                                                   
            A(K,IM1)=A(K,IM1)-Y*A(K,I)                                  
   74     CONTINUE                                                      
          IF (.NOT.WANTX) GO TO 80                                      
          DO 76 K=IMJ,N                                                 
            X(K,IM1)=X(K,IM1)-Y*X(K,I)                                  
   76     CONTINUE                                                      
   80   CONTINUE                                                        
        A(JP1+1,J)=(0.0,0.0)                                            
   90 CONTINUE                                                          
  100 RETURN                                                            
      END                                                               
      SUBROUTINE L4ZIT(N,A,NA,B,NB,X,NX,WANTX,EIGA,EIGB,ITER,MAXITR)    
C                                                                       
C THIS SUBROUTINE SOLVES THE GENERALIZED EIGENVALUE PROBLEM             
C              A X  = LAMBDA B X                                        
C WHERE A IS A COMPLEX UPPER HESSENBERG MATRIX OF                       
C ORDER N AND B IS A COMPLEX UPPER TRIANGULAR MATRIX OF ORDER N         
C                                                                       
C                                                                       
C INPUT PARAMETERS                                                      
C                                                                       
C                                                                       
C N      ORDER OF A AND B                                               
C                                                                       
C A      AN N X N UPPER HESSENBERG COMPLEX MATRIX                       
C                                                                       
C NA     THE ROW DIMENSION OF THE A MATRIX                              
C                                                                       
C B      AN N X N UPPER TRIANGULAR COMPLEX MATRIX                       
C                                                                       
C NB     THE ROW DIMENSION OF THE B MATRIX                              
C                                                                       
C X      CONTAINS TRANSFORMATIONS TO OBTAIN EIGENVECTORS OF             
C        ORIGINAL SYSTEM. IF EIGENVECTORS ARE REQUESTED AND QZHES       
C        IS NOT CALLED, X SHOULD BE SET TO THE IDENTITY MATRIX          
C                                                                       
C NX     THE ROW DIMENSION OF THE X MATRIX                              
C                                                                       
C WANTX  LOGICAL VARIABLE WHICH SHOULD BE SET TO .TRUE.                 
C        IF EIGENVECTORS ARE WANTED. OTHERWISE IT                       
C        SHOULD BE SET TO .FALSE.                                       
C MAXITR NUMBER OF ITERATIONS TOLERATED                                 
C                                                                       
C                                                                       
C                                                                       
C OUTPUT PARAMETERS                                                     
C                                                                       
C                                                                       
C X      THE ITH COLUMN CONTAINS THE ITH EIGENVECTOR                    
C        IF EIGENVECTORS ARE REQUESTED                                  
C                                                                       
C ITER   IF THE NUMBER OF ITERATIONS EXCEEDS MAXITR, ITER IS -1,        
C        ELSE 0                                                         
C EIGA   A COMPLEX ARRAY OF LENGTH N CONTAINING THE DIAGONAL OF A       
C                                                                       
C EIGB   A COMPLEX ARRAY OF LENGTH N CONTAINING THE DIAGONAL OF B       
C                                                                       
C THE ITH EIGENVALUE CAN BE FOUND BY DIVIDING EIGA(I) BY                
C EIGB(I). WATCH OUT FOR EIGB(I) BEING ZERO                             
C                                                                       
C                                                                       
C                                                                       
C                                                                       
      COMPLEX A(NA,N),B(NB,N),EIGA(N),EIGB(N)                           
      COMPLEX S,W,Y,Z,CSQRT                                             
      COMPLEX X(NX,N)                                                   
      COMPLEX ANNM1,ALFM,BETM,D,SL,DEN,NUM,ANM1M1                       
      REAL EPSA,EPSB,SS,R,ANORM,BNORM,ANI,BNI,C                         
      REAL D0,D1,D2,E0,E1                                               
      LOGICAL WANTX                                                     
      NN=N                                                              
C                                                                       
C                                                                       
      ITER=0                                                            
      ANORM = 0.                                                        
      BNORM = 0.                                                        
      DO  5 I=1,N                                                       
        ANI = 0.                                                        
        IF (I.EQ.1) GO TO 2                                             
          Y=A(I,I-1)                                                    
          ANI=ANI+ABS(REAL(Y))+ABS(AIMAG(Y))                            
    2  BNI = 0.                                                         
        DO 3   J=I,N                                                    
          ANI=ANI+ABS(REAL(A(I,J)))+ABS(AIMAG(A(I,J)))                  
          BNI=BNI+ABS(REAL(B(I,J)))+ABS(AIMAG(B(I,J)))                  
    3   CONTINUE                                                        
        IF (ANI.GT.ANORM) ANORM = ANI                                   
        IF (BNI.GT.BNORM) BNORM = BNI                                   
    5 CONTINUE                                                          
      IF (ANORM.EQ.0.) ANORM = 1.0                                      
      IF (BNORM.EQ.0.) BNORM = 1.0                                      
C                                                                       
      EPSA=ANORM*R1MACH(4)                                              
      EPSB=BNORM*R1MACH(4)                                              
      IF (N.LE.1) GO TO 100                                             
   10 ITS=0                                                             
      NM1=NN-1                                                          
C                                                                       
C CHECK FOR NEGLIGIBLE SUBDIAGONAL ELEMENTS                             
C                                                                       
 11   D2=ABS(REAL(A(NN,NN)))+ABS(AIMAG(A(NN,NN)))                       
      DO 12 LB=2,NN                                                     
        L=NN+2-LB                                                       
        SS=D2                                                           
        Y=A(L-1,L-1)                                                    
        D2=ABS(REAL(Y))+ABS(AIMAG(Y))                                   
        SS=SS+D2                                                        
        Y=A(L,L-1)                                                      
        R=SS+ABS(REAL(Y))+ABS(AIMAG(Y))                                 
        IF(R.EQ.SS) GO TO 13                                            
   12 CONTINUE                                                          
      L=1                                                               
   13 IF(L.EQ.NN) GO TO 100                                             
      IF (ITS.LT.MAXITR) GO TO 20                                       
      ITER=-1                                                           
      IF (ABS(REAL(A(NN,NM1)))+ABS(AIMAG(A(NN,NM1))).GT.0.8*            
     C  ABS(REAL(ANNM1))+ABS(AIMAG(ANNM1))) RETURN                      
   20 IF(ITS.EQ.10.OR.ITS.EQ.20) GO TO 28                               
C                                                                       
C COMPUTE SHIFT AS EIGENVALUE OF LOWER 2 BY 2                           
C                                                                       
      ANNM1=A(NN,NM1)                                                   
      ANM1M1=A(NM1,NM1)                                                 
      S=A(NN,NN)*B(NM1,NM1)-ANNM1*B(NM1,NN)                             
      W=ANNM1*B(NN,NN)*(A(NM1,NN)*B(NM1,NM1)-B(NM1,NN)*ANM1M1)          
      Y=(ANM1M1*B(NN,NN)-S)/2.                                          
      Z=CSQRT(Y*Y+W)                                                    
      IF (REAL(Z).EQ.0.0.AND.AIMAG(Z).EQ.0.0) GO TO 26                  
      D0=Y/Z                                                            
      IF(D0.LT.0.0) Z=-Z                                                
   26 DEN=(Y+Z)*B(NM1,NM1)*B(NN,NN)                                     
      IF(REAL(DEN).EQ.0.0.AND.AIMAG(DEN).EQ.0.0) DEN=CMPLX(EPSA,0.0)    
      NUM=(Y+Z)*S-W                                                     
      GO TO 30                                                          
C                                                                       
C AD-HOC SHIFT                                                          
C                                                                       
   28 Y=A(NM1,NN-2)                                                     
      NUM=CMPLX(ABS(REAL(ANNM1))+ABS(AIMAG(ANNM1)),ABS(REAL(Y))+        
     1ABS(AIMAG(Y)))                                                    
      DEN=(1.0,0.0)                                                     
C                                                                       
C CHECK FOR 2 CONSECUTIVE SMALL SUBDIAGONAL ELEMENTS                    
C                                                                       
   30 IF(NN.EQ.L+1) GO TO 35                                            
      D2=ABS(REAL(A(NM1,NM1)))+ABS(AIMAG(A(NM1,NM1)))                   
      E1=ABS(REAL(ANNM1))+ABS(AIMAG(ANNM1))                             
      D1=ABS(REAL(A(NN,NN)))+ABS(AIMAG(A(NN,NN)))                       
      NL=NN-(L+1)                                                       
      DO 34 MB=1,NL                                                     
        M=NN-MB                                                         
        E0=E1                                                           
        Y=A(M,M-1)                                                      
        E1=ABS(REAL(Y))+ABS(AIMAG(Y))                                   
        D0=D1                                                           
        D1=D2                                                           
        Y=A(M-1,M-1)                                                    
        D2=ABS(REAL(Y))+ABS(AIMAG(Y))                                   
        Y=A(M,M)*DEN-B(M,M)*NUM                                         
        D0=(D0+D1+D2)*(ABS(REAL(Y))+ABS(AIMAG(Y)))                      
        E0=E0*E1*(ABS(REAL(DEN))+ABS(AIMAG(DEN)))+D0                    
        IF(E0.EQ.D0) GO TO 36                                           
   34 CONTINUE                                                          
   35 M=L                                                               
   36 CONTINUE                                                          
      ITS=ITS+1                                                         
      W=A(M,M)*DEN-B(M,M)*NUM                                           
      Z=A(M+1,M)*DEN                                                    
      D1=ABS(REAL(Z))+ABS(AIMAG(Z))                                     
      D2=ABS(REAL(W))+ABS(AIMAG(W))                                     
C                                                                       
C FIND L AND M AND SET A=LAM AND B=LBM                                  
C                                                                       
      NP1=N+1                                                           
      LOR1=L                                                            
      NNORN=NN                                                          
      IF (.NOT.WANTX) GO TO 42                                          
        LOR1=1                                                          
        NNORN=N                                                         
   42 DO 90 I=M,NM1                                                     
        J=I+1                                                           
C                                                                       
C FIND ROW TRANSFORMATIONS TO RESTORE A TO                              
C UPPER HESSENBERG FORM. APPLY TRANSFORMATIONS                          
C TO A AND B                                                            
C                                                                       
        IF (I.EQ.M) GO TO 50                                            
        W=A(I,I-1)                                                      
        Z=A(J,I-1)                                                      
        D1=ABS(REAL(Z))+ABS(AIMAG(Z))                                   
        D2=ABS(REAL(W))+ABS(AIMAG(W))                                   
        IF (D1.EQ.0.0) GO TO 11                                         
   50   IF (D2.GT.D1) GO TO 60                                          
C                                                                       
C MUST INTERCHANGE ROWS                                                 
C                                                                       
          DO 55 K=I,NNORN                                               
            Y=A(I,K)                                                    
            A(I,K)=A(J,K)                                               
            A(J,K)=Y                                                    
            Y=B(I,K)                                                    
            B(I,K)=B(J,K)                                               
            B(J,K)=Y                                                    
   55     CONTINUE                                                      
          IF (I.GT.M) A(I,I-1)=A(J,I-1)                                 
          IF(D2.EQ.0.0) GO TO 65                                        
C                                                                       
C THE SCALING OF W AND Z IS DESIGNED TO AVOID A DIVISION BY ZERO        
C WHEN THE DENOMINATOR IS SMALL                                         
C                                                                       
          Y=CMPLX(REAL(W)/D1,AIMAG(W)/D1)/CMPLX(REAL(Z)/D1,AIMAG(Z)/D1) 
          GO TO 62                                                      
   60   Y=CMPLX(REAL(Z)/D2,AIMAG(Z)/D2)/CMPLX(REAL(W)/D2,AIMAG(W)/D2)   
   62   DO 64 K=I,NNORN                                                 
          A(J,K)=A(J,K)-Y*A(I,K)                                        
          B(J,K)=B(J,K)-Y*B(I,K)                                        
   64   CONTINUE                                                        
        IF (I.GT.M) A(J,I-1)=(0.0,0.0)                                  
C                                                                       
C PERFORM TRANSFORMATIONS FROM RIGHT TO RESTORE B TO                    
C   TRIANGLULAR FORM                                                    
C APPLY TRANSFORMATIONS TO A                                            
C                                                                       
   65     Z=B(J,I)                                                      
          W=B(J,J)                                                      
          D2=ABS(REAL(W))+ABS(AIMAG(W))                                 
          D1=ABS(REAL(Z))+ABS(AIMAG(Z))                                 
          IF (D1.EQ.0.0) GO TO 11                                       
          IF (D2.GT.D1) GO TO 80                                        
C                                                                       
C MUST INTERCHANGE COLUMNS                                              
C                                                                       
          DO 70 K=LOR1,J                                                
            Y=A(K,J)                                                    
            A(K,J)=A(K,I)                                               
            A(K,I)=Y                                                    
            Y=B(K,J)                                                    
            B(K,J)=B(K,I)                                               
            B(K,I)=Y                                                    
   70     CONTINUE                                                      
          IF (I.EQ.NM1) GO TO 75                                        
            Y=A(J+1,J)                                                  
            A(J+1,J)=A(J+1,I)                                           
            A(J+1,I)=Y                                                  
   75     IF(.NOT.WANTX) GO TO 79                                       
          DO 78 K=1,N                                                   
            Y=X(K,J)                                                    
            X(K,J)=X(K,I)                                               
            X(K,I)=Y                                                    
   78     CONTINUE                                                      
   79     IF(D2.EQ.0.0) GOTO 90                                         
          Z=CMPLX(REAL(W)/D1,AIMAG(W)/D1)/CMPLX(REAL(Z)/D1,AIMAG(Z)/D1) 
          GO TO 81                                                      
   80     Z=CMPLX(REAL(Z)/D2,AIMAG(Z)/D2)/CMPLX(REAL(W)/D2,AIMAG(W)/D2) 
   81   DO 82 K=LOR1,J                                                  
          A(K,I)=A(K,I)-Z*A(K,J)                                        
          B(K,I)=B(K,I)-Z*B(K,J)                                        
   82   CONTINUE                                                        
        B(J,I)=(0.0,0.0)                                                
        IF (I.LT.NM1) A(I+2,I)=A(I+2,I)-Z*A(I+2,J)                      
        IF(.NOT.WANTX) GO TO 90                                         
        DO 85 K=1,N                                                     
          X(K,I)=X(K,I)-Z*X(K,J)                                        
   85   CONTINUE                                                        
   90 CONTINUE                                                          
      GO TO 11                                                          
C                                                                       
  100 CONTINUE                                                          
      EIGA(NN)=A(NN,NN)                                                 
      EIGB(NN)=B(NN,NN)                                                 
      IF (NN.EQ.1) GO TO 110                                            
      NN=NM1                                                            
      IF (NN.GT.1) GO TO 10                                             
      GO TO 100                                                         
C                                                                       
C FIND EIGENVECTORS USING B FOR INTERMEDIATE STORAGE                    
C                                                                       
  110 IF(.NOT.WANTX) RETURN                                             
      M=N                                                               
  115 CONTINUE                                                          
      ALFM=A(M,M)                                                       
      BETM=B(M,M)                                                       
      B(M,M)=(1.0,0.0)                                                  
      L = M-1                                                           
      IF (L.EQ.0) GO TO 140                                             
  120 CONTINUE                                                          
        L1 = L+1                                                        
        SL = CMPLX(0.0,0.0)                                             
        DO 130 J=L1,M                                                   
          SL = SL + (BETM*A(L,J)-ALFM*B(L,J))*B(J,M)                    
  130   CONTINUE                                                        
        Y = BETM*A(L,L)-ALFM*B(L,L)                                     
        IF(REAL(Y).EQ.0.0.AND.AIMAG(Y).EQ.0.0) Y=CMPLX((EPSA+EPSB)/     
     1   2.0,0.0)                                                       
        B(L,M) = -SL/Y                                                  
        L = L-1                                                         
  140 IF (L.GT.0) GO TO 120                                             
      M=M-1                                                             
      IF (M.GT.0) GO TO 115                                             
C                                                                       
C TRANSFORM TO ORIGINAL COORDINATE SYSTEM                               
C                                                                       
      M=N                                                               
  200 CONTINUE                                                          
        DO 220 I=1,N                                                    
          S = CMPLX(0.,0.)                                              
          DO 210 J=1,M                                                  
            S = S + X(I,J)*B(J,M)                                       
  210     CONTINUE                                                      
          X(I,M) = S                                                    
  220   CONTINUE                                                        
        M = M-1                                                         
      IF (M.GT.0) GO TO 200                                             
C                                                                       
C NORMALIZE SO THAT LARGEST COMPONENT = 1.                              
C                                                                       
      M=N                                                               
  230 CONTINUE                                                          
        SS = 0.                                                         
        DO 235 I=1,N                                                    
          R=ABS(REAL(X(I,M)))+ABS(AIMAG(X(I,M)))                        
          IF (R.LT.SS) GO TO 235                                        
          SS = R                                                        
          D = X(I,M)                                                    
  235   CONTINUE                                                        
        IF (SS.EQ.0.0) GO TO 245                                        
        DO 240 I=1,N                                                    
          X(I,M) = X(I,M)/D                                             
  240   CONTINUE                                                        
  245 M = M-1                                                           
      IF (M.GT.0) GO TO 230                                             
      RETURN                                                            
      END                                                               
        SUBROUTINE GESS(N,A,IA,B,IB,NB,COND)                            
        INTEGER N,IB,NB                                                 
        REAL A(IA,N),B(IB,NB),COND                                      
C                                                                       
C THIS SUBROUTINE SOLVES THE SYSTEM AX=B WHERE A                        
C IS A REAL GENERAL MATRIX. IT ALSO RETURNS AN ESTIMATE                 
C OF THE CONDITION NUMBER OF A.                                         
C                                                                       
C INPUT PARAMETERS                                                      
C     N      THE ORDER OF THE PROBLEM                                   
C     A      AN IA X N ARRAY CONTAINING THE COEFFICIENT                 
C            MATRIX                                                     
C            THE SUBROUTINE DESTROYS THE MATRIX                         
C     IA     ROW DIMENSION OF THE A ARRAY,MUST BE AT LEAST N            
C     B      AN IBXNB ARRAY WHOSE ITH COLUMN CONTAINS                   
C            THE ITH RIGHT HAND SIDE.                                   
C            THE SUBROUTINE DESTROYS THE MATRIX                         
C     IB     ROW DIMENSION OF THE B ARRAY,MUST BE AT LEAST N            
C     NB     NUMBER OF RIGHT HAND SIDES                                 
C OUTPUT PARAMETERS                                                     
C     B      SOLUTION                                                   
C     COND   ESTIMATE OF CONDITION NUMBER OF THE MATRIX A               
C                                                                       
C ERROR CONDITIONS                                                      
C    1       N LESS THAN 1      FATAL                                   
C    2       IA  LESS THAN N    FATAL                                   
C    3       IB   LESS THAN N   FATAL                                   
C    4       NB LESS THAN 1     FATAL                                   
C    10+K   NEARLY SINGULAR A OF RANK K  RECOVERABLE                    
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF(N.LT.1)CALL SETERR(12H GESS-N.LT.1,12,1,2)                    
C      IF(NB.LT.1)CALL SETERR(13H GESS-NB.LT.1,13,4,2)                  
C      IF(IA.LT.N)CALL SETERR(13H GESS-IA.LT.N,13,2,2)                  
C      IF(IB.LT.N)CALL SETERR(13H GESS-IB.LT.N,13,3,2)                  
C/7S                                                                    
       IF(N.LT.1)CALL SETERR(' GESS-N.LT.1',12,1,2)                     
       IF(NB.LT.1)CALL SETERR(' GESS-NB.LT.1',13,4,2)                   
       IF(IA.LT.N)CALL SETERR(' GESS-IA.LT.N',13,2,2)                   
       IF(IB.LT.N)CALL SETERR(' GESS-IB.LT.N',13,3,2)                   
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL GECE(N,A,IA,INTER(IN),COND)                                 
       IF(NERROR(IERR).EQ.0) GO TO 20                                   
          CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(21H GESS-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
          CALL SETERR(' GESS-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
          GO TO 200                                                     
 20    CALL GEFS(N,A,IA,B,IB,NB,INTER(IN))                              
       CALL GEBS(N,A,IA,B,IB,NB)                                        
       IF(NERROR(IERR).EQ.0) GO TO 200                                  
          CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(21H GESS-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
          CALL SETERR(' GESS-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
      SUBROUTINE GECE(N, A, IA, INTER, COND)                            
      INTEGER IA, N, INTER(N)                                           
      REAL A(IA, N), COND                                               
      COMMON /CSTAK/ D                                                  
      DOUBLE PRECISION D(500)                                           
      INTEGER  NERR, ISTKGT, NERROR, I,  IWORK                          
      REAL AMAX1, R(1000), SASUM, SNORM, R1MACH                         
      EQUIVALENCE (R(1), D(1))                                          
C THIS SUBROUTINE CALLS THE DECOMPOSITION ROUTINE AND DETERMINES        
C AN ESTIMATE OF THE CONDITION NUMBER OF A REAL GENERAL MATRIX          
C INPUT PARAMETERS                                                      
C    N        ORDER OF THE PROBLEM                                      
C    A        MATRIX WHOSE CONDITION NUMBER IS REQUIRED                 
C    IA       ROW DIMENSION OF A                                        
C OUTPUT PARAMETERS                                                     
C    A        CONTAINS THE LU DECOMPOSITION OF THE A MATRIX             
C    INTER    PIVOT VECTOR PRODUCED BY THE DECOMPOSITION                
C    COND     AN ESTIMATE OF THE CONDITION NUMBER OF THE MATRIX A       
C EXTRA STORAGE ALLOCATED : N REAL LOCATIONS                            
C THE SUBROUTINES SASUM, GELU, AND G4ECE ARE CALLED                     
C ERROR CONDITIONS-                                                     
C    1     N.LT.1       FATAL                                           
C    2    IA.LT.N       FATAL                                           
      CALL ENTER(1)                                                     
C/6S                                                                    
C     IF (N .LT. 1) CALL SETERR(13H GECE-N.LT.1 , 13, 1, 2)             
C     IF (IA .LT. N) CALL SETERR(13H GECE-IA.LT.N, 13, 2, 2)            
C/7S                                                                    
      IF (N .LT. 1) CALL SETERR(' GECE-N.LT.1 ', 13, 1, 2)              
      IF (IA .LT. N) CALL SETERR(' GECE-IA.LT.N', 13, 2, 2)             
C/                                                                      
      SNORM = 0.0                                                       
      DO  1 I = 1, N                                                    
         SNORM = AMAX1(SNORM, SASUM(N, A(1, I), 1))                     
   1     CONTINUE                                                       
      CALL GELU(N,A,IA,INTER,0.0)                                       
      IF (NERROR(NERR) .EQ. 0) GOTO 2                                   
         COND = R1MACH(2)                                               
C/6S                                                                    
C        CALL N5ERR(21H GECE-SINGULAR MATRIX,21,NERR,1)                 
C/7S                                                                    
         CALL N5ERR(' GECE-SINGULAR MATRIX',21,NERR,1)                  
C/                                                                      
         GOTO  3                                                        
   2     IWORK = ISTKGT(N,3)                                            
         CALL G4ECE(N,A,IA,SNORM,COND,INTER,R(IWORK))                   
   3  CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE G4ECE(N,A,IA,ANORM,COND,IPVT,Z)                        
      INTEGER IA,N,IPVT(N)                                              
      REAL A(IA, N), ANORM, COND, Z(N)                                  
      INTEGER KB,  KP1,  J, K                                           
      INTEGER L                                                         
      REAL EK, GREAT, SM, WK, SIGN, SDOT, ABS                           
      REAL S, T, WKM, SASUM, YNORM                                      
      REAL R1MACH,BIG                                                   
C THIS SUBROUTINE DETERMINES A LOWER BOUND ON THE CONDITION NUMBER      
C OF THE DECOMPOSED MATRIX A VIA THE ALGORITHM USED IN LINPACK          
C                                                                       
C                                                                       
C SOLVE A(TRANSPOSE)W = E                                               
C WHERE E IS CHOSEN TO CAUSE MAXIMUM LOCAL GROWTH                       
C IN THE COMPONENTS OF W                                                
      IF (N.NE.1) GO TO 1                                               
          COND=1.0                                                      
           Z(1)=1.0                                                     
          RETURN                                                        
 1    EK = 1.0                                                          
      BIG=SQRT(R1MACH(2))/FLOAT(N)                                      
      DO  2 J = 1, N                                                    
         Z(J) = 0.0                                                     
  2   CONTINUE                                                          
      DO 30 K=1,N                                                       
        IF (ABS(Z(K)) .NE. 0.0) EK=SIGN(EK,-Z(K))                       
        IF (ABS(EK-Z(K)) .LE. ABS(A(K,K))) GO TO 20                     
           S=ABS(A(K,K))/ABS(EK-Z(K))                                   
           CALL SSCAL(N,S,Z,1)                                          
           EK=S*EK                                                      
 20     CONTINUE                                                        
        WK=EK - Z(K)                                                    
        WKM=-EK-Z(K)                                                    
        S = ABS(WK)                                                     
        SM = ABS(WKM)                                                   
        IF (A(K,K).EQ.0.0) GO TO 22                                     
        WK = WK/A(K,K)                                                  
        WKM = WKM/A(K,K)                                                
        GO TO 23                                                        
 22     WK=1.0                                                          
        WKM=1.0                                                         
 23     CONTINUE                                                        
        KP1 = K +1                                                      
        IF (KP1. GT. N) GO TO 28                                        
        DO 24 J=KP1,N                                                   
          SM = SM + ABS(Z(J) + WKM*A(K,J))                              
          Z(J) = Z(J) + WK * A(K,J)                                     
          S = S + ABS(Z(J))                                             
 24    CONTINUE                                                         
       IF ( S .GE. SM) GO TO 28                                         
          T= WKM - WK                                                   
          WK = WKM                                                      
          DO 26 J=KP1,N                                                 
             Z(J) = Z(J) + T*A(K,J)                                     
 26       CONTINUE                                                      
 28    CONTINUE                                                         
       Z(K) = WK                                                        
 30    CONTINUE                                                         
       S= 1.0/SASUM(N,Z,1)                                              
       CALL SSCAL(N,S,Z,1)                                              
C                                                                       
C FORM Y = L(TRANSPOSE) * W                                             
C                                                                       
      DO  40 KB = 2, N                                                  
         K = N+1-KB                                                     
         IF (K .LT. N) Z(K) = Z(K)+SDOT(N-K, A(K+1, K), 1, Z(K+1), 1)   
         IF (ABS(Z(K)).LT.BIG) GO TO 35                                 
             S=1.0/ABS(Z(K))                                            
             CALL SSCAL(N,S,Z,1)                                        
 35      CONTINUE                                                       
         L = IPVT(K)                                                    
         T = Z(L)                                                       
         Z(L) = Z(K)                                                    
         Z(K) = T                                                       
  40  CONTINUE                                                          
      S=1.0/SASUM(N,Z,1)                                                
      CALL SSCAL(N,S,Z,1)                                               
      YNORM = 1.0                                                       
C                                                                       
C   FORM W = L * Y                                                      
C                                                                       
       IF (N.EQ.1)GO TO 46                                              
       NM1=N-1                                                          
       DO 45 K=1,NM1                                                    
          L=IPVT(K)                                                     
          T=Z(L)                                                        
          Z(L)=Z(K)                                                     
          Z(K)=T                                                        
          CALL SAXPY(N-K,T,A(K+1,K),1,Z(K+1),1)                         
          IF(ABS(Z(K)).LE.BIG) GO TO 45                                 
            S=1.0/ABS(Z(K))                                             
            CALL SSCAL(N,S,Z,1)                                         
            YNORM=S*YNORM                                               
 45     CONTINUE                                                        
       S = 1.0/SASUM(N,Z,1)                                             
       IF (S.GT.1.0) GO TO 46                                           
       CALL SSCAL(N,S,Z,1)                                              
       YNORM = YNORM*S                                                  
C                                                                       
C   SOLVE U * Z = W                                                     
 46    DO  50 KB = 1, N                                                 
         K = N+1-KB                                                     
         IF (ABS(Z(K)) .LE. ABS(A(K,K))) GO TO 48                       
            S=ABS(A(K,K))/ABS(Z(K))                                     
            CALL SSCAL(N,S,Z,1)                                         
            YNORM = YNORM * S                                           
 48      CONTINUE                                                       
         IF(A(K,K).NE.0.0)Z(K) = Z(K)/A(K,K)                            
         IF (A(K,K).EQ.0.0)Z(K)=1.0                                     
         T = -Z(K)                                                      
         IF  (K .NE. 1) CALL SAXPY(K-1,T,A(1,K),1,Z(1),1)               
 50      CONTINUE                                                       
C    MAKE ZNORM = 1.0                                                   
       S= 1.0/SASUM(N,Z,1)                                              
       CALL SSCAL(N,S,Z,1)                                              
       YNORM = YNORM*S                                                  
C                                                                       
C   SET COND = ESTIMATE OF THE CONDITION NUMBER OF A                    
C                                                                       
       GREAT=R1MACH(2)                                                  
       IF (YNORM.GT.1.0) GO TO 60                                       
       IF (ANORM.LE.YNORM*GREAT) GO TO 60                               
       COND=GREAT                                                       
       RETURN                                                           
 60    COND=ANORM/YNORM                                                 
       RETURN                                                           
       END                                                              
        SUBROUTINE GELE(N,A,IA,B,IB,NB)                                 
        INTEGER N,IA,IB,NB                                              
        REAL A(IA,N),B(IB,NB)                                           
C                                                                       
C THIS SUBROUTINE SOLVES THE SYSTEM AX=B WHERE A                        
C IS A REAL GENERAL MATRIX.                                             
C                                                                       
C INPUT PARAMETERS                                                      
C     N      THE ORDER OF THE PROBLEM                                   
C     A      AN IA X N ARRAY CONTAINING THE COEFFICIENT                 
C            MATRIX                                                     
C            THE SUBROUTINE DESTROYS THE MATRIX                         
C     IA     ROW DIMENSION OF THE A ARRAY,MUST BE AT LEAST N            
C     B      AN IBXNB ARRAY WHOSE ITH COLUMN CONTAINS                   
C            THE ITH RIGHT HAND SIDE.                                   
C            THE SUBROUTINE DESTROYS THE MATRIX                         
C     IB     ROW DIMENSION OF THE B ARRAY,MUST BE AT LEAST N            
C     NB     NUMBER OF RIGHT HAND SIDES                                 
C OUTPUT PARAMETERS                                                     
C     B      SOLUTION                                                   
C                                                                       
C ERROR CONDITIONS                                                      
C    1       N LESS THAN 1      FATAL                                   
C    2       IA  LESS THAN N    FATAL                                   
C    3       IB   LESS THAN N   FATAL                                   
C    4       NB LESS THAN 1     FATAL                                   
C    10+K   NEARLY SINGULAR A OF RANK K  RECOVERABLE                    
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF(N.LT.1)CALL SETERR(12H GELE-N.LT.1,12,1,2)                    
C      IF(NB.LT.1)CALL SETERR(13H GELE-NB.LT.1,13,4,2)                  
C      IF(IA.LT.N)CALL SETERR(13H GELE-IA.LT.N,13,2,2)                  
C      IF(IB.LT.N)CALL SETERR(13H GELE-IB.LT.N,13,3,2)                  
C/7S                                                                    
       IF(N.LT.1)CALL SETERR(' GELE-N.LT.1',12,1,2)                     
       IF(NB.LT.1)CALL SETERR(' GELE-NB.LT.1',13,4,2)                   
       IF(IA.LT.N)CALL SETERR(' GELE-IA.LT.N',13,2,2)                   
       IF(IB.LT.N)CALL SETERR(' GELE-IB.LT.N',13,3,2)                   
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL GEDC(N,A,IA,INTER(IN))                                      
       IF(NERROR(IERR).EQ.0) GO TO 20                                   
          CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(21H GELE-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
          CALL SETERR(' GELE-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
          GO TO 200                                                     
 20    CALL GEFS(N,A,IA,B,IB,NB,INTER(IN))                              
       CALL GEBS(N,A,IA,B,IB,NB)                                        
       IF(NERROR(IERR).EQ.0) GO TO 200                                  
          CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(21H GELE-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
          CALL SETERR(' GELE-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
       SUBROUTINE GEDC(N,A,IA,INTER)                                    
       INTEGER N,IA,INTER(N)                                            
       REAL A(IA,N),EPS,GENM                                            
C THIS SUBROUTINE USES GAUSSIAN ELIMINATION WITH PARTIAL                
C PIVOTING TO DECOMPOSE A MATRIX A INTO P*A=L*U WHERE                   
C P IS A PERMUTATION MATRIX,L IS A LOWER UNIT TRIANGULAR                
C MATRIX, AND U IS AN UPPER TRIANGULAR MATRIX                           
C INPUT PARAMETERS                                                      
C     N      ORDER OF THE PROBLEM                                       
C     A      AN IA X N ARRAY CONTAINING THE MATRIX TO BE                
C            FACTORED                                                   
C     IA     ROW DIMENSION OF THE A ARRAY                               
C OUTPUT PARAMETERS                                                     
C     A      CONTAINS THE UPPER TRIANGULAR MATRIX U AND A               
C            PERMUTED VERSION OF THE LOWER TRIANGULAR MATRIX I-L        
C     INTER  AN INTEGER VECTOR WHOSE ITH COMPONENT RECORDS THE          
C            ITH PIVOT ROW                                              
C     EPS    REAL VARIABLE, IF THE MAGNITUDE OF THE PIVOT IS            
C            LESS THAN OR EQUAL TO EPS, THE MATRIX IS                   
C            CONSIDERED SINGULAR                                        
C THE SUBROUTINES GELU AND GENM ARE CALLED                              
C ERROR CONDITIONS                                                      
C      1      N IS LESS THAN 1   FATAL                                  
C      2      IA.LT.N       FATAL                                       
C      10+K   SINGULAR MATRIX OF RANK K    RECOVERABLE                  
C                                                                       
C/6S                                                                    
C       IF(N.LT.1)CALL SETERR(12H GEDC-N.LT.1,12,1,2)                   
C       IF(IA.LT.N)CALL SETERR(13H GEDC-IA.LT.N,13,2,2)                 
C/7S                                                                    
        IF(N.LT.1)CALL SETERR(' GEDC-N.LT.1',12,1,2)                    
        IF(IA.LT.N)CALL SETERR(' GEDC-IA.LT.N',13,2,2)                  
C/                                                                      
         CALL ENTER(1)                                                  
        EPS=GENM(N,A,IA)                                                
        EPS=R1MACH(4)*EPS                                               
        CALL GELU(N,A,IA,INTER,EPS)                                     
C/6S                                                                    
C       IF(NERROR(IERR).NE.0)                                           
C    1     CALL N5ERR(21H GEDC-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
        IF(NERROR(IERR).NE.0)                                           
     1     CALL N5ERR(' GEDC-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
        CALL LEAVE                                                      
        RETURN                                                          
        END                                                             
        REAL FUNCTION GENM(N,A,IA)                                      
        REAL SUM,A(IA,1),SASUM                                          
C THIS FUNCTION DETERMINES THE 1 NORM OF AN N X N MATRIX A OF           
C OF ROW DIMENSION IA                                                   
C/6S                                                                    
C       IF (N.LT.1) CALL SETERR(12H GENM-N.LT.1,12,1,2)                 
C       IF (IA.LT.N) CALL SETERR(13H GENM-IA.LT.N,13,2,2)               
C/7S                                                                    
        IF (N.LT.1) CALL SETERR(' GENM-N.LT.1',12,1,2)                  
        IF (IA.LT.N) CALL SETERR(' GENM-IA.LT.N',13,2,2)                
C/                                                                      
        GENM=0.0                                                        
        DO 10 I=1,N                                                     
           SUM=SASUM(N,A(1,I),1)                                        
           IF (SUM.GT.GENM) GENM=SUM                                    
 10      CONTINUE                                                       
         RETURN                                                         
         END                                                            
       SUBROUTINE GELU(N,A,IA,INTER,EPS)                                
       INTEGER N,INTER(N)                                               
       REAL A(IA,N),T,EPS,X                                             
C THIS SUBROUTINE USES GAUSSIAN ELIMINATION WITH PARTIAL                
C PIVOTING TO DECOMPOSE A MATRIX A INTO P*A=L*U WHERE                   
C P IS A PERMUTATION MATRIX,L IS A LOWER UNIT TRIANGULAR                
C MATRIX, AND U IS AN UPPER TRIANGULAR MATRIX                           
C INPUT PARAMETERS                                                      
C     N      ORDER OF THE PROBLEM                                       
C     A      AN IA X N ARRAY CONTAINING THE MATRIX TO BE                
C            FACTORED                                                   
C     IA     ROW DIMENSION OF THE A ARRAY                               
C     EPS    REAL VARIABLE,IF THE MAGNITUDE OF THE PIVOT IS             
C            LESS THAN OR EQUAL TO EPS,THE MATRIX IS                    
C            CONSIDERED SINGULAR                                        
C OUTPUT PARAMETERS                                                     
C     A      CONTAINS THE UPPER TRIANGULAR MATRIX U AND A               
C            PERMUTED VERSION OF THE LOWER TRIANGULAR MATRIX I-L        
C     INTER  AN INTEGER VECTOR WHOSE ITH COMPONENT RECORDS THE          
C            ITH PIVOT ROW, WITH INTER(N)=(-1)**NUMBER OF INTERCHANGES  
C THE SUBROUTINES ISAMAX,SSCAL AND SSWAP ARE CALLED                     
C ERROR CONDITIONS                                                      
C      1      N IS LESS THAN 1   FATAL                                  
C      2      IA.LT.N       FATAL                                       
C      10+K   SINGULAR MATRIX OF RANK K    RECOVERABLE                  
C                                                                       
C/6S                                                                    
C       IF(N.LT.1)CALL SETERR(12H GELU-N.LT.1,12,1,2)                   
C       IF(IA.LT.N)CALL SETERR(13H GELU-IA.LT.N,13,2,2)                 
C/7S                                                                    
        IF(N.LT.1)CALL SETERR(' GELU-N.LT.1',12,1,2)                    
        IF(IA.LT.N)CALL SETERR(' GELU-IA.LT.N',13,2,2)                  
C/                                                                      
        CALL ENTER(1)                                                   
        IERR=0                                                          
        INTER(N)=1                                                      
        IF(N.EQ.1) GO TO 150                                            
        NM1=N-1                                                         
        DO 100 K=1,NM1                                                  
           KP1=K+1                                                      
C DETERMINE THE PIVOT FOR THE KTH TRANSFORMATION                        
           M=ISAMAX(N-K+1,A(K,K),1)+K-1                                 
           IF (K.EQ.M) GO TO 5                                          
           INTER(N) = -INTER(N)                                         
           CALL SSWAP(N-K+1,A(K,K),IA,A(M,K),IA)                        
 5         CONTINUE                                                     
C CHECK FOR NEAR SINGULARITY                                            
           IF(ABS(A(K,K)).GT.EPS) GO TO 10                              
C/6S                                                                    
C          IF (IERR.EQ.0)                                               
C    1        CALL SETERR(21H GELU-SINGULAR MATRIX,21,9+K,1)            
C/7S                                                                    
           IF (IERR.EQ.0)                                               
     1        CALL SETERR(' GELU-SINGULAR MATRIX',21,9+K,1)             
C/                                                                      
              IERR=1                                                    
           A(K,K)=SIGN(EPS,A(K,K))                                      
 10        INTER(K)=M                                                   
C APPLY THE TRANSFORMATION TO THE MATRIX                                
            X=-A(K,K)                                                   
           IF(X.EQ.0.0)GO TO 100                                        
           DO 20 J=KP1,N                                                
              A(J,K)=A(J,K)/X                                           
 20        CONTINUE                                                     
           DO 50 J=KP1,N                                                
              T=A(K,J)                                                  
              IF(T.EQ.0.0) GO TO 50                                     
              DO 40 I=KP1,N                                             
                 A(I,J)=A(I,J)+T*A(I,K)                                 
 40           CONTINUE                                                  
 50        CONTINUE                                                     
 100    CONTINUE                                                        
 150    IF (ABS(A(N,N)).GT.EPS)GO TO 160                                
C/6S                                                                    
C       IF (IERR.EQ.0)                                                  
C    1        CALL SETERR(21H GELU-SINGULAR MATRIX, 21, 9+N, 1)         
C/7S                                                                    
        IF (IERR.EQ.0)                                                  
     1        CALL SETERR(' GELU-SINGULAR MATRIX', 21, 9+N, 1)          
C/                                                                      
           A(N,N)=SIGN(EPS,A(N,N))                                      
 160   CONTINUE                                                         
        CALL LEAVE                                                      
        RETURN                                                          
        END                                                             
        SUBROUTINE GEFS(N,A,IA,B,IB,NB,INTER)                           
C MNEMONIC-GENERAL FORWARD SOLVE                                        
        INTEGER N,IA,IB,NB                                              
        REAL A(IA,N),B(IB,NB),T                                         
        INTEGER INTER(N)                                                
C THIS SUBROUTINE SOLVES AX=B WHERE A IS A LOWER                        
C UNIT TRIANGULAR MATRIX. IT MAY BE USE AS PART OF                      
C OF A PACKAGE FOR SOLVING AX=B WHEN A IS A GENERAL                     
C GENERAL MATRIX AND GELU HAS BEEN USED                                 
C INPUT PARAMETERS                                                      
C     N    THE ORDER OF THE PROBLEM                                     
C     A    AN IA X N ARRAY CONTAINING A UNIT LOWER TRIANGULAR           
C          MATRIX OR THE DECOMPOSITION DETERMINED IN GELU               
C          DETERMINED IN GELU                                           
C     IA   ROW DIMENSION OF THE A MATRIX                                
C     B    A VECTOR CONTAINING THE RIGHT HAND SIDE                      
C          IT WILL BE DESTROYED ON OUTPUT                               
C     IB   ROW DIMENSION OF THE B ARRAY,MUST BE AT LEAST N              
C     NB   NUMBER OF RIGHT HAND SIDES                                   
C     INTER AN INTEGER VECTOR CONTAINING A RECORD OF THE                
C           PERMUTATIONS PERFORMED IN GELU                              
C OUTPUT PARAMTERS                                                      
C     B    THE SOLUTION X OF THE PROBLEM                                
C ERROR CONDITIONS                                                      
C    1      N LESS THAN 1    FATAL                                      
C    2      IA.LT.N          FATAL                                      
C    5      INTER NOT IN 1,....N      FATAL                             
C    3      IB.LT.N          FATAL                                      
C    4      NB.LT.1          FATAL                                      
C                                                                       
C/6S                                                                    
C      IF(N.LT.1) CALL SETERR(12H GEFS-N.LT.1,12,1,2)                   
C      IF (IA.LT.N) CALL SETERR(13H GEFS-IA.LT.N,13,2,2)                
C      IF(IB.LT.N) CALL SETERR(13H GEFS-IB.LT.N,13,3,2)                 
C      IF(NB.LT.1) CALL SETERR(13H GEFS-NB.LT.1,13,4,2)                 
C/7S                                                                    
       IF(N.LT.1) CALL SETERR(' GEFS-N.LT.1',12,1,2)                    
       IF (IA.LT.N) CALL SETERR(' GEFS-IA.LT.N',13,2,2)                 
       IF(IB.LT.N) CALL SETERR(' GEFS-IB.LT.N',13,3,2)                  
       IF(NB.LT.1) CALL SETERR(' GEFS-NB.LT.1',13,4,2)                  
C/                                                                      
C FORWARD SOLVE                                                         
       IF (N.EQ.1) RETURN                                               
       NM1=N-1                                                          
       DO 40 K=1,NM1                                                    
          M=INTER(K)                                                    
          IF (M.GT.0.AND.M.LE.N) GO TO 10                               
C/6S                                                                    
C         CALL SETERR(22H GEFS-INTER NOT IN 1-N,22,5,2)                 
C/7S                                                                    
          CALL SETERR(' GEFS-INTER NOT IN 1-N',22,5,2)                  
C/                                                                      
          RETURN                                                        
 10      CONTINUE                                                       
         DO 35 I=1,NB                                                   
            T=B(M,I)                                                    
            IF (M.EQ.K) GO TO 20                                        
            B(M,I)=B(K,I)                                               
            B(K,I)=T                                                    
 20         KP1=K+1                                                     
            DO 30 J=KP1,N                                               
               B(J,I)=B(J,I)+T*A(J,K)                                   
 30         CONTINUE                                                    
 35      CONTINUE                                                       
 40    CONTINUE                                                         
       RETURN                                                           
       END                                                              
       SUBROUTINE GEBS(N,A,IA,B,IB,NB)                                  
CMNEMONIC-GENERAL BACK SOLVE                                            
C THIS SUBROUTINE SOLVES AX=B WHERE A IS                                
C AN UPPER TRIANGULAR MATRIX                                            
C INPUT PARAMETERS                                                      
C    N    ORDER OF THE PROBLEM                                          
C    A    AN IA X N ARRAY CONTAINING THE MATRIX A                       
C    IA   ROW DIMENSION OF THE A MATRIX                                 
C    B    AN IB X NB MATRIX CONTAINING THE RIGHT HAND SIDES             
C         DESTROYED ON OUTPUT                                           
C    IB   ROW DIMENSION OF THE B ARRAY, MUST BE AT LEAST N              
C    NB   NUMBER OF RIGHT HAND SIDES                                    
C OUTPUT PARAMTERS                                                      
C   B    THE SOLUTION X                                                 
C THIS SUBROUTINE USES SDOT                                             
C ERROR CONDITIONS                                                      
C  1      N LESS THAN 1     FATAL                                       
C  2      IA .LT.N          FATAL                                       
C  3      IB.LT.N           FATAL                                       
C  4      NB.LT.1           FATAL                                       
C  10+K   SINGULAR MATRIX OF RANK K      RECOVERABLE                    
C EXTRA STORAGE ALLOCATED-NONE                                          
       INTEGER N,IA,IB,NB                                               
       REAL A(IA,N),B(IB,NB),T                                          
C/6S                                                                    
C      IF (N.LT.1) CALL SETERR(12H GEBS-N.LT.1,12,1,2)                  
C      IF (IA.LT.N) CALL SETERR(13H GEBS-IA.LT.N,13,2,2)                
C      IF (IB.LT.N) CALL SETERR(13H GEBS-IB.LT.N,13,3,2)                
C      IF (NB.LT.1) CALL SETERR(13H GEBS-NB.LT.1,13,4,2)                
C/7S                                                                    
       IF (N.LT.1) CALL SETERR(' GEBS-N.LT.1',12,1,2)                   
       IF (IA.LT.N) CALL SETERR(' GEBS-IA.LT.N',13,2,2)                 
       IF (IB.LT.N) CALL SETERR(' GEBS-IB.LT.N',13,3,2)                 
       IF (NB.LT.1) CALL SETERR(' GEBS-NB.LT.1',13,4,2)                 
C/                                                                      
        CALL ENTER(1)                                                   
C DO THE BACK SOLVE                                                     
 50    NP1=N+1                                                          
       DO 70 KB=1,N                                                     
          K=NP1-KB                                                      
          DO 65 I=1,NB                                                  
          T=B(K,I)                                                      
          IF(K.NE.N)T=T-SDOT(KB-1,A(K,K+1),IA,B(K+1,I),1)               
          IF(A(K,K).NE.0.0) GO TO 60                                    
C/6S                                                                    
C         CALL SETERR(38H GEBS-DIVISION BY ZERO-SINGULAR MATRIX,        
C    1    38,9+K,1)                                                     
C/7S                                                                    
          CALL SETERR(' GEBS-DIVISION BY ZERO-SINGULAR MATRIX',         
     1    38,9+K,1)                                                     
C/                                                                      
          GO TO 75                                                      
 60       B(K,I)=T/A(K,K)                                               
 65       CONTINUE                                                      
 70     CONTINUE                                                        
 75     CALL LEAVE                                                      
        RETURN                                                          
        END                                                             
       SUBROUTINE GEML(N,A,IA,X,B)                                      
C GENERAL MATRIX BY VECTOR MULTIPLICATION                               
C                                                                       
         REAL A(IA,N),X(N),B(N)                                         
C/6S                                                                    
C        IF(N.LT.1) CALL SETERR(12H GEML-N.LT.1,12,1,2)                 
C        IF (IA.LT.N) CALL SETERR(13H GEML-IA.LT.N,13,2,2)              
C/7S                                                                    
         IF(N.LT.1) CALL SETERR(' GEML-N.LT.1',12,1,2)                  
         IF (IA.LT.N) CALL SETERR(' GEML-IA.LT.N',13,2,2)               
C/                                                                      
         DO 10 I=1,N                                                    
             B(I)=0.0                                                   
  10     CONTINUE                                                       
         DO 20 I=1,N                                                    
            CALL SAXPY(N,X(I),A(1,I),1,B,1)                             
 20      CONTINUE                                                       
         RETURN                                                         
         END                                                            
        SUBROUTINE DGESS(N,A,IA,B,IB,NB,COND)                           
        INTEGER N,IB,NB                                                 
        DOUBLE PRECISION A(IA,N),B(IB,NB),COND                          
C                                                                       
C THIS SUBROUTINE SOLVES THE SYSTEM AX=B WHERE A                        
C IS A DOUBLE PRECISION GENERAL MATRIX. IT ALSO RETURNS                 
C AN ESTIMATE OF THE CONDITION NUMBER OF THE MATRIX A.                  
C                                                                       
C INPUT PARAMETERS                                                      
C     N      THE ORDER OF THE PROBLEM                                   
C     A      AN IA X N ARRAY CONTAINING THE COEFFICIENT                 
C            MATRIX                                                     
C            THE SUBROUTINE DESTROYS THE MATRIX                         
C     IA     ROW DIMENSION OF THE A ARRAY,MUST BE AT LEAST N            
C     B      AN IBXNB ARRAY WHOSE ITH COLUMN CONTAINS                   
C            THE ITH RIGHT HAND SIDE.                                   
C            THE SUBROUTINE DESTROYS THE MATRIX                         
C     IB     ROW DIMENSION OF THE B ARRAY,MUST BE AT LEAST N            
C     NB     NUMBER OF RIGHT HAND SIDES                                 
C OUTPUT PARAMETERS                                                     
C     B      SOLUTION                                                   
C     COND   ESTIMATE OF CONDITION NUMBER OF THE MATRIX A               
C                                                                       
C ERROR CONDITIONS                                                      
C    1       N LESS THAN 1      FATAL                                   
C    2       IA  LESS THAN N    FATAL                                   
C    3       IB   LESS THAN N   FATAL                                   
C    4       NB LESS THAN 1     FATAL                                   
C    10+K   NEARLY SINGULAR A OF RANK K  RECOVERABLE                    
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF(N.LT.1)CALL SETERR(12HDGESS-N.LT.1,12,1,2)                    
C      IF(NB.LT.1)CALL SETERR(13HDGESS-NB.LT.1,13,4,2)                  
C      IF(IA.LT.N)CALL SETERR(13HDGESS-IA.LT.N,13,2,2)                  
C      IF(IB.LT.N)CALL SETERR(13HDGESS-IB.LT.N,13,3,2)                  
C/7S                                                                    
       IF(N.LT.1)CALL SETERR('DGESS-N.LT.1',12,1,2)                     
       IF(NB.LT.1)CALL SETERR('DGESS-NB.LT.1',13,4,2)                   
       IF(IA.LT.N)CALL SETERR('DGESS-IA.LT.N',13,2,2)                   
       IF(IB.LT.N)CALL SETERR('DGESS-IB.LT.N',13,3,2)                   
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL DGECE(N,A,IA,INTER(IN),COND)                                
       IF(NERROR(IERR).EQ.0) GO TO 20                                   
          CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(21HDGESS-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
          CALL SETERR('DGESS-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
          GO TO 200                                                     
 20    CALL DGEFS(N,A,IA,B,IB,NB,INTER(IN))                             
       CALL DGEBS(N,A,IA,B,IB,NB)                                       
       IF(NERROR(IERR).EQ.0) GO TO 200                                  
          CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(21HDGESS-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
          CALL SETERR('DGESS-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
      SUBROUTINE DGECE(N, A, IA, INTER, COND)                           
      INTEGER IA, N, INTER(N)                                           
      DOUBLE PRECISION A(IA, N), COND                                   
      COMMON /CSTAK/ R                                                  
      INTEGER  NERR, ISTKGT, NERROR, I,  IWORK                          
      DOUBLE PRECISION R(500), DASUM, SNORM, D1MACH                     
C THIS SUBROUTINE CALLS THE DECOMPOSITION ROUTINE AND DETERMINES        
C AN ESTIMATE OF THE CONDITION NUMBER OF A D.P. DGENERAL MATRIX         
C INPUT PARAMETERS                                                      
C    N        ORDER OF THE PROBLEM                                      
C    A        MATRIX WHOSE CONDITION NUMBER IS REQUIRED                 
C    IA       ROW DIMENSION OF A                                        
C OUTPUT PARAMETERS                                                     
C    A        CONTAINS THE LU DECOMPOSITION OF THE A MATRIX             
C    INTER    PIVOT VECTOR PRODUCED BY THE DECOMPOSITION                
C    COND     AN ESTIMATE OF THE CONDITION NUMBER OF THE MATRIX A       
C EXTRA STORAGE ALLOCATED : N DOUBLE PRECISION LOCATIONS                
C THE SUBROUTINES DASUM, DGELU, AND G4ECE ARE CALLED                    
C ERROR CONDITIONS-                                                     
C    1     N.LT.1       FATAL                                           
C    2    IA.LT.N       FATAL                                           
      CALL ENTER(1)                                                     
C/6S                                                                    
C     IF (N .LT. 1) CALL SETERR(13HDGECE-N.LT.1 , 13, 1, 2)             
C     IF (IA .LT. N) CALL SETERR(13HDGECE-IA.LT.N, 13, 2, 2)            
C/7S                                                                    
      IF (N .LT. 1) CALL SETERR('DGECE-N.LT.1 ', 13, 1, 2)              
      IF (IA .LT. N) CALL SETERR('DGECE-IA.LT.N', 13, 2, 2)             
C/                                                                      
      SNORM = 0.D0                                                      
      DO  1 I = 1, N                                                    
         SNORM = DMAX1(SNORM, DASUM(N, A(1, I), 1))                     
   1     CONTINUE                                                       
      CALL DGELU(N,A,IA,INTER,0.D0)                                     
      IF (NERROR(NERR) .EQ. 0) GOTO 2                                   
         COND = D1MACH(2)                                               
         GOTO  3                                                        
   2     IWORK = ISTKGT(N,4)                                            
         CALL DG4ECE(N,A,IA,SNORM,COND,INTER,R(IWORK))                  
   3  CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE DG4ECE(N,A,IA,ANORM,COND,IPVT,Z)                       
      INTEGER IA,N,IPVT(N)                                              
      DOUBLE PRECISION A(IA, N), ANORM, COND, Z(N)                      
      INTEGER KB,  KP1,  J, K                                           
      INTEGER L                                                         
      DOUBLE PRECISION EK, GREAT, SM, WK, DDOT                          
      DOUBLE PRECISION S, T, WKM, DASUM, YNORM                          
      DOUBLE PRECISION D1MACH,BIG,DSQRT                                 
C THIS SUBROUTINE DETERMINES A LOWER BOUND ON THE CONDITION NUMBER      
C OF THE DECOMPOSED MATRIX A VIA THE ALGORITHM USED IN LINPACK          
C                                                                       
C                                                                       
C SOLVE A(TRANSPOSE)W = E                                               
C WHERE E IS CHOSEN TO CAUSE MAXIMUM LOCAL GROWTH                       
C IN THE COMPONENTS OF W                                                
      IF (N.NE.1) GO TO 1                                               
          COND=1.D0                                                     
           Z(1)=1.D0                                                    
          RETURN                                                        
 1    EK = 1.D0                                                         
      BIG=DSQRT(D1MACH(2))/DBLE(FLOAT(N))                               
      DO  2 J = 1, N                                                    
         Z(J) = 0.D0                                                    
  2   CONTINUE                                                          
      DO 30 K=1,N                                                       
        IF (DABS(Z(K)) .NE. 0.D0) EK=DSIGN(EK,-Z(K))                    
        IF (DABS(EK-Z(K)) .LE. DABS(A(K,K))) GO TO 20                   
           S=DABS(A(K,K))/DABS(EK-Z(K))                                 
           CALL DSCAL(N,S,Z,1)                                          
           EK=S*EK                                                      
 20     CONTINUE                                                        
        WK=EK - Z(K)                                                    
        WKM=-EK-Z(K)                                                    
        S = DABS(WK)                                                    
        SM = DABS(WKM)                                                  
        IF (A(K,K).EQ.0.D0) GO TO 22                                    
        WK = WK/A(K,K)                                                  
        WKM = WKM/A(K,K)                                                
        GO TO 23                                                        
 22     WK=1.D0                                                         
        WKM=1.D0                                                        
 23     CONTINUE                                                        
        KP1 = K +1                                                      
        IF (KP1. GT. N) GO TO 28                                        
        DO 24 J=KP1,N                                                   
          SM = SM + DABS(Z(J) + WKM*A(K,J))                             
          Z(J) = Z(J) + WK * A(K,J)                                     
          S = S + DABS(Z(J))                                            
 24    CONTINUE                                                         
       IF ( S .GE. SM) GO TO 28                                         
          T= WKM - WK                                                   
          WK = WKM                                                      
          DO 26 J=KP1,N                                                 
             Z(J) = Z(J) + T*A(K,J)                                     
 26       CONTINUE                                                      
 28    CONTINUE                                                         
       Z(K) = WK                                                        
 30    CONTINUE                                                         
       S= 1.D0/DASUM(N,Z,1)                                             
       CALL DSCAL(N,S,Z,1)                                              
C                                                                       
C FORM Y = L(TRANSPOSE) * W                                             
C                                                                       
      DO  40 KB = 2, N                                                  
         K = N+1-KB                                                     
         IF (K .LT. N) Z(K) = Z(K)+DDOT(N-K, A(K+1, K), 1, Z(K+1), 1)   
         IF (DABS(Z(K)).LT.BIG) GO TO 35                                
             S=1.D0/DABS(Z(K))                                          
             CALL DSCAL(N,S,Z,1)                                        
 35      CONTINUE                                                       
         L = IPVT(K)                                                    
         T = Z(L)                                                       
         Z(L) = Z(K)                                                    
         Z(K) = T                                                       
  40  CONTINUE                                                          
      S=1.D0/DASUM(N,Z,1)                                               
      CALL DSCAL(N,S,Z,1)                                               
      YNORM = 1.D0                                                      
C                                                                       
C   FORM W = L * Y                                                      
C                                                                       
       IF (N.EQ.1) GO TO46                                              
       NM1=N-1                                                          
       DO 45 K=1,NM1                                                    
          L=IPVT(K)                                                     
          T=Z(L)                                                        
          Z(L)=Z(K)                                                     
          Z(K)=T                                                        
          CALL DAXPY(N-K,T,A(K+1,K),1,Z(K+1),1)                         
          IF(DABS(Z(K)).LE.BIG) GO TO 45                                
            S=1.D0/DABS(Z(K))                                           
            CALL DSCAL(N,S,Z,1)                                         
            YNORM=S*YNORM                                               
 45     CONTINUE                                                        
       S = 1.D0/DASUM(N,Z,1)                                            
       IF (S.GT.1.D0) GO TO 46                                          
       CALL DSCAL(N,S,Z,1)                                              
       YNORM = YNORM*S                                                  
C                                                                       
C   SOLVE U * Z = W                                                     
 46    DO  50 KB = 1, N                                                 
         K = N+1-KB                                                     
         IF (DABS(Z(K)) .LE. DABS(A(K,K))) GO TO 48                     
            S=DABS(A(K,K))/DABS(Z(K))                                   
            CALL DSCAL(N,S,Z,1)                                         
            YNORM = YNORM * S                                           
 48      CONTINUE                                                       
         IF(A(K,K).NE.0.D0)Z(K) = Z(K)/A(K,K)                           
         IF (A(K,K).EQ.0.D0)Z(K)=1.D0                                   
         T = -Z(K)                                                      
         IF  (K .NE. 1) CALL DAXPY(K-1,T,A(1,K),1,Z(1),1)               
 50      CONTINUE                                                       
C    MAKE ZNORM = 1.D0                                                  
       S= 1.D0/DASUM(N,Z,1)                                             
       CALL DSCAL(N,S,Z,1)                                              
       YNORM = YNORM*S                                                  
C                                                                       
C   SET COND = ESTIMATE OF THE CONDITION NUMBER OF A                    
C                                                                       
       GREAT=D1MACH(2)                                                  
       IF (YNORM.GT.1.D0) GO TO 60                                      
       IF (ANORM.LE.YNORM*GREAT) GO TO 60                               
       COND=GREAT                                                       
       RETURN                                                           
 60    COND=ANORM/YNORM                                                 
       RETURN                                                           
       END                                                              
        SUBROUTINE DGELE(N,A,IA,B,IB,NB)                                
        INTEGER N,IA,IB,NB                                              
        DOUBLE PRECISION A(IA,N),B(IB,NB)                               
C                                                                       
C THIS SUBROUTINE SOLVES THE SYSTEM AX=B WHERE A                        
C IS A DOUBLE PRECISION GENERAL MATRIX.                                 
C                                                                       
C INPUT PARAMETERS                                                      
C     N      THE ORDER OF THE PROBLEM                                   
C     A      AN IA X N ARRAY CONTAINING THE COEFFICIENT                 
C            MATRIX                                                     
C            THE SUBROUTINE DESTROYS THE MATRIX                         
C     IA     ROW DIMENSION OF THE A ARRAY,MUST BE AT LEAST N            
C     B      AN IBXNB ARRAY WHOSE ITH COLUMN CONTAINS                   
C            THE ITH RIGHT HAND SIDE.                                   
C            THE SUBROUTINE DESTROYS THE MATRIX                         
C     IB     ROW DIMENSION OF THE B ARRAY,MUST BE AT LEAST N            
C     NB     NUMBER OF RIGHT HAND SIDES                                 
C OUTPUT PARAMETERS                                                     
C     B      SOLUTION                                                   
C                                                                       
C ERROR CONDITIONS                                                      
C    1       N LESS THAN 1      FATAL                                   
C    2       IA  LESS THAN N    FATAL                                   
C    3       IB   LESS THAN N   FATAL                                   
C    4       NB LESS THAN 1     FATAL                                   
C    10+K   NEARLY SINGULAR A OF RANK K  RECOVERABLE                    
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF(N.LT.1)CALL SETERR(12HDGELE-N.LT.1,12,1,2)                    
C      IF(NB.LT.1)CALL SETERR(13HDGELE-NB.LT.1,13,4,2)                  
C      IF(IA.LT.N)CALL SETERR(13HDGELE-IA.LT.N,13,2,2)                  
C      IF(IB.LT.N)CALL SETERR(13HDGELE-IB.LT.N,13,3,2)                  
C/7S                                                                    
       IF(N.LT.1)CALL SETERR('DGELE-N.LT.1',12,1,2)                     
       IF(NB.LT.1)CALL SETERR('DGELE-NB.LT.1',13,4,2)                   
       IF(IA.LT.N)CALL SETERR('DGELE-IA.LT.N',13,2,2)                   
       IF(IB.LT.N)CALL SETERR('DGELE-IB.LT.N',13,3,2)                   
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL DGEDC(N,A,IA,INTER(IN))                                     
       IF(NERROR(IERR).EQ.0) GO TO 20                                   
          CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(21HDGELE-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
          CALL SETERR('DGELE-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
          GO TO 200                                                     
 20    CALL DGEFS(N,A,IA,B,IB,NB,INTER(IN))                             
       CALL DGEBS(N,A,IA,B,IB,NB)                                       
       IF(NERROR(IERR).EQ.0) GO TO 200                                  
          CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(21HDGELE-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
          CALL SETERR('DGELE-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
       SUBROUTINE DGEDC(N,A,IA,INTER)                                   
       INTEGER N,IA,INTER(N)                                            
       DOUBLE PRECISION A(IA,N),EPS,D1MACH,DGENM                        
C THIS SUBROUTINE USES GAUSSIAN ELIMINATION WITH PARTIAL                
C PIVOTING TO DECOMPOSE A MATRIX A INTO P*A=L*U WHERE                   
C P IS A PERMUTATION MATRIX,L IS A LOWER UNIT TRIANGULAR                
C MATRIX, AND U IS AN UPPER TRIANGULAR MATRIX                           
C INPUT PARAMETERS                                                      
C     N      ORDER OF THE PROBLEM                                       
C     A      AN IA X N ARRAY CONTAINING THE MATRIX TO BE                
C            FACTORED                                                   
C     IA     ROW DIMENSION OF THE A ARRAY                               
C OUTPUT PARAMETERS                                                     
C     A      CONTAINS THE UPPER TRIANGULAR MATRIX U AND A               
C            PERMUTED VERSION OF THE LOWER TRIANGULAR MATRIX I-L        
C     INTER  AN INTEGER VECTOR WHOSE ITH COMPONENT RECORDS THE          
C            ITH PIVOT ROW                                              
C     EPS    DOUBLE PRECISION VARIABLE, IF THE MAGNITUDE OF THE PIVOT IS
C            LESS THAN OR EQUAL TO EPS, THE MATRIX IS                   
C            CONSIDERED SINGULAR                                        
C THE SUBROUTINES DGELU AND DGEENM ARE CALLED                           
C ERROR CONDITIONS                                                      
C      1      N IS LESS THAN 1   FATAL                                  
C      2      IA.LT.N       FATAL                                       
C      10+K   SINGULAR MATRIX OF RANK K    RECOVERABLE                  
C                                                                       
C/6S                                                                    
C       IF(N.LT.1)CALL SETERR(12HDGEDC-N.LT.1,12,1,2)                   
C       IF(IA.LT.N)CALL SETERR(13HDGEDC-IA.LT.N,13,2,2)                 
C/7S                                                                    
        IF(N.LT.1)CALL SETERR('DGEDC-N.LT.1',12,1,2)                    
        IF(IA.LT.N)CALL SETERR('DGEDC-IA.LT.N',13,2,2)                  
C/                                                                      
         CALL ENTER(1)                                                  
        EPS=D1MACH(4)*DGENM(N,A,IA)                                     
        CALL DGELU(N,A,IA,INTER,EPS)                                    
C/6S                                                                    
C       IF(NERROR(IERR).NE.0)                                           
C    1     CALL N5ERR(21HDGEDC-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
        IF(NERROR(IERR).NE.0)                                           
     1     CALL N5ERR('DGEDC-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
        CALL LEAVE                                                      
        RETURN                                                          
        END                                                             
        DOUBLE PRECISION FUNCTION DGENM(N,A,IA)                         
        DOUBLE PRECISION SUM,A(IA,1),DASUM                              
C THIS SUBROUTINE DETERMINES THE 1 NORM OF AN N X N MATRIX A            
C WHOSE ROW DIMENSION IS IA                                             
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(12HDGENM-N.LT.1,12,1,2)                
C        IF (IA.LT.N) CALL SETERR(13HDGENM-IA.LT.N,13,2,2)              
C/7S                                                                    
         IF (N.LT.1) CALL SETERR('DGENM-N.LT.1',12,1,2)                 
         IF (IA.LT.N) CALL SETERR('DGENM-IA.LT.N',13,2,2)               
C/                                                                      
        DGENM=0.0                                                       
        DO 10 I=1,N                                                     
           SUM=DASUM(N,A(1,I),1)                                        
           IF (SUM.GT.DGENM) DGENM=SUM                                  
 10      CONTINUE                                                       
         RETURN                                                         
         END                                                            
       SUBROUTINE DGELU(N,A,IA,INTER,EPS)                               
       INTEGER N,INTER(N)                                               
       DOUBLE PRECISION A(IA,N),T,EPS,X                                 
C THIS SUBROUTINE USES GAUSSIAN ELIMINATION WITH PARTIAL                
C PIVOTING TO DECOMPOSE A MATRIX A INTO P*A=L*U WHERE                   
C P IS A PERMUTATION MATRIX,L IS A LOWER UNIT TRIANGULAR                
C MATRIX, AND U IS AN UPPER TRIANGULAR MATRIX                           
C INPUT PARAMETERS                                                      
C     N      ORDER OF THE PROBLEM                                       
C     A      AN IA X N ARRAY CONTAINING THE MATRIX TO BE                
C            FACTORED                                                   
C     IA     ROW DIMENSION OF THE A ARRAY                               
C     EPS    DOUBLE PRECISION VARIABLE,IF THE MAGNITUDE OF THE PIVOT IS 
C            LESS THAN OR EQUAL TO EPS,THE MATRIX IS                    
C            CONSIDERED SINGULAR                                        
C OUTPUT PARAMETERS                                                     
C     A      CONTAINS THE UPPER TRIANGULAR MATRIX U AND A               
C            PERMUTED VERSION OF THE LOWER TRIANGULAR MATRIX I-L        
C     INTER  AN INTEGER VECTOR WHOSE ITH COMPONENT RECORDS THE          
C            ITH PIVOT ROW, WITH INTER(N)=(-1)**NUMBER OF INTERCHANGES  
C THE SUBROUTINES IDAMAX AND DSWAP ARE CALLED                           
C ERROR CONDITIONS                                                      
C      1      N IS LESS THAN 1   FATAL                                  
C      2      IA.LT.N       FATAL                                       
C      10+K   SINGULAR MATRIX OF RANK K    RECOVERABLE                  
C                                                                       
C/6S                                                                    
C       IF(N.LT.1)CALL SETERR(12HDGELU-N.LT.1,12,1,2)                   
C       IF(IA.LT.N)CALL SETERR(13HDGELU-IA.LT.N,13,2,2)                 
C/7S                                                                    
        IF(N.LT.1)CALL SETERR('DGELU-N.LT.1',12,1,2)                    
        IF(IA.LT.N)CALL SETERR('DGELU-IA.LT.N',13,2,2)                  
C/                                                                      
        CALL ENTER(1)                                                   
        IERR=0                                                          
        INTER(N)=1                                                      
        IF(N.EQ.1) GO TO 150                                            
        NM1=N-1                                                         
        DO 100 K=1,NM1                                                  
           KP1=K+1                                                      
C DETERMINE THE PIVOT FOR THE KTH TRANSFORMATION                        
           M=IDAMAX(N-K+1,A(K,K),1)+K-1                                 
           IF (K.EQ.M) GO TO 5                                          
           INTER(N) = -INTER(N)                                         
           CALL DSWAP(N-K+1,A(K,K),IA,A(M,K),IA)                        
 5         CONTINUE                                                     
C CHECK FOR NEAR SINGULARITY                                            
           IF(DABS(A(K,K)).GT.EPS) GO TO 10                             
C/6S                                                                    
C          IF (IERR.EQ.0)                                               
C    1        CALL SETERR(21HDGELU-SINGULAR MATRIX,21,9+K,1)            
C/7S                                                                    
           IF (IERR.EQ.0)                                               
     1        CALL SETERR('DGELU-SINGULAR MATRIX',21,9+K,1)             
C/                                                                      
              IERR=1                                                    
           A(K,K)=DSIGN(EPS,A(K,K))                                     
 10        INTER(K)=M                                                   
C APPLY THE TRANSFORMATION TO THE MATRIX                                
            X=-A(K,K)                                                   
           IF(X.EQ.0.D0)GO TO 100                                       
           DO 20 J=KP1,N                                                
                A(J,K)=A(J,K)/X                                         
 20        CONTINUE                                                     
           DO 50 J=KP1,N                                                
              T=A(K,J)                                                  
              IF(T.EQ.0.D0) GO TO 50                                    
              DO 40 I=KP1,N                                             
                 A(I,J)=A(I,J)+T*A(I,K)                                 
 40           CONTINUE                                                  
 50        CONTINUE                                                     
 100    CONTINUE                                                        
 150    IF (DABS(A(N,N)).GT.EPS)GO TO 160                               
C/6S                                                                    
C       IF (IERR.EQ.0)                                                  
C    1        CALL SETERR(21HDGELU-SINGULAR MATRIX, 21, 9+N, 1)         
C/7S                                                                    
        IF (IERR.EQ.0)                                                  
     1        CALL SETERR('DGELU-SINGULAR MATRIX', 21, 9+N, 1)          
C/                                                                      
           A(N,N)=DSIGN(EPS,A(N,N))                                     
 160   CONTINUE                                                         
        CALL LEAVE                                                      
        RETURN                                                          
        END                                                             
        SUBROUTINE DGEFS(N,A,IA,B,IB,NB,INTER)                          
C MNEMONIC-GENERAL FORWARD SOLVE                                        
        INTEGER N,IA,IB,NB                                              
        DOUBLE PRECISION A(IA,N),B(IB,NB),T                             
        INTEGER INTER(N)                                                
C THIS SUBROUTINE SOLVES AX=B WHERE A IS A LOWER                        
C UNIT TRIANGULAR MATRIX. IT MAY BE USE AS PART OF                      
C OF A PACKAGE FOR SOLVING AX=B WHEN A IS A GENERAL                     
C GENERAL MATRIX AND DGELU HAS BEEN USED                                
C INPUT PARAMETERS                                                      
C     N    THE ORDER OF THE PROBLEM                                     
C     A    AN IA X N ARRAY CONTAINING A UNIT LOWER TRIANGULAR           
C          MATRIX OR THE DECOMPOSITION DETERMINED IN DGELU              
C          DETERMINED IN DGELU                                          
C     IA   ROW DIMENSION OF THE A MATRIX                                
C     B    A VECTOR CONTAINING THE RIGHT HAND SIDE                      
C          IT WILL BE DESTROYED ON OUTPUT                               
C     IB   ROW DIMENSION OF THE B ARRAY,MUST BE AT LEAST N              
C     NB   NUMBER OF RIGHT HAND SIDES                                   
C     INTER AN INTEGER VECTOR CONTAINING A RECORD OF THE                
C           PERMUTATIONS PERFORMED IN DGELU                             
C OUTPUT PARAMTERS                                                      
C     B    THE SOLUTION X OF THE PROBLEM                                
C ERROR CONDITIONS                                                      
C    1      N LESS THAN 1    FATAL                                      
C    2      IA.LT.N          FATAL                                      
C    5      INTER NOT IN 1,....N      FATAL                             
C    3      IB.LT.N          FATAL                                      
C    4      NB.LT.1          FATAL                                      
C                                                                       
C/6S                                                                    
C      IF(N.LT.1) CALL SETERR(12HDGEFS-N.LT.1,12,1,2)                   
C      IF (IA.LT.N) CALL SETERR(13HDGEFS-IA.LT.N,13,2,2)                
C      IF(IB.LT.N) CALL SETERR(13HDGEFS-IB.LT.N,13,3,2)                 
C      IF(NB.LT.1) CALL SETERR(13HDGEFS-NB.LT.1,13,4,2)                 
C/7S                                                                    
       IF(N.LT.1) CALL SETERR('DGEFS-N.LT.1',12,1,2)                    
       IF (IA.LT.N) CALL SETERR('DGEFS-IA.LT.N',13,2,2)                 
       IF(IB.LT.N) CALL SETERR('DGEFS-IB.LT.N',13,3,2)                  
       IF(NB.LT.1) CALL SETERR('DGEFS-NB.LT.1',13,4,2)                  
C/                                                                      
C FORWARD SOLVE                                                         
       IF (N.EQ.1) RETURN                                               
       NM1=N-1                                                          
       DO 40 K=1,NM1                                                    
          M=INTER(K)                                                    
          IF (M.GT.0.AND.M.LE.N) GO TO 10                               
C/6S                                                                    
C         CALL SETERR(22HDGEFS-INTER NOT IN 1-N,22,5,2)                 
C/7S                                                                    
          CALL SETERR('DGEFS-INTER NOT IN 1-N',22,5,2)                  
C/                                                                      
          RETURN                                                        
 10      CONTINUE                                                       
         DO 35 I=1,NB                                                   
            T=B(M,I)                                                    
            IF (M.EQ.K) GO TO 20                                        
            B(M,I)=B(K,I)                                               
            B(K,I)=T                                                    
 20         KP1=K+1                                                     
            DO 30 J=KP1,N                                               
               B(J,I)=B(J,I)+T*A(J,K)                                   
 30         CONTINUE                                                    
 35      CONTINUE                                                       
 40    CONTINUE                                                         
       RETURN                                                           
       END                                                              
       SUBROUTINE DGEBS(N,A,IA,B,IB,NB)                                 
CMNEMONIC-GENERAL BACK SOLVE                                            
C THIS SUBROUTINE SOLVES AX=B WHERE A IS                                
C AN UPPER TRIANGULAR MATRIX                                            
C INPUT PARAMETERS                                                      
C    N    ORDER OF THE PROBLEM                                          
C    A    AN IA X N ARRAY CONTAINING THE MATRIX A                       
C    IA   ROW DIMENSION OF THE A MATRIX                                 
C    B    AN IB X NB MATRIX CONTAINING THE RIGHT HAND SIDES             
C         DESTROYED ON OUTPUT                                           
C    IB   ROW DIMENSION OF THE B ARRAY, MUST BE AT LEAST N              
C    NB   NUMBER OF RIGHT HAND SIDES                                    
C OUTPUT PARAMTERS                                                      
C   B    THE SOLUTION X                                                 
C THIS SUBROUTINE USES DDOT                                             
C ERROR CONDITIONS                                                      
C  1      N LESS THAN 1     FATAL                                       
C  2      IA .LT.N          FATAL                                       
C  3      IB.LT.N           FATAL                                       
C  4      NB.LT.1           FATAL                                       
C  10+K   SINGULAR MATRIX OF RANK K      RECOVERABLE                    
C EXTRA STORAGE ALLOCATED-NONE                                          
       INTEGER N,IA,IB,NB                                               
       DOUBLE PRECISION A(IA,N),B(IB,NB),T                              
       DOUBLE PRECISION DDOT                                            
C/6S                                                                    
C      IF (N.LT.1) CALL SETERR(12HDGEBS-N.LT.1,12,1,2)                  
C      IF (IA.LT.N) CALL SETERR(13HDGEBS-IA.LT.N,13,2,2)                
C      IF (IB.LT.N) CALL SETERR(13HDGEBS-IB.LT.N,13,3,2)                
C      IF (NB.LT.1) CALL SETERR(13HDGEBS-NB.LT.1,13,4,2)                
C/7S                                                                    
       IF (N.LT.1) CALL SETERR('DGEBS-N.LT.1',12,1,2)                   
       IF (IA.LT.N) CALL SETERR('DGEBS-IA.LT.N',13,2,2)                 
       IF (IB.LT.N) CALL SETERR('DGEBS-IB.LT.N',13,3,2)                 
       IF (NB.LT.1) CALL SETERR('DGEBS-NB.LT.1',13,4,2)                 
C/                                                                      
        CALL ENTER(1)                                                   
C DO THE BACK SOLVE                                                     
 50    NP1=N+1                                                          
       DO 70 KB=1,N                                                     
          K=NP1-KB                                                      
          DO 65 I=1,NB                                                  
          T=B(K,I)                                                      
          IF(K.NE.N)T=T-DDOT(KB-1,A(K,K+1),IA,B(K+1,I),1)               
          IF(A(K,K).NE.0.0) GO TO 60                                    
C/6S                                                                    
C         CALL SETERR(38HDGEBS-DIVISION BY ZERO-SINGULAR MATRIX,        
C    1    38,9+K,1)                                                     
C/7S                                                                    
          CALL SETERR('DGEBS-DIVISION BY ZERO-SINGULAR MATRIX',         
     1    38,9+K,1)                                                     
C/                                                                      
          GO TO 75                                                      
 60       B(K,I)=T/A(K,K)                                               
 65       CONTINUE                                                      
 70     CONTINUE                                                        
 75     CALL LEAVE                                                      
        RETURN                                                          
        END                                                             
       SUBROUTINE DGEML(N,A,IA,X,B)                                     
C GENERAL MATRIX BY VECTOR MULTIPLICATION                               
C                                                                       
         DOUBLE PRECISION A(IA,N),X(N),B(N)                             
C/6S                                                                    
C        IF(N.LT.1) CALL SETERR(12HDGEML-N.LT.1,12,1,2)                 
C        IF (IA.LT.N) CALL SETERR(13HDGEML-IA.LT.N,13,2,2)              
C/7S                                                                    
         IF(N.LT.1) CALL SETERR('DGEML-N.LT.1',12,1,2)                  
         IF (IA.LT.N) CALL SETERR('DGEML-IA.LT.N',13,2,2)               
C/                                                                      
         DO 10 I=1,N                                                    
             B(I)=0.D0                                                  
  10     CONTINUE                                                       
         DO 20 I=1,N                                                    
            CALL DAXPY(N,X(I),A(1,I),1,B,1)                             
 20      CONTINUE                                                       
         RETURN                                                         
         END                                                            
        SUBROUTINE CGESS(N,A,IA,B,IB,NB,COND)                           
        INTEGER N,IB,NB                                                 
        COMPLEX A(IA,N),B(IB,NB)                                        
        REAL COND                                                       
C                                                                       
C THIS SUBROUTINE SOLVES THE SYSTEM AX=B WHERE A                        
C IS A COMPLEX GENERAL MATRIX. IT ALSO RETURNS AN ESTIMATE              
C OF THE CONDITION NUMBER OF A.                                         
C                                                                       
C INPUT PARAMETERS                                                      
C     N      THE ORDER OF THE PROBLEM                                   
C     A      AN IA X N ARRAY CONTAINING THE COEFFICIENT                 
C            MATRIX                                                     
C            THE SUBROUTINE DESTROYS THE MATRIX                         
C     IA     ROW DIMENSION OF THE A ARRAY,MUST BE AT LEAST N            
C     B      AN IBXNB ARRAY WHOSE ITH COLUMN CONTAINS                   
C            THE ITH RIGHT HAND SIDE.                                   
C            THE SUBROUTINE DESTROYS THE MATRIX                         
C     IB     ROW DIMENSION OF THE B ARRAY,MUST BE AT LEAST N            
C     NB     NUMBER OF RIGHT HAND SIDES                                 
C OUTPUT PARAMETERS                                                     
C     B      SOLUTION                                                   
C     COND   ESTIMATE OF CONDITION NUMBER OF THE MATRIX A               
C                                                                       
C ERROR CONDITIONS                                                      
C    1       N LESS THAN 1      FATAL                                   
C    2       IA  LESS THAN N    FATAL                                   
C    3       IB   LESS THAN N   FATAL                                   
C    4       NB LESS THAN 1     FATAL                                   
C    10+K   NEARLY SINGULAR A OF RANK K  RECOVERABLE                    
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF(N.LT.1)CALL SETERR(12HCGESS-N.LT.1,12,1,2)                    
C      IF(NB.LT.1)CALL SETERR(13HCGESS-NB.LT.1,13,4,2)                  
C      IF(IA.LT.N)CALL SETERR(13HCGESS-IA.LT.N,13,2,2)                  
C      IF(IB.LT.N)CALL SETERR(13HCGESS-IB.LT.N,13,3,2)                  
C/7S                                                                    
       IF(N.LT.1)CALL SETERR('CGESS-N.LT.1',12,1,2)                     
       IF(NB.LT.1)CALL SETERR('CGESS-NB.LT.1',13,4,2)                   
       IF(IA.LT.N)CALL SETERR('CGESS-IA.LT.N',13,2,2)                   
       IF(IB.LT.N)CALL SETERR('CGESS-IB.LT.N',13,3,2)                   
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL CGECE(N,A,IA,INTER(IN),COND)                                
       IF(NERROR(IERR).EQ.0) GO TO 20                                   
          CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(21HCGESS-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
          CALL SETERR('CGESS-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
          GO TO 200                                                     
 20    CALL CGEFS(N,A,IA,B,IB,NB,INTER(IN))                             
       CALL CGEBS(N,A,IA,B,IB,NB)                                       
       IF(NERROR(IERR).EQ.0) GO TO 200                                  
          CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(21HCGESS-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
          CALL SETERR('CGESS-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
      SUBROUTINE CGECE(N, A, IA, INTER, COND)                           
      INTEGER IA, N, INTER(N)                                           
      COMPLEX A(IA,N)                                                   
      REAL COND                                                         
      COMMON /CSTAK / D                                                 
      DOUBLE PRECISION D(500)                                           
      INTEGER  NERR, ISTKGT, NERROR, I,  IWORK                          
      REAL AMAX1,  CGENM, SNORM, R1MACH                                 
      COMPLEX R(500)                                                    
      EQUIVALENCE (R(1), D(1))                                          
C THIS SUBROUTINE CALLS THE DECOMPOSITION ROUTINE AND DETERMINES        
C AN ESTIMATE OF THE CONDITION NUMBER OF A COMPLEX GENERAL MATRIX       
C INPUT PARAMETERS                                                      
C    N        ORDER OF THE PROBLEM                                      
C    A        MATRIX WHOSE CONDITION NUMBER IS REQUIRED                 
C    IA       ROW DIMENSION OF A                                        
C OUTPUT PARAMETERS                                                     
C    A        CONTAINS THE LU DECOMPOSITION OF THE A MATRIX             
C    INTER    PIVOT VECTOR PRODUCED BY THE DECOMPOSITION                
C    COND     AN ESTIMATE OF THE CONDITION NUMBER OF THE MATRIX A       
C EXTRA STORAGE ALLOCATED : N COMPLEX LOCATIONS                         
C THE SUBROUTINES CGENM, CGELU, AND CG4ECE ARE CALLED                   
C ERROR CONDITIONS-                                                     
C    1     N.LT.1       FATAL                                           
C    2    IA.LT.N       FATAL                                           
      CALL ENTER(1)                                                     
C/6S                                                                    
C     IF (N .LT. 1) CALL SETERR(13HCGECE-N.LT.1 , 13, 1, 2)             
C     IF (IA .LT. N) CALL SETERR(13HCGECE-IA.LT.N, 13, 2, 2)            
C/7S                                                                    
      IF (N .LT. 1) CALL SETERR('CGECE-N.LT.1 ', 13, 1, 2)              
      IF (IA .LT. N) CALL SETERR('CGECE-IA.LT.N', 13, 2, 2)             
C/                                                                      
      SNORM=CGENM(N,A,IA)                                               
      CALL CGELU(N,A,IA,INTER,0.0)                                      
      IF (NERROR(NERR) .EQ. 0) GOTO 2                                   
         COND = R1MACH(2)                                               
C/6S                                                                    
C        CALL N5ERR(21HCGECE-SINGULAR MATRIX,21,NERR,1)                 
C/7S                                                                    
         CALL N5ERR('CGECE-SINGULAR MATRIX',21,NERR,1)                  
C/                                                                      
         GOTO  3                                                        
   2     IWORK = ISTKGT(N,5)                                            
         CALL CG4ECE(N,A,IA,SNORM,COND,INTER,R(IWORK))                  
   3  CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE CG4ECE(N,A,IA,ANORM,COND,IPVT,Z)                       
      INTEGER IA,N,IPVT(N)                                              
      COMPLEX A(IA,N),Z(N)                                              
      REAL ANORM,COND                                                   
      INTEGER KB,  KP1,  J, K                                           
      INTEGER L                                                         
      REAL  GREAT, SM,    CABS1                                         
      COMPLEX EK                                                        
      REAL S,   SCASUM, YNORM                                           
      COMPLEX WK,WKM,T,CDOTC                                            
      REAL R1MACH,BIG                                                   
      COMPLEX CSIGN1, Z1,Z2                                             
      CSIGN1(Z1,Z2)=CABS1(Z1)*(Z2/CABS1(Z2))                            
C THIS SUBROUTINE DETERMINES A LOWER BOUND ON THE CONDITION NUMBER      
C OF THE DECOMPOSED MATRIX A VIA THE ALGORITHM USED IN LINPACK          
C                                                                       
C                                                                       
C SOLVE A(TRANSPOSE)W = E                                               
C WHERE E IS CHOSEN TO CAUSE MAXIMUM LOCAL GROWTH                       
C IN THE COMPONENTS OF W                                                
C     SOLVE CTRANS(U)*W = E                                             
C                                                                       
 1    EK = (1.0E0,0.0E0)                                                
      BIG=(R1MACH(2))/FLOAT(N)                                          
      DO 20 J = 1, N                                                    
         Z(J) = (0.0E0,0.0E0)                                           
   20 CONTINUE                                                          
      DO 100 K = 1, N                                                   
         IF (CABS1(Z(K)) .NE. 0.0E0) EK = CSIGN1(EK,-Z(K))              
         IF (CABS1(EK-Z(K)) .LE. CABS1(A(K,K))) GO TO 30                
            S = CABS1(A(K,K))/CABS1(EK-Z(K))                            
            CALL CSSCAL(N,S,Z,1)                                        
            EK = CMPLX(S,0.0E0)*EK                                      
   30    CONTINUE                                                       
         WK = EK - Z(K)                                                 
         WKM = -EK - Z(K)                                               
         S = CABS1(WK)                                                  
         SM = CABS1(WKM)                                                
         IF (CABS1(A(K,K)) .EQ. 0.0E0) GO TO 40                         
            WK = WK/CONJG(A(K,K))                                       
            WKM = WKM/CONJG(A(K,K))                                     
         GO TO 50                                                       
   40    CONTINUE                                                       
            WK = (1.0E0,0.0E0)                                          
            WKM = (1.0E0,0.0E0)                                         
   50    CONTINUE                                                       
         KP1 = K + 1                                                    
         IF (KP1 .GT. N) GO TO 90                                       
            DO 60 J = KP1, N                                            
               SM = SM + CABS1(Z(J)+WKM*CONJG(A(K,J)))                  
               Z(J) = Z(J) + WK*CONJG(A(K,J))                           
               S = S + CABS1(Z(J))                                      
   60       CONTINUE                                                    
            IF (S .GE. SM) GO TO 80                                     
               T = WKM - WK                                             
               WK = WKM                                                 
               DO 70 J = KP1, N                                         
                  Z(J) = Z(J) + T*CONJG(A(K,J))                         
   70          CONTINUE                                                 
   80       CONTINUE                                                    
   90    CONTINUE                                                       
         Z(K) = WK                                                      
  100 CONTINUE                                                          
      S = 1.0E0/SCASUM(N,Z,1)                                           
      CALL CSSCAL(N,S,Z,1)                                              
C                                                                       
C     SOLVE CTRANS(L)*Y = W                                             
C                                                                       
      NM1=N-1                                                           
      IF (N.EQ.1) GO TO 121                                             
      DO 120 KB = 1, NM1                                                
         K = N  - KB                                                    
         Z(K) = Z(K) + CDOTC(N-K,A(K+1,K),1,Z(K+1),1)                   
         IF (CABS1(Z(K)) .LE. BIG) GO TO 110                            
            S = 1.0E0/CABS1(Z(K))                                       
            CALL CSSCAL(N,S,Z,1)                                        
  110    CONTINUE                                                       
         L = IPVT(K)                                                    
         T = Z(L)                                                       
         Z(L) = Z(K)                                                    
         Z(K) = T                                                       
  120 CONTINUE                                                          
      S = 1.0E0/SCASUM(N,Z,1)                                           
      CALL CSSCAL(N,S,Z,1)                                              
C                                                                       
 121  YNORM = 1.0E0                                                     
C                                                                       
C     SOLVE L*V = Y                                                     
C                                                                       
      IF (N.EQ.1) GO TO 141                                             
      DO 140 K = 1, NM1                                                 
         L = IPVT(K)                                                    
         T = Z(L)                                                       
         Z(L) = Z(K)                                                    
         Z(K) = T                                                       
         CALL CAXPY(N-K,T,A(K+1,K),1,Z(K+1),1)                          
         IF (CABS1(Z(K)) .LE. BIG) GO TO 130                            
            S = 1.0E0/CABS1(Z(K))                                       
            CALL CSSCAL(N,S,Z,1)                                        
            YNORM = S*YNORM                                             
  130    CONTINUE                                                       
  140 CONTINUE                                                          
      S = 1.0E0/SCASUM(N,Z,1)                                           
      CALL CSSCAL(N,S,Z,1)                                              
      YNORM = S*YNORM                                                   
C                                                                       
C     SOLVE  U*Z = V                                                    
C                                                                       
 141  DO 160 KB = 1, N                                                  
         K = N + 1 - KB                                                 
         IF (CABS1(Z(K)) .LE. CABS1(A(K,K))) GO TO 150                  
            S = CABS1(A(K,K))/CABS1(Z(K))                               
            CALL CSSCAL(N,S,Z,1)                                        
            YNORM = S*YNORM                                             
  150    CONTINUE                                                       
         IF (CABS1(A(K,K)) .NE. 0.0E0) Z(K) = Z(K)/A(K,K)               
         IF (CABS1(A(K,K)) .EQ. 0.0E0) Z(K) = (1.0E0,0.0E0)             
         T = -Z(K)                                                      
         CALL CAXPY(K-1,T,A(1,K),1,Z(1),1)                              
  160 CONTINUE                                                          
C     MAKE ZNORM = 1.0                                                  
      S = 1.0E0/SCASUM(N,Z,1)                                           
      CALL CSSCAL(N,S,Z,1)                                              
      YNORM = S*YNORM                                                   
C                                                                       
C                                                                       
C SET COND = ESTIMATE OF THE CONDITION NUMBER OF A                      
C                                                                       
        GREAT=R1MACH(2)                                                 
        IF (YNORM.GT.1.0) GO TO 170                                     
        IF (ANORM.NE.0.0.AND.ANORM.LE.YNORM*GREAT) GO TO 170            
            COND=GREAT                                                  
            RETURN                                                      
 170    COND=ANORM/YNORM                                                
        RETURN                                                          
        END                                                             
        SUBROUTINE CGELE(N,A,IA,B,IB,NB)                                
        INTEGER N,IA,IB,NB                                              
        COMPLEX A(IA,N),B(IB,NB)                                        
C                                                                       
C THIS SUBROUTINE SOLVES THE SYSTEM AX=B WHERE A                        
C IS A COMPLEX GENERAL MATRIX.                                          
C                                                                       
C INPUT PARAMETERS                                                      
C     N      THE ORDER OF THE PROBLEM                                   
C     A      AN IA X N ARRAY CONTAINING THE COEFFICIENT                 
C            MATRIX                                                     
C            THE SUBROUTINE DESTROYS THE MATRIX                         
C     IA     ROW DIMENSION OF THE A ARRAY,MUST BE AT LEAST N            
C     B      AN IBXNB ARRAY WHOSE ITH COLUMN CONTAINS                   
C            THE ITH RIGHT HAND SIDE.                                   
C            THE SUBROUTINE DESTROYS THE MATRIX                         
C     IB     ROW DIMENSION OF THE B ARRAY,MUST BE AT LEAST N            
C     NB     NUMBER OF RIGHT HAND SIDES                                 
C OUTPUT PARAMETERS                                                     
C     B      SOLUTION                                                   
C                                                                       
C ERROR CONDITIONS                                                      
C    1       N LESS THAN 1      FATAL                                   
C    2       IA  LESS THAN N    FATAL                                   
C    3       IB   LESS THAN N   FATAL                                   
C    4       NB LESS THAN 1     FATAL                                   
C    10+K   NEARLY SINGULAR A OF RANK K  RECOVERABLE                    
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF(N.LT.1)CALL SETERR(12HCGELE-N.LT.1,12,1,2)                    
C      IF(NB.LT.1)CALL SETERR(13HCGELE-NB.LT.1,13,4,2)                  
C      IF(IA.LT.N)CALL SETERR(13HCGELE-IA.LT.N,13,2,2)                  
C      IF(IB.LT.N)CALL SETERR(13HCGELE-IB.LT.N,13,3,2)                  
C/7S                                                                    
       IF(N.LT.1)CALL SETERR('CGELE-N.LT.1',12,1,2)                     
       IF(NB.LT.1)CALL SETERR('CGELE-NB.LT.1',13,4,2)                   
       IF(IA.LT.N)CALL SETERR('CGELE-IA.LT.N',13,2,2)                   
       IF(IB.LT.N)CALL SETERR('CGELE-IB.LT.N',13,3,2)                   
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL CGEDC(N,A,IA,INTER(IN))                                     
       IF(NERROR(IERR).EQ.0) GO TO 20                                   
          CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(21HCGELE-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
          CALL SETERR('CGELE-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
          GO TO 200                                                     
 20    CALL CGEFS(N,A,IA,B,IB,NB,INTER(IN))                             
       CALL CGEBS(N,A,IA,B,IB,NB)                                       
       IF(NERROR(IERR).EQ.0) GO TO 200                                  
          CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(21HCGELE-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
          CALL SETERR('CGELE-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
       SUBROUTINE CGEDC(N,A,IA,INTER)                                   
       INTEGER N,IA,INTER(N)                                            
       COMPLEX A(IA,N)                                                  
       REAL EPS                                                         
C THIS SUBROUTINE USES GAUSSIAN ELIMINATION WITH PARTIAL                
C PIVOTING TO DECOMPOSE A MATRIX A INTO P*A=L*U WHERE                   
C P IS A PERMUTATION MATRIX,L IS A LOWER UNIT TRIANGULAR                
C MATRIX, AND U IS AN UPPER TRIANGULAR MATRIX                           
C INPUT PARAMETERS                                                      
C     N      ORDER OF THE PROBLEM                                       
C     A      AN IA X N ARRAY CONTAINING THE MATRIX TO BE                
C            FACTORED                                                   
C     IA     ROW DIMENSION OF THE A ARRAY                               
C OUTPUT PARAMETERS                                                     
C     A      CONTAINS THE UPPER TRIANGULAR MATRIX U AND A               
C            PERMUTED VERSION OF THE LOWER TRIANGULAR MATRIX I-L        
C     INTER  AN INTEGER VECTOR WHOSE ITH COMPONENT RECORDS THE          
C            ITH PIVOT ROW                                              
C     EPS    REAL VARIABLE, IF THE MAGNITUDE OF THE PIVOT IS            
C            LESS THAN OR EQUAL TO EPS, THE MATRIX IS                   
C            CONSIDERED SINGULAR                                        
C THE SUBROUTINES CGELU AND CGENMENM ARE CALLED                         
C ERROR CONDITIONS                                                      
C      1      N IS LESS THAN 1   FATAL                                  
C      2      IA.LT.N       FATAL                                       
C      10+K   SINGULAR MATRIX OF RANK K    RECOVERABLE                  
C                                                                       
C/6S                                                                    
C       IF(N.LT.1)CALL SETERR(12HCGEDC-N.LT.1,12,1,2)                   
C       IF(IA.LT.N)CALL SETERR(13HCGEDC-IA.LT.N,13,2,2)                 
C/7S                                                                    
        IF(N.LT.1)CALL SETERR('CGEDC-N.LT.1',12,1,2)                    
        IF(IA.LT.N)CALL SETERR('CGEDC-IA.LT.N',13,2,2)                  
C/                                                                      
         CALL ENTER(1)                                                  
        EPS=R1MACH(4)*CGENM(N,A,IA)                                     
        CALL CGELU(N,A,IA,INTER,EPS)                                    
C/6S                                                                    
C       IF(NERROR(IERR).NE.0)                                           
C    1     CALL N5ERR(21HCGEDC-SINGULAR MATRIX,21,IERR,1)               
C/7S                                                                    
        IF(NERROR(IERR).NE.0)                                           
     1     CALL N5ERR('CGEDC-SINGULAR MATRIX',21,IERR,1)                
C/                                                                      
        CALL LEAVE                                                      
        RETURN                                                          
        END                                                             
        REAL FUNCTION CGENM(N,A,IA)                                     
        REAL SUM                                                        
        COMPLEX A(IA,1)                                                 
C THIS SUBROUTINE DETERMINES THE 1 NORM OF A MATRIX                     
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(12HCGENM-N.LT.1,12,1,2)                
C        IF (IA.LT.N)CALL SETERR(13HCGENM-IA.LT.N,13,2,2)               
C/7S                                                                    
         IF (N.LT.1) CALL SETERR('CGENM-N.LT.1',12,1,2)                 
         IF (IA.LT.N)CALL SETERR('CGENM-IA.LT.N',13,2,2)                
C/                                                                      
        CGENM=0.0                                                       
        DO 10 I=1,N                                                     
           SUM=0.0                                                      
           DO 5 J=1,N                                                   
              SUM=SUM+CABS(A(J,I))                                      
 5         CONTINUE                                                     
           IF (SUM.GT.CGENM) CGENM=SUM                                  
 10      CONTINUE                                                       
         RETURN                                                         
         END                                                            
       SUBROUTINE CGELU(N,A,IA,INTER,EPS)                               
       INTEGER N,INTER(N)                                               
       COMPLEX A(IA,N),T,X                                              
       REAL EPS                                                         
C THIS SUBROUTINE USES GAUSSIAN ELIMINATION WITH PARTIAL                
C PIVOTING TO DECOMPOSE A MATRIX A INTO P*A=L*U WHERE                   
C P IS A PERMUTATION MATRIX,L IS A LOWER UNIT TRIANGULAR                
C MATRIX, AND U IS AN UPPER TRIANGULAR MATRIX                           
C INPUT PARAMETERS                                                      
C     N      ORDER OF THE PROBLEM                                       
C     A      AN IA X N ARRAY CONTAINING THE MATRIX TO BE                
C            FACTORED                                                   
C     IA     ROW DIMENSION OF THE A ARRAY                               
C     EPS    REAL VARIABLE,IF THE MAGNITUDE OF THE PIVOT IS             
C            LESS THAN OR EQUAL TO EPS,THE MATRIX IS                    
C            CONSIDERED SINGULAR                                        
C OUTPUT PARAMETERS                                                     
C     A      CONTAINS THE UPPER TRIANGULAR MATRIX U AND A               
C            PERMUTED VERSION OF THE LOWER TRIANGULAR MATRIX I-L        
C     INTER  AN INTEGER VECTOR WHOSE ITH COMPONENT RECORDS THE          
C            ITH PIVOT ROW, WITH INTER(N)=(-1)**NUMBER OF INTERCHANGES  
C THE SUBROUTINES ICAMAX,CSCAL AND CSWAP ARE CALLED                     
C ERROR CONDITIONS                                                      
C      1      N IS LESS THAN 1   FATAL                                  
C      2      IA.LT.N       FATAL                                       
C      10+K   SINGULAR MATRIX OF RANK K    RECOVERABLE                  
C                                                                       
C/6S                                                                    
C       IF(N.LT.1)CALL SETERR(12HCGELU-N.LT.1,12,1,2)                   
C       IF(IA.LT.N)CALL SETERR(13HCGELU-IA.LT.N,13,2,2)                 
C/7S                                                                    
        IF(N.LT.1)CALL SETERR('CGELU-N.LT.1',12,1,2)                    
        IF(IA.LT.N)CALL SETERR('CGELU-IA.LT.N',13,2,2)                  
C/                                                                      
        CALL ENTER(1)                                                   
        INTER(N)=1                                                      
        NM1=N-1                                                         
        IERR=0                                                          
        DO 100 K=1,N                                                    
           KP1=K+1                                                      
C DETERMINE THE PIVOT FOR THE KTH TRANSFORMATION                        
           M=ICAMAX(N-K+1,A(K,K),1)+K-1                                 
           IF (K.EQ.M) GO TO 5                                          
           INTER(N) = -INTER(N)                                         
           CALL CSWAP(N-K+1,A(K,K),IA,A(M,K),IA)                        
 5         CONTINUE                                                     
C CHECK FOR NEAR SINGULARITY                                            
           IF(CABS1(A(K,K)).GT.EPS) GO TO 10                            
              A(K,K)=CMPLX(EPS,0.0)                                     
C/6S                                                                    
C             IF(IERR.EQ.0)                                             
C    1         CALL SETERR(21HCGELU-SINGULAR MATRIX,21,9+K,1)           
C/7S                                                                    
              IF(IERR.EQ.0)                                             
     1         CALL SETERR('CGELU-SINGULAR MATRIX',21,9+K,1)            
C/                                                                      
              IERR=1                                                    
 10         IF (K.EQ.N) GO TO 100                                       
           INTER(K)=M                                                   
C APPLY THE TRANSFORMATION TO THE MATRIX                                
            X=-A(K,K)                                                   
            IF (CABS1(X).EQ.0.0) GO TO 100                              
           DO 20 J=KP1,N                                                
              A(J,K)=A(J,K)/X                                           
 20        CONTINUE                                                     
           DO 50 J=KP1,N                                                
              T=A(K,J)                                                  
              DO 40 I=KP1,N                                             
                 A(I,J)=A(I,J)+T*A(I,K)                                 
 40           CONTINUE                                                  
 50        CONTINUE                                                     
 100    CONTINUE                                                        
        CALL LEAVE                                                      
        RETURN                                                          
        END                                                             
        SUBROUTINE CGEFS(N,A,IA,B,IB,NB,INTER)                          
C MNEMONIC-GENERAL FORWARD SOLVE                                        
        INTEGER N,IA,IB,NB                                              
        COMPLEX A(IA,N),B(IB,NB),T                                      
        INTEGER INTER(N)                                                
C THIS SUBROUTINE SOLVES AX=B WHERE A IS A LOWER                        
C UNIT TRIANGULAR MATRIX. IT MAY BE USE AS PART OF                      
C OF A PACKAGE FOR SOLVING AX=B WHEN A IS A CGENERAL                    
C CGENERAL MATRIX AND GELU HAS BEEN USED                                
C INPUT PARAMETERS                                                      
C     N    THE ORDER OF THE PROBLEM                                     
C     A    AN IA X N ARRAY CONTAINING A UNIT LOWER TRIANGULAR           
C          MATRIX OR THE DECOMPOSITION DETERMINED IN CGELU              
C          DETERMINED IN CGELU                                          
C     IA   ROW DIMENSION OF THE A MATRIX                                
C     B    A VECTOR CONTAINING THE RIGHT HAND SIDE                      
C          IT WILL BE DESTROYED ON OUTPUT                               
C     IB   ROW DIMENSION OF THE B ARRAY,MUST BE AT LEAST N              
C     NB   NUMBER OF RIGHT HAND SIDES                                   
C     INTER AN INTEGER VECTOR CONTAINING A RECORD OF THE                
C           PERMUTATIONS PERFORMED IN CGELU                             
C OUTPUT PARAMTERS                                                      
C     B    THE SOLUTION X OF THE PROBLEM                                
C ERROR CONDITIONS                                                      
C    1      N LESS THAN 1    FATAL                                      
C    2      IA.LT.N          FATAL                                      
C    5      INTER NOT IN 1,....N      FATAL                             
C    3      IB.LT.N          FATAL                                      
C    4      NB.LT.1          FATAL                                      
C                                                                       
C/6S                                                                    
C      IF(N.LT.1) CALL SETERR(12HCGEFS-N.LT.1,12,1,2)                   
C      IF (IA.LT.N) CALL SETERR(13HCGEFS-IA.LT.N,13,2,2)                
C      IF(IB.LT.N) CALL SETERR(13HCGEFS-IB.LT.N,13,3,2)                 
C      IF(NB.LT.1) CALL SETERR(13HCGEFS-NB.LT.1,13,4,2)                 
C/7S                                                                    
       IF(N.LT.1) CALL SETERR('CGEFS-N.LT.1',12,1,2)                    
       IF (IA.LT.N) CALL SETERR('CGEFS-IA.LT.N',13,2,2)                 
       IF(IB.LT.N) CALL SETERR('CGEFS-IB.LT.N',13,3,2)                  
       IF(NB.LT.1) CALL SETERR('CGEFS-NB.LT.1',13,4,2)                  
C/                                                                      
C FORWARD SOLVE                                                         
       IF (N.EQ.1) RETURN                                               
       NM1=N-1                                                          
       DO 40 K=1,NM1                                                    
          M=INTER(K)                                                    
          IF (M.GT.0.AND.M.LE.N) GO TO 10                               
C/6S                                                                    
C         CALL SETERR(22HCGEFS-INTER NOT IN 1-N,22,5,2)                 
C/7S                                                                    
          CALL SETERR('CGEFS-INTER NOT IN 1-N',22,5,2)                  
C/                                                                      
          RETURN                                                        
 10      CONTINUE                                                       
         DO 35 I=1,NB                                                   
            T=B(M,I)                                                    
            IF (M.EQ.K) GO TO 20                                        
            B(M,I)=B(K,I)                                               
            B(K,I)=T                                                    
 20         KP1=K+1                                                     
            DO 30 J=KP1,N                                               
               B(J,I)=B(J,I)+T*A(J,K)                                   
 30         CONTINUE                                                    
 35      CONTINUE                                                       
 40    CONTINUE                                                         
       RETURN                                                           
       END                                                              
       SUBROUTINE CGEBS(N,A,IA,B,IB,NB)                                 
CMNEMONIC-GENERAL BACK SOLVE                                            
C THIS SUBROUTINE SOLVES AX=B WHERE A IS                                
C AN UPPER TRIANGULAR MATRIX                                            
C INPUT PARAMETERS                                                      
C    N    ORDER OF THE PROBLEM                                          
C    A    AN IA X N ARRAY CONTAINING THE MATRIX A                       
C    IA   ROW DIMENSION OF THE A MATRIX                                 
C    B    AN IB X NB MATRIX CONTAINING THE RIGHT HAND SIDES             
C         DESTROYED ON OUTPUT                                           
C    IB   ROW DIMENSION OF THE B ARRAY, MUST BE AT LEAST N              
C    NB   NUMBER OF RIGHT HAND SIDES                                    
C OUTPUT PARAMTERS                                                      
C   B    THE SOLUTION X                                                 
C THIS SUBROUTINE USES CDOTU                                            
C ERROR CONDITIONS                                                      
C  1      N LESS THAN 1     FATAL                                       
C  2      IA .LT.N          FATAL                                       
C  3      IB.LT.N           FATAL                                       
C  4      NB.LT.1           FATAL                                       
C  10+K   SINGULAR MATRIX OF RANK K      RECOVERABLE                    
C EXTRA STORAGE ALLOCATED-NONE                                          
       INTEGER N,IA,IB,NB                                               
       COMPLEX A(IA,N),B(IB,NB),T                                       
       COMPLEX CDOTU                                                    
C/6S                                                                    
C      IF (N.LT.1) CALL SETERR(12HCGEBS-N.LT.1,12,1,2)                  
C      IF (IA.LT.N) CALL SETERR(13HCGEBS-IA.LT.N,13,2,2)                
C      IF (IB.LT.N) CALL SETERR(13HCGEBS-IB.LT.N,13,3,2)                
C      IF (NB.LT.1) CALL SETERR(13HCGEBS-NB.LT.1,13,4,2)                
C/7S                                                                    
       IF (N.LT.1) CALL SETERR('CGEBS-N.LT.1',12,1,2)                   
       IF (IA.LT.N) CALL SETERR('CGEBS-IA.LT.N',13,2,2)                 
       IF (IB.LT.N) CALL SETERR('CGEBS-IB.LT.N',13,3,2)                 
       IF (NB.LT.1) CALL SETERR('CGEBS-NB.LT.1',13,4,2)                 
C/                                                                      
        CALL ENTER(1)                                                   
C DO THE BACK SOLVE                                                     
 50    NP1=N+1                                                          
       DO 70 KB=1,N                                                     
          K=NP1-KB                                                      
          DO 65 I=1,NB                                                  
          T=B(K,I)                                                      
          IF(K.NE.N)T=T-CDOTU(KB-1,A(K,K+1),IA,B(K+1,I),1)              
          IF(CABS1(A(K,K)).NE.0.0) GO TO 60                             
C/6S                                                                    
C         CALL SETERR(38HCGEBS-DIVISION BY ZERO-SINGULAR MATRIX,        
C    1    38,9+K,1)                                                     
C/7S                                                                    
          CALL SETERR('CGEBS-DIVISION BY ZERO-SINGULAR MATRIX',         
     1    38,9+K,1)                                                     
C/                                                                      
          GO TO 75                                                      
 60       B(K,I)=T/A(K,K)                                               
 65       CONTINUE                                                      
 70     CONTINUE                                                        
 75     CALL LEAVE                                                      
        RETURN                                                          
        END                                                             
       SUBROUTINE CGEML(N,A,IA,X,B)                                     
C GENERAL MATRIX BY VECTOR MULTIPLICATION                               
C                                                                       
         COMPLEX A(IA,N),X(N),B(N)                                      
C/6S                                                                    
C        IF(N.LT.1) CALL SETERR(12HCGEML-N.LT.1,12,1,2)                 
C        IF (IA.LT.N) CALL SETERR(13HCGEML-IA.LT.N,13,2,2)              
C/7S                                                                    
         IF(N.LT.1) CALL SETERR('CGEML-N.LT.1',12,1,2)                  
         IF (IA.LT.N) CALL SETERR('CGEML-IA.LT.N',13,2,2)               
C/                                                                      
         DO 10 I=1,N                                                    
             B(I)=(0.0,0.0)                                             
  10     CONTINUE                                                       
         DO 20 I=1,N                                                    
            CALL CAXPY(N,X(I),A(1,I),1,B,1)                             
 20      CONTINUE                                                       
         RETURN                                                         
         END                                                            
       SUBROUTINE  SYSS(N,A,B,IB,NB,COND)                               
C MNEMONIC-REAL SYMMETRIC SYSTEM SOLVER                                 
         INTEGER N,IB,NB                                                
        REAL A(N),B(IB,NB)                                              
C                                                                       
C THIS SUBROUTINE SOLVES THE PROBLEM AX=B WHERE                         
C A IS SYMMETRIC MATRIX,WHICH MAY BE INDEFINITE                         
C BUT NOT SINGULAR                                                      
C AN ESTIMATE OF THE CONDITION NUMBER IS ALSO GIVEN                     
C                                                                       
C INPUT PARAMETERS                                                      
C N       ORDER OF THE PROBLEM                                          
C A      AN N X(N+1)/2 VECTOR CONTAINING THE                            
C        COEFFICIENT MATRIX STORED BY COLUMNS ,                         
C        I.E. IN THE ORDER                                              
C            1                                                          
C            2  5                                                       
C            3  6  8                                                    
C            4  7  9 10                                                 
C B     A MATRIX CONTAINING THE RIGHT HAND SIDES                        
C IB     THE ROW DIMENSION OF THE B MATRIX                              
C NB     THE NUMBER OF RIGHT HAND SIDES                                 
C                                                                       
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION                                                   
C COND   ESTIMATE ON THE CONDITION NUMBER                               
C ERROR CONDITIONS                                                      
C   1       N.LT.1       FATAL                                          
C   2       IB.LT.N      FATAL                                          
C   3       NB.LT.1      FATAL                                          
C   10+K    SINGULAR MATRIX OF RANK K  RECOVERABLE                      
C                                                                       
C THIS SUBROUTINE CALLS  SYCE AND  SYFBS                                
C N EXTRA INTEGER LOCATIONS ARE REQUESTED BY THE STORAGE ALLOCATOR      
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(12H SYSS-N.LT.1,12,1,2)                   
C      IF (IB.LT.N) CALL SETERR(13H SYSS-IB.LT.N,13,2,2)                
C      IF (NB.LT.1) CALL SETERR(13H SYSS-NB.LT.1,13,3,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' SYSS-N.LT.1',12,1,2)                    
       IF (IB.LT.N) CALL SETERR(' SYSS-IB.LT.N',13,2,2)                 
       IF (NB.LT.1) CALL SETERR(' SYSS-NB.LT.1',13,3,2)                 
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL SYCE(N,A,INTER(IN),COND)                                    
       IF (NERROR(IER).EQ.0) GO TO 10                                   
C/6S                                                                    
C        CALL N5ERR(21H SYSS-SINGULAR MATRIX,21,IER,1)                  
C/7S                                                                    
         CALL N5ERR(' SYSS-SINGULAR MATRIX',21,IER,1)                   
C/                                                                      
         GO TO 200                                                      
 10    CONTINUE                                                         
         CALL SYFBS(N,A,B,IB,NB,INTER(IN))                              
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
      SUBROUTINE  SYCE(N, C, INTER, COND)                               
      INTEGER N                                                         
      INTEGER INTER(N)                                                  
      REAL C(1), COND                                                   
      COMMON /CSTAK/ D                                                  
      REAL D(1000)                                                      
      INTEGER IZ, IERR, ISTKGT, NERROR                                  
      REAL ANORM, R1MACH, SYNM                                          
C SYMMETRIC CONDITION ESTIMATION                                        
C INPUT PARMETERS                                                       
C N          NUMBER OF ROWS IN A                                        
C C       VECTOR INTO WHICH THE SYMMETRIC MATRIX A IS                   
C         PACKED BY COLUMNS ACCORDING TO THE FOLLOWING                  
C         TEMPLATE                                                      
C            1                                                          
C            2  5                                                       
C            3  6  8                                                    
C            4  7  9  10                                                
C OUTPUT PARAMETERS                                                     
C C          MDM(TRANSPOSE) DECOMPOSITION SUITABLE AS INPUT             
C            INTO SYFBS                                                 
C INTER      INTEGER ARRAY OF LENGTH N OF INTERCHANGES PERFORMED        
C            DURING DECOMPOSITION                                       
C            SUITABLE OF INPUT INTO SYFBS                               
C COND       LOWER BOUND ON THE CONDITION NUMBER OF A                   
C STORAGE ALLOCATED- N REAL LOCATIONS                                   
C ERROR CONDITIONS                                                      
C 1          N.LT.1                                                     
C/6S                                                                    
C     IF (N .LT. 1) CALL SETERR(12H SYCE-N.LT.1, 12, 1, 2)              
C/7S                                                                    
      IF (N .LT. 1) CALL SETERR(' SYCE-N.LT.1', 12, 1, 2)               
C/                                                                      
      CALL ENTER(1)                                                     
      ANORM=SYNM(N,C)                                                   
      CALL  SYMD(N, C, INTER,0.0)                                       
      IF (NERROR(IERR) .EQ. 0) GOTO 1                                   
         COND = R1MACH(2)                                               
         CALL LEAVE                                                     
         RETURN                                                         
   1  IZ = ISTKGT(N, 3)                                                 
      CALL S4YCE(N, C, COND, INTER, ANORM, D(IZ))                       
      CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE S4YCE(N, A, COND, INTER, ANORM, Z)                     
      INTEGER N                                                         
      INTEGER INTER(N)                                                  
      REAL A(1), COND, ANORM, Z(N)                                      
      INTEGER JI, JK,    L                                              
      INTEGER IP1,  I, J, ICH, JIS                                      
      REAL EK, ABS, ARGE, SM, WK, SAVE                                  
      REAL TEMP,   AJI, S, T                                            
      REAL  SIGN, WKM, SASUM, R1MACH, YNORM                             
C TEST FOR 1 X 1                                                        
      IF (N .NE. 1) GOTO 1                                              
         COND = 1                                                       
         RETURN                                                         
   1  EK = 1.0                                                          
      DO  2 J = 1, N                                                    
         Z(J) = 0.0                                                     
   2     CONTINUE                                                       
         L=0                                                            
         IEND=N*(N+1)/2                                                 
      I = 1                                                             
      JI = 1                                                            
C SOLVE LDY=E WHERE THE COMPONENTS OF E ARE PLUS                        
C AND MINUS 1 WHERE THE SIGNS ARE CHOSEN TO PRODUCE MAXIMUM             
C GROWTH. LOOK AHEAD IS USED ONLY FOR 1 X1 PIVOTS                       
   3  IF (I .GE. N) GOTO  13                                            
   4        ICH = INTER(I)                                              
            SAVE = Z(ICH)                                               
            IF (SAVE .NE. 0.0) EK = SIGN(EK, -SAVE)                     
            IP1 = I+1                                                   
            IF (INTER(IP1) .LT. 0) GOTO 9                               
               Z(ICH) = Z(I)                                            
C PROCESS A 1 X1  PIVOT                                                 
               IF (ABS(EK-SAVE) .LE. ABS(A(JI))) GOTO 5                 
                  S = ABS(A(JI)/(EK-SAVE))                              
                  CALL SSCAL(N, S, Z, 1)                                
                  EK = S*EK                                             
                  SAVE = S*SAVE                                         
   5           WK = EK-SAVE                                             
               WKM = (-EK)-SAVE                                         
               S = ABS(WK)                                              
               SM = ABS(WKM)                                            
               AJI = A(JI)                                              
               JI = JI+1                                                
               JIS = JI                                                 
               DO  6 J = IP1, N                                         
                  SM = SM+ABS(Z(J)-WKM*A(JI))                           
                  Z(J) = Z(J)-WK*A(JI)                                  
                  S = S+ABS(Z(J))                                       
                  JI = JI+1                                             
   6              CONTINUE                                              
               IF (S .GE. SM) GOTO 8                                    
                  T = WKM-WK                                            
                  WK = WKM                                              
                  DO  7 J = IP1, N                                      
                     Z(J) = Z(J)-T*A(JIS)                               
                     JIS = JIS+1                                        
   7                 CONTINUE                                           
   8           IF (AJI.EQ.0.0)Z(I)=1.E0                                 
               IF (AJI.NE.0.0)Z(I)= WK /AJI                             
               I = IP1                                                  
C PROCESS A 2 X 2 PIVOT                                                 
               GOTO  12                                                 
   9           Z(ICH) = Z(IP1)                                          
               SAVE = SAVE-EK                                           
               TEMP = Z(I)                                              
               IF (TEMP .NE. 0.0) EK = SIGN(EK, -TEMP)                  
               TEMP = TEMP-EK                                           
               CALL S42B2(N,I,JI,A,Z,TEMP,SAVE)                         
  12        CONTINUE                                                    
C SOLVE MDY=B AND STORE Y IN B                                          
         GOTO  3                                                        
  13  IF (I .NE. N) GOTO 14                                             
         IF (A(JI).EQ.0.0) Z(I)=1.0                                     
         IF(A(JI).NE.0.0)Z(I) =- (Z(I)+SIGN(EK, Z(I)))/A(JI)            
         JK = (N*(N+1))/2-1                                             
         I = N-1                                                        
         GOTO  15                                                       
  14     JK = (N*(N+1))/2-4                                             
         I = N-2                                                        
  15  S = 1.0/SASUM(N, Z, 1)                                            
      CALL SSCAL(N, S, Z, 1)                                            
 16   CALL S4BS(N,I,A,Z,JK,INTER)                                       
  19  S = 1.0/SASUM(N, Z, 1)                                            
      CALL SSCAL(N, S, Z, 1)                                            
      YNORM = 1.0                                                       
      I=1                                                               
      JI=1                                                              
 1010 IF (I.GE.N) GO TO 1200                                            
      ICH=INTER(I)                                                      
      SAVE=Z(ICH)                                                       
      IP1=I+1                                                           
      IF(INTER(IP1).LT.0) GO TO 1030                                    
         Z(ICH)=Z(I)                                                    
         IF (ABS(SAVE).LE.ABS(A(JI))) GO TO 1015                        
             S=ABS(A(JI))/ABS(SAVE)                                     
             CALL SSCAL(N,S,Z,1)                                        
             YNORM=S*YNORM                                              
             SAVE=S*SAVE                                                
 1015     IF (A(JI).EQ.0.0) Z(I)=1.0                                    
          IF (A(JI).NE.0.0) Z(I)=SAVE/A(JI)                             
         JI=JI+1                                                        
         DO 1020 J=IP1,N                                                
            Z(J)=Z(J)+SAVE*A(JI)                                        
            JI=JI+1                                                     
 1020    CONTINUE                                                       
         I=IP1                                                          
         GO TO 1010                                                     
 1030    TEMP=Z(I)                                                      
         Z(ICH)=Z(IP1)                                                  
         CALL S42B2(N,I,JI,A,Z,TEMP,SAVE)                               
         GO TO 1010                                                     
 1200    IF (I.NE.N)GO TO 1202                                          
         Z(I)=Z(I)/A(JI)                                                
         JK=(N*(N+1))/2-1                                               
         I=N-1                                                          
         GO TO1210                                                      
 1202    JK=(N*(N+1))/2-3                                               
         I=N-2                                                          
 1210    CALL S4BS(N,I,A,Z,JK,INTER)                                    
      S = 1.0/SASUM(N, Z, 1)                                            
       CALL SSCAL(N,S,Z,1)                                              
      YNORM = YNORM*S                                                   
      ARGE = R1MACH(2)                                                  
      IF (YNORM .GT. 1.0) GOTO 21                                       
         IF (ANORM .LE. YNORM*ARGE) GOTO 20                             
            COND = ARGE                                                 
            RETURN                                                      
  20  CONTINUE                                                          
  21  COND = ANORM/YNORM                                                
      RETURN                                                            
      END                                                               
       SUBROUTINE S4BS(N,I,A,Z,JK,INTER)                                
       INTEGER N,I,JK                                                   
       INTEGER INTER(N)                                                 
       INTEGER IP1,K,KK,KEND,ICH,IKENT                                  
       REAL A(N),Z(N)                                                   
       REAL SAVE                                                        
  16  IF (I .LE. 0) RETURN                                              
         KEND = 1                                                       
         IF (INTER(I) .LE. 0) KEND = 2                                  
         IP1 = I+1                                                      
         DO  18 KK = 1, KEND                                            
            K = IP1-KK                                                  
            SAVE = Z(K)                                                 
            DO  17 J = IP1, N                                           
               SAVE = SAVE+A(JK)*Z(J)                                   
               JK = JK+1                                                
  17           CONTINUE                                                 
            Z(K) = SAVE                                                 
            JK = JK-2*(N-K)-1                                           
  18        CONTINUE                                                    
         JK = JK-1                                                      
         SAVE = Z(I)                                                    
         IKENT = IP1-KEND                                               
         ICH = INTER(IKENT)                                             
         Z(I) = Z(ICH)                                                  
         Z(ICH) = SAVE                                                  
         I = I-KEND                                                     
         GOTO  16                                                       
         END                                                            
      SUBROUTINE S42B2(N,I,JI,A,Z,TEMP,SAVE)                            
      INTEGER N,I,JI                                                    
      REAL A(N),Z(N),TEMP,SAVE                                          
      INTEGER JIP1,NMI,JNMI,J,JIPNMI                                    
      REAL DENOM                                                        
               JIP1 = JI+1                                              
               IP1=I+1                                                  
               NMI = N-I                                                
               JNMI = JIP1+NMI                                          
               DENOM = A(JNMI)*A(JI)/A(JIP1)-A(JIP1)                    
               Z(IP1) = (SAVE*A(JI)/A(JIP1)-TEMP)/DENOM                 
               Z(I) = (SAVE-Z(IP1)*A(JNMI))/A(JIP1)                     
               IP2 = I+2                                                
               JI = JI+2                                                
               JIPNMI = JI+NMI                                          
               IF (IP2 .GT. N) GOTO 11                                  
                  DO  10 J = IP2, N                                     
                     Z(J) = Z(J)+A(JI)*TEMP+A(JIPNMI)*SAVE              
                     JI = JI+1                                          
                     JIPNMI = JIPNMI+1                                  
  10                 CONTINUE                                           
  11           I = IP2                                                  
               JI = JI+NMI                                              
      RETURN                                                            
      END                                                               
       SUBROUTINE  SYLE(N,A,B,IB,NB)                                    
C MNEMONIC-REAL SYMMETRICLINEAR EQUATIONS                               
         INTEGER N,IB,NB                                                
        REAL A(N),B(IB,NB)                                              
C                                                                       
C THIS SUBROUTINE SOLVES THE PROBLEM AX=B WHERE                         
C A IS SYMMETRIC MATRIX,WHICH MAY BE INDEFINITE                         
C BUT NOT SINGULAR                                                      
C                                                                       
C INPUT PARAMETERS                                                      
C N       ORDER OF THE PROBLEM                                          
C A      AN N X(N+1)/2 VECTOR CONTAINING THE                            
C        COEFFICIENT MATRIX STORED BY COLUMNS ,                         
C        I.E. IN THE ORDER                                              
C            1                                                          
C            2  5                                                       
C            3  6  8                                                    
C            4  7  9 10                                                 
C B     A MATRIX CONTAINING THE RIGHT HAND SIDES                        
C IB     THE ROW DIMENSION OF THE B MATRIX                              
C NB     THE NUMBER OF RIGHT HAND SIDES                                 
C                                                                       
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION                                                   
C ERROR CONDITIONS                                                      
C   1       N.LT.1       FATAL                                          
C   2       IB.LT.N      FATAL                                          
C   3       NB.LT.1      FATAL                                          
C   10+K    SINGULAR MATRIX OF RANK K  RECOVERABLE                      
C                                                                       
C THIS SUBROUTINE CALLS  SYDC AND  SYFBS                                
C N EXTRA INTEGER LOCATIONS ARE REQUESTED BY THE STORAGE ALLOCATOR      
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(12H SYLE-N.LT.1,12,1,2)                   
C      IF (IB.LT.N) CALL SETERR(13H SYLE-IB.LT.N,13,2,2)                
C      IF (NB.LT.1) CALL SETERR(13H SYLE-NB.LT.1,13,3,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' SYLE-N.LT.1',12,1,2)                    
       IF (IB.LT.N) CALL SETERR(' SYLE-IB.LT.N',13,2,2)                 
       IF (NB.LT.1) CALL SETERR(' SYLE-NB.LT.1',13,3,2)                 
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL  SYDC(N,A,INTER(IN))                                        
       IF (NERROR(IER).EQ.0) GO TO 10                                   
C/6S                                                                    
C        CALL N5ERR(21H SYLE-SINGULAR MATRIX,21,IER,1)                  
C/7S                                                                    
         CALL N5ERR(' SYLE-SINGULAR MATRIX',21,IER,1)                   
C/                                                                      
         GO TO 200                                                      
 10    CONTINUE                                                         
         CALL SYFBS(N,A,B,IB,NB,INTER(IN))                              
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
       SUBROUTINE  SYDC(N,A,INTER)                                      
C THIS SUBROUTINE DOES THE SYMMETRIC DECOMPOSITION                      
C ALGORITHM OF BUNCH AND KAUFMAN ON A MATRIX                            
C A STORED AS A 1 DIMENSION ARRAY                                       
C INPUT PARAMETERS                                                      
C                                                                       
C N        ORDER OF THE MATRIX                                          
C A        AN N X(N+1)/2 VECTOR CONTAINING THE COEFFICIENT              
C          MATRIX STORED BY COLUMNS IN THE ORDER                        
C             1                                                         
C             2  5                                                      
C             3  6  8                                                   
C             4  7  9 10                                                
C OUTPUT PARAMETERS                                                     
C A       THE DECOMPOSED MATRIX                                         
C INTER     A RECORD OF THE INTERCHANGES PERFORMED                      
C ERROR SITUATIONS                                                      
C 1     N.LT.1    FATAL                                                 
C 2     10+K       SINGULAR MATRIX OF RANK K                            
          REAL A(1), SYNM, EPS                                          
          REAL R1MACH                                                   
          INTEGER INTER(N)                                              
          CALL ENTER(1)                                                 
C/6S                                                                    
C         IF(N.LT.1) CALL SETERR(12H SYDC-N.LT.1,12,1,2)                
C/7S                                                                    
          IF(N.LT.1) CALL SETERR(' SYDC-N.LT.1',12,1,2)                 
C/                                                                      
C COMPUTE NORM OF THE MATRIX                                            
          EPS=R1MACH(4)*SYNM(N,A)                                       
          CALL  SYMD(N,A,INTER,EPS)                                     
C/6S                                                                    
C         IF (NERROR(IER).NE.0)                                         
C    1      CALL N5ERR(21H SYDC-SINGULAR MATRIX,21,IER,1)               
C/7S                                                                    
          IF (NERROR(IER).NE.0)                                         
     1      CALL N5ERR(' SYDC-SINGULAR MATRIX',21,IER,1)                
C/                                                                      
          CALL LEAVE                                                    
          RETURN                                                        
          END                                                           
          REAL FUNCTION SYNM(N,A)                                       
           REAL A(1),SUM                                                
C THIS SUBROUTINE FINDS THE NORM OF A, A SYMMETRIC                      
C MATRIX IN PACKED FORM                                                 
C/6S                                                                    
C           IF (N.LT.1) CALL SETERR(12H SYNM-N.LT.1,12,1,2)             
C/7S                                                                    
            IF (N.LT.1) CALL SETERR(' SYNM-N.LT.1',12,1,2)              
C/                                                                      
          L=0                                                           
          SYNM=0.0                                                      
          DO 10 I=1,N                                                   
             SUM=0.0                                                    
             IF(I.EQ.1) GO TO 4                                         
             IM1=I-1                                                    
             JJ=I                                                       
            DO 3 J=1,IM1                                                
                SUM=SUM+ABS(A(JJ))                                      
                JJ=JJ+N-J                                               
 3           CONTINUE                                                   
 4           CONTINUE                                                   
             DO 5 J=I,N                                                 
                L=L+1                                                   
                SUM=SUM+ABS(A(L))                                       
 5           CONTINUE                                                   
             IF (SUM.GT.SYNM) SYNM=SUM                                  
 10        CONTINUE                                                     
            RETURN                                                      
           END                                                          
        SUBROUTINE  SYMD(N,A,INTER,EPS)                                 
C                                                                       
C MNEMONIC -REAL SYMMETRIC DECOMPOSITION                                
C GIVEN A  SYMMETRIC MATRIX OF ORDER N STORED IN A SYMMETRIC            
C STORAGE SCHEME IN THE VECTOR A BY COLUMNS,THIS ROUTINE DETERMINES ITS 
C DECOMPOSITION INTO PMDM(TRANSPOSE)P(TRANSPOSE) WHERE P IS A           
C PERMUTATION MATRIX,M IS A UNIT LOWER TRIANGULAR MATRIX,AND D IS A     
C BLOCK DIAGONAL MATRIX WITH BLOCKS OF ORDER 1 AND 2 WHERE D(I+1,1)     
C IS NONZERO WHENEVER M(I+1,I) IS ZERO.                                 
C INPUT PARAMTERS                                                       
C    N         THE ORDER OF THE PROBLEM                                 
C     A        A VECTOR OF LENGTH N*(N+1)/2 CONTAINING                  
C              THE MATRIX A STORED BY COLUMNS.I.E. T E FIRST            
C              COLUMN OCCUPIES THE FIRST N ELEMENTS OF THE VECTOR,      
C              ELEMENTS (2,2) THROUGH (N,2) OF A OCCUPY THE NEXT N-1    
C              ELEMENTS OF THE VECTOR.                                  
C              THE SUBROUTINE DESTROYS THE ORIGINAL MATRIX              
C    EPS       REAL VARIABLE, FOR A 1 X 1 BLOCK IF THE MAGNITUDE        
C              OF THE PIVOT IS LESS THAN EPS, THAN THE MATRIX IS        
C              CONSIDERED SINGULAR.                                     
C OUTPUT PARAMETERS                                                     
C    A         CONTAINS THE DECOMPOSITION                               
C    INTER     AN INTEGER VECTOR OF LENGTH RECORDING THE INTERCHANGES   
C              GENERATED                                                
C ERROR CONDITIONS                                                      
C    1        N IS LESS THAN 1       FATAL                              
C   10 +K    SINGULAR MATRIX OF RANK K     RECOVERABLE                  
C                                                                       
        REAL A(1),TEMP,SAVE,DENOM,AII,AIP1,AIP1I                        
         REAL EPS                                                       
        REAL ALPHA,ALFLAM,AAII,LAMBDA,SIGMA                             
        INTEGER INTER(N)                                                
C/6S                                                                    
C       IF (N.LT.1) CALL SETERR(12H SYMD-N.LT.1,12,1,2)                 
C/7S                                                                    
        IF (N.LT.1) CALL SETERR(' SYMD-N.LT.1',12,1,2)                  
C/                                                                      
        INTER(N)=N                                                      
        ALPHA=(1.0+SQRT(17.0))/8.0                                      
         IERR=0                                                         
        CALL ENTER(1)                                                   
        I=1                                                             
        II=1                                                            
        NI=N                                                            
 10     IF(I.GE.N) GO TO  100                                           
        AAII=ABS(A(II))                                                 
        INTER(I)=I                                                      
C                                                                       
C FIND THE LARGEST OFF DIAGONAL ELEMENT IN THE ITH COLUMN               
C                                                                       
        IIP1=II+1                                                       
        LAMBDA=ABS(A(IIP1))                                             
        IP1=I+1                                                         
        IP2=I+2                                                         
        NMI=N-I                                                         
        JI=IIP1                                                         
        IF(IP2.GT.N) GO TO 16                                           
        DO 15 KI=IIP1,NI                                                
           IF(ABS(A(KI)).LE.LAMBDA) GO TO 15                            
           LAMBDA=ABS(A(KI))                                            
           JI=KI                                                        
 15     CONTINUE                                                        
 16     ALFLAM=ALPHA*LAMBDA                                             
        IF (AAII.GE.ALFLAM) GO TO 60                                    
C                                                                       
C FIND THE LARGEST OFFDIAGONAL ELEMENT IN THE JTH COLUMN                
C                                                                       
        SIGMA=LAMBDA                                                    
        J=I+JI-II                                                       
        NMJP1=N-J+1                                                     
        NJ=(J*(N+NMJP1))/2                                              
        JJ=NJ-(N-J)                                                     
        JJP1=JJ+1                                                       
        IF(JJP1.GT.NJ) GO TO 21                                         
        DO 20 KJ=JJP1,NJ                                                
           IF(ABS(A(KJ)).GT.SIGMA) SIGMA =ABS(A(KJ))                    
 20     CONTINUE                                                        
 21     NMIM1=NMI-1                                                     
        IF(NMJP1.GT.NMIM1) GO TO 26                                     
        KJ=JJ                                                           
        DO 25 K=NMJP1,NMIM1                                             
           KJ=KJ-K                                                      
           IF(ABS(A(KJ)).GT.SIGMA) SIGMA=ABS(A(KJ))                     
 25     CONTINUE                                                        
 26     IF (AAII.GE.ALFLAM*(LAMBDA/SIGMA)) GO TO 60                     
        IF (ABS(A(JJ)).GE.ALPHA*SIGMA) GO TO 55                         
C                                                                       
C PERFORM A 2 BY 2 PIVOT STEP                                           
C                                                                       
        IP1IP1=IIP1+NMI                                                 
        INTER(I)=J                                                      
        IF(IP2.GT.N) GO TO 51                                           
        IF(J.EQ.IP1) GO TO 30                                           
        CALL I4SP1(A,N,J,IP1,IP1IP1,JJ)                                 
        TEMP=A(JI)                                                      
        A(JI)=A(IIP1)                                                   
        A(IIP1)=TEMP                                                    
 30     AIP1I=A(IIP1)                                                   
        AII=A(II)/AIP1I                                                 
        AIP1=A(IP1IP1)                                                  
        DENOM=AII*AIP1-AIP1I                                            
        JB=IIP1+1                                                       
        II=IIP1+2*NMI                                                   
        L=II                                                            
        DO 50 JI=JB,NI                                                  
           JIPNMI=JI+NMI                                                
           TEMP=(A(JI)-AII*A(JIPNMI))/DENOM                             
           SAVE=-(A(JIPNMI)+TEMP*AIP1)/AIP1I                            
           DO 40 KJ=JI,NI                                               
              KJ2=KJ+NMI                                                
              A(L)=A(L)+A(KJ)*SAVE+A(KJ2)*TEMP                          
              L=L+1                                                     
 40        CONTINUE                                                     
           A(JI)=SAVE                                                   
           A(JIPNMI)=TEMP                                               
 50     CONTINUE                                                        
 51     INTER(IP1)=-1                                                   
        I=IP2                                                           
        NI=NI+2*NMI-1                                                   
        GO TO 10                                                        
C                                                                       
C INTERCHANGE THE ITH AND  JTH ROWS AND COLUMNS                         
C                                                                       
 55     INTER(I)=J                                                      
        CALL I4SP1(A,N,J,I,II,JJ)                                       
C                                                                       
C PERFORM A 1 X1 PIVOT                                                  
C                                                                       
 60     IF (ABS(A(II)).GT.EPS) GO TO 61                                 
              A(II)=SIGN(EPS,A(II))                                     
C/6S                                                                    
C        IF (IERR.EQ.0)CALL SETERR(21H SYMD-SINGULAR MATRIX,21,9+I,1)   
C/7S                                                                    
         IF (IERR.EQ.0)CALL SETERR(' SYMD-SINGULAR MATRIX',21,9+I,1)    
C/                                                                      
            IERR=1                                                      
 61     AII=A(II)                                                       
        IF (AII.EQ.0.0)AII=1.0                                          
        II=IIP1+NMI                                                     
        L=II                                                            
        DO 80 JI=IIP1,NI                                                
           SAVE=-A(JI)/AII                                              
           DO 70 KJ=JI,NI                                               
              A(L)=A(L)+A(KJ)*SAVE                                      
              L=L+1                                                     
 70        CONTINUE                                                     
           A(JI)=SAVE                                                   
 80     CONTINUE                                                        
 81     I=IP1                                                           
        NI=NI+NMI                                                       
        GO TO 10                                                        
 100     CONTINUE                                                       
         IF (I.GT.N) GO TO 120                                          
        IF (ABS(A(II)).GT.EPS) GO TO 120                                
             A(II)=SIGN(EPS,A(II))                                      
C/6S                                                                    
C       IF (IERR.EQ.0)CALL SETERR(21H SYMD-SINGULAR MATRIX,21,9+I,1)    
C/7S                                                                    
        IF (IERR.EQ.0)CALL SETERR(' SYMD-SINGULAR MATRIX',21,9+I,1)     
C/                                                                      
 120     CALL LEAVE                                                     
        RETURN                                                          
        END                                                             
        SUBROUTINE  SYFBS(N,A,B,IB,NB,INTER)                            
C                                                                       
C THIS SUBROUTINE SOLVES THE LINEAR SYSTEM AX=B WHERE A IS A D.P.       
C SYMMETRIC MATRIX OF ORDER N WHOSE DECOMPOSITION HAS BEEN COMPUTED     
C BY THE SUBROUTINE  SYMD AND LEFT IN THE VECTOR A                      
C INPUT PARAMETERS                                                      
C     N     THE ORDER OF THE PROBLEM                                    
C     A     A D.P. VECTOR CONTAINING THE DECOMPOSITION COMPUTED         
C           BY  SYMD                                                    
C     B     THE RIGHT HAND SIDE,WILL BE DESTROYED ON OUTPUT             
C     INTER A RECORD OF THE PERMUTATIONS PERFORMED BY  SYMD             
C OUTPUT PARAMETERS                                                     
C     B     THE SOLUTION TO THE PROBLEM                                 
C ERROR CONDITIONS                                                      
C     1    N IS LESS THAN 1    FATAL                                    
C     2    IB LESS THAN N      FATAL                                    
C     3    BN LESS THAN 1      FATAL                                    
C    10+K       SINGULAR MATRIX  OF RANK K RECOVERABLE                  
        REAL A(N),B(IB,NB),TEMP,SAVE,DENOM                              
        INTEGER INTER(N)                                                
        CALL ENTER(1)                                                   
C/6S                                                                    
C       IF (N.LT.1)CALL SETERR(13H SYFBS-N.LT.1,13,1,2)                 
C       IF (IB.LT.N) CALL SETERR(14H SYFBS-IB.LT.N,14,2,2)              
C       IF (NB.LT.1) CALL SETERR(14H SYFBS-NB.LT.1,14,3,2)              
C/7S                                                                    
        IF (N.LT.1)CALL SETERR(' SYFBS-N.LT.1',13,1,2)                  
        IF (IB.LT.N) CALL SETERR(' SYFBS-IB.LT.N',14,2,2)               
        IF (NB.LT.1) CALL SETERR(' SYFBS-NB.LT.1',14,3,2)               
C/                                                                      
C                                                                       
C SOLVE MDY=B AND STORE Y IN THE VECTOR B                               
C                                                                       
        DO 400 ICOL=1,NB                                                
        I=1                                                             
        JI=1                                                            
 10     IF (I.GE.N) GO TO 200                                           
        ICH=INTER(I)                                                    
        SAVE=B(ICH,ICOL)                                                
        IP1=I+1                                                         
        IF(INTER(IP1).LT.0) GO TO 30                                    
C HANDLE A 1 X 1 PIVOT                                                  
        B(ICH,ICOL)=B(I,ICOL)                                           
        IF(A(JI).EQ.0.0) GO TO 300                                      
 15     B(I,ICOL)=SAVE/A(JI)                                            
        JI=JI+1                                                         
        DO 20 J=IP1,N                                                   
           B(J,ICOL)=B(J,ICOL)+A(JI)*SAVE                               
           JI=JI+1                                                      
 20     CONTINUE                                                        
        I=IP1                                                           
        GO TO 10                                                        
C HANDLE A 2 X 2 PIVOT                                                  
 30     TEMP=B(I,ICOL)                                                  
        B(ICH,ICOL)=B(IP1,ICOL)                                         
 130    JIP1=JI+1                                                       
        NMI=N-I                                                         
        JNMI=JIP1+NMI                                                   
        DENOM=A(JNMI)*A(JI)/A(JIP1)-A(JIP1)                             
        B(IP1,ICOL)=(SAVE*A(JI)/A(JIP1)-TEMP)/DENOM                     
        B(I,ICOL)=(SAVE-B(IP1,ICOL)*A(JNMI))/A(JIP1)                    
        IF (I+2.GT.N) GO TO 41                                          
        IP2=I+2                                                         
        JI=JI+2                                                         
        DO 40 J=IP2,N                                                   
           JIPNMI=JI+NMI                                                
           B(J,ICOL)=B(J,ICOL)+A(JI)*TEMP+A(JIPNMI)*SAVE                
           JI=JI+1                                                      
 40     CONTINUE                                                        
 41     I=I+2                                                           
        JI=JI+NMI                                                       
        GO TO 10                                                        
 200    IF (I.NE.N) GO TO 202                                           
        IF (A(JI).EQ.0.0) GO TO 300                                     
 201    B(I,ICOL)=B(I,ICOL)/A(JI)                                       
        JK=N*(N+1)/2-1                                                  
        I=N-1                                                           
        GO TO 210                                                       
C                                                                       
C NOW SOLVE M(TRANSPOSE) X= Y FOR X,WHERE Y IS STORED                   
C IN THE VECTOR B AND STORE X IN B                                      
C                                                                       
 202    JK=(N*(N+1))/2-4                                                
        I=N-2                                                           
 210    IF(I.LE.0) GO TO 400                                            
        KEND=1                                                          
        IF(INTER(I).LE.0) KEND =2                                       
        IP1=I+1                                                         
        DO 250 KK=1,KEND                                                
           K=IP1-KK                                                     
           SAVE=B(K,ICOL)                                               
           DO 240 J=IP1,N                                               
              SAVE=SAVE+A(JK)*B(J,ICOL)                                 
              JK=JK+1                                                   
 240       CONTINUE                                                     
           B(K,ICOL)=SAVE                                               
           JK=JK-2*(N-K)-1                                              
 250    CONTINUE                                                        
        JK=JK-1                                                         
 251    SAVE=B(I,ICOL)                                                  
C INTERCHANGE THE ELEMENTS OF THE SOLUTION                              
        IKEND=IP1-KEND                                                  
        ICH=INTER(IKEND)                                                
        B(I,ICOL)=B(ICH,ICOL)                                           
        B(ICH,ICOL)=SAVE                                                
        I=I-KEND                                                        
        GO TO 210                                                       
 400    CONTINUE                                                        
        GO TO 301                                                       
C/6S                                                                    
C300   CALL SETERR(22H SYFBS-SINGULAR MATRIX,22,9+I,1)                  
C/7S                                                                    
 300   CALL SETERR(' SYFBS-SINGULAR MATRIX',22,9+I,1)                   
C/                                                                      
 301   CALL LEAVE                                                       
       RETURN                                                           
        END                                                             
        SUBROUTINE I4SP1(A,N,J,I,II,JJ)                                 
C                                                                       
C THIS SUBROUTINE INTERCHANGES ROW AND COLUMN I AND J,WHERE J IS        
C GREATER THAN I OF THE (N-I+1) SUBMATRIX OF A SYMMETRIC MATRIX         
C STORED IN THE VECTOR A                                                
C                                                                       
        REAL A(N),TEMP                                                  
        NMI=N-I                                                         
        JI=II+J-I                                                       
        JIM1=JI-1                                                       
        IF(I+1.GT.J-1) GO TO 21                                         
        IIP1=II+1                                                       
        JDISP=NMI+IIP1                                                  
        DO 20 KI =IIP1,JIM1                                             
           JI=JI+JDISP-KI                                               
           TEMP=A(KI)                                                   
           A(KI)=A(JI)                                                  
           A(JI)=TEMP                                                   
 20     CONTINUE                                                        
C INTERCHANGE THE DIAGONAL ELEMENTS                                     
 21     TEMP=A(II)                                                      
        A(II)=A(JJ)                                                     
        A(JJ)=TEMP                                                      
        IF (J+1.GT.N) RETURN                                            
C INTERCHANGE THE ELEMENTS BELOW BOTH DIAGONALS                         
        JIP1=JIM1+2                                                     
        IN=II+NMI                                                       
        KJ=JJ                                                           
        DO 30 KI=JIP1,IN                                                
           KJ=KJ+1                                                      
           TEMP=A(KJ)                                                   
           A(KJ)=A(KI)                                                  
           A(KI)=TEMP                                                   
 30     CONTINUE                                                        
        RETURN                                                          
        END                                                             
         SUBROUTINE SYML(N,C,X,B)                                       
C                                                                       
C THIS SUBROUTINE SET B=AX WHERE X IS A VECTOR                          
C AND A IS A SYMMETRIC MATRIX PACKED INTO C                             
C                                                                       
C INPUT PARAMETERS                                                      
C N      LENGTH OF VECTOR                                               
C C      ARRAY INTO WHICH SYMMETRIC MATRIX IS PACKED ACCORDING          
C        TO THE SCHEME                                                  
C        1                                                              
C        2 5                                                            
C        3 6 8                                                          
C        4 7 9 10                                                       
C X      N-VECTOR TO BE MULTPLIED                                       
C OUTPUT PARAMETER                                                      
C B      AX                                                             
C ERROR CONDITIONS                                                      
C  1     N<1 FATAL                                                      
C                                                                       
       REAL C(1),X(N),B(N)                                              
       REAL SUM,XI                                                      
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H  SYML-N.LT.1,14,1,2)                  
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('  SYML-N.LT.1',14,1,2)                   
C/                                                                      
       DO 10 I=1,N                                                      
          B(I)=0.0                                                      
 10    CONTINUE                                                         
C                                                                       
C L POINTS TO POSITION IN C ARRAY                                       
C                                                                       
       L=0                                                              
       DO 30 I=1,N                                                      
          L=L+1                                                         
          XI=X(I)                                                       
          B(I)=B(I)+C(L)*XI                                             
          IF (I.EQ.N) RETURN                                            
          IP1=I+1                                                       
          SUM=0.0                                                       
          DO 20 J=IP1,N                                                 
             L=L+1                                                      
             SUM=SUM+C(L)*X(J)                                          
             B(J)=B(J)+C(L)*XI                                          
 20       CONTINUE                                                      
          B(I)=B(I)+SUM                                                 
 30   CONTINUE                                                          
      RETURN                                                            
      END                                                               
       SUBROUTINE  DSYSS(N,A,B,IB,NB,COND)                              
C MNEMONIC-DOUBLE PRECISION SYMMETRIC DSYSTEM SOLVER                    
         INTEGER N,IB,NB                                                
        DOUBLE PRECISION A(N),B(IB,NB)                                  
C                                                                       
C THIS SUBROUTINE SOLVES THE PROBLEM AX=B WHERE                         
C A IS SYMMETRIC MATRIX,WHICH MAY BE INDEFINITE                         
C BUT NOT SINGULAR                                                      
C AN ESTIMATE OF THE CONDITION NUMBER IS ALSO GIVEN                     
C                                                                       
C INPUT PARAMETERS                                                      
C N       ORDER OF THE PROBLEM                                          
C A      AN N X(N+1)/2 VECTOR CONTAINING THE                            
C        COEFFICIENT MATRIX STORED BY COLUMNS ,                         
C        I.E. IN THE ORDER                                              
C            1                                                          
C            2  5                                                       
C            3  6  8                                                    
C            4  7  9 10                                                 
C B     A MATRIX CONTAINING THE RIGHT HAND SIDES                        
C IB     THE ROW DIMENSION OF THE B MATRIX                              
C NB     THE NUMBER OF RIGHT HAND SIDES                                 
C                                                                       
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION                                                   
C COND   ESTIMATE ON THE CONDITION NUMBER                               
C ERROR CONDITIONS                                                      
C   1       N.LT.1       FATAL                                          
C   2       IB.LT.N      FATAL                                          
C   3       NB.LT.1      FATAL                                          
C   10+K    SINGULAR MATRIX OF RANK K  RECOVERABLE                      
C                                                                       
C THIS SUBROUTINE CALLS  DSYCE AND  DSYFBS                              
C N EXTRA INTEGER LOCATIONS ARE REQUESTED BY THE STORAGE ALLOCATOR      
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       DOUBLE PRECISION COND                                            
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(12HDSYSS-N.LT.1,12,1,2)                   
C      IF (IB.LT.N) CALL SETERR(13HDSYSS-IB.LT.N,13,2,2)                
C      IF (NB.LT.1) CALL SETERR(13HDSYSS-NB.LT.1,13,3,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('DSYSS-N.LT.1',12,1,2)                    
       IF (IB.LT.N) CALL SETERR('DSYSS-IB.LT.N',13,2,2)                 
       IF (NB.LT.1) CALL SETERR('DSYSS-NB.LT.1',13,3,2)                 
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL DSYCE(N,A,INTER(IN),COND)                                   
       IF (NERROR(IER).EQ.0) GO TO 10                                   
C/6S                                                                    
C        CALL N5ERR(21HDSYSS-SINGULAR MATRIX,21,IER,1)                  
C/7S                                                                    
         CALL N5ERR('DSYSS-SINGULAR MATRIX',21,IER,1)                   
C/                                                                      
         GO TO 200                                                      
 10    CONTINUE                                                         
          CALL DSYFBS(N,A,B,IB,NB,INTER(IN))                            
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
      SUBROUTINE DSYCE(N, C, INTER, COND)                               
      INTEGER N                                                         
      INTEGER INTER(N)                                                  
      DOUBLE PRECISION C(1), COND                                       
      COMMON /CSTAK/ D                                                  
      DOUBLE PRECISION D(500)                                           
      INTEGER IZ, IERR, ISTKGT, NERROR                                  
      DOUBLE PRECISION ANORM, D1MACH, DSYNM                             
C SYMMETRIC CONDITION ESTIMATION                                        
C INPUT PARMETERS                                                       
C N          NUMBER OF ROWS IN A                                        
C C       VECTOR INTO WHICH THE SYMMETRIC MATRIX A IS                   
C         PACKED BY COLUMNS ACCORDING TO THE FOLLOWING                  
C         TEMPLATE                                                      
C            1                                                          
C            2  5                                                       
C            3  6  8                                                    
C            4  7  9  10                                                
C OUTPUT PARAMETERS                                                     
C C          MDM(TRANSPOSE) DECOMPOSITION SUITABLE AS INPUT             
C            INTO DSYFBS                                                
C INTER      INTEGER ARRAY OF LENGTH N OF INTERCHANGES PERFORMED        
C            DURING DECOMPOSITION                                       
C            SUITABLE OF INPUT INTO SYFBS                               
C COND       LOWER BOUND ON THE CONDITION NUMBER OF A                   
C STORAGE ALLOCATED- N DOUBLE PRECISION LOCATIONS                       
C ERROR CONDITIONS                                                      
C 1          N.LT.1                                                     
C/6S                                                                    
C     IF (N .LT. 1) CALL SETERR(12HDSYCE-N.LT.1, 12, 1, 2)              
C/7S                                                                    
      IF (N .LT. 1) CALL SETERR('DSYCE-N.LT.1', 12, 1, 2)               
C/                                                                      
      CALL ENTER(1)                                                     
      ANORM=DSYNM(N,C)                                                  
      CALL DSYMD(N, C, INTER,0.D0)                                      
      IF (NERROR(IERR) .EQ. 0) GOTO 1                                   
         COND = D1MACH(2)                                               
         CALL LEAVE                                                     
         RETURN                                                         
   1  IZ = ISTKGT(N, 4)                                                 
      CALL DS4YCE(N, C, COND, INTER, ANORM, D(IZ))                      
      CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE DS4YCE(N, A, COND, INTER, ANORM, Z)                    
      INTEGER N                                                         
      INTEGER INTER(N)                                                  
      DOUBLE PRECISION A(1), COND, ANORM, Z(N)                          
      INTEGER JI, JK,    L                                              
      INTEGER IP1,  I, J, ICH, JIS                                      
      DOUBLE PRECISION EK, ARGE, SM, WK, SAVE                           
      DOUBLE PRECISION TEMP,   AJI, S, T                                
      DOUBLE PRECISION  WKM, DASUM, D1MACH, YNORM                       
C TEST FOR 1 X 1                                                        
      IF (N .NE. 1) GOTO 1                                              
         COND = 1                                                       
         RETURN                                                         
   1  EK = 1.0D0                                                        
      DO  2 J = 1, N                                                    
         Z(J) = 0.D0                                                    
   2     CONTINUE                                                       
         L=0                                                            
         IEND=N*(N+1)/2                                                 
      I = 1                                                             
      JI = 1                                                            
C SOLVE LDY=E WHERE THE COMPONENTS OF E ARE PLUS                        
C AND MINUS 1 WHERE THE DSIGNS ARE CHOSEN TO PRODUCE MAXIMUM            
C GROWTH. LOOK AHEAD IS USED ONLY FOR 1 X1 PIVOTS                       
   3  IF (I .GE. N) GOTO  13                                            
   4        ICH = INTER(I)                                              
            SAVE = Z(ICH)                                               
            IF (SAVE .NE. 0.D0) EK = DSIGN(EK, -SAVE)                   
            IP1 = I+1                                                   
            IF (INTER(IP1) .LT. 0) GOTO 9                               
               Z(ICH) = Z(I)                                            
C PROCESS A 1 X1  PIVOT                                                 
               IF (DABS(EK-SAVE) .LE. DABS(A(JI))) GOTO 5               
                  S = DABS(A(JI)/(EK-SAVE))                             
                  CALL DSCAL(N, S, Z, 1)                                
                  EK = S*EK                                             
                  SAVE = S*SAVE                                         
   5           WK = EK-SAVE                                             
               WKM = (-EK)-SAVE                                         
               S = DABS(WK)                                             
               SM = DABS(WKM)                                           
               AJI = A(JI)                                              
               JI = JI+1                                                
               JIS = JI                                                 
               DO  6 J = IP1, N                                         
                  SM = SM+DABS(Z(J)-WKM*A(JI))                          
                  Z(J) = Z(J)-WK*A(JI)                                  
                  S = S+DABS(Z(J))                                      
                  JI = JI+1                                             
   6              CONTINUE                                              
               IF (S .GE. SM) GOTO 8                                    
                  T = WKM-WK                                            
                  WK = WKM                                              
                  DO  7 J = IP1, N                                      
                     Z(J) = Z(J)-T*A(JIS)                               
                     JIS = JIS+1                                        
   7                 CONTINUE                                           
   8           IF (AJI.EQ.0.D0)Z(I)=1.D0                                
               IF (AJI.NE.0.D0)Z(I)= WK /AJI                            
               I = IP1                                                  
C PROCESS A 2 X 2 PIVOT                                                 
               GOTO  12                                                 
   9           Z(ICH) = Z(IP1)                                          
               SAVE = SAVE-EK                                           
               TEMP = Z(I)                                              
               IF (TEMP .NE. 0.D0) EK = DSIGN(EK, -TEMP)                
               TEMP = TEMP-EK                                           
               CALL DS42B2(N,I,JI,A,Z,TEMP,SAVE)                        
  12        CONTINUE                                                    
C SOLVE MDY=B AND STORE Y IN B                                          
         GOTO  3                                                        
  13  IF (I .NE. N) GOTO 14                                             
         IF (A(JI).EQ.0.D0) Z(I)=1.0D0                                  
         IF(A(JI).NE.0.D0)Z(I) =- (Z(I)+DSIGN(EK, Z(I)))/A(JI)          
         JK = (N*(N+1))/2-1                                             
         I = N-1                                                        
         GOTO  15                                                       
  14     JK = (N*(N+1))/2-4                                             
         I = N-2                                                        
  15  S = 1.0D0/DASUM(N, Z, 1)                                          
      CALL DSCAL(N, S, Z, 1)                                            
 16   CALL DS4BS(N,I,A,Z,JK,INTER)                                      
  19  S = 1.0D0/DASUM(N, Z, 1)                                          
      CALL DSCAL(N, S, Z, 1)                                            
      YNORM = 1.0D0                                                     
      I=1                                                               
      JI=1                                                              
 1010 IF (I.GE.N) GO TO 1200                                            
      ICH=INTER(I)                                                      
      SAVE=Z(ICH)                                                       
      IP1=I+1                                                           
      IF(INTER(IP1).LT.0) GO TO 1030                                    
         Z(ICH)=Z(I)                                                    
         IF (DABS(SAVE).LE.DABS(A(JI))) GO TO 1015                      
             S=DABS(A(JI))/DABS(SAVE)                                   
             CALL DSCAL(N,S,Z,1)                                        
             YNORM=S*YNORM                                              
             SAVE=S*SAVE                                                
 1015     IF (A(JI).EQ.0.D0) Z(I)=1.0D0                                 
          IF (A(JI).NE.0.D0) Z(I)=SAVE/A(JI)                            
         JI=JI+1                                                        
         DO 1020 J=IP1,N                                                
            Z(J)=Z(J)+SAVE*A(JI)                                        
            JI=JI+1                                                     
 1020    CONTINUE                                                       
         I=IP1                                                          
         GO TO 1010                                                     
 1030    TEMP=Z(I)                                                      
         Z(ICH)=Z(IP1)                                                  
         CALL DS42B2(N,I,JI,A,Z,TEMP,SAVE)                              
         GO TO 1010                                                     
 1200    IF (I.NE.N)GO TO 1202                                          
         Z(I)=Z(I)/A(JI)                                                
         JK=(N*(N+1))/2-1                                               
         I=N-1                                                          
         GO TO1210                                                      
 1202    JK=(N*(N+1))/2-3                                               
         I=N-2                                                          
 1210    CALL DS4BS(N,I,A,Z,JK,INTER)                                   
      S = 1.0D0/DASUM(N, Z, 1)                                          
       CALL DSCAL(N,S,Z,1)                                              
      YNORM = YNORM*S                                                   
      ARGE = D1MACH(2)                                                  
      IF (YNORM .GT. 1.0D0) GOTO 21                                     
         IF (ANORM .LE. YNORM*ARGE) GOTO 20                             
            COND = ARGE                                                 
            RETURN                                                      
  20  CONTINUE                                                          
  21  COND = ANORM/YNORM                                                
      RETURN                                                            
      END                                                               
       SUBROUTINE DS4BS(N,I,A,Z,JK,INTER)                               
       INTEGER N,I,JK                                                   
       INTEGER INTER(N)                                                 
       INTEGER IP1,K,KK,KEND,ICH,IKENT                                  
       DOUBLE PRECISION A(N),Z(N)                                       
       DOUBLE PRECISION SAVE                                            
  16  IF (I .LE. 0) RETURN                                              
         KEND = 1                                                       
         IF (INTER(I) .LE. 0) KEND = 2                                  
         IP1 = I+1                                                      
         DO  18 KK = 1, KEND                                            
            K = IP1-KK                                                  
            SAVE = Z(K)                                                 
            DO  17 J = IP1, N                                           
               SAVE = SAVE+A(JK)*Z(J)                                   
               JK = JK+1                                                
  17           CONTINUE                                                 
            Z(K) = SAVE                                                 
            JK = JK-2*(N-K)-1                                           
  18        CONTINUE                                                    
         JK = JK-1                                                      
         SAVE = Z(I)                                                    
         IKENT = IP1-KEND                                               
         ICH = INTER(IKENT)                                             
         Z(I) = Z(ICH)                                                  
         Z(ICH) = SAVE                                                  
         I = I-KEND                                                     
         GOTO  16                                                       
         END                                                            
      SUBROUTINE DS42B2(N,I,JI,A,Z,TEMP,SAVE)                           
      INTEGER N,I,JI                                                    
      DOUBLE PRECISION A(N),Z(N),TEMP,SAVE                              
      INTEGER JIP1,NMI,JNMI,J,JIPNMI                                    
      DOUBLE PRECISION DENOM                                            
               JIP1 = JI+1                                              
               IP1=I+1                                                  
               NMI = N-I                                                
               JNMI = JIP1+NMI                                          
               DENOM = A(JNMI)*A(JI)/A(JIP1)-A(JIP1)                    
               Z(IP1) = (SAVE*A(JI)/A(JIP1)-TEMP)/DENOM                 
               Z(I) = (SAVE-Z(IP1)*A(JNMI))/A(JIP1)                     
               IP2 = I+2                                                
               JI = JI+2                                                
               JIPNMI = JI+NMI                                          
               IF (IP2 .GT. N) GOTO 11                                  
                  DO  10 J = IP2, N                                     
                     Z(J) = Z(J)+A(JI)*TEMP+A(JIPNMI)*SAVE              
                     JI = JI+1                                          
                     JIPNMI = JIPNMI+1                                  
  10                 CONTINUE                                           
  11           I = IP2                                                  
               JI = JI+NMI                                              
      RETURN                                                            
      END                                                               
       SUBROUTINE DSYLE(N,A,B,IB,NB)                                    
C MNEMONIC-DOUBLE PRECISION SYMMETRICLINEAR EQUATIONS                   
         INTEGER N,IB,NB                                                
        DOUBLE PRECISION A(N),B(IB,NB)                                  
C                                                                       
C THIS SUBROUTINE SOLVES THE PROBLEM AX=B WHERE                         
C A IS SYMMETRIC MATRIX,WHICH MAY BE INDEFINITE                         
C BUT NOT SINGULAR                                                      
C                                                                       
C INPUT PARAMETERS                                                      
C N       ORDER OF THE PROBLEM                                          
C A      AN N X(N+1)/2 VECTOR CONTAINING THE                            
C        COEFFICIENT MATRIX STORED BY COLUMNS ,                         
C        I.E. IN THE ORDER                                              
C            1                                                          
C            2  5                                                       
C            3  6  8                                                    
C            4  7  9 10                                                 
C B     A MATRIX CONTAINING THE RIGHT HAND SIDES                        
C IB     THE ROW DIMENSION OF THE B MATRIX                              
C NB     THE NUMBER OF RIGHT HAND SIDES                                 
C                                                                       
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION                                                   
C ERROR CONDITIONS                                                      
C   1       N.LT.1       FATAL                                          
C   2       IB.LT.N      FATAL                                          
C   3       NB.LT.1      FATAL                                          
C   10+K    SINGULAR MATRIX OF RANK K  RECOVERABLE                      
C                                                                       
C THIS SUBROUTINE CALLS DSYDC AND DSYFBS                                
C N EXTRA INTEGER LOCATIONS ARE REQUESTED BY THE STORAGE ALLOCATOR      
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(12HDSYLE-N.LT.1,12,1,2)                   
C      IF (IB.LT.N) CALL SETERR(13HDSYLE-IB.LT.N,13,2,2)                
C      IF (NB.LT.1) CALL SETERR(13HDSYLE-NB.LT.1,13,3,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('DSYLE-N.LT.1',12,1,2)                    
       IF (IB.LT.N) CALL SETERR('DSYLE-IB.LT.N',13,2,2)                 
       IF (NB.LT.1) CALL SETERR('DSYLE-NB.LT.1',13,3,2)                 
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL DSYDC(N,A,INTER(IN))                                        
       IF (NERROR(IER).EQ.0) GO TO 10                                   
C/6S                                                                    
C        CALL N5ERR(21HDSYLE-SINGULAR MATRIX,21,IER,1)                  
C/7S                                                                    
         CALL N5ERR('DSYLE-SINGULAR MATRIX',21,IER,1)                   
C/                                                                      
         GO TO 200                                                      
 10    CONTINUE                                                         
         CALL DSYFBS(N,A,B,IB,NB,INTER(IN))                             
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
       SUBROUTINE DSYDC(N,A,INTER)                                      
C THIS SUBROUTINE DOES THE SYMMETRIC DECOMPOSITION                      
C ALGORITHM OF BUNCH AND KAUFMAN ON A MATRIX                            
C A STORED AS A 1 DIMENSION ARRAY                                       
C INPUT PARAMETERS                                                      
C                                                                       
C N        ORDER OF THE MATRIX                                          
C A        AN N X(N+1)/2 VECTOR CONTAINING THE COEFFICIENT              
C          MATRIX STORED BY COLUMNS IN THE ORDER                        
C             1                                                         
C             2  5                                                      
C             3  6  8                                                   
C             4  7  9 10                                                
C OUTPUT PARAMETERS                                                     
C A       THE DECOMPOSED MATRIX                                         
C INTER     A RECORD OF THE INTERCHANGES PERFORMED                      
C ERROR SITUATIONS                                                      
C 1     N.LT.1    FATAL                                                 
C 2     10+K       SINGULAR MATRIX OF RANK K                            
          DOUBLE PRECISION A(1),DSYNM,EPS                               
          DOUBLE PRECISION D1MACH                                       
          INTEGER INTER(N)                                              
          CALL ENTER(1)                                                 
C/6S                                                                    
C         IF(N.LT.1) CALL SETERR(12HDSYDC-N.LT.1,12,1,2)                
C/7S                                                                    
          IF(N.LT.1) CALL SETERR('DSYDC-N.LT.1',12,1,2)                 
C/                                                                      
C COMPUTE NORM OF THE MATRIX                                            
          EPS=D1MACH(4)*DSYNM(N,A)                                      
          CALL DSYMD(N,A,INTER,EPS)                                     
C/6S                                                                    
C         IF (NERROR(IER).NE.0)                                         
C    1      CALL N5ERR(21HDSYDC-SINGULAR MATRIX,21,IER,1)               
C/7S                                                                    
          IF (NERROR(IER).NE.0)                                         
     1      CALL N5ERR('DSYDC-SINGULAR MATRIX',21,IER,1)                
C/                                                                      
          CALL LEAVE                                                    
          RETURN                                                        
          END                                                           
          DOUBLE PRECISION FUNCTION DSYNM(N,A)                          
          DOUBLE PRECISION A(1),SUM                                     
C THIS SUBROUTINE COMPUTES THE 1 NORM OF A SYMMETRIC MATRIX             
C STORED IN PACKED FORM                                                 
C/6S                                                                    
C         IF (N.LT.1) CALL SETERR(12HDSYNM-N.LT.1,12,1,2)               
C/7S                                                                    
          IF (N.LT.1) CALL SETERR('DSYNM-N.LT.1',12,1,2)                
C/                                                                      
          L=0                                                           
          DSYNM=0.D0                                                    
          DO 10 I=1,N                                                   
             SUM=0.D0                                                   
             IF(I.EQ.1) GO TO 4                                         
             IM1=I-1                                                    
             JJ=I                                                       
            DO 3 J=1,IM1                                                
                SUM=SUM+DABS(A(JJ))                                     
                JJ=JJ+N-J                                               
 3           CONTINUE                                                   
 4           CONTINUE                                                   
             DO 5 J=I,N                                                 
                L=L+1                                                   
                SUM=SUM+DABS(A(L))                                      
 5           CONTINUE                                                   
             IF (SUM.GT.DSYNM) DSYNM=SUM                                
 10        CONTINUE                                                     
           RETURN                                                       
           END                                                          
        SUBROUTINE  DSYMD(N,A,INTER,EPS)                                
C                                                                       
C MNEMONIC -DOUBLE PRECISION SYMMETRIC DECOMPOSITION                    
C GIVEN A  SYMMETRIC MATRIX OF ORDER N STORED IN A DSYMMETRIC           
C STORAGE SCHEME IN THE VECTOR A BY COLUMNS,THIS ROUTINE DETERMINES ITS 
C DECOMPOSITION INTO PMDM(TRANSPOSE)P(TRANSPOSE) WHERE P IS A           
C PERMUTATION MATRIX,M IS A UNIT LOWER TRIANGULAR MATRIX,AND D IS A     
C BLOCK DIAGONAL MATRIX WITH BLOCKS OF ORDER 1 AND 2 WHERE D(I+1,1)     
C IS NONZERO WHENEVER M(I+1,I) IS ZERO.                                 
C INPUT PARAMTERS                                                       
C    N         THE ORDER OF THE PROBLEM                                 
C     A        A VECTOR OF LENGTH N*(N+1)/2 CONTAINING                  
C              THE MATRIX A STORED BY COLUMNS.I.E. T E FIRST            
C              COLUMN OCCUPIES THE FIRST N ELEMENTS OF THE VECTOR,      
C              ELEMENTS (2,2) THROUGH (N,2) OF A OCCUPY THE NEXT N-1    
C              ELEMENTS OF THE VECTOR.                                  
C              THE SUBROUTINE DESTROYS THE ORIGINAL MATRIX              
C       EPS    DOUBLE PRECISION VARIABLE . FOR A 1 X 1 BLOCK IF THE     
C              MAGNITUDE OF THE PIVOT IS LESS THAN EPS, THE MATRIX      
C              IS CONSIDERED SINGULAR                                   
C OUTPUT PARAMETERS                                                     
C    A         CONTAINS THE DECOMPOSITION                               
C    INTER     AN INTEGER VECTOR OF LENGTH RECORDING THE INTERCHANGES   
C              GENERATED                                                
C ERROR CONDITIONS                                                      
C    1        N IS LESS THAN 1       FATAL                              
C   10 +K    SINGULAR MATRIX OF RANK K     RECOVERABLE                  
C                                                                       
        DOUBLE PRECISION A(1),TEMP,SAVE,DENOM,AII,AIP1,AIP1I            
         DOUBLE PRECISION EPS                                           
        DOUBLE PRECISION ALPHA,ALFLAM,AAII,LAMBDA,SIGMA,DSQRT           
        INTEGER INTER(N)                                                
C/6S                                                                    
C       IF (N.LT.1) CALL SETERR(12HDSYMD-N.LT.1,12,1,2)                 
C/7S                                                                    
        IF (N.LT.1) CALL SETERR('DSYMD-N.LT.1',12,1,2)                  
C/                                                                      
        INTER(N)=N                                                      
        ALPHA=(1.D0+DSQRT(17.D0))/8.D0                                  
        IERR=0                                                          
        CALL ENTER(1)                                                   
        I=1                                                             
        II=1                                                            
        NI=N                                                            
 10     IF(I.GE.N) GO TO  100                                           
        AAII=DABS(A(II))                                                
        INTER(I)=I                                                      
C                                                                       
C FIND THE LARGEST OFF DIAGONAL ELEMENT IN THE ITH COLUMN               
C                                                                       
        IIP1=II+1                                                       
        LAMBDA=DABS(A(IIP1))                                            
        IP1=I+1                                                         
        IP2=I+2                                                         
        NMI=N-I                                                         
        JI=IIP1                                                         
        IF(IP2.GT.N) GO TO 16                                           
        DO 15 KI=IIP1,NI                                                
           IF(DABS(A(KI)).LE.LAMBDA) GO TO 15                           
           LAMBDA=DABS(A(KI))                                           
           JI=KI                                                        
 15     CONTINUE                                                        
 16     ALFLAM=ALPHA*LAMBDA                                             
        IF (AAII.GE.ALFLAM) GO TO 60                                    
C                                                                       
C FIND THE LARGEST OFFDIAGONAL ELEMENT IN THE JTH COLUMN                
C                                                                       
        SIGMA=LAMBDA                                                    
        J=I+JI-II                                                       
        NMJP1=N-J+1                                                     
        NJ=(J*(N+NMJP1))/2                                              
        JJ=NJ-(N-J)                                                     
        JJP1=JJ+1                                                       
        IF(JJP1.GT.NJ) GO TO 21                                         
        DO 20 KJ=JJP1,NJ                                                
           IF(DABS(A(KJ)).GT.SIGMA) SIGMA =DABS(A(KJ))                  
 20     CONTINUE                                                        
 21     NMIM1=NMI-1                                                     
        IF(NMJP1.GT.NMIM1) GO TO 26                                     
        KJ=JJ                                                           
        DO 25 K=NMJP1,NMIM1                                             
           KJ=KJ-K                                                      
           IF(DABS(A(KJ)).GT.SIGMA) SIGMA=DABS(A(KJ))                   
 25     CONTINUE                                                        
 26     IF (AAII.GE.ALFLAM*(LAMBDA/SIGMA)) GO TO 60                     
        IF (DABS(A(JJ)).GE.ALPHA*SIGMA) GO TO 55                        
C                                                                       
C PERFORM A 2 BY 2 PIVOT STEP                                           
C                                                                       
        IP1IP1=IIP1+NMI                                                 
        INTER(I)=J                                                      
        IF(IP2.GT.N) GO TO 51                                           
        IF(J.EQ.IP1) GO TO 30                                           
        CALL DI4SP1(A,N,J,IP1,IP1IP1,JJ)                                
        TEMP=A(JI)                                                      
        A(JI)=A(IIP1)                                                   
        A(IIP1)=TEMP                                                    
 30     AIP1I=A(IIP1)                                                   
        AII=A(II)/AIP1I                                                 
        AIP1=A(IP1IP1)                                                  
        DENOM=AII*AIP1-AIP1I                                            
        JB=IIP1+1                                                       
        II=IIP1+2*NMI                                                   
        L=II                                                            
        DO 50 JI=JB,NI                                                  
           JIPNMI=JI+NMI                                                
           TEMP=(A(JI)-AII*A(JIPNMI))/DENOM                             
           SAVE=-(A(JIPNMI)+TEMP*AIP1)/AIP1I                            
           DO 40 KJ=JI,NI                                               
              KJ2=KJ+NMI                                                
              A(L)=A(L)+A(KJ)*SAVE+A(KJ2)*TEMP                          
              L=L+1                                                     
 40        CONTINUE                                                     
           A(JI)=SAVE                                                   
           A(JIPNMI)=TEMP                                               
 50     CONTINUE                                                        
 51     INTER(IP1)=-1                                                   
        I=IP2                                                           
        NI=NI+2*NMI-1                                                   
        GO TO 10                                                        
C                                                                       
C INTERCHANGE THE ITH AND  JTH ROWS AND COLUMNS                         
C                                                                       
 55     INTER(I)=J                                                      
        CALL DI4SP1(A,N,J,I,II,JJ)                                      
C                                                                       
C PERFORM A 1 X1 PIVOT                                                  
C                                                                       
 60     IF (DABS(A(II)).GT.EPS) GO TO 61                                
         A(II)=DSIGN(EPS,A(II))                                         
C/6S                                                                    
C        IF (IERR.EQ.0)CALL SETERR(21HDSYMD-SINGULAR MATRIX,21,9+I,1)   
C/7S                                                                    
         IF (IERR.EQ.0)CALL SETERR('DSYMD-SINGULAR MATRIX',21,9+I,1)    
C/                                                                      
         IERR=1                                                         
 61     AII=A(II)                                                       
        IF (AII.EQ.0.D0)AII=1.0D0                                       
        II=IIP1+NMI                                                     
        L=II                                                            
        DO 80 JI=IIP1,NI                                                
           SAVE=-A(JI)/AII                                              
           DO 70 KJ=JI,NI                                               
              A(L)=A(L)+A(KJ)*SAVE                                      
              L=L+1                                                     
 70        CONTINUE                                                     
           A(JI)=SAVE                                                   
 80     CONTINUE                                                        
 81     I=IP1                                                           
        NI=NI+NMI                                                       
        GO TO 10                                                        
 100     CONTINUE                                                       
         IF (I.GT.N) GO TO 120                                          
        IF (DABS(A(II)).GT.EPS) GO TO 120                               
          A(II)=DSIGN(EPS,A(II))                                        
C/6S                                                                    
C         IF (IERR.EQ.0)                                                
C    1    CALL SETERR(21HDSYMD-SINGULAR MATRIX,21,9+I,1)                
C/7S                                                                    
          IF (IERR.EQ.0)                                                
     1    CALL SETERR('DSYMD-SINGULAR MATRIX',21,9+I,1)                 
C/                                                                      
 120     CALL LEAVE                                                     
        RETURN                                                          
        END                                                             
        SUBROUTINE  DSYFBS(N,A,B,IB,NB,INTER)                           
C                                                                       
C THIS SUBROUTINE SOLVES THE LINEAR DSYSTEM AX=B WHERE A IS A D.P.      
C SYMMETRIC MATRIX OF ORDER N WHOSE DECOMPOSITION HAS BEEN COMPUTED     
C BY THE SUBROUTINE  DSYMD AND LEFT IN THE VECTOR A                     
C INPUT PARAMETERS                                                      
C     N     THE ORDER OF THE PROBLEM                                    
C     A     A D.P. VECTOR CONTAINING THE DECOMPOSITION COMPUTED         
C           BY  DSYMD                                                   
C     B     THE RIGHT HAND SIDE,WILL BE DESTROYED ON OUTPUT             
C     INTER A RECORD OF THE PERMUTATIONS PERFORMED BY  DSYMD            
C OUTPUT PARAMETERS                                                     
C     B     THE SOLUTION TO THE PROBLEM                                 
C ERROR CONDITIONS                                                      
C     1    N IS LESS THAN 1    FATAL                                    
C     2    IB LESS THAN N      FATAL                                    
C     3    NB LESS THAN 1      FATAL                                    
C    10+K       SINGULAR MATRIX  OF RANK K RECOVERABLE                  
        DOUBLE PRECISION A(N),B(IB,NB),TEMP,SAVE,DENOM                  
        INTEGER INTER(N)                                                
        CALL ENTER(1)                                                   
C/6S                                                                    
C       IF (N.LT.1)CALL SETERR(13HDSYFBS-N.LT.1,13,1,2)                 
C       IF (IB.LT.N) CALL SETERR(14HDSYFBS-IB.LT.N,14,2,2)              
C       IF (NB.LT.1) CALL SETERR(14HDSYFBS-NB.LT.1,14,3,2)              
C/7S                                                                    
        IF (N.LT.1)CALL SETERR('DSYFBS-N.LT.1',13,1,2)                  
        IF (IB.LT.N) CALL SETERR('DSYFBS-IB.LT.N',14,2,2)               
        IF (NB.LT.1) CALL SETERR('DSYFBS-NB.LT.1',14,3,2)               
C/                                                                      
C                                                                       
C SOLVE MDY=B AND STORE Y IN THE VECTOR B                               
C                                                                       
        DO 400 ICOL=1,NB                                                
        I=1                                                             
        JI=1                                                            
 10     IF (I.GE.N) GO TO 200                                           
        ICH=INTER(I)                                                    
        SAVE=B(ICH,ICOL)                                                
        IP1=I+1                                                         
        IF(INTER(IP1).LT.0) GO TO 30                                    
C HANDLE A 1 X 1 PIVOT                                                  
        B(ICH,ICOL)=B(I,ICOL)                                           
        IF(A(JI).EQ.0.D0) GO TO 300                                     
 15     B(I,ICOL)=SAVE/A(JI)                                            
        JI=JI+1                                                         
        DO 20 J=IP1,N                                                   
           B(J,ICOL)=B(J,ICOL)+A(JI)*SAVE                               
           JI=JI+1                                                      
 20     CONTINUE                                                        
        I=IP1                                                           
        GO TO 10                                                        
C HANDLE A 2 X 2 PIVOT                                                  
 30     TEMP=B(I,ICOL)                                                  
        B(ICH,ICOL)=B(IP1,ICOL)                                         
 130    JIP1=JI+1                                                       
        NMI=N-I                                                         
        JNMI=JIP1+NMI                                                   
        DENOM=A(JNMI)*A(JI)/A(JIP1)-A(JIP1)                             
        B(IP1,ICOL)=(SAVE*A(JI)/A(JIP1)-TEMP)/DENOM                     
        B(I,ICOL)=(SAVE-B(IP1,ICOL)*A(JNMI))/A(JIP1)                    
        IF (I+2.GT.N) GO TO 41                                          
        IP2=I+2                                                         
        JI=JI+2                                                         
        DO 40 J=IP2,N                                                   
           JIPNMI=JI+NMI                                                
           B(J,ICOL)=B(J,ICOL)+A(JI)*TEMP+A(JIPNMI)*SAVE                
           JI=JI+1                                                      
 40     CONTINUE                                                        
 41     I=I+2                                                           
        JI=JI+NMI                                                       
        GO TO 10                                                        
 200    IF (I.NE.N) GO TO 202                                           
        IF (A(JI).EQ.0.D0) GO TO 300                                    
 201    B(I,ICOL)=B(I,ICOL)/A(JI)                                       
        JK=N*(N+1)/2-1                                                  
        I=N-1                                                           
        GO TO 210                                                       
C                                                                       
C NOW SOLVE M(TRANSPOSE) X= Y FOR X,WHERE Y IS STORED                   
C IN THE VECTOR B AND STORE X IN B                                      
C                                                                       
 202    JK=(N*(N+1))/2-4                                                
        I=N-2                                                           
 210    IF(I.LE.0) GO TO 400                                            
        KEND=1                                                          
        IF(INTER(I).LE.0) KEND =2                                       
        IP1=I+1                                                         
        DO 250 KK=1,KEND                                                
           K=IP1-KK                                                     
           SAVE=B(K,ICOL)                                               
           DO 240 J=IP1,N                                               
              SAVE=SAVE+A(JK)*B(J,ICOL)                                 
              JK=JK+1                                                   
 240       CONTINUE                                                     
           B(K,ICOL)=SAVE                                               
           JK=JK-2*(N-K)-1                                              
 250    CONTINUE                                                        
        JK=JK-1                                                         
 251    SAVE=B(I,ICOL)                                                  
C INTERCHANGE THE ELEMENTS OF THE SOLUTION                              
        IKEND=IP1-KEND                                                  
        ICH=INTER(IKEND)                                                
        B(I,ICOL)=B(ICH,ICOL)                                           
        B(ICH,ICOL)=SAVE                                                
        I=I-KEND                                                        
        GO TO 210                                                       
 400     CONTINUE                                                       
       GO TO 301                                                        
C/6S                                                                    
C300   CALL SETERR(22HDSYFBS-SINGULAR MATRIX,22,9+I,1)                  
C/7S                                                                    
 300   CALL SETERR('DSYFBS-SINGULAR MATRIX',22,9+I,1)                   
C/                                                                      
 301   CALL LEAVE                                                       
       RETURN                                                           
        END                                                             
        SUBROUTINE DI4SP1(A,N,J,I,II,JJ)                                
C                                                                       
C THIS SUBROUTINE INTERCHANGES ROW AND COLUMN I AND J,WHERE J IS        
C GREATER THAN I OF THE (N-I+1) SUBMATRIX OF A SYMMETRIC MATRIX         
C STORED IN THE VECTOR A                                                
C                                                                       
        DOUBLE PRECISION A(N),TEMP                                      
        NMI=N-I                                                         
        JI=II+J-I                                                       
        JIM1=JI-1                                                       
        IF(I+1.GT.J-1) GO TO 21                                         
        IIP1=II+1                                                       
        JDISP=NMI+IIP1                                                  
        DO 20 KI =IIP1,JIM1                                             
           JI=JI+JDISP-KI                                               
           TEMP=A(KI)                                                   
           A(KI)=A(JI)                                                  
           A(JI)=TEMP                                                   
 20     CONTINUE                                                        
C INTERCHANGE THE DIAGONAL ELEMENTS                                     
 21     TEMP=A(II)                                                      
        A(II)=A(JJ)                                                     
        A(JJ)=TEMP                                                      
        IF (J+1.GT.N) RETURN                                            
C INTERCHANGE THE ELEMENTS BELOW BOTH DIAGONALS                         
        JIP1=JIM1+2                                                     
        IN=II+NMI                                                       
        KJ=JJ                                                           
        DO 30 KI=JIP1,IN                                                
           KJ=KJ+1                                                      
           TEMP=A(KJ)                                                   
           A(KJ)=A(KI)                                                  
           A(KI)=TEMP                                                   
 30     CONTINUE                                                        
        RETURN                                                          
        END                                                             
         SUBROUTINE DSYML(N,C,X,B)                                      
C                                                                       
C THIS SUBROUTINE SET B=AX WHERE X IS A VECTOR                          
C AND A IS A SYMMETRIC MATRIX PACKED INTO C                             
C                                                                       
C INPUT PARAMETERS                                                      
C N      LENGTH OF VECTOR                                               
C C      ARRAY INTO WHICH SYMMETRIC MATRIX IS PACKED ACCORDING          
C        TO THE SCHEME                                                  
C        1                                                              
C        2 5                                                            
C        3 6 8                                                          
C        4 7 9 10                                                       
C X      N-VECTOR TO BE MULTPLIED                                       
C OUTPUT PARAMETER                                                      
C B      AX                                                             
C ERROR CONDITIONS                                                      
C  1     N<1 FATAL                                                      
C                                                                       
       DOUBLE PRECISION C(1),X(N),B(N)                                  
       DOUBLE PRECISION SUM,XI                                          
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H DSYML-N.LT.1,13,1,2)                  
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' DSYML-N.LT.1',13,1,2)                   
C/                                                                      
       DO 10 I=1,N                                                      
          B(I)=0.D0                                                     
 10    CONTINUE                                                         
C                                                                       
C L POINTS TO POSITION IN C ARRAY                                       
C                                                                       
       L=0                                                              
       DO 30 I=1,N                                                      
          L=L+1                                                         
          XI=X(I)                                                       
          B(I)=B(I)+C(L)*XI                                             
          IF (I.EQ.N) RETURN                                            
          IP1=I+1                                                       
          SUM=0.D0                                                      
          DO 20 J=IP1,N                                                 
             L=L+1                                                      
             SUM=SUM+C(L)*X(J)                                          
             B(J)=B(J)+C(L)*XI                                          
 20       CONTINUE                                                      
          B(I)=B(I)+SUM                                                 
 30   CONTINUE                                                          
      RETURN                                                            
      END                                                               
       SUBROUTINE  CSYSS(N,A,B,IB,NB,COND)                              
C MNEMONIC-COMPLEX SYMMETRIC CSYSTEM SOLVER                             
         INTEGER N,IB,NB                                                
        COMPLEX A(N),B(IB,NB)                                           
C                                                                       
C THIS SUBROUTINE SOLVES THE PROBLEM AX=B WHERE                         
C A IS SYMMETRIC MATRIX,WHICH MAY BE INDEFINITE                         
C BUT NOT SINGULAR                                                      
C AN ESTIMATE OF THE CONDITION NUMBER IS ALSO GIVEN                     
C                                                                       
C INPUT PARAMETERS                                                      
C N       ORDER OF THE PROBLEM                                          
C A      AN N X(N+1)/2 VECTOR CONTAINING THE                            
C        COEFFICIENT MATRIX STORED BY COLUMNS ,                         
C        I.E. IN THE ORDER                                              
C            1                                                          
C            2  5                                                       
C            3  6  8                                                    
C            4  7  9 10                                                 
C B     A MATRIX CONTAINING THE RIGHT HAND SIDES                        
C IB     THE ROW DIMENSION OF THE B MATRIX                              
C NB     THE NUMBER OF RIGHT HAND SIDES                                 
C                                                                       
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION                                                   
C COND   ESTIMATE ON THE CONDITION NUMBER                               
C ERROR CONDITIONS                                                      
C   1       N.LT.1       FATAL                                          
C   2       IB.LT.N      FATAL                                          
C   3       NB.LT.1      FATAL                                          
C   10+K    SINGULAR MATRIX OF RANK K  RECOVERABLE                      
C                                                                       
C THIS SUBROUTINE CALLS  CSYCE AND  CSYFBS                              
C N EXTRA INTEGER LOCATIONS ARE REQUESTED BY THE STORAGE ALLOCATOR      
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       REAL COND                                                        
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(12HCSYSS-N.LT.1,12,1,2)                   
C      IF (IB.LT.N) CALL SETERR(13HCSYSS-IB.LT.N,13,2,2)                
C      IF (NB.LT.1) CALL SETERR(13HCSYSS-NB.LT.1,13,3,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('CSYSS-N.LT.1',12,1,2)                    
       IF (IB.LT.N) CALL SETERR('CSYSS-IB.LT.N',13,2,2)                 
       IF (NB.LT.1) CALL SETERR('CSYSS-NB.LT.1',13,3,2)                 
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL CSYCE(N,A,INTER(IN),COND)                                   
       IF (NERROR(IER).EQ.0) GO TO 10                                   
C/6S                                                                    
C        CALL N5ERR(21HCSYSS-SINGULAR MATRIX,21,IER,1)                  
C/7S                                                                    
         CALL N5ERR('CSYSS-SINGULAR MATRIX',21,IER,1)                   
C/                                                                      
         GO TO 200                                                      
 10    CONTINUE                                                         
          CALL CSYFBS(N,A,B,IB,NB,INTER(IN))                            
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
      SUBROUTINE  CSYCE(N, C, INTER, COND)                              
      INTEGER N                                                         
      INTEGER INTER(N)                                                  
      COMPLEX C(1)                                                      
      REAL COND                                                         
      COMMON /CSTAK/ D                                                  
      DOUBLE PRECISION D(500)                                           
      COMPLEX DC(500)                                                   
      INTEGER IZ, IERR, ISTKGT, NERROR                                  
      REAL ANORM, R1MACH, CSYNM                                         
      EQUIVALENCE (DC(1),D(1))                                          
C SYMMETRIC CONDITION ESTIMATION                                        
C INPUT PARMETERS                                                       
C N          NUMBER OF ROWS IN A                                        
C C       VECTOR INTO WHICH THE SYMMETRIC MATRIX A IS                   
C         PACKED BY COLUMNS ACCORDING TO THE FOLLOWING                  
C         TEMPLATE                                                      
C            1                                                          
C            2  5                                                       
C            3  6  8                                                    
C            4  7  9  10                                                
C OUTPUT PARAMETERS                                                     
C C          MDM(TRANSPOSE) DECOMPOSITION SUITABLE AS INPUT             
C            INTO CSYFBS                                                
C INTER      INTEGER ARRAY OF LENGTH N OF INTERCHANGES PERFORMED        
C            DURING DECOMPOSITION                                       
C            SUITABLE OF INPUT INTO CSYFBS                              
C COND       LOWER BOUND ON THE CONDITION NUMBER OF A                   
C STORAGE ALLOCATED-  N COMPLEX LOCATIONS                               
C ERROR CONDITIONS                                                      
C 1          N.LT.1                                                     
C/6S                                                                    
C     IF (N .LT. 1) CALL SETERR(12HCSYCE-N.LT.1, 12, 1, 2)              
C/7S                                                                    
      IF (N .LT. 1) CALL SETERR('CSYCE-N.LT.1', 12, 1, 2)               
C/                                                                      
      CALL ENTER(1)                                                     
      ANORM=CSYNM(N,C)                                                  
      CALL  CSYMD(N, C, INTER,0.0)                                      
      IF (NERROR(IERR) .EQ. 0) GOTO 1                                   
         COND = R1MACH(2)                                               
         CALL LEAVE                                                     
         RETURN                                                         
   1  IZ = ISTKGT(N, 5)                                                 
      CALL CS4YCE(N, C, COND, INTER, ANORM, DC(IZ))                     
      CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE CS4YCE(N, A, COND, INTER, ANORM, Z)                    
      INTEGER N                                                         
      INTEGER INTER(N)                                                  
      REAL COND, ANORM                                                  
      COMPLEX A(1), Z(N)                                                
      INTEGER JI, JK,    L                                              
      INTEGER IP1,  I, J, ICH, JIS                                      
      REAL CABS1,S,SM                                                   
      COMPLEX T,EK,WK,WKM,TEMP,AJI,SAVE                                 
      COMPLEX Z1,Z2,CSIGN1                                              
      REAL  SCASUM, R1MACH, YNORM, CAJI, ARGE                           
       CSIGN1(Z1,Z2)=CABS1(Z1)*(Z2/CABS1(Z2))                           
C TEST FOR 1 X 1                                                        
      IF (N .NE. 1) GOTO 1                                              
         COND = 1                                                       
         RETURN                                                         
   1  EK = (1.0,0.0)                                                    
      DO  2 J = 1, N                                                    
         Z(J) = (0.0,0.0)                                               
   2     CONTINUE                                                       
         L=0                                                            
      I = 1                                                             
      JI = 1                                                            
C SOLVE LDY=E WHERE THE COMPONENTS OF E ARE PLUS                        
C AND MINUS 1 WHERE THE SIGNS ARE CHOSEN TO PRODUCE MAXIMUM             
C GROWTH. LOOK AHEAD IS USED ONLY FOR 1 X1 PIVOTS                       
   3  IF (I .GE. N) GOTO  13                                            
   4        ICH = INTER(I)                                              
            SAVE = Z(ICH)                                               
            IF ((CABS1(SAVE)) .NE. 0.0) EK = CSIGN1(EK, -SAVE)          
            IP1 = I+1                                                   
            IF (INTER(IP1) .LT. 0) GOTO 9                               
               Z(ICH) = Z(I)                                            
C PROCESS A 1 X1  PIVOT                                                 
               IF (CABS1(EK-SAVE) .LE. CABS1(A(JI))) GOTO 5             
                  S = CABS1(A(JI)/(EK-SAVE))                            
                  CALL CSSCAL(N, S, Z, 1)                               
                  EK = CMPLX(S,0.0)*EK                                  
                  SAVE = CMPLX(S,0.0)*SAVE                              
   5           WK = EK-SAVE                                             
               WKM = (-EK)-SAVE                                         
               S = CABS1(WK)                                            
               SM = CABS1(WKM)                                          
               AJI = A(JI)                                              
               JI = JI+1                                                
               JIS = JI                                                 
               DO  6 J = IP1, N                                         
                  SM = SM+CABS1(Z(J)-WKM*(A(JI)))                       
                  Z(J) = Z(J)-WK*(A(JI))                                
                  S = S+CABS1(Z(J))                                     
                  JI = JI+1                                             
   6              CONTINUE                                              
               IF (S .GE. SM) GOTO 8                                    
                  T = WKM-WK                                            
                  WK = WKM                                              
                  DO  7 J = IP1, N                                      
                     Z(J) = Z(J)-T*(A(JIS))                             
                     JIS = JIS+1                                        
   7                 CONTINUE                                           
   8           CAJI=CABS1(A(JI))                                        
               IF (CAJI.EQ.0.0)Z(I)=(1.E0,0.E0)                         
               IF (CAJI.NE.0.0)Z(I)= WK /AJI                            
               I = IP1                                                  
C PROCESS A 2 X 2 PIVOT                                                 
               GOTO  12                                                 
   9           Z(ICH) = Z(IP1)                                          
               SAVE = SAVE-EK                                           
               TEMP = Z(I)                                              
               IF (CABS1(TEMP) .NE. 0.0) EK = CSIGN1(EK, -TEMP)         
               TEMP = TEMP-EK                                           
               CALL CS42B2(N,I,JI,A,Z,TEMP,SAVE)                        
  12        CONTINUE                                                    
C SOLVE MDY=B AND STORE Y IN B                                          
         GOTO  3                                                        
  13  IF (I .NE. N) GOTO 14                                             
         IF (CABS1(A(JI)).EQ.0.0) GO TO 138                             
            IF (CABS1(Z(I)).NE.0.0) EK=CSIGN1(EK,-Z(I))                 
            Z(I)=(EK-Z(I))/A(JI)                                        
            GO TO 139                                                   
 138        Z(I)=(1.0,0.0)                                              
 139     JK = (N*(N+1))/2-1                                             
         I = N-1                                                        
         GOTO  15                                                       
  14     JK = (N*(N+1))/2-4                                             
         I = N-2                                                        
  15  S = 1.0/SCASUM(N, Z, 1)                                           
      CALL CSSCAL(N, S, Z, 1)                                           
 16   CALL C4HBS(N,I,A,Z,JK,INTER)                                      
  19  S = 1.0/SCASUM(N, Z, 1)                                           
      CALL CSSCAL(N, S, Z, 1)                                           
      YNORM = 1.0                                                       
      I=1                                                               
      JI=1                                                              
 1010 IF (I.GE.N) GO TO 1200                                            
      ICH=INTER(I)                                                      
      SAVE=Z(ICH)                                                       
      IP1=I+1                                                           
      IF(INTER(IP1).LT.0) GO TO 1030                                    
         Z(ICH)=Z(I)                                                    
         IF (CABS1(SAVE).LE.CABS1(A(JI))) GO TO 1015                    
             S=CABS1(A(JI)/SAVE)                                        
             CALL CSSCAL(N,S,Z,1)                                       
             YNORM=S*YNORM                                              
             SAVE=CMPLX(S,0.0)*SAVE                                     
 1015     CAJI=CABS1(A(JI))                                             
          IF (CAJI.EQ.0.0) Z(I)=(1.0,0.0)                               
          IF (CAJI.NE.0.0) Z(I)=SAVE/A(JI)                              
         JI=JI+1                                                        
         DO 1020 J=IP1,N                                                
            Z(J)=Z(J)+SAVE*(A(JI))                                      
            JI=JI+1                                                     
 1020    CONTINUE                                                       
         I=IP1                                                          
         GO TO 1010                                                     
 1030    TEMP=Z(I)                                                      
         Z(ICH)=Z(IP1)                                                  
         CALL CS42B2(N,I,JI,A,Z,TEMP,SAVE)                              
         GO TO 1010                                                     
 1200    IF (I.NE.N)GO TO 1202                                          
         Z(I)=Z(I)/A(JI)                                                
         JK=(N*(N+1))/2-1                                               
         I=N-1                                                          
         GO TO1210                                                      
 1202    JK=(N*(N+1))/2-3                                               
         I=N-2                                                          
 1210    CALL C4HBS(N,I,A,Z,JK,INTER)                                   
      S = 1.0/SCASUM(N, Z, 1)                                           
       CALL CSSCAL(N,S,Z,1)                                             
      YNORM = YNORM*S                                                   
      ARGE = R1MACH(2)                                                  
      IF (YNORM .GT. 1.0) GOTO 21                                       
         IF (ANORM .LE. YNORM*ARGE) GOTO 20                             
            COND = ARGE                                                 
            RETURN                                                      
  20  CONTINUE                                                          
  21  COND = ANORM/YNORM                                                
      RETURN                                                            
      END                                                               
      SUBROUTINE CS42B2(N,I,JI,A,Z,TEMP,SAVE)                           
      INTEGER N,I,JI                                                    
      COMPLEX A(N),Z(N),TEMP,SAVE                                       
      INTEGER JIP1,NMI,JNMI,J,JIPNMI                                    
      COMPLEX DENOM                                                     
               JIP1 = JI+1                                              
               IP1=I+1                                                  
               NMI = N-I                                                
               JNMI = JIP1+NMI                                          
               DENOM = A(JNMI)*A(JI)/A(JIP1)-A(JIP1)                    
               Z(IP1) = (SAVE*A(JI)/A(JIP1)-TEMP)/DENOM                 
               Z(I) = (SAVE-Z(IP1)*A(JNMI))/A(JIP1)                     
               IP2 = I+2                                                
               JI = JI+2                                                
               JIPNMI = JI+NMI                                          
               IF (IP2 .GT. N) GOTO 11                                  
                  DO  10 J = IP2, N                                     
                    Z(J) = Z(J)+(A(JI))*TEMP+(A(JIPNMI))*SAVE           
                     JI = JI+1                                          
                     JIPNMI = JIPNMI+1                                  
  10                 CONTINUE                                           
  11           I = IP2                                                  
               JI = JI+NMI                                              
      RETURN                                                            
      END                                                               
       SUBROUTINE CSYLE(N,A,B,IB,NB)                                    
C MNEMONIC-COMPLEX SYMMETRICLINEAR EQUATIONS                            
         INTEGER N,IB,NB                                                
        COMPLEX A(N),B(IB,NB)                                           
C                                                                       
C THIS SUBROUTINE SOLVES THE PROBLEM AX=B WHERE                         
C A IS SYMMETRIC MATRIX,WHICH MAY BE INDEFINITE                         
C BUT NOT SINGULAR                                                      
C                                                                       
C INPUT PARAMETERS                                                      
C N       ORDER OF THE PROBLEM                                          
C A      AN N X(N+1)/2 VECTOR CONTAINING THE                            
C        COEFFICIENT MATRIX STORED BY COLUMNS ,                         
C        I.E. IN THE ORDER                                              
C            1                                                          
C            2  5                                                       
C            3  6  8                                                    
C            4  7  9 10                                                 
C B     A MATRIX CONTAINING THE RIGHT HAND SIDES                        
C IB     THE ROW DIMENSION OF THE B MATRIX                              
C NB     THE NUMBER OF RIGHT HAND SIDES                                 
C                                                                       
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION                                                   
C ERROR CONDITIONS                                                      
C   1       N.LT.1       FATAL                                          
C   2       IB.LT.N      FATAL                                          
C   3       NB.LT.1      FATAL                                          
C   10+K    SINGULAR MATRIX OF RANK K  RECOVERABLE                      
C                                                                       
C THIS SUBROUTINE CALLS CSYDC AND CSYFBS                                
C N EXTRA INTEGER LOCATIONS ARE REQUESTED BY THE STORAGE ALLOCATOR      
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(12HCSYLE-N.LT.1,12,1,2)                   
C      IF (IB.LT.N) CALL SETERR(13HCSYLE-IB.LT.N,13,2,2)                
C      IF (NB.LT.1) CALL SETERR(13HCSYLE-NB.LT.1,13,3,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('CSYLE-N.LT.1',12,1,2)                    
       IF (IB.LT.N) CALL SETERR('CSYLE-IB.LT.N',13,2,2)                 
       IF (NB.LT.1) CALL SETERR('CSYLE-NB.LT.1',13,3,2)                 
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL CSYDC(N,A,INTER(IN))                                        
       IF (NERROR(IER).EQ.0) GO TO 10                                   
C/6S                                                                    
C        CALL N5ERR(21HCSYLE-SINGULAR MATRIX,21,IER,1)                  
C/7S                                                                    
         CALL N5ERR('CSYLE-SINGULAR MATRIX',21,IER,1)                   
C/                                                                      
         GO TO 200                                                      
 10    CONTINUE                                                         
         CALL CSYFBS(N,A,B,IB,NB,INTER(IN))                             
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
       SUBROUTINE CSYDC(N,A,INTER)                                      
C THIS SUBROUTINE DOES THE SYMMETRIC DECOMPOSITION                      
C ALGORITHM OF BUNCH AND KAUFMAN ON A MATRIX                            
C A STORED AS A 1 DIMENSION ARRAY                                       
C INPUT PARAMETERS                                                      
C                                                                       
C N        ORDER OF THE MATRIX                                          
C A        AN N X(N+1)/2 VECTOR CONTAINING THE COEFFICIENT              
C          MATRIX STORED BY COLUMNS IN THE ORDER                        
C             1                                                         
C             2  5                                                      
C             3  6  8                                                   
C             4  7  9 10                                                
C OUTPUT PARAMETERS                                                     
C A       THE DECOMPOSED MATRIX                                         
C INTER     A RECORD OF THE INTERCHANGES PERFORMED                      
C ERROR SITUATIONS                                                      
C 1     N.LT.1    FATAL                                                 
C 2     10+K       SINGULAR MATRIX OF RANK K                            
          COMPLEX A(1)                                                  
          REAL CSYNM,EPS                                                
          REAL R1MACH                                                   
          INTEGER INTER(N)                                              
          CALL ENTER(1)                                                 
C/6S                                                                    
C         IF(N.LT.1) CALL SETERR(12HCSYDC-N.LT.1,12,1,2)                
C/7S                                                                    
          IF(N.LT.1) CALL SETERR('CSYDC-N.LT.1',12,1,2)                 
C/                                                                      
C COMPUTE NORM OF THE MATRIX                                            
          EPS=R1MACH(4)*CSYNM(N,A)                                      
          CALL CSYMD(N,A,INTER,EPS)                                     
C/6S                                                                    
C         IF (NERROR(IER).NE.0)                                         
C    1      CALL N5ERR(21HCSYDC-SINGULAR MATRIX,21,IER,1)               
C/7S                                                                    
          IF (NERROR(IER).NE.0)                                         
     1      CALL N5ERR('CSYDC-SINGULAR MATRIX',21,IER,1)                
C/                                                                      
          CALL LEAVE                                                    
          RETURN                                                        
          END                                                           
          REAL FUNCTION CSYNM(N,A)                                      
          COMPLEX A(1)                                                  
          REAL SUM                                                      
C THIS SUBROUTINE COMPUTES THE 1 NORM OF A SYMMETRIC MATRIX             
C STORED IN PACKED FORM                                                 
C/6S                                                                    
C         IF (N.LT.1) CALL SETERR(12HCSYNM-N.LT.1,12,1,2)               
C/7S                                                                    
          IF (N.LT.1) CALL SETERR('CSYNM-N.LT.1',12,1,2)                
C/                                                                      
          L=0                                                           
          CSYNM=0.E0                                                    
          DO 10 I=1,N                                                   
             SUM=0.E0                                                   
             IF(I.EQ.1) GO TO 4                                         
             IM1=I-1                                                    
             JJ=I                                                       
            DO 3 J=1,IM1                                                
                SUM=SUM+CABS(A(JJ))                                     
                JJ=JJ+N-J                                               
 3           CONTINUE                                                   
 4           CONTINUE                                                   
             DO 5 J=I,N                                                 
                L=L+1                                                   
                SUM=SUM+CABS(A(L))                                      
 5           CONTINUE                                                   
             IF (SUM.GT.CSYNM) CSYNM=SUM                                
 10        CONTINUE                                                     
           RETURN                                                       
           END                                                          
        SUBROUTINE  CSYMD(N,A,INTER,EPS)                                
C                                                                       
C MNEMONIC -COMPLEX SYMMETRIC DECOMPOSITION                             
C GIVEN A  SYMMETRIC MATRIX OF ORDER N STORED IN A CSYMMETRIC           
C STORAGE SCHEME IN THE VECTOR A BY COLUMNS,THIS ROUTINE DETERMINES ITS 
C DECOMPOSITION INTO PMDM(TRANSPOSE)P(TRANSPOSE) WHERE P IS A           
C PERMUTATION MATRIX,M IS A UNIT LOWER TRIANGULAR MATRIX,AND D IS A     
C BLOCK DIAGONAL MATRIX WITH BLOCKS OF ORDER 1 AND 2 WHERE D(I+1,1)     
C IS NONZERO WHENEVER M(I+1,I) IS ZERO.                                 
C INPUT PARAMTERS                                                       
C    N         THE ORDER OF THE PROBLEM                                 
C     A        A VECTOR OF LENGTH N*(N+1)/2 CONTAINING                  
C              THE MATRIX A STORED BY COLUMNS.I.E. T E FIRST            
C              COLUMN OCCUPIES THE FIRST N ELEMENTS OF THE VECTOR,      
C              ELEMENTS (2,2) THROUGH (N,2) OF A OCCUPY THE NEXT N-1    
C              ELEMENTS OF THE VECTOR.                                  
C              THE SUBROUTINE DESTROYS THE ORIGINAL MATRIX              
C     EPS      REAL VARIABLE, IF THE MAGNITUDE OF A 1 X 1 PIVOT IS      
C              LESS THAN EPS, THE MATRIX IS CONSIDERED SINGULAR         
C OUTPUT PARAMETERS                                                     
C    A         CONTAINS THE DECOMPOSITION                               
C    INTER     AN INTEGER VECTOR OF LENGTH RECORDING THE INTERCHANGES   
C              GENERATED                                                
C ERROR CONDITIONS                                                      
C    1        N IS LESS THAN 1       FATAL                              
C   10 +K    SINGULAR MATRIX OF RANK K     RECOVERABLE                  
C                                                                       
        COMPLEX A(1),TEMP,SAVE,DENOM,AII,AIP1,AIP1I                     
         REAL EPS                                                       
        REAL ALPHA,ALFLAM,AAII,LAMBDA,SIGMA                             
        INTEGER INTER(N)                                                
C/6S                                                                    
C       IF (N.LT.1) CALL SETERR(12HCSYMD-N.LT.1,12,1,2)                 
C/7S                                                                    
        IF (N.LT.1) CALL SETERR('CSYMD-N.LT.1',12,1,2)                  
C/                                                                      
        INTER(N)=N                                                      
        ALPHA=(1.0+SQRT(17.0))/8.0                                      
        CALL ENTER(1)                                                   
        I=1                                                             
        IERR=0                                                          
        II=1                                                            
        NI=N                                                            
 10     IF(I.GE.N) GO TO  100                                           
        AAII=CABS1(A(II))                                               
        INTER(I)=I                                                      
C                                                                       
C FIND THE LARGEST OFF DIAGONAL ELEMENT IN THE ITH COLUMN               
C                                                                       
        IIP1=II+1                                                       
        LAMBDA=CABS1(A(IIP1))                                           
        IP1=I+1                                                         
        IP2=I+2                                                         
        NMI=N-I                                                         
        JI=IIP1                                                         
        IF(IP2.GT.N) GO TO 16                                           
        DO 15 KI=IIP1,NI                                                
           IF(CABS1(A(KI)).LE.LAMBDA) GO TO 15                          
           LAMBDA=CABS1(A(KI))                                          
           JI=KI                                                        
 15     CONTINUE                                                        
 16     ALFLAM=ALPHA*LAMBDA                                             
        IF (AAII.GE.ALFLAM) GO TO 60                                    
C                                                                       
C FIND THE LARGEST OFFDIAGONAL ELEMENT IN THE JTH COLUMN                
C                                                                       
        SIGMA=LAMBDA                                                    
        J=I+JI-II                                                       
        NMJP1=N-J+1                                                     
        NJ=(J*(N+NMJP1))/2                                              
        JJ=NJ-(N-J)                                                     
        JJP1=JJ+1                                                       
        IF(JJP1.GT.NJ) GO TO 21                                         
        DO 20 KJ=JJP1,NJ                                                
           IF(CABS1(A(KJ)).GT.SIGMA) SIGMA =CABS1(A(KJ))                
 20     CONTINUE                                                        
 21     NMIM1=NMI-1                                                     
        IF(NMJP1.GT.NMIM1) GO TO 26                                     
        KJ=JJ                                                           
        DO 25 K=NMJP1,NMIM1                                             
           KJ=KJ-K                                                      
           IF(CABS1(A(KJ)).GT.SIGMA) SIGMA=CABS1(A(KJ))                 
 25     CONTINUE                                                        
 26     IF (AAII.GE.ALFLAM*(LAMBDA/SIGMA)) GO TO 60                     
        IF (CABS1(A(JJ)).GE.ALPHA*SIGMA) GO TO 55                       
C                                                                       
C PERFORM A 2 BY 2 PIVOT STEP                                           
C                                                                       
        IP1IP1=IIP1+NMI                                                 
        INTER(I)=J                                                      
        IF(IP2.GT.N) GO TO 51                                           
        IF(J.EQ.IP1) GO TO 30                                           
        CALL CI4SP1(A,N,J,IP1,IP1IP1,JJ)                                
        TEMP=A(JI)                                                      
        A(JI)=A(IIP1)                                                   
        A(IIP1)=TEMP                                                    
 30     AIP1I=A(IIP1)                                                   
        AII=A(II)/AIP1I                                                 
        AIP1=A(IP1IP1)                                                  
        DENOM=AII*AIP1-AIP1I                                            
        JB=IIP1+1                                                       
        II=IIP1+2*NMI                                                   
        L=II                                                            
        DO 50 JI=JB,NI                                                  
           JIPNMI=JI+NMI                                                
           TEMP=(A(JI)-AII*A(JIPNMI))/DENOM                             
           SAVE=-(A(JIPNMI)+TEMP*AIP1)/AIP1I                            
           DO 40 KJ=JI,NI                                               
              KJ2=KJ+NMI                                                
              A(L)=A(L)+A(KJ)*SAVE+A(KJ2)*TEMP                          
              L=L+1                                                     
 40        CONTINUE                                                     
           A(JI)=SAVE                                                   
           A(JIPNMI)=TEMP                                               
 50     CONTINUE                                                        
 51     INTER(IP1)=-1                                                   
        I=IP2                                                           
        NI=NI+2*NMI-1                                                   
        GO TO 10                                                        
C                                                                       
C INTERCHANGE THE ITH AND  JTH ROWS AND COLUMNS                         
C                                                                       
 55     INTER(I)=J                                                      
        CALL CI4SP1(A,N,J,I,II,JJ)                                      
C                                                                       
C PERFORM A 1 X1 PIVOT                                                  
C                                                                       
 60     IF (CABS1(A(II)).GT.EPS) GO TO 61                               
        A(II)=CMPLX(EPS,0.0)                                            
C/6S                                                                    
C        IF (IERR.EQ.0)CALL SETERR(21HCSYMD-SINGULAR MATRIX,21,9+I,1)   
C/7S                                                                    
         IF (IERR.EQ.0)CALL SETERR('CSYMD-SINGULAR MATRIX',21,9+I,1)    
C/                                                                      
         IERR=1                                                         
 61     AII=A(II)                                                       
        IF (CABS1(AII).EQ.0.0)AII=CMPLX(1.0,0.0)                        
        II=IIP1+NMI                                                     
        L=II                                                            
        DO 80 JI=IIP1,NI                                                
           SAVE=-A(JI)/AII                                              
           DO 70 KJ=JI,NI                                               
              A(L)=A(L)+A(KJ)*SAVE                                      
              L=L+1                                                     
 70        CONTINUE                                                     
           A(JI)=SAVE                                                   
 80     CONTINUE                                                        
 81     I=IP1                                                           
        NI=NI+NMI                                                       
        GO TO 10                                                        
 100     CONTINUE                                                       
         IF (I.GT.N) GO TO 120                                          
        IF (CABS1(A(II)).GT.EPS) GO TO 120                              
          A(II)=CMPLX(EPS,0.0)                                          
C/6S                                                                    
C         IF (IERR.EQ.0)                                                
C    1    CALL SETERR(21HCSYMD-SINGULAR MATRIX,21,9+I,1)                
C/7S                                                                    
          IF (IERR.EQ.0)                                                
     1    CALL SETERR('CSYMD-SINGULAR MATRIX',21,9+I,1)                 
C/                                                                      
 120     CALL LEAVE                                                     
        RETURN                                                          
        END                                                             
        SUBROUTINE  CSYFBS(N,A,B,IB,NB,INTER)                           
C                                                                       
C THIS SUBROUTINE SOLVES THE LINEAR CSYSTEM AX=B WHERE A IS A D.P.      
C SYMMETRIC MATRIX OF ORDER N WHOSE DECOMPOSITION HAS BEEN COMPUTED     
C BY THE SUBROUTINE  CSYMD AND LEFT IN THE VECTOR A                     
C INPUT PARAMETERS                                                      
C     N     THE ORDER OF THE PROBLEM                                    
C     A     A D.P. VECTOR CONTAINING THE DECOMPOSITION COMPUTED         
C           BY  CSYMD                                                   
C     B     THE RIGHT HAND SIDE,WILL BE DESTROYED ON OUTPUT             
C     INTER A RECORD OF THE PERMUTATIONS PERFORMED BY  CSYMD            
C OUTPUT PARAMETERS                                                     
C     B     THE SOLUTION TO THE PROBLEM                                 
C ERROR CONDITIONS                                                      
C     1    N IS LESS THAN 1    FATAL                                    
C     2    IB LESS THAN N      FATAL                                    
C     3    NB LESS THAN 1      FATAL                                    
C    10+K       SINGULAR MATRIX  OF RANK K RECOVERABLE                  
        COMPLEX A(N),B(IB,NB),TEMP,SAVE,DENOM                           
        INTEGER INTER(N)                                                
        CALL ENTER(1)                                                   
C/6S                                                                    
C       IF (N.LT.1)CALL SETERR(13HCSYFBS-N.LT.1,13,1,2)                 
C       IF (IB.LT.N) CALL SETERR(14HCSYFBS-IB.LT.N,14,2,2)              
C       IF (NB.LT.1) CALL SETERR(14HCSYFBS-NB.LT.1,14,3,2)              
C/7S                                                                    
        IF (N.LT.1)CALL SETERR('CSYFBS-N.LT.1',13,1,2)                  
        IF (IB.LT.N) CALL SETERR('CSYFBS-IB.LT.N',14,2,2)               
        IF (NB.LT.1) CALL SETERR('CSYFBS-NB.LT.1',14,3,2)               
C/                                                                      
C                                                                       
C SOLVE MDY=B AND STORE Y IN THE VECTOR B                               
C                                                                       
        DO 400 ICOL=1,NB                                                
        I=1                                                             
        JI=1                                                            
 10     IF (I.GE.N) GO TO 200                                           
        ICH=INTER(I)                                                    
        SAVE=B(ICH,ICOL)                                                
        IP1=I+1                                                         
        IF(INTER(IP1).LT.0) GO TO 30                                    
C HANDLE A 1 X 1 PIVOT                                                  
        B(ICH,ICOL)=B(I,ICOL)                                           
         IF(CABS1(A(JI)).EQ.0.E0) GO TO 300                             
 15     B(I,ICOL)=SAVE/A(JI)                                            
        JI=JI+1                                                         
        DO 20 J=IP1,N                                                   
           B(J,ICOL)=B(J,ICOL)+A(JI)*SAVE                               
           JI=JI+1                                                      
 20     CONTINUE                                                        
        I=IP1                                                           
        GO TO 10                                                        
C HANDLE A 2 X 2 PIVOT                                                  
 30     TEMP=B(I,ICOL)                                                  
        B(ICH,ICOL)=B(IP1,ICOL)                                         
 130    JIP1=JI+1                                                       
        NMI=N-I                                                         
        JNMI=JIP1+NMI                                                   
        DENOM=A(JNMI)*A(JI)/A(JIP1)-A(JIP1)                             
        B(IP1,ICOL)=(SAVE*A(JI)/A(JIP1)-TEMP)/DENOM                     
        B(I,ICOL)=(SAVE-B(IP1,ICOL)*A(JNMI))/A(JIP1)                    
        IF (I+2.GT.N) GO TO 41                                          
        IP2=I+2                                                         
        JI=JI+2                                                         
        DO 40 J=IP2,N                                                   
           JIPNMI=JI+NMI                                                
           B(J,ICOL)=B(J,ICOL)+A(JI)*TEMP+A(JIPNMI)*SAVE                
           JI=JI+1                                                      
 40     CONTINUE                                                        
 41     I=I+2                                                           
        JI=JI+NMI                                                       
        GO TO 10                                                        
 200    IF (I.NE.N) GO TO 202                                           
        IF (CABS1(A(JI)).EQ.0.E0) GO TO 300                             
 201    B(I,ICOL)=B(I,ICOL)/A(JI)                                       
        JK=N*(N+1)/2-1                                                  
        I=N-1                                                           
        GO TO 210                                                       
C                                                                       
C NOW SOLVE M(TRANSPOSE) X= Y FOR X,WHERE Y IS STORED                   
C IN THE VECTOR B AND STORE X IN B                                      
C                                                                       
 202    JK=(N*(N+1))/2-4                                                
        I=N-2                                                           
 210    IF(I.LE.0) GO TO 400                                            
        KEND=1                                                          
        IF(INTER(I).LE.0) KEND =2                                       
        IP1=I+1                                                         
        DO 250 KK=1,KEND                                                
           K=IP1-KK                                                     
           SAVE=B(K,ICOL)                                               
           DO 240 J=IP1,N                                               
              SAVE=SAVE+A(JK)*B(J,ICOL)                                 
              JK=JK+1                                                   
 240       CONTINUE                                                     
           B(K,ICOL)=SAVE                                               
           JK=JK-2*(N-K)-1                                              
 250    CONTINUE                                                        
        JK=JK-1                                                         
 251    SAVE=B(I,ICOL)                                                  
C INTERCHANGE THE ELEMENTS OF THE SOLUTION                              
        IKEND=IP1-KEND                                                  
        ICH=INTER(IKEND)                                                
        B(I,ICOL)=B(ICH,ICOL)                                           
        B(ICH,ICOL)=SAVE                                                
        I=I-KEND                                                        
        GO TO 210                                                       
 400     CONTINUE                                                       
       GO TO 301                                                        
C/6S                                                                    
C300   CALL SETERR(22HCSYFBS-SINGULAR MATRIX,22,9+I,1)                  
C/7S                                                                    
 300   CALL SETERR('CSYFBS-SINGULAR MATRIX',22,9+I,1)                   
C/                                                                      
 301   CALL LEAVE                                                       
       RETURN                                                           
        END                                                             
        SUBROUTINE CI4SP1(A,N,J,I,II,JJ)                                
C                                                                       
C THIS SUBROUTINE INTERCHANGES ROW AND COLUMN I AND J,WHERE J IS        
C GREATER THAN I OF THE (N-I+1) SUBMATRIX OF A SYMMETRIC MATRIX         
C STORED IN THE VECTOR A                                                
C                                                                       
        COMPLEX A(N),TEMP                                               
        NMI=N-I                                                         
        JI=II+J-I                                                       
        JIM1=JI-1                                                       
        IF(I+1.GT.J-1) GO TO 21                                         
        IIP1=II+1                                                       
        JDISP=NMI+IIP1                                                  
        DO 20 KI =IIP1,JIM1                                             
           JI=JI+JDISP-KI                                               
           TEMP=A(KI)                                                   
           A(KI)=A(JI)                                                  
           A(JI)=TEMP                                                   
 20     CONTINUE                                                        
C INTERCHANGE THE DIAGONAL ELEMENTS                                     
 21     TEMP=A(II)                                                      
        A(II)=A(JJ)                                                     
        A(JJ)=TEMP                                                      
        IF (J+1.GT.N) RETURN                                            
C INTERCHANGE THE ELEMENTS BELOW BOTH DIAGONALS                         
        JIP1=JIM1+2                                                     
        IN=II+NMI                                                       
        KJ=JJ                                                           
        DO 30 KI=JIP1,IN                                                
           KJ=KJ+1                                                      
           TEMP=A(KJ)                                                   
           A(KJ)=A(KI)                                                  
           A(KI)=TEMP                                                   
 30     CONTINUE                                                        
        RETURN                                                          
        END                                                             
         SUBROUTINE CSYML(N,C,X,B)                                      
C                                                                       
C THIS SUBROUTINE SET B=AX WHERE X IS A VECTOR                          
C AND A IS A SYMMETRIC MATRIX PACKED INTO C                             
C                                                                       
C INPUT PARAMETERS                                                      
C N      LENGTH OF VECTOR                                               
C C      ARRAY INTO WHICH SYMMETRIC MATRIX IS PACKED ACCORDING          
C        TO THE SCHEME                                                  
C        1                                                              
C        2 5                                                            
C        3 6 8                                                          
C        4 7 9 10                                                       
C X      N-VECTOR TO BE MULTPLIED                                       
C OUTPUT PARAMETER                                                      
C B      AX                                                             
C ERROR CONDITIONS                                                      
C  1     N<1 FATAL                                                      
C                                                                       
       COMPLEX C(1),X(N),B(N)                                           
       COMPLEX SUM,XI                                                   
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H CSYML-N.LT.1,13,1,2)                  
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' CSYML-N.LT.1',13,1,2)                   
C/                                                                      
       DO 10 I=1,N                                                      
          B(I)=CMPLX(0.0,0.0)                                           
 10    CONTINUE                                                         
C                                                                       
C L POINTS TO POSITION IN C ARRAY                                       
C                                                                       
       L=0                                                              
       DO 30 I=1,N                                                      
          L=L+1                                                         
          XI=X(I)                                                       
          B(I)=B(I)+C(L)*XI                                             
          IF (I.EQ.N) RETURN                                            
          IP1=I+1                                                       
          SUM=CMPLX(0.0,0.0)                                            
          DO 20 J=IP1,N                                                 
             L=L+1                                                      
             SUM=SUM+C(L)*X(J)                                          
             B(J)=B(J)+C(L)*XI                                          
 20       CONTINUE                                                      
          B(I)=B(I)+SUM                                                 
 30   CONTINUE                                                          
      RETURN                                                            
      END                                                               
       SUBROUTINE  CHESS(N,A,B,IB,NB,COND)                              
C MNEMONIC-COMPLEX SYMMETRIC CHESTEM SOLVER                             
         INTEGER N,IB,NB                                                
        COMPLEX A(N),B(IB,NB)                                           
C                                                                       
C THIS SUBROUTINE SOLVES THE PROBLEM AX=B WHERE                         
C A IS SYMMETRIC MATRIX,WHICH MAY BE INDEFINITE                         
C BUT NOT SINGULAR                                                      
C AN ESTIMATE OF THE CONDITION NUMBER IS ALSO GIVEN                     
C                                                                       
C INPUT PARAMETERS                                                      
C N       ORDER OF THE PROBLEM                                          
C A      AN N X(N+1)/2 VECTOR CONTAINING THE                            
C        COEFFICIENT MATRIX STORED BY COLUMNS ,                         
C        I.E. IN THE ORDER                                              
C            1                                                          
C            2  5                                                       
C            3  6  8                                                    
C            4  7  9 10                                                 
C B     A MATRIX CONTAINING THE RIGHT HAND SIDES                        
C IB     THE ROW DIMENSION OF THE B MATRIX                              
C NB     THE NUMBER OF RIGHT HAND SIDES                                 
C                                                                       
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION                                                   
C COND   ESTIMATE ON THE CONDITION NUMBER                               
C ERROR CONDITIONS                                                      
C   1       N.LT.1       FATAL                                          
C   2       IB.LT.N      FATAL                                          
C   3       NB.LT.1      FATAL                                          
C   10+K    SINGULAR MATRIX OF RANK K  RECOVERABLE                      
C                                                                       
C THIS SUBROUTINE CALLS  CHECE AND  CHEFBS                              
C N EXTRA INTEGER LOCATIONS ARE REQUESTED BY THE STORAGE ALLOCATOR      
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       REAL COND                                                        
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(12HCHESS-N.LT.1,12,1,2)                   
C      IF (IB.LT.N) CALL SETERR(13HCHESS-IB.LT.N,13,2,2)                
C      IF (NB.LT.1) CALL SETERR(13HCHESS-NB.LT.1,13,3,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('CHESS-N.LT.1',12,1,2)                    
       IF (IB.LT.N) CALL SETERR('CHESS-IB.LT.N',13,2,2)                 
       IF (NB.LT.1) CALL SETERR('CHESS-NB.LT.1',13,3,2)                 
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL CHECE(N,A,INTER(IN),COND)                                   
       IF (NERROR(IER).EQ.0) GO TO 10                                   
C/6S                                                                    
C        CALL N5ERR(21HCHESS-SINGULAR MATRIX,21,IER,1)                  
C/7S                                                                    
         CALL N5ERR('CHESS-SINGULAR MATRIX',21,IER,1)                   
C/                                                                      
         GO TO 200                                                      
 10    CONTINUE                                                         
          CALL CHEFBS(N,A,B,IB,NB,INTER(IN))                            
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
      SUBROUTINE  CHECE(N, C, INTER, COND)                              
      INTEGER N                                                         
      INTEGER INTER(N)                                                  
      COMPLEX C(1)                                                      
      REAL COND                                                         
      COMMON /CSTAK/ D                                                  
      DOUBLE PRECISION D(500)                                           
      COMPLEX DC(500)                                                   
      INTEGER IZ, IERR, ISTKGT, NERROR                                  
      REAL ANORM, R1MACH, CHENM                                         
      EQUIVALENCE(DC(1),D(1))                                           
C SYMMETRIC CONDITION ESTIMATION                                        
C INPUT PARMETERS                                                       
C N          NUMBER OF ROWS IN A                                        
C C       VECTOR INTO WHICH THE SYMMETRIC MATRIX A IS                   
C         PACKED BY COLUMNS ACCORDING TO THE FOLLOWING                  
C         TEMPLATE                                                      
C            1                                                          
C            2  5                                                       
C            3  6  8                                                    
C            4  7  9  10                                                
C OUTPUT PARAMETERS                                                     
C C          MDM(TRANSPOSE) DECOMPOSITION SUITABLE AS INPUT             
C            INTO CHEFBS                                                
C INTER      INTEGER ARRAY OF LENGTH N OF INTERCHANGES PERFORMED        
C            DURING DECOMPOSITION                                       
C            SUITABLE OF INPUT INTO CHEFBS                              
C COND       LOWER BOUND ON THE CONDITION NUMBER OF A                   
C STORAGE ALLOCATED-  N COMPLEX LOCATIONS                               
C ERROR CONDITIONS                                                      
C 1          N.LT.1                                                     
C/6S                                                                    
C     IF (N .LT. 1) CALL SETERR(12HCHECE-N.LT.1, 12, 1, 2)              
C/7S                                                                    
      IF (N .LT. 1) CALL SETERR('CHECE-N.LT.1', 12, 1, 2)               
C/                                                                      
      CALL ENTER(1)                                                     
      ANORM=CHENM(N,C)                                                  
      CALL  CHEMD(N, C, INTER,0.0)                                      
      IF (NERROR(IERR) .EQ. 0) GOTO 1                                   
         COND = R1MACH(2)                                               
         CALL LEAVE                                                     
         RETURN                                                         
   1  IZ = ISTKGT(N, 5)                                                 
      CALL C4HCE(N, C, COND, INTER, ANORM, DC(IZ))                      
      CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE C4HCE(N, A, COND, INTER, ANORM, Z)                     
      INTEGER N                                                         
      INTEGER INTER(N)                                                  
      REAL COND, ANORM                                                  
      COMPLEX A(1), Z(N)                                                
      INTEGER JI, JK,    L                                              
      INTEGER IP1,  I, J, ICH, JIS                                      
      REAL CABS1,S,SM                                                   
      COMPLEX T, EK, WK, WKM, TEMP, AJI, SAVE                           
      COMPLEX Z1,Z2,CSIGN1                                              
      REAL  SCASUM, R1MACH, YNORM, CAJI, ARGE                           
       CSIGN1(Z1,Z2)=CABS1(Z1)*(Z2/CABS1(Z2))                           
C TEST FOR 1 X 1                                                        
      IF (N .NE. 1) GOTO 1                                              
         COND = 1                                                       
         RETURN                                                         
   1  EK = (1.0,0.0)                                                    
      DO  2 J = 1, N                                                    
         Z(J) = (0.0,0.0)                                               
   2     CONTINUE                                                       
         L=0                                                            
      I = 1                                                             
      JI = 1                                                            
C SOLVE LDY=E WHERE THE COMPONENTS OF E ARE PLUS                        
C AND MINUS 1 WHERE THE SIGNS ARE CHOSEN TO PRODUCE MAXIMUM             
C GROWTH. LOOK AHEAD IS USED ONLY FOR 1 X1 PIVOTS                       
   3  IF (I .GE. N) GOTO  13                                            
   4        ICH = INTER(I)                                              
            SAVE = Z(ICH)                                               
            IF ((CABS1(SAVE)) .NE. 0.0) EK = CSIGN1(EK, -SAVE)          
            IP1 = I+1                                                   
            IF (INTER(IP1) .LT. 0) GOTO 9                               
               Z(ICH) = Z(I)                                            
C PROCESS A 1 X1  PIVOT                                                 
               IF (CABS1(EK-SAVE) .LE. CABS1(A(JI))) GOTO 5             
                  S = CABS1(A(JI)/(EK-SAVE))                            
                  CALL CSSCAL(N, S, Z, 1)                               
                  EK = CMPLX(S,0.0)*EK                                  
                  SAVE = CMPLX(S,0.0)*SAVE                              
   5           WK = EK-SAVE                                             
               WKM = (-EK)-SAVE                                         
               S = CABS1(WK)                                            
               SM = CABS1(WKM)                                          
               AJI = A(JI)                                              
               JI = JI+1                                                
               JIS = JI                                                 
               DO  6 J = IP1, N                                         
                  SM = SM+CABS1(Z(J)-WKM*CONJG(A(JI)))                  
                  Z(J) = Z(J)-WK*CONJG(A(JI))                           
                  S = S+CABS1(Z(J))                                     
                  JI = JI+1                                             
   6              CONTINUE                                              
               IF (S .GE. SM) GOTO 8                                    
                  T = WKM-WK                                            
                  WK = WKM                                              
                  DO  7 J = IP1, N                                      
                     Z(J) = Z(J)-T*CONJG(A(JIS))                        
                     JIS = JIS+1                                        
   7                 CONTINUE                                           
   8           CAJI=CABS1(A(JI))                                        
               IF (CAJI.EQ.0.0)Z(I)=(1.E0,0.E0)                         
               IF (CAJI.NE.0.0)Z(I)= WK /AJI                            
               I = IP1                                                  
C PROCESS A 2 X 2 PIVOT                                                 
               GOTO  12                                                 
   9           Z(ICH) = Z(IP1)                                          
               SAVE = SAVE-EK                                           
               TEMP = Z(I)                                              
               IF (CABS1(TEMP) .NE. 0.0) EK = CSIGN1(EK, -TEMP)         
               TEMP = TEMP-EK                                           
               CALL C4H2B2(N,I,JI,A,Z,TEMP,SAVE)                        
  12        CONTINUE                                                    
C SOLVE MDY=B AND STORE Y IN B                                          
         GOTO  3                                                        
  13  IF (I .NE. N) GOTO 14                                             
         IF (CABS1(A(JI)).EQ.0.0) GO TO 138                             
            IF (CABS1(Z(I)).NE.0.0) EK=CSIGN1(EK,-Z(I))                 
            Z(I)=(EK-Z(I))/A(JI)                                        
            GO TO 139                                                   
 138        Z(I)=(1.0,0.0)                                              
 139     JK = (N*(N+1))/2-1                                             
         I = N-1                                                        
         GOTO  15                                                       
  14     JK = (N*(N+1))/2-4                                             
         I = N-2                                                        
  15  S = 1.0/SCASUM(N, Z, 1)                                           
      CALL CSSCAL(N, S, Z, 1)                                           
 16   CALL C4HBS(N,I,A,Z,JK,INTER)                                      
  19  S = 1.0/SCASUM(N, Z, 1)                                           
      CALL CSSCAL(N, S, Z, 1)                                           
      YNORM = 1.0                                                       
      I=1                                                               
      JI=1                                                              
 1010 IF (I.GE.N) GO TO 1200                                            
      ICH=INTER(I)                                                      
      SAVE=Z(ICH)                                                       
      IP1=I+1                                                           
      IF(INTER(IP1).LT.0) GO TO 1030                                    
         Z(ICH)=Z(I)                                                    
         IF (CABS1(SAVE).LE.CABS1(A(JI))) GO TO 1015                    
             S=CABS1(A(JI)/SAVE)                                        
             CALL CSSCAL(N,S,Z,1)                                       
             YNORM=S*YNORM                                              
             SAVE=CMPLX(S,0.0)*SAVE                                     
 1015     CAJI=CABS1(A(JI))                                             
          IF (CAJI.EQ.0.0) Z(I)=(1.0,0.0)                               
          IF (CAJI.NE.0.0) Z(I)=SAVE/A(JI)                              
         JI=JI+1                                                        
         DO 1020 J=IP1,N                                                
            Z(J)=Z(J)+SAVE*CONJG(A(JI))                                 
            JI=JI+1                                                     
 1020    CONTINUE                                                       
         I=IP1                                                          
         GO TO 1010                                                     
 1030    TEMP=Z(I)                                                      
         Z(ICH)=Z(IP1)                                                  
         CALL C4H2B2(N,I,JI,A,Z,TEMP,SAVE)                              
         GO TO 1010                                                     
 1200    IF (I.NE.N)GO TO 1202                                          
         Z(I)=Z(I)/A(JI)                                                
         JK=(N*(N+1))/2-1                                               
         I=N-1                                                          
         GO TO1210                                                      
 1202    JK=(N*(N+1))/2-3                                               
         I=N-2                                                          
 1210    CALL C4HBS(N,I,A,Z,JK,INTER)                                   
      S = 1.0/SCASUM(N, Z, 1)                                           
       CALL CSSCAL(N,S,Z,1)                                             
      YNORM = YNORM*S                                                   
      ARGE = R1MACH(2)                                                  
      IF (YNORM .GT. 1.0) GOTO 21                                       
         IF (ANORM .LE. YNORM*ARGE) GOTO 20                             
            COND = ARGE                                                 
            RETURN                                                      
  20  CONTINUE                                                          
  21  COND = ANORM/YNORM                                                
      RETURN                                                            
      END                                                               
       SUBROUTINE C4HBS(N,I,A,Z,JK,INTER)                               
       INTEGER N,I,JK                                                   
       INTEGER INTER(N)                                                 
       INTEGER IP1,K,KK,KEND,ICH,IKENT                                  
       COMPLEX A(N),Z(N)                                                
       COMPLEX SAVE                                                     
  16  IF (I .LE. 0) RETURN                                              
         KEND = 1                                                       
         IF (INTER(I) .LE. 0) KEND = 2                                  
         IP1 = I+1                                                      
         DO  18 KK = 1, KEND                                            
            K = IP1-KK                                                  
            SAVE = Z(K)                                                 
            DO  17 J = IP1, N                                           
               SAVE = SAVE+A(JK)*Z(J)                                   
               JK = JK+1                                                
  17           CONTINUE                                                 
            Z(K) = SAVE                                                 
            JK = JK-2*(N-K)-1                                           
  18        CONTINUE                                                    
         JK = JK-1                                                      
         SAVE = Z(I)                                                    
         IKENT = IP1-KEND                                               
         ICH = INTER(IKENT)                                             
         Z(I) = Z(ICH)                                                  
         Z(ICH) = SAVE                                                  
         I = I-KEND                                                     
         GOTO  16                                                       
         END                                                            
      SUBROUTINE C4H2B2(N,I,JI,A,Z,TEMP,SAVE)                           
      INTEGER N,I,JI                                                    
      COMPLEX A(N),Z(N),TEMP,SAVE                                       
      INTEGER JIP1,NMI,JNMI,J,JIPNMI                                    
      COMPLEX DENOM                                                     
               JIP1 = JI+1                                              
               IP1=I+1                                                  
               NMI = N-I                                                
               JNMI = JIP1+NMI                                          
               DENOM = A(JNMI)*A(JI)/A(JIP1)-A(JIP1)                    
               Z(IP1) = (SAVE*A(JI)/A(JIP1)-TEMP)/DENOM                 
               Z(I) = (SAVE-Z(IP1)*A(JNMI))/A(JIP1)                     
               IP2 = I+2                                                
               JI = JI+2                                                
               JIPNMI = JI+NMI                                          
               IF (IP2 .GT. N) GOTO 11                                  
                  DO  10 J = IP2, N                                     
                    Z(J) = Z(J)+CONJG(A(JI))*TEMP+CONJG(A(JIPNMI))*SAVE 
                     JI = JI+1                                          
                     JIPNMI = JIPNMI+1                                  
  10                 CONTINUE                                           
  11           I = IP2                                                  
               JI = JI+NMI                                              
      RETURN                                                            
      END                                                               
       SUBROUTINE CHELE(N,A,B,IB,NB)                                    
C MNEMONIC-COMPLEX SYMMETRICLINEAR EQUATIONS                            
         INTEGER N,IB,NB                                                
        COMPLEX A(N),B(IB,NB)                                           
C                                                                       
C THIS SUBROUTINE SOLVES THE PROBLEM AX=B WHERE                         
C A IS SYMMETRIC MATRIX,WHICH MAY BE INDEFINITE                         
C BUT NOT SINGULAR                                                      
C                                                                       
C INPUT PARAMETERS                                                      
C N       ORDER OF THE PROBLEM                                          
C A      AN N X(N+1)/2 VECTOR CONTAINING THE                            
C        COEFFICIENT MATRIX STORED BY COLUMNS ,                         
C        I.E. IN THE ORDER                                              
C            1                                                          
C            2  5                                                       
C            3  6  8                                                    
C            4  7  9 10                                                 
C B     A MATRIX CONTAINING THE RIGHT HAND SIDES                        
C IB     THE ROW DIMENSION OF THE B MATRIX                              
C NB     THE NUMBER OF RIGHT HAND SIDES                                 
C                                                                       
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION                                                   
C ERROR CONDITIONS                                                      
C   1       N.LT.1       FATAL                                          
C   2       IB.LT.N      FATAL                                          
C   3       NB.LT.1      FATAL                                          
C   10+K    SINGULAR MATRIX OF RANK K  RECOVERABLE                      
C                                                                       
C THIS SUBROUTINE CALLS CHEDC AND CHEFBS                                
C N EXTRA INTEGER LOCATIONS ARE REQUESTED BY THE STORAGE ALLOCATOR      
C                                                                       
       COMMON /CSTAK/ D                                                 
       DOUBLE PRECISION D(500)                                          
       INTEGER INTER(1000)                                              
       EQUIVALENCE(D(1),INTER(1))                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(12HCHELE-N.LT.1,12,1,2)                   
C      IF (IB.LT.N) CALL SETERR(13HCHELE-IB.LT.N,13,2,2)                
C      IF (NB.LT.1) CALL SETERR(13HCHELE-NB.LT.1,13,3,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('CHELE-N.LT.1',12,1,2)                    
       IF (IB.LT.N) CALL SETERR('CHELE-IB.LT.N',13,2,2)                 
       IF (NB.LT.1) CALL SETERR('CHELE-NB.LT.1',13,3,2)                 
C/                                                                      
       CALL ENTER(1)                                                    
       IN=ISTKGT(N,2)                                                   
C DECOMPOSE A                                                           
       CALL CHEDC(N,A,INTER(IN))                                        
       IF (NERROR(IER).EQ.0) GO TO 10                                   
C/6S                                                                    
C        CALL N5ERR(21HCHELE-SINGULAR MATRIX,21,IER,1)                  
C/7S                                                                    
         CALL N5ERR('CHELE-SINGULAR MATRIX',21,IER,1)                   
C/                                                                      
         GO TO 200                                                      
 10    CONTINUE                                                         
         CALL CHEFBS(N,A,B,IB,NB,INTER(IN))                             
 200   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
       SUBROUTINE CHEDC(N,A,INTER)                                      
C THIS SUBROUTINE DOES THE SYMMETRIC DECOMPOSITION                      
C ALGORITHM OF BUNCH AND KAUFMAN ON A MATRIX                            
C A STORED AS A 1 DIMENSION ARRAY                                       
C INPUT PARAMETERS                                                      
C                                                                       
C N        ORDER OF THE MATRIX                                          
C A        AN N X(N+1)/2 VECTOR CONTAINING THE COEFFICIENT              
C          MATRIX STORED BY COLUMNS IN THE ORDER                        
C             1                                                         
C             2  5                                                      
C             3  6  8                                                   
C             4  7  9 10                                                
C OUTPUT PARAMETERS                                                     
C A       THE DECOMPOSED MATRIX                                         
C INTER     A RECORD OF THE INTERCHANGES PERFORMED                      
C ERROR SITUATIONS                                                      
C 1     N.LT.1    FATAL                                                 
C 2     10+K       SINGULAR MATRIX OF RANK K                            
          COMPLEX A(1)                                                  
          REAL CHENM,EPS                                                
          REAL R1MACH                                                   
          INTEGER INTER(N)                                              
          CALL ENTER(1)                                                 
C/6S                                                                    
C         IF(N.LT.1) CALL SETERR(12HCHEDC-N.LT.1,12,1,2)                
C/7S                                                                    
          IF(N.LT.1) CALL SETERR('CHEDC-N.LT.1',12,1,2)                 
C/                                                                      
C COMPUTE NORM OF THE MATRIX                                            
          EPS=R1MACH(4)*CHENM(N,A)                                      
          CALL CHEMD(N,A,INTER,EPS)                                     
C/6S                                                                    
C         IF (NERROR(IER).NE.0)                                         
C    1      CALL N5ERR(21HCHEDC-SINGULAR MATRIX,21,IER,1)               
C/7S                                                                    
          IF (NERROR(IER).NE.0)                                         
     1      CALL N5ERR('CHEDC-SINGULAR MATRIX',21,IER,1)                
C/                                                                      
          CALL LEAVE                                                    
          RETURN                                                        
          END                                                           
          REAL FUNCTION CHENM(N,A)                                      
          COMPLEX A(1)                                                  
          REAL SUM                                                      
C THIS SUBROUTINE COMPUTES THE 1 NORM OF A HERMETIAN MATRIX             
C STORED IN PACKED FORM                                                 
C/6S                                                                    
C         IF (N.LT.1) CALL SETERR(12HCHENM-N.LT.1,12,1,2)               
C/7S                                                                    
          IF (N.LT.1) CALL SETERR('CHENM-N.LT.1',12,1,2)                
C/                                                                      
          L=0                                                           
          CHENM=0.0                                                     
          DO 10 I=1,N                                                   
             SUM=0.E0                                                   
             IF(I.EQ.1) GO TO 4                                         
             IM1=I-1                                                    
             JJ=I                                                       
            DO 3 J=1,IM1                                                
                SUM=SUM+CABS(A(JJ))                                     
                JJ=JJ+N-J                                               
 3           CONTINUE                                                   
 4           CONTINUE                                                   
             DO 5 J=I,N                                                 
                L=L+1                                                   
                SUM=SUM+CABS(A(L))                                      
 5           CONTINUE                                                   
             IF (SUM.GT.CHENM) CHENM=SUM                                
 10        CONTINUE                                                     
           RETURN                                                       
           END                                                          
        SUBROUTINE CHEMD(N,A,INTER,EPS)                                 
C                                                                       
C MNEMONIC -HERMETIAN MDM(TRANSPOSE) DECOMPOSITION                      
C GIVEN A COMPLEX HERMETIAN MATRIX OF ORDER N STORED IN                 
C THE VECTOR A BY COLUMNS, THIS SUBROUTINE DETERMINES                   
C ITS DECOMPOSITION INTO PMDM(TRANSPOSE)P(TRANSPOSE) WHERE              
C P IS A PERMUTATION MATRRIX,M IS A UNIT LOWER TRIANGULAR               
C MATRIX, AD D IS A BLOCK DIAGONAL MATRIX WITH BLOCKS OF ORDER          
C 1 AND 2 WHERE D(I+1,I) IS NONZERO, WHENEVER M(I+1,I) IS 0.            
C                                                                       
C INPUT PARAMETERS                                                      
C  N    THE ORDER OF THE PROBLEM                                        
C  A    VECTOR OF LENGTH N*(N+1)/2 CONTAINING THE MATRIX                
C       STORED IN THE ORDER 1,1; 2,1; 3,1; ETC.                         
C       THE MATRIX IS DESTROYED BY THE SUBROUTINE                       
C  EPS    IF 1 X 1 PIVOT IS LESS THAN EPS IN ABSOLUTE VALUE             
C         THE MATRIX IS CONSIDERED SINGULAR                             
C OUTPUT PARAMETERS                                                     
C  A    M AND D OF THE DECOMPOSTION                                     
C  INTER AN INTEGER VECTOR OF LENGTH N RECORDING THE INTERCHANGES       
C       GENERATED                                                       
C ERROR CONDITIONS                                                      
C   1      N<1      FATAL                                               
C 10 +K    SINGULAR MATRIX OF RANK K     RECOVERABLE                    
C                                                                       
        REAL EPS                                                        
        COMPLEX A(1),TEMP,SAVE,DENOM,AII,AIP1,AIP1I                     
        REAL ALPHA,ALFLAM,AAII,LAMBDA                                   
        INTEGER INTER(N)                                                
C/6S                                                                    
C       IF (N.LT.1) CALL SETERR(12HCHEMD-N.LT.1,12,1,2)                 
C/7S                                                                    
        IF (N.LT.1) CALL SETERR('CHEMD-N.LT.1',12,1,2)                  
C/                                                                      
        INTER(N)=N                                                      
        ALPHA=(1.0+SQRT(17.0))/8.0                                      
        I=1                                                             
        II=1                                                            
        NI=N                                                            
       CALL ENTER(1)                                                    
       IERR=0                                                           
 10     IF(I.GE.N) GO TO 100                                            
        AAII=CABS1(A(II))                                               
        INTER(I)=I                                                      
C                                                                       
C FIND THE LARGEST OFF DIAGONAL ELEMENT IN THE ITH COLUMN               
C                                                                       
        IIP1=II+1                                                       
        LAMBDA=CABS1(A(IIP1))                                           
        IP1=I+1                                                         
        IP2=I+2                                                         
        NMI=N-I                                                         
        JI=IIP1                                                         
        IF(IP2.GT.N) GO TO 16                                           
        DO 15 KI=IIP1,NI                                                
           IF(CABS1(A(KI)).LE.LAMBDA) GO TO 15                          
           LAMBDA=CABS1(A(KI))                                          
           JI=KI                                                        
 15     CONTINUE                                                        
 16     ALFLAM=ALPHA*LAMBDA                                             
        IF (AAII.GE.ALFLAM) GO TO 60                                    
C                                                                       
C FIND THE LARGEST OFFDIAGONAL ELEMENT IN THE JTH COLUMN                
C                                                                       
        SGMA=LAMBDA                                                     
        J=I+JI-II                                                       
        NMJP1=N-J+1                                                     
        NJ=(J*(N+NMJP1))/2                                              
        JJ=NJ-(N-J)                                                     
        JJP1=JJ+1                                                       
        IF(JJP1.GT.NJ) GO TO 21                                         
        DO 20 KJ=JJP1,NJ                                                
           IF(CABS1(A(KJ)).GT.SGMA) SGMA =CABS1(A(KJ))                  
 20     CONTINUE                                                        
 21     NMIM1=NMI-1                                                     
        IF(NMJP1.GT.NMIM1) GO TO 26                                     
        KJ=JJ                                                           
        DO 25 K=NMJP1,NMIM1                                             
           KJ=KJ-K                                                      
           IF(CABS1(A(KJ)).GT.SGMA) SGMA=CABS1(A(KJ))                   
 25     CONTINUE                                                        
 26     IF (AAII.GE.ALFLAM*(LAMBDA/SGMA)) GO TO 60                      
        IF (CABS1(A(JJ)).GE.ALPHA*SGMA) GO TO 55                        
C                                                                       
C PERFORM A 2 BY 2 PIVOT STEP                                           
C                                                                       
        IP1IP1=IIP1+NMI                                                 
        INTER(I)=J                                                      
        IF(IP2.GT.N) GO TO 51                                           
        IF(J.EQ.IP1) GO TO 30                                           
        CALL I4HP1(A,N,J,IP1,IP1IP1,JJ)                                 
        TEMP=A(JI)                                                      
        A(JI)=A(IIP1)                                                   
        A(IIP1)=TEMP                                                    
 30     AIP1I=A(IIP1)                                                   
        AII=A(II)/AIP1I                                                 
        AIP1=A(IP1IP1)                                                  
        DENOM=AII*AIP1-CONJG(AIP1I)                                     
        JB=IIP1+1                                                       
        II=IIP1+2*NMI                                                   
        L=II                                                            
        DO 50 JI=JB,NI                                                  
           JIPNMI=JI+NMI                                                
           TEMP=(CONJG(A(JI))-AII*CONJG(A(JIPNMI)))/DENOM               
           SAVE=-(CONJG(A(JIPNMI))+TEMP*AIP1)/AIP1I                     
           DO 40 KJ=JI,NI                                               
              KJ2=KJ+NMI                                                
              A(L)=A(L)+A(KJ)*SAVE+A(KJ2)*TEMP                          
              L=L+1                                                     
 40        CONTINUE                                                     
           A(JI)=SAVE                                                   
           A(JIPNMI)=TEMP                                               
 50     CONTINUE                                                        
 51     INTER(IP1)=-1                                                   
        I=IP2                                                           
        NI=NI+2*NMI-1                                                   
        GO TO 10                                                        
C                                                                       
C INTERCHANGE THE ITH AND  JTH ROWS AND COLUMNS                         
C                                                                       
 55     INTER(I)=J                                                      
        CALL I4HP1(A,N,J,I,II,JJ)                                       
C                                                                       
C PERFORM A 1 X1 PIVOT                                                  
C                                                                       
 60     IF(CABS1(A(II)).GT.EPS) GO TO 61                                
        A(II)=CMPLX(EPS,0.0)                                            
C/6S                                                                    
C       IF (IERR.EQ.0)CALL SETERR(21HCHEMD-SINGULAR MATRIX,21,9+I,1)    
C/7S                                                                    
        IF (IERR.EQ.0)CALL SETERR('CHEMD-SINGULAR MATRIX',21,9+I,1)     
C/                                                                      
        IERR=1                                                          
 61     AII=A(II)                                                       
        IF (CABS1(AII).EQ.0.0) AII =CMPLX(1.0,0.0)                      
        KE=II+NMI                                                       
        II=IIP1+NMI                                                     
        L=II                                                            
        DO 80 JI=IIP1,NI                                                
           SAVE=-CONJG(A(JI))/AII                                       
           DO 70 KJ=JI,NI                                               
              A(L)=A(L)+A(KJ)*SAVE                                      
              L=L+1                                                     
 70        CONTINUE                                                     
           A(JI)=SAVE                                                   
 80     CONTINUE                                                        
 81     I=IP1                                                           
        NI=NI+NMI                                                       
        GO TO 10                                                        
 100    IF (I.GT.N) GO TO 120                                           
        IF (CABS1(A(II)).GT.EPS) GO TO 120                              
           A(II)=CMPLX(EPS,0.0)                                         
C/6S                                                                    
C       IF (IERR.EQ.0)CALL SETERR(21HCHEMD-SINGULAR MATRIX,21,9+I,1)    
C/7S                                                                    
        IF (IERR.EQ.0)CALL SETERR('CHEMD-SINGULAR MATRIX',21,9+I,1)     
C/                                                                      
 120    CALL LEAVE                                                      
        RETURN                                                          
        END                                                             
        SUBROUTINE CHEFBS(N,A,B,IB,NB,INTER)                            
C                                                                       
C THIS SUBROUTINE SOLVES THE LINEAR SYSTEM AX=B WHERE A IS A COMPLEX    
C SYMMETRIC MATRIX OF ORDER N WHOSE DECOMPOSITION HAS BEEN COMPUTED     
C BY THE SUBROUTINE CHEMD AND LEFT IN THE VECTOR A,  AND B IS AN N      
C VECTOR. THE SOLUTION X IS RETURNED IN THE VECTOR B. THE VECTOR        
C INTER OF LENGTH N IS GENERATED BY CHEMD AND CONTAINS INFORMATION      
C ABOUT THE PERMUTATIONS PERFORMED ON THE A MATRIX IN CHEMD.            
C                                                                       
C INPUT PARAMETERS                                                      
C   N    ORDER OF THE PROBLEM                                           
C   A    THE COMPLEX VECTOR CONTAINING THE DECOMPOSITION COMPUTED       
C        BY CHEMD                                                       
C  B     THE RIGHT HAND SIDE, WILL BE DESTROYED ON INPUT                
C  IB    LEADING DIMENSION OF B                                         
C  NB    NUMBER OF COLUMNS OF B                                         
C INTER RECORD OF INTERCHANGES PERFORMED BY CHEMD                       
C OUTPUT PARAMETERS                                                     
C  B      THE SOLUTION MATRIX                                           
C ERROR CONDITIONS                                                      
C   1       N<1    FATAL                                                
C   2       IB<N   FATAL                                                
C   3       NB<1   FATAL                                                
C 10+K     SINGULAR MATRIX RANK K   RECOVERABLE                         
        COMPLEX A(1),B(IB,NB),TEMP,SAVE,DENOM                           
        INTEGER INTER(N)                                                
        CALL ENTER(1)                                                   
C/6S                                                                    
C       IF (N.LT.1) CALL SETERR(13HCHEFBS-N.LT.1,13,1,2)                
C       IF (IB.LT.N) CALL SETERR(14HCHEFBS-IB.LT.N,14,2,2)              
C       IF (NB.LT.1) CALL SETERR(14HCHEFBS-NB.LT.1,14,3,2)              
C/7S                                                                    
        IF (N.LT.1) CALL SETERR('CHEFBS-N.LT.1',13,1,2)                 
        IF (IB.LT.N) CALL SETERR('CHEFBS-IB.LT.N',14,2,2)               
        IF (NB.LT.1) CALL SETERR('CHEFBS-NB.LT.1',14,3,2)               
C/                                                                      
C                                                                       
C SOLVE MDY=B AND STORE Y IN THE VECTOR B                               
C SOLVE MC=B AND STOREC IN B                                            
C                                                                       
         DO 400 ICOL=1,NB                                               
        I=1                                                             
        JI=1                                                            
 10     IF (I.GE.N) GO TO 200                                           
        ICH=INTER(I)                                                    
        SAVE=B(ICH,ICOL)                                                
        IP1=I+1                                                         
        IF(INTER(IP1).LT.0) GO TO 30                                    
        B(ICH,ICOL)=B(I,ICOL)                                           
        IF (CABS1(A(JI)).EQ.0.0) GO TO 300                              
 15     B(I,ICOL)=SAVE/A(JI)                                            
        JI=JI+1                                                         
        DO 20 J=IP1,N                                                   
           B(J,ICOL)=B(J,ICOL)+CONJG(A(JI))*SAVE                        
           JI=JI+1                                                      
 20     CONTINUE                                                        
        I=IP1                                                           
        GO TO 10                                                        
 30     TEMP=B(I,ICOL)                                                  
        B(ICH,ICOL)=B(IP1,ICOL)                                         
 130    JIP1=JI+1                                                       
        JI1NI=JIP1+N-I                                                  
        DENOM=A(JI1NI)*A(JI)/A(JIP1)-CONJG(A(JIP1))                     
        B(IP1,ICOL)=(SAVE*A(JI)/A(JIP1)-TEMP)/DENOM                     
        B(I,ICOL)=(SAVE-B(IP1,ICOL)*A(JI1NI))/A(JIP1)                   
        IF (I+2.GT.N) GO TO 41                                          
        IP2=I+2                                                         
        NMI=N-I                                                         
        JI=JI+2                                                         
        DO 40 J=IP2,N                                                   
           JIPNMI=JI+NMI                                                
           B(J,ICOL)=B(J,ICOL)+CONJG(A(JI))*TEMP+CONJG(A(JIPNMI))*SAVE  
           JI=JI+1                                                      
 40     CONTINUE                                                        
 41     I=I+2                                                           
        JI=JI+NMI                                                       
        GO TO 10                                                        
 200    IF (I.NE.N) GO TO 202                                           
        IF (CABS1(A(JI)).EQ.0.0) GO TO 300                              
 201    B(I,ICOL)=B(I,ICOL)/A(JI)                                       
C                                                                       
C NOW SOLVE M(TRANSPOSE) X= Y FOR X,WHERE Y IS STORED                   
C IN THE VECTOR B AND STORE X IN B                                      
C                                                                       
 202    JK=(N*(N+1))/2-1                                                
        IF (I.GT.N) JK=JK-3                                             
        I=I-1                                                           
 210    IF(I.LE.0) GO TO 400                                            
        KEND=1                                                          
        IF(INTER(I).LE.0) KEND =2                                       
        IP1=I+1                                                         
        IF(IP1.GT.N) GO TO 251                                          
        DO 250 KK=1,KEND                                                
           K=IP1-KK                                                     
           SAVE=B(K,ICOL)                                               
           DO 240 J=IP1,N                                               
              SAVE=SAVE+A(JK)*B(J,ICOL)                                 
              JK=JK+1                                                   
 240       CONTINUE                                                     
           B(K,ICOL)=SAVE                                               
           JK=JK-2*(N-K)-1                                              
 250    CONTINUE                                                        
        JK=JK-1                                                         
 251    SAVE=B(I,ICOL)                                                  
        ITEMP=IP1-KEND                                                  
        ICH=INTER(ITEMP)                                                
        B(I,ICOL)=B(ICH,ICOL)                                           
        B(ICH,ICOL)=SAVE                                                
        I=I-KEND                                                        
        GO TO 210                                                       
 400     CONTINUE                                                       
         GO TO 301                                                      
C/6S                                                                    
C300   CALL SETERR(22HCHEFBS-SINGULAR MATRIX,22,9+I,1)                  
C/7S                                                                    
 300   CALL SETERR('CHEFBS-SINGULAR MATRIX',22,9+I,1)                   
C/                                                                      
 301   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
        SUBROUTINE I4HP1(A,N,J,I,II,JJ)                                 
C                                                                       
C THIS SUBROUTINE INTERCHANGES ROW AND COLUMN I AND J,WHERE J IS        
C GREATER THAN I OF THE (N-I+1) SUBMATRIX OF A SYMMETRIC MATRIX         
C STORED IN THE VECTOR A                                                
C                                                                       
        COMPLEX A(1),TEMP                                               
        NMI=N-I                                                         
        JI=II+J-I                                                       
        JIM1=JI-1                                                       
        IF(I+1.GT.J-1) GO TO 21                                         
        IIP1=II+1                                                       
        JDISP=NMI+IIP1                                                  
        DO 20 KI =IIP1,JIM1                                             
           JI=JI+JDISP-KI                                               
           TEMP=A(KI)                                                   
           A(KI)=CONJG(A(JI))                                           
           A(JI)=CONJG(TEMP)                                            
 20     CONTINUE                                                        
C INTERCHANGE THE DIAGONAL ELEMENTS                                     
 21     TEMP=A(II)                                                      
        A(II)=A(JJ)                                                     
        A(JJ)=TEMP                                                      
        JI=II+J-I                                                       
        A(JI)=CONJG(A(JI))                                              
        IF (J+1.GT.N) RETURN                                            
C INTERCHANGE THE ELEMENTS BELOW BOTH DIAGONALS                         
        JIP1=JIM1+2                                                     
        IN=II+NMI                                                       
        KJ=JJ                                                           
        DO 30 KI=JIP1,IN                                                
           KJ=KJ+1                                                      
           TEMP=A(KJ)                                                   
           A(KJ)=A(KI)                                                  
           A(KI)=TEMP                                                   
 30     CONTINUE                                                        
        RETURN                                                          
        END                                                             
         SUBROUTINE CHEML(N,C,X,B)                                      
C                                                                       
C THIS SUBROUTINE SET B=AX WHERE X IS A VECTOR                          
C AND A IS A SYMMETRIC MATRIX PACKED INTO C                             
C                                                                       
C INPUT PARAMETERS                                                      
C N      LENGTH OF VECTOR                                               
C C      ARRAY INTO WHICH SYMMETRIC MATRIX IS PACKED ACCORDING          
C        TO THE SCHEME                                                  
C        1                                                              
C        2 5                                                            
C        3 6 8                                                          
C        4 7 9 10                                                       
C X      N-VECTOR TO BE MULTPLIED                                       
C OUTPUT PARAMETER                                                      
C B      AX                                                             
C ERROR CONDITIONS                                                      
C  1     N<1 FATAL                                                      
C                                                                       
       COMPLEX C(1),X(N),B(N)                                           
       COMPLEX SUM,XI                                                   
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H CHEML-N.LT.1,13,1,2)                  
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' CHEML-N.LT.1',13,1,2)                   
C/                                                                      
       DO 10 I=1,N                                                      
          B(I)=CMPLX(0.0,0.0)                                           
 10    CONTINUE                                                         
C                                                                       
C L POINTS TO POSITION IN C ARRAY                                       
C                                                                       
       L=0                                                              
       DO 30 I=1,N                                                      
          L=L+1                                                         
          XI=X(I)                                                       
          B(I)=B(I)+C(L)*XI                                             
          IF (I.EQ.N) RETURN                                            
          IP1=I+1                                                       
          SUM=CMPLX(0.0,0.0)                                            
          DO 20 J=IP1,N                                                 
             L=L+1                                                      
             SUM=SUM+CONJG(C(L))*X(J)                                   
             B(J)=B(J)+C(L)*XI                                          
 20       CONTINUE                                                      
          B(I)=B(I)+SUM                                                 
 30   CONTINUE                                                          
      RETURN                                                            
      END                                                               
        SUBROUTINE   BASS(N,ML,M,G,IG,B,IB,NB,COND)                     
C                                                                       
C THIS SUBROUTINE SOLVES AX= B WHERE A IS A BANDED UNSYMMETRIC          
C MATRIX.IT USES GAUSSIAN ELIMINATION WITH PARTIAL PIVOTING             
C IT ALSO RETURN AN ESTIMATE OF THE CONDITION NUMBER OF A               
C INPUT PARAMETERS                                                      
C N     ORDER OF THE SYSTEM                                             
C M     THE TOTAL NUMBER OF NONZERO BANDS IN THE MATRIX                 
C ML    THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL                   
C G     AN  IG X N ARRAY SUCH THAT                                      
C       G(ML+J-I,I)=A(I,J).I.E. THE LEFTMOST BAND OF A IS THE           
C       FIRST ROW OF G.                                                 
C IG    ROW DIMENSION OF G MUST BE .GE.M                                
C B     THE MATRIX OF RIGHT HAND SIDES                                  
C NB    THE NUMBER OF RIGHT HAND SIDES                                  
C IB    ROW DIMENSION OF B, MUST BE GREATER  OR EQUAL TO N              
C OUTPUT PARAMETERS                                                     
C B     THE SOLUTION VECTORS X                                          
C G     THE UPPER TRIANGULAR FACTOR OF A                                
C COND  AN ESIMATE OF THE CONDITION NUMBER OF A                         
C SCRATCH SPACE ALLOCATED-N INTEGER LOCATIONS                           
C                        ML*N REAL LOCATIONS                            
C ERROR STATES                                                          
C 1 N.LT.1       FATAL                                                  
C 2 ML.LT.1      FATAL                                                  
C 3 ML.GT.M      FATAL                                                  
C 4 IG.LT.M      FATAL                                                  
C 5 IB.LT.N      FATAL                                                  
C 6 NB.LT.1      FATAL                                                  
C 10 +K SINGULAR MATRIX OF RANK K   RECOVERABLE                         
C                                                                       
         INTEGER N,ML,M,NB,IG,IB                                        
         REAL G(IG,N),B(IB,NB)                                          
         REAL COND                                                      
        REAL R(1000)                                                    
        DOUBLE PRECISION D(500)                                         
        INTEGER ISTA(1000)                                              
        COMMON /CSTAK/ D                                                
        EQUIVALENCE(D(1),R(1)),(D(1),ISTA(1))                           
C CHECK FOR INPUT ERRORS                                                
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(13H  BASS-N.LT.1,13,1,2)               
C        IF(ML.LT.1) CALL SETERR(14H  BASS-ML.LT.1,14,2,2)              
C        IF(ML.GT.M) CALL SETERR(14H  BASS-ML.GT.M,14,3,2)              
C        IF (NB.LT.1) CALL SETERR(14H  BASS-NB.LT.1,14,6,2)             
C        IF (IG.LT.M) CALL SETERR(14H  BASS-IG.LT.M,14,4,2)             
C        IF (IB.LT.N) CALL SETERR(14H  BASS-IB.LT.N,14,5,2)             
C/7S                                                                    
         IF (N.LT.1) CALL SETERR('  BASS-N.LT.1',13,1,2)                
         IF(ML.LT.1) CALL SETERR('  BASS-ML.LT.1',14,2,2)               
         IF(ML.GT.M) CALL SETERR('  BASS-ML.GT.M',14,3,2)               
         IF (NB.LT.1) CALL SETERR('  BASS-NB.LT.1',14,6,2)              
         IF (IG.LT.M) CALL SETERR('  BASS-IG.LT.M',14,4,2)              
         IF (IB.LT.N) CALL SETERR('  BASS-IB.LT.N',14,5,2)              
C/                                                                      
         CALL ENTER(1)                                                  
         INTER=ISTKGT(N,2)                                              
         IF (ML.GT.1)JGL=ISTKGT(N*(ML-1),3)                             
         CALL BACE(N,ML,M,G,IG,R(JGL),ML-1,ISTA(INTER),MU,COND)         
         IF (NERROR(NERR).EQ.0) GO TO 10                                
C/6S                                                                    
C           CALL N5ERR(22H  BASS-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
            CALL N5ERR('  BASS-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
            CALL LEAVE                                                  
         RETURN                                                         
 10     CONTINUE                                                        
            CALL BAFS(N,ML,R(JGL),ML-1,ISTA(INTER),B,IB,NB)             
            CALL   BABS(N,G,IG,B,IB,NB,MU)                              
         CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
      SUBROUTINE   BACE(N, ML, M, G, IG,GL,IGL,INTER, MU,COND)          
      INTEGER IG, N                                                     
      INTEGER INTER(N),IGL                                              
      DOUBLE PRECISION D(500)                                           
      REAL R(1000)                                                      
      REAL GL(IGL,N)                                                    
      INTEGER M, ML                                                     
      REAL G(IG, N), COND                                               
      INTEGER  MU, IZ, IERR, ISTKGT, NERROR                             
      REAL ANORM, R1MACH                                                
      COMMON /CSTAK/ D                                                  
      EQUIVALENCE(D(1),R(1))                                            
C BAND CONDITION ESTIMATOR AND DECOMPOSER                               
C INPUT PARAMETERS                                                      
C N        NUMBER OF ROWS IN A                                          
C ML       NUMBER OF NONZERO DIAGONAL ON AND BELOW THE DIAGONAL         
C M        NUMBER OF NONZERO DIAGONALS ABOVE THE DIAGONAL               
C G        ARRAY INTO WHICH THE BAND MATRIX A IS PACKED                 
C          G(ML+I-J,I)=A(I,J)                                           
C IG       ROW DIMENSION OF G                                           
C IGL      ROW DIMENSION OF GL, AT LEAST ML-1                           
C OUTPUT PARAMETERS                                                     
C G        THE U FROM THE LU DECOMPOSITION OF G                         
C GL       THE L FROM THE LU DECOMPOSITION OF G                         
C          AN IGL X N ARRAY                                             
C INTER    THE INTERCHANGES NEEDED TO PERFORM THE DECOMPOSITION         
C         AN INTEGER VECTOR OF LENGTH N                                 
C COND     A LOWER ESTIMATE OF THE CONDITION NUMBER OF A                
C          COND RANGES FROM 1 TO THE LARGEST NUMBER ON THE MACHINE      
C          THE LARGER THE NUMBER THE MORE ILL CONDITIONED THE MATRIX    
C          IN GENERAL IF COND IS 10,1 DECIMAL DIGIT IN A LINEAR         
C          SYSTEM WILL BE INACCURATE, COND IS 100,2 DECIMAL DIGITS      
C          WILL BE INACCURATE,ETC.                                      
C STORAGE ALLOCATED -N REAL LOCATIONS                                   
C ERROR CONDITIONS                                                      
C 1   N.LT.1      FATAL                                                 
C 2   ML.GT.N     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IGL.LT.ML-1   FATAL                                               
C 10+K SINGULAR MATRIX OF RANK K RECOVERABLE                            
      CALL ENTER(1)                                                     
C/6S                                                                    
C     IF (N .LT. 1) CALL SETERR(13H  BACE-N.LT.1, 13, 1, 2)             
C     IF (ML .GT. N) CALL SETERR(14H  BACE-ML.GT.N, 14, 2, 2)           
C     IF (M .LT. ML) CALL SETERR(14H  BACE-M.LT.ML, 14, 3, 2)           
C     IF (IG .LT. M) CALL SETERR(14H  BACE-IG.LT.M, 14, 4, 2)           
C     IF (IGL.LT.ML-1) CALL SETERR(18H  BACE-IGL.LT.ML-1,18,5,2)        
C/7S                                                                    
      IF (N .LT. 1) CALL SETERR('  BACE-N.LT.1', 13, 1, 2)              
      IF (ML .GT. N) CALL SETERR('  BACE-ML.GT.N', 14, 2, 2)            
      IF (M .LT. ML) CALL SETERR('  BACE-M.LT.ML', 14, 3, 2)            
      IF (IG .LT. M) CALL SETERR('  BACE-IG.LT.M', 14, 4, 2)            
      IF (IGL.LT.ML-1) CALL SETERR('  BACE-IGL.LT.ML-1',18,5,2)         
C/                                                                      
      ANORM=BANM(N,ML,M,G,IG)                                           
      CALL   BALU(N, ML, M, G, IG, GL, IGL, INTER, MU, 0.E0)            
      IF (NERROR(IERR) .EQ. 0) GOTO 1                                   
C/6S                                                                    
C     CALL N5ERR(21H BACE-SINGULAR MATRIX,21,IERR,1)                    
C/7S                                                                    
      CALL N5ERR(' BACE-SINGULAR MATRIX',21,IERR,1)                     
C/                                                                      
         COND = R1MACH(2)                                               
         CALL LEAVE                                                     
         RETURN                                                         
   1  IZ = ISTKGT(N, 3)                                                 
      CALL B4DCE(N, ML, G, IG, GL,IGL, INTER, COND, MU,                 
     1   ANORM, R(IZ))                                                  
      CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE B4DCE(N, ML, G, IG, GL, IGL, INTER, COND, MU,          
     1   ANORM, Z)                                                      
      INTEGER IG, N, IGL                                                
      INTEGER ML, INTER(N), MU                                          
      REAL G(IG, N), GL(IGL, N), COND, ANORM, Z(N)                      
      INTEGER IB, KB, JEND, JJ, IEND, KP1                               
      INTEGER NP1, I, J, K, L, IMK                                      
      INTEGER M1, MIN0                                                  
      REAL FLOAT                                                        
      REAL  EK, ABS, SM, WK, ZK                                         
      REAL T, S, SIGN, WKM, SASUM, SUM                                  
      REAL BOUND, R1MACH, SQRT, YNORM                                   
      REAL ARGE                                                         
      M1 = ML-1                                                         
      BOUND = SQRT(R1MACH(2))/(FLOAT(N))                                
C SOLVE U(TRANSPOSE)Z=E,WHERE ELEMENTS OF E ARE +1 OR                   
C-1                                                                     
      EK = 1.E0                                                         
      M1=ML-1                                                           
      MUM1=MU-1                                                         
      DO  1 I = 1, N                                                    
         Z(I) = 0.E0                                                    
   1     CONTINUE                                                       
      DO  9 K = 1, N                                                    
         ZK = Z(K)                                                      
         IF (ZK .NE. 0.E0) EK = SIGN(EK,- ZK)                           
            JEND = MIN0(K+MUM1, N)                                      
         T = EK-ZK                                                      
         IF (ABS(G(1, K)) .GE. ABS(T)) GOTO 4                           
            S=ABS(G(1,K))/ABS(T)                                        
            DO  3 I = 1, JEND                                           
               Z(I) = S*Z(I)                                            
   3           CONTINUE                                                 
            EK = S*EK                                                   
 4       WK=EK-Z(K)                                                     
         WKM=-EK-Z(K)                                                   
         S=ABS(WK)                                                      
         SM=ABS(WKM)                                                    
         IF (ABS(G(1,K)).EQ.0.0) GO TO 101                              
             WK=WK/G(1,K)                                               
             WKM=WKM/G(1,K)                                             
             GO TO 102                                                  
 101         WK=1.0                                                     
            WKM=1.0                                                     
 102     CONTINUE                                                       
            KP1 = K+1                                                   
            IF (KP1.GT.JEND) GO TO 103                                  
            JJ = 2                                                      
            DO  5 J = KP1, JEND                                         
                SM=SM+ABS(Z(J)+WKM*G(JJ,K))                             
               Z(J) = Z(J)+G(JJ,K)*WK                                   
               S = S+ABS(Z(J))                                          
               JJ = JJ+1                                                
   5           CONTINUE                                                 
 103        CONTINUE                                                    
            IF (S .GE. SM) GOTO 7                                       
               T = WKM-WK                                               
               WK=WKM                                                   
               IF (KP1.GT.JEND) GO TO 7                                 
               JJ = 2                                                   
               DO  6 J = KP1, JEND                                      
                  Z(J) = Z(J)+T*G(JJ, K)                                
                  JJ = JJ+1                                             
   6              CONTINUE                                              
   7        CONTINUE                                                    
            Z(K)=WK                                                     
   9     CONTINUE                                                       
C SOLVE L(TRANSPOSE)Y=W                                                 
      S=1.0/SASUM(N,Z,1)                                                
      CALL SSCAL(N,S,Z,1)                                               
      NP1 = N+1                                                         
      IF(ML.EQ.1) GO TO 135                                             
      DO  13 KB = 1, N                                                  
         K = NP1-KB                                                     
         IF (K .GE. N) GOTO 13                                          
            SUM = 0.E0                                                  
            IEND = MIN0(KB-1, M1)                                       
            J = K+1                                                     
            DO  10 I = 1, IEND                                          
               SUM = SUM+GL(I, K)*Z(J)                                  
               J = J+1                                                  
  10           CONTINUE                                                 
            Z(K) = Z(K)+SUM                                             
           IF (ABS(Z(K)).LT.BOUND) GO TO 11                             
              S=1.0/ABS(Z(K))                                           
              CALL SSCAL(N,S,Z,1)                                       
 11       CONTINUE                                                      
         L = INTER(K)                                                   
         T = Z(L)                                                       
         Z(L) = Z(K)                                                    
         Z(K) = T                                                       
  13     CONTINUE                                                       
 135   S=1.E0/SASUM(N,Z,1)                                              
       CALL SSCAL(N,S,Z,1)                                              
       YNORM=1.E0                                                       
C SOLVELW=Y                                                             
 14    IF(ML.EQ.1.OR.N.EQ.1) GO TO 18                                   
      NM1=N-1                                                           
      DO 16 K=1,NM1                                                     
         I=INTER(K)                                                     
         KP1=K+1                                                        
         T=Z(I)                                                         
         Z(I)=Z(K)                                                      
         Z(K)=T                                                         
         IEND=MIN0(M1+K,N)                                              
         IMK=0                                                          
         DO 15 II=KP1,IEND                                              
            IMK=IMK+1                                                   
            Z(II)=Z(II)+GL(IMK,K)*T                                     
 15      CONTINUE                                                       
         IF (ABS(Z(K)).LT.BOUND) GO TO 16                               
            S=1.E0/ABS(Z(K))                                            
            CALL SSCAL(N,S,Z,1)                                         
            YNORM=YNORM*S                                               
 16      CONTINUE                                                       
  17     CONTINUE                                                       
      S=1.0/SASUM(N,Z,1)                                                
       IF (S.GT.1.E0) GO TO 18                                          
         CALL SSCAL(N, S, Z, 1)                                         
         YNORM = YNORM*S                                                
C SOLVE UZ=W                                                            
  18  L = 1                                                             
      DO  23 KB = 1, N                                                  
         K = NP1-KB                                                     
         SUM = Z(K)                                                     
         IF (L .LE. 1) GOTO 20                                          
            IB = K                                                      
            DO  19 I = 2, L                                             
               IB = IB+1                                                
               SUM = SUM-G(I, K)*Z(IB)                                  
  19           CONTINUE                                                 
  20     L = MIN0(L+1, MU)                                              
         Z(K)=SUM                                                       
         IF (ABS(G(1, K)) .GE. ABS(SUM)) GOTO 210                       
  21        T = 0.E0                                                    
            IF (ABS(SUM) .NE. 0.E0) T = G(1, K)/SUM                     
            S = ABS(T)                                                  
            CALL SSCAL(N, S, Z, 1)                                      
            YNORM = YNORM*S                                             
 210     IF (G(1,K).NE.0.E0) Z(K)=Z(K)/G(1,K)                           
         IF (G(1,K).EQ.0.E0)Z(K)=1.E0                                   
  22     CONTINUE                                                       
  23     CONTINUE                                                       
       S=1.0/SASUM(N,Z,1)                                               
       YNORM=S*YNORM                                                    
      ARGE=R1MACH(2)                                                    
      IF (YNORM.GT.1.E0) GO TO 50                                       
      IF (ANORM.LE.YNORM*ARGE) GO TO 50                                 
         COND=ARGE                                                      
         RETURN                                                         
 50   COND=ANORM/YNORM                                                  
      RETURN                                                            
      END                                                               
        SUBROUTINE   BALE(N,ML,M,G,IG,B,IB,NB)                          
C                                                                       
C THIS SUBROUTINE SOLVES AX= B WHERE A IS A BANDED UNSYMMETRIC          
C MATRIX.IT USES GAUSSIAN ELIMINATION WITH PARTIAL PIVOTING             
C INPUT PARAMETERS                                                      
C N     ORDER OF THE SYSTEM                                             
C M     THE TOTAL NUMBER OF NONZERO BANDS IN THE MATRIX                 
C ML    THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL                   
C G     AN  IG X N ARRAY SUCH THAT                                      
C       G(ML+J-I,I)=A(I,J).I.E. THE LEFTMOST BAND OF A IS THE           
C       FIRST ROW OF G.                                                 
C IG    ROW DIMENSION OF G MUST BE .GE.M                                
C B     THE MATRIX OF RIGHT HAND SIDES                                  
C NB    THE NUMBER OF RIGHT HAND SIDES                                  
C IB    ROW DIMENSION OF B, MUST BE GREATER  OR EQUAL TO N              
C OUTPUT PARAMETERS                                                     
C B     THE SOLUTION VECTORS X                                          
C G     THE UPPER TRIANGULAR FACTOR OF A                                
C SCRATCH SPACE ALLOCATED-NONE                                          
C ERROR STATES                                                          
C 1 N.LT.1       FATAL                                                  
C 2 ML.LT.1      FATAL                                                  
C 3 ML.GT.M      FATAL                                                  
C 4 IG.LT.M      FATAL                                                  
C 5 IB.LT.N      FATAL                                                  
C 6 NB.LT.1      FATAL                                                  
C 10 +K SINGULAR MATRIX OF RANK K   RECOVERABLE                         
C                                                                       
         INTEGER N,ML,M,NB,IG,IB                                        
         REAL G(IG,N),B(IB,NB)                                          
C CHECK FOR INPUT ERRORS                                                
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(13H  BALE-N.LT.1,13,1,2)               
C        IF(ML.LT.1) CALL SETERR(14H  BALE-ML.LT.1,14,2,2)              
C        IF(ML.GT.M) CALL SETERR(14H  BALE-ML.GT.M,14,3,2)              
C        IF (NB.LT.1) CALL SETERR(14H  BALE-NB.LT.1,14,6,2)             
C        IF (IG.LT.M) CALL SETERR(14H  BALE-IG.LT.M,14,4,2)             
C        IF (IB.LT.N) CALL SETERR(14H  BALE-IB.LT.N,14,5,2)             
C/7S                                                                    
         IF (N.LT.1) CALL SETERR('  BALE-N.LT.1',13,1,2)                
         IF(ML.LT.1) CALL SETERR('  BALE-ML.LT.1',14,2,2)               
         IF(ML.GT.M) CALL SETERR('  BALE-ML.GT.M',14,3,2)               
         IF (NB.LT.1) CALL SETERR('  BALE-NB.LT.1',14,6,2)              
         IF (IG.LT.M) CALL SETERR('  BALE-IG.LT.M',14,4,2)              
         IF (IB.LT.N) CALL SETERR('  BALE-IB.LT.N',14,5,2)              
C/                                                                      
         CALL ENTER(1)                                                  
         CALL  B4ADF(N,ML,M,G,IG,B,IB,NB,MU)                            
         IF (NERROR(NERR).EQ.0) GO TO 10                                
C/6S                                                                    
C           CALL N5ERR(22H  BALE-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
            CALL N5ERR('  BALE-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
            CALL LEAVE                                                  
         RETURN                                                         
 10     CONTINUE                                                        
            CALL   BABS(N,G,IG,B,IB,NB,MU)                              
         CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
          SUBROUTINE   B4ADF(N,ML,M,G,IG,B,IB,NB,MU)                    
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED UNSYMMETRIC MATRIX USING GAUSSIAN ELIMINATION                  
C WITH PARTIAL PIVOTING AND APPLIES THE TRANSFORMATIONS                 
C FOR L(INVERSE) TO B                                                   
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF ELEMENTS ON OR BELOW                        
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C M       THE MAXIMUM NUMBER OF NONZERO ELEMENTS IN EACH                
C         COLUMN                                                        
C G       THE MATRIX A STORED AS AN IG X N ARRAY                        
C         WITH G(ML+J-I,I)=A(I,J).I.E.THE LEFTMOST                      
C         DIAGONAL OF THE BAND MATRIX IS THE FIRST ROW OF G             
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN M                  
C B       AN IB X NB MATRIX OF THE RIGHT HAND SIDES                     
C IB      ROW DIMENSION OF B,MUST BE AT LEAST N                         
C NB      NUMBER OF RIGHT HAND SIDES                                    
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C B       THE TRANSFORMED RIGHT HAND SIDE,THE SOLUTION TO               
C         LX=B                                                          
C MU      THE NUMBER OF NONZERO DIAGONALS IN THE UPPER                  
C         TRIANGULAR BAND FACTOR                                        
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IB.LT.N     FATAL                                                 
C 6   NB.LT.1     FATAL                                                 
C 10+K SINGULAR MATRIX OF RANK K  RECOVERABLE                           
           INTEGER ML,N,IG,IB,NB                                        
           REAL G(IG,N),B(IB,NB)                                        
           REAL EPS,R1MACH,BANM                                         
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H B4ADF-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H B4ADF-ML.LT.1,14,2,2)                
C      IF (M.LT.ML) CALL SETERR(14H B4ADF-ML.LT.M,14,3,2)               
C      IF (IG.LT.M) CALL SETERR(14H B4ADF-IG,LT.M,14,4,2)               
C      IF (IB.LT.N) CALL SETERR(14H B4ADF-IB.LT.N,14,5,2)               
C      IF (NB.LT.1)CALL SETERR(14H B4ADF-NB.LT.1,14,6,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' B4ADF-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR(' B4ADF-ML.LT.1',14,2,2)                 
       IF (M.LT.ML) CALL SETERR(' B4ADF-ML.LT.M',14,3,2)                
       IF (IG.LT.M) CALL SETERR(' B4ADF-IG,LT.M',14,4,2)                
       IF (IB.LT.N) CALL SETERR(' B4ADF-IB.LT.N',14,5,2)                
       IF (NB.LT.1)CALL SETERR(' B4ADF-NB.LT.1',14,6,2)                 
C/                                                                      
        CALL ENTER(1)                                                   
         EPS=  BANM(N,ML,M,G,IG)                                        
         EPS=R1MACH(4)*EPS                                              
         CALL   B4ALF(N,ML,M,G,IG,B,IB,NB,MU,EPS)                       
C/6S                                                                    
C         IF(NERROR(IERR).NE.0)                                         
C    1      CALL N5ERR(22H B4ADF-SINGULAR MATRIX,22,IERR,1)             
C/7S                                                                    
          IF(NERROR(IERR).NE.0)                                         
     1      CALL N5ERR(' B4ADF-SINGULAR MATRIX',22,IERR,1)              
C/                                                                      
          CALL LEAVE                                                    
          RETURN                                                        
          END                                                           
          SUBROUTINE   B4ALF(N,ML,M,G,IG,B,IB,NB,MU,EPS)                
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED UNSYMMETRIC MATRIX USING GAUSSIAN ELIMINATION                  
C WITH PARTIAL PIVOTING AND APPLIES THE TRANSFORMATIONS                 
C FOR L(INVERSE) TO B                                                   
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF ELEMENTS ON OR BELOW                        
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C M       THE MAXIMUM NUMBER OF NONZERO ELEMENTS IN EACH                
C         COLUMN                                                        
C G       THE MATRIX A STORED AS AN IG X N ARRAY                        
C         WITH G(ML+J-I,I)=A(I,J).I.E.THE LEFTMOST                      
C         DIAGONAL OF THE BAND MATRIX IS THE FIRST ROW OF G             
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN M                  
C B       AN IB X NB MATRIX OF THE RIGHT HAND SIDES                     
C IB      ROW DIMENSION OF B,MUST BE AT LEAST N                         
C NB      NUMBER OF RIGHT HAND SIDES                                    
C EPS      LARGEST NONACCEPTABLE PIVOT                                  
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C B       THE TRANSFORMED RIGHT HAND SIDE,THE SOLUTION TO               
C         LX=B                                                          
C MU      THE NUMBER OF NONZERO DIAGONALS IN THE UPPER                  
C         TRIANGULAR BAND FACTOR                                        
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IB.LT.N     FATAL                                                 
C 6   NB.LT.1     FATAL                                                 
C 10+K SINGULAR MATRIX OF RANK K  RECOVERABLE                           
           INTEGER ML,N,IG,IB,NB,IER                                    
           REAL G(IG,N),B(IB,NB)                                        
           REAL EPS,XI                                                  
           REAL X                                                       
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H B4ALF-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H B4ALF-ML.LT.1,14,2,2)                
C      IF (M.LT.ML) CALL SETERR(14H B4ALF-ML.LT.M,14,3,2)               
C      IF (IG.LT.M) CALL SETERR(14H B4ALF-IG,LT.M,14,4,2)               
C      IF (IB.LT.N) CALL SETERR(14H B4ALF-IB.LT.N,14,5,2)               
C      IF (NB.LT.1)CALL SETERR(14H B4ALF-NB.LT.1,14,6,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' B4ALF-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR(' B4ALF-ML.LT.1',14,2,2)                 
       IF (M.LT.ML) CALL SETERR(' B4ALF-ML.LT.M',14,3,2)                
       IF (IG.LT.M) CALL SETERR(' B4ALF-IG,LT.M',14,4,2)                
       IF (IB.LT.N) CALL SETERR(' B4ALF-IB.LT.N',14,5,2)                
       IF (NB.LT.1)CALL SETERR(' B4ALF-NB.LT.1',14,6,2)                 
C/                                                                      
       MU=M-ML+1                                                        
       MU1=MU                                                           
       MU2=MU                                                           
       CALL ENTER(1)                                                    
       IER=0                                                            
       M1=ML-1                                                          
       M2=M-ML                                                          
       LL=M1                                                            
       N2=2*N                                                           
       NP1=N+1                                                          
       MLP1=ML+1                                                        
       IF(M1.LT.1) GO TO 41                                             
       DO 40 I=1,M1                                                     
          JBEG=MLP1-I                                                   
         JEND=MIN0(M,N2-I)                                              
          DO 20 J=JBEG,JEND                                             
             JMLL=J-LL                                                  
              G(JMLL,I)=G(J,I)                                          
 20       CONTINUE                                                      
          LL=LL-1                                                       
          JBEG=M-LL                                                     
          DO 30 J=JBEG,M                                                
              G(J,I)=0.0                                                
 30       CONTINUE                                                      
 40   CONTINUE                                                          
C                                                                       
C ZERO OUT LOWER RHS WART                                               
C                                                                       
 41    IF (M2.LT.1) GO TO 61                                            
       DO 60 I=1,M2                                                     
          JBEG=ML+I                                                     
          NP1MI=NP1-I                                                   
          DO 50 J=JBEG,M                                                
             G(J,NP1MI)=0.0                                             
 50      CONTINUE                                                       
 60    CONTINUE                                                         
 61     CONTINUE                                                        
       DO 200 K=1,N                                                     
          X=ABS(G(1,K))                                                 
          I=K                                                           
          LL=MIN0(M1+K,N)                                               
          KP1=K+1                                                       
          IF (LL.LT.KP1) GO TO 80                                       
C GET THE PIVOT ROW                                                     
          DO 70 J=KP1,LL                                                
            IF (ABS(G(1,J)).LE.X) GO TO 70                              
               I=J                                                      
               X=ABS(G(1,J))                                            
 70       CONTINUE                                                      
 80       CONTINUE                                                      
          IF(X.GT.EPS) GO TO 90                                         
C/6S                                                                    
C         IF(IER.EQ.0)CALL SETERR(22H B4ALF-SINGULAR MATRIX,22,K+9,1)   
C/7S                                                                    
          IF(IER.EQ.0)CALL SETERR(' B4ALF-SINGULAR MATRIX',22,K+9,1)    
C/                                                                      
          G(1,I)=SIGN(EPS,G(1,I))                                       
           IER=1                                                        
 90       CONTINUE                                                      
          IF (I.EQ.K) GO TO 110                                         
C NEED TO INTERCHANGE COLUMNS                                           
             DO 100 J=1,M                                               
                X=G(J,K)                                                
                G(J,K)=G(J,I)                                           
                G(J,I)=X                                                
 100         CONTINUE                                                   
             DO 105 J=1,NB                                              
                X=B(K,J)                                                
                B(K,J)=B(I,J)                                           
                B(I,J)=X                                                
 105         CONTINUE                                                   
 110      IF (K.GE.LL) GO TO 200                                        
          MM=MU1+I-K                                                    
          MU=MAX0(MU,MM)                                                
          MU2=MAX0(MU2-1,MM)                                            
          MU2P1=MU2+1                                                   
          XI=G(1,K)                                                     
          IF(XI.EQ.0.E0)XI=1.0                                          
          DO 170 I=KP1,LL                                               
             X=-G(1,I)/XI                                               
C APPLY TRANSFORMATIONS TO RIGHT HAND SIDE                              
             DO 130 J=1,NB                                              
                B(I,J)=B(I,J)+X*B(K,J)                                  
 130         CONTINUE                                                   
             IF (MU2.LT.2) GO TO 141                                    
             DO 140 J=2,MU2                                             
                G(J-1,I)=G(J,I)+X*G(J,K)                                
 140         CONTINUE                                                   
 141         IF (MU2.EQ.M) GO TO 170                                    
             DO 150 J=MU2P1,M                                           
 150            G(J-1,I)=G(J,I)                                         
 170    CONTINUE                                                        
        G(M,LL)=0.0                                                     
 200   CONTINUE                                                         
 210   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
          SUBROUTINE   BADC(N,ML,M,G,IG,AL,IAL,INT,MU)                  
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED UNSYMMETRIC MATRIX USING GAUSSIAN ELIMINATION                  
C WITH PARTIAL PIVOTING                                                 
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF NONZERO ELEMENTS ON OR BELOW                
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C M       THE MAXIMUM NUMBER OF NONZERO ELEMENTS IN EACH                
C         COLUMN                                                        
C G       THE MATRIX A STORED AS AN IG X N ARRAY                        
C         WITH G(ML+J-I)=A(I,J).I.E. THE LEFTMOST                       
C         DIAGONAL OF THE BAND MATRIX IS THE FIRST ROW OF G             
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN M                  
C IAL     ROW DIMENSION OF AL, MUST NOT BE LESS THAN ML                 
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C AL      AN IAL X N ARRAY CONTAINING THE LOWER TRIANGULAR              
C         BAND FACTOR OF A                                              
C INT     AN INTEGER VECTOR OF LENGTH N RECORDING INTERCHANGES          
C          INVOLVED IN GAUSSIAN ELIMINATION                             
C MU      THE NUMBER OF NONZERO DIAGONALS IN THE UPPER                  
C         TRIANGULAR BAND FACTOR                                        
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IAL.LT.ML-1 FATAL                                                 
C 10+K SINGULAR MATRIX OF RANK K   RECOVERABLE                          
           INTEGER IG,IAL                                               
           INTEGER N,ML,M,INT(N)                                        
           REAL G(IG,N),AL(IAL,N)                                       
           REAL EPS, R1MACH, BANM                                       
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H  BADC-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H  BADC-ML.LT.1,14,2,2)                
C      IF (M.LT.ML) CALL SETERR(14H  BADC-ML.LT.M,14,3,2)               
C      IF (IG.LT.M) CALL SETERR(14H  BADC-IG.LT.M,14,4,2)               
C      IF (IAL.LT.ML-1)CALL SETERR(18H  BADC-IAL.LT.ML-1,18,5,2)        
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('  BADC-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR('  BADC-ML.LT.1',14,2,2)                 
       IF (M.LT.ML) CALL SETERR('  BADC-ML.LT.M',14,3,2)                
       IF (IG.LT.M) CALL SETERR('  BADC-IG.LT.M',14,4,2)                
       IF (IAL.LT.ML-1)CALL SETERR('  BADC-IAL.LT.ML-1',18,5,2)         
C/                                                                      
       CALL ENTER(1)                                                    
          EPS=BANM(N,ML,M,G,IG)                                         
          EPS=EPS*R1MACH(4)                                             
          CALL   BALU(N,ML,M,G,IG,AL,IAL,INT,MU,EPS)                    
C/6S                                                                    
C         IF(NERROR(IERR).NE.0)                                         
C    1      CALL N5ERR(22H  BADC-SINGULAR MATRIX,22,IERR,1)             
C/7S                                                                    
          IF(NERROR(IERR).NE.0)                                         
     1      CALL N5ERR('  BADC-SINGULAR MATRIX',22,IERR,1)              
C/                                                                      
          CALL LEAVE                                                    
          RETURN                                                        
          END                                                           
        REAL FUNCTION  BANM(N,ML,M,G,IG)                                
        REAL G(IG,1),SUM                                                
C THIS SUBROUTINE COMPUTES THE INFINITY NORM OF A BAND MATRIX           
C STORED IN BAND FORM                                                   
C/6S                                                                    
C       IF (N.LT.1) CALL SETERR(12H BANM-N.LT.1,12,1,2)                 
C       IF (ML.LT.1) CALL SETERR(13H BANM-ML.LT.1,13,2,2)               
C       IF (M.LT.ML) CALL SETERR(13H BANM-M.LT.ML,13,3,2)               
C       IF (IG.LT.M) CALL SETERR(13H BANM-IG.LT.M,13,4,2)               
C/7S                                                                    
        IF (N.LT.1) CALL SETERR(' BANM-N.LT.1',12,1,2)                  
        IF (ML.LT.1) CALL SETERR(' BANM-ML.LT.1',13,2,2)                
        IF (M.LT.ML) CALL SETERR(' BANM-M.LT.ML',13,3,2)                
        IF (IG.LT.M) CALL SETERR(' BANM-IG.LT.M',13,4,2)                
C/                                                                      
        JB=ML+1                                                         
        JE=M                                                            
        JEND=N-(M-ML)                                                   
         BANM=0.0D0                                                     
        DO 10 I=1,N                                                     
           SUM=0.0                                                      
           JB=MAX0(1,JB-1)                                              
           DO 5 J=JB,JE                                                 
              SUM=SUM+ABS(G(J,I))                                       
 5         CONTINUE                                                     
           IF(I.GE.JEND)JE=JE-1                                         
           IF(SUM.GT.BANM) BANM=SUM                                     
 10      CONTINUE                                                       
         RETURN                                                         
         END                                                            
          SUBROUTINE   BALU(N,ML,M,G,IG,AL,IAL,INT,MU,EPS)              
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED UNSYMMETRIC MATRIX USING GAUSSIAN ELIMINATION                  
C WITH PARTIAL PIVOTING                                                 
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF NONZERO ELEMENTS ON OR BELOW                
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C M       THE MAXIMUM NUMBER OF NONZERO ELEMENTS IN EACH                
C         COLUMN                                                        
C G       THE MATRIX A STORED AS AN IG X N ARRAY                        
C         WITH G(ML+J-I,I)=A(I,J).I.E. THE LEFTMOST                     
C         DIAGONAL OF THE BAND MATRIX IS THE FIRST ROW OF G             
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN M                  
C IAL     ROW DIMENSION OF AL, MUST NOT BE LESS THAN ML-1               
C EPS     LARGEST NONACCEPTABLE PIVOT                                   
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C AL      AN IAL X N ARRAY CONTAINING THE LOWER TRIANGULAR              
C         BAND FACTOR OF A                                              
C INT     AN INTEGER VECTOR OF LENGTH N RECORDING INTERCHANGES          
C          INVOLVED IN GAUSSIAN ELIMINATION                             
C MU      THE NUMBER OF NONZERO DIAGONALS IN THE UPPER                  
C         TRIANGULAR BAND FACTOR                                        
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IAL.LT.ML-1 FATAL                                                 
C 10+K SINGULAR MATRIX OF RANK K   RECOVERABLE                          
           INTEGER IG,IAL                                               
           INTEGER N,ML,M,INT(N)                                        
           REAL G(IG,N),AL(IAL,N)                                       
           REAL X                                                       
           REAL EPS,XI                                                  
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H  BALU-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H  BALU-ML.LT.1,14,2,2)                
C      IF (M.LT.ML) CALL SETERR(14H  BALU-M.LT.ML,14,3,2)               
C      IF (IG.LT.M) CALL SETERR(14H  BALU-IG.LT.M,14,4,2)               
C     IF (IAL.LT.ML-1)CALL SETERR(18H  BALU-IAL.LT.ML-1,18,5,2)         
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('  BALU-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR('  BALU-ML.LT.1',14,2,2)                 
       IF (M.LT.ML) CALL SETERR('  BALU-M.LT.ML',14,3,2)                
       IF (IG.LT.M) CALL SETERR('  BALU-IG.LT.M',14,4,2)                
      IF (IAL.LT.ML-1)CALL SETERR('  BALU-IAL.LT.ML-1',18,5,2)          
C/                                                                      
       IER=0                                                            
       MU=M-ML+1                                                        
       INTN=1                                                           
       MU1=MU                                                           
       MU2=MU                                                           
       NP1=N+1                                                          
       CALL ENTER(1)                                                    
       M1=ML-1                                                          
       M2=M-ML                                                          
       LL=M1                                                            
       MLP1=ML+1                                                        
       IF (M1.LT.1) GO TO 41                                            
       N2=2*N                                                           
       DO 40 I=1,M1                                                     
          JBEG=MLP1-I                                                   
          JEND=MIN0(M,N2-I)                                             
          DO 20 J=JBEG,JEND                                             
             JMLL=J-LL                                                  
              G(JMLL,I)=G(J,I)                                          
 20       CONTINUE                                                      
          LL=LL-1                                                       
          JBEG=M-LL                                                     
          DO 30 J=JBEG,M                                                
              G(J,I)=0.0                                                
 30       CONTINUE                                                      
 40   CONTINUE                                                          
C                                                                       
C ZERO OUT LOWER RHS WART                                               
C                                                                       
 41    IF (M2.LT.1) GO TO 61                                            
       DO 60 I=1,M2                                                     
          JBEG=ML+I                                                     
          NP1MI=NP1-I                                                   
          DO 50 J=JBEG,M                                                
             G(J,NP1MI)=0.0                                             
 50      CONTINUE                                                       
 60    CONTINUE                                                         
 61    CONTINUE                                                         
       DO 200 K=1,N                                                     
          X=ABS(G(1,K))                                                 
          I=K                                                           
          LL=MIN0(M1+K,N)                                               
          KP1=K+1                                                       
          IF (LL.LT.KP1) GO TO 80                                       
C GET THE PIVOT ROW                                                     
          DO 70 J=KP1,LL                                                
            IF (ABS(G(1,J)).LE.X) GO TO 70                              
               I=J                                                      
               X=ABS(G(1,J))                                            
 70       CONTINUE                                                      
 80       IF (X.GT.EPS) GO TO 90                                        
C/6S                                                                    
C      IF (IER.EQ.0)CALL SETERR(22H  BALU-SINGULAR MATRIX,22,9+K,1)     
C/7S                                                                    
       IF (IER.EQ.0)CALL SETERR('  BALU-SINGULAR MATRIX',22,9+K,1)      
C/                                                                      
          G(1,I)=SIGN(EPS,G(1,I))                                       
             IER=1                                                      
 90       CONTINUE                                                      
          INT(K)=I                                                      
          IF (I.EQ.K) GO TO 110                                         
             INTN=-INTN                                                 
C NEED TO INTERCHANGE COLUMNS                                           
             DO 100 J=1,M                                               
                X=G(J,K)                                                
                G(J,K)=G(J,I)                                           
                G(J,I)=X                                                
 100         CONTINUE                                                   
 110      IF (K.GE.LL) GO TO 200                                        
          MM=MIN0(NP1,MU1+I)-K                                          
          MU=MAX0(MU,MM)                                                
          MU2=MAX0(MU2-1,MM)                                            
          IMK=0                                                         
          XI=G(1,K)                                                     
          IF(XI.EQ.0.E0)XI=1.0                                          
          MU2P1=MU2+1                                                   
          DO 170 I=KP1,LL                                               
             X=-G(1,I)/XI                                               
             IMK=IMK+1                                                  
             AL(IMK,K)=X                                                
             IF (MU2.LT.2) GO TO 141                                    
             DO 140 J=2,MU2                                             
                G(J-1,I)=G(J,I)+X*G(J,K)                                
 140         CONTINUE                                                   
 141         IF (MU2.EQ.M) GO TO 170                                    
             DO 150 J=MU2P1,M                                           
 150            G(J-1,I)=G(J,I)                                         
 170    CONTINUE                                                        
        G(M,LL)=0.0                                                     
 200   CONTINUE                                                         
 210   INT(N)=INTN                                                      
       CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
         SUBROUTINE   BAFS(N,ML,AL,IAL,INT,B,IB,NB)                     
C                                                                       
C THIS SUBROUTINE SOLVES LX=B WHERE L IS A LOWER TRIANGULAR             
C BAND MATRIX                                                           
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE SYSTEM                                        
C ML     THE NUMBER OF NONZERO ELEMENTS OF L ON AND BELOW               
C        THE DIAGONAL,THE ROW DIMENSION OF AL                           
C AL     AN IAL X N MATRIX CONTAINING THE LOWERTRIANGULAR               
C        BAND MATRIX. NOTE THAT AL(I-J,J)=L(I,J)                        
C IAL    ROW DIMENSION OF AL                                            
C INT    AN INTEGER VECTOR OF LENGTH N COMPUTED BY   BALU               
C        RECORDING THE INTERCHANGES PERFORMED ON L                      
C B      A VECTOR OF LENGTH N CONTAINING THE RIGHT HAND SIDE            
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION X                                                 
C SCRATCH SPACE ALLOCATED - NONE                                        
C ERROR CONDITIONS                                                      
C 1     N.LT.1     FATAL                                                
C 2     ML.LT.1     FATAL                                               
C 3     IAL.LT.ML-1 FATAL                                               
C 4     INT(I)    NOT IN 1,.....N     FATAL                             
C 5     IB.LT.N          FATAL                                          
C 6     NB.LT.1          FATAL                                          
C                                                                       
         INTEGER IAL,N,ML,INT(N)                                        
        REAL AL(IAL,N),B(IB,NB)                                         
        REAL X                                                          
C CHECK ERROR CONDITIONS                                                
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H  BAFS-N.LT.1,13,1,2)                  
C      IF( ML.LT.1)CALL SETERR(14H  BAFS-ML.LT.1,14,2,2)                
C      IF (IAL.LT.ML-1)CALL SETERR(18H  BAFS-IAL.LT.ML-1,18,3,2)        
C      IF(IB.LT.N) CALL SETERR(14H  BAFS-IB.LT.N,14,5,2)                
C      IF(NB.LT.1) CALL SETERR(14H  BAFS-NB.LT.1,14,6,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('  BAFS-N.LT.1',13,1,2)                   
       IF( ML.LT.1)CALL SETERR('  BAFS-ML.LT.1',14,2,2)                 
       IF (IAL.LT.ML-1)CALL SETERR('  BAFS-IAL.LT.ML-1',18,3,2)         
       IF(IB.LT.N) CALL SETERR('  BAFS-IB.LT.N',14,5,2)                 
       IF(NB.LT.1) CALL SETERR('  BAFS-NB.LT.1',14,6,2)                 
C/                                                                      
       IF (ML.EQ.1) RETURN                                              
       IF (N.EQ.1)RETURN                                                
       CALL ENTER(1)                                                    
       M1=ML-1                                                          
       NM1=N-1                                                          
       DO 60 K=1,NM1                                                    
         KP1=K+1                                                        
          I=INT(K)                                                      
C/6S                                                                    
C         IF (I.LT.1.OR.I.GT.N)                                         
C    1       CALL SETERR(26H BAFS-INT(I) NOT IN 1,..,N,26,4,2)          
C/7S                                                                    
          IF (I.LT.1.OR.I.GT.N)                                         
     1       CALL SETERR(' BAFS-INT(I) NOT IN 1,..,N',26,4,2)           
C/                                                                      
          DO 55 J=1,NB                                                  
          X=B(I,J)                                                      
          IF (I.EQ.K) GO TO 10                                          
C INTERCHANGE ELEMENTS OF B                                             
              B(I,J)=B(K,J)                                             
              B(K,J)=X                                                  
 10     CONTINUE                                                        
            IEND=M1+K                                                   
            IF (N.LT.IEND)IEND=N                                        
            IMK=0                                                       
            DO 50 II=KP1,IEND                                           
                 IMK=IMK+1                                              
                 B(II,J)=B(II,J)+AL(IMK,K)*X                            
 50         CONTINUE                                                    
 55       CONTINUE                                                      
 60       CONTINUE                                                      
 100     CALL LEAVE                                                     
          RETURN                                                        
         END                                                            
              SUBROUTINE   BABS(N,U,IU,B,IB,NB,MU)                      
C                                                                       
C THIS SUBROUTINE SOLVES TX = B WHERE T IS AN                           
C UPPER TRIANGULAR BANDED MATRIX                                        
C                                                                       
C INPUT PARAMETERS                                                      
C N         THE ORDER OF THE SYSTEM                                     
C U         AN IU X N ARRAY CONTAINING THE UPPERTRIANGULAR              
C           MATRIX T WHERE U(1+J-I,I)=T(I,J)                            
C IU        ROW DIMENSION OF U                                          
C B         THE RIGHT HAND SIDES;OVERWRITTEN ON OUTPUT                  
C IB        ROW DIMENSION OF B MATRIX                                   
C NB        NUMBER OF RIGHT HAND SIDES                                  
C MU        THE NUMBER OF NONZERO DIAGONALS OF T                        
C OUTPUT PARAMETERS                                                     
C B         THE SOLUTION MATRIX X                                       
C SCRATCH SPACE NEEDED -NONE                                            
C ERROR CONDITIONS                                                      
C   1       N.LT.1        FATAL                                         
C   2       IU.LT.MU      FATAL                                         
C   3       MU.LT.1       FATAL                                         
C   4       IB.LT.N     FATAL                                           
C  5        NB.LT.1       FATAL                                         
C   10+K    SINGULAR U OF RANK K  RECOVERABLE                           
        INTEGER IU,N,MU                                                 
        REAL U(IU,N),B(IB,NB)                                           
        REAL X                                                          
C/6S                                                                    
C       IF (N.LT.1) CALL SETERR(13H  BABS-N.LT.1,13,1,2)                
C       IF (IU.LT.MU) CALL SETERR(15H  BABS-IU.LT.MU,15,2,2)            
C       IF (MU.LT.1) CALL SETERR(14H  BABS-MU.LT.1,14,3,2)              
C       IF (IB.LT.N) CALL SETERR(14H  BABS-IB.LT.N,14,4,2)              
C       IF (NB.LT.1) CALL SETERR(14H  BABS-NB.LT.1,14,5,2)              
C/7S                                                                    
        IF (N.LT.1) CALL SETERR('  BABS-N.LT.1',13,1,2)                 
        IF (IU.LT.MU) CALL SETERR('  BABS-IU.LT.MU',15,2,2)             
        IF (MU.LT.1) CALL SETERR('  BABS-MU.LT.1',14,3,2)               
        IF (IB.LT.N) CALL SETERR('  BABS-IB.LT.N',14,4,2)               
        IF (NB.LT.1) CALL SETERR('  BABS-NB.LT.1',14,5,2)               
C/                                                                      
        CALL ENTER(1)                                                   
        L=1                                                             
        NP1=N+1                                                         
        DO 100 II=1,N                                                   
            I=NP1-II                                                    
            DO 50 J=1,NB                                                
            X=B(I,J)                                                    
            IF (L.LT.2) GO TO 30                                        
            KB=I                                                        
            DO 20 K=2,L                                                 
               KB=KB+1                                                  
               X=X-U(K,I)*B(KB,J)                                       
 20         CONTINUE                                                    
 30         IF (U(1,I).NE.0.0) GO TO 40                                 
C/6S                                                                    
C              CALL SETERR(22H  BABS-SINGULAR MATRIX,22,9+I,1)          
C/7S                                                                    
               CALL SETERR('  BABS-SINGULAR MATRIX',22,9+I,1)           
C/                                                                      
               GO TO 150                                                
 40         B(I,J)=X/U(1,I)                                             
 50      CONTINUE                                                       
            L=MIN0(L+1,MU)                                              
 100     CONTINUE                                                       
 150     CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
         SUBROUTINE BAML(N,ML,M,A,IA,X,Y)                               
C                                                                       
C MULTIPLICATION OF VECTOR X BY BAND MATRIX B                           
C                                                                       
C INPUT PARAMETERS                                                      
C N    ORDER OF MATRIX                                                  
C ML    NUMBER OF DIAGONALS ON AND BELOW DIAGONAL OF B                  
C M     NUMBER OF DIAGONALS OF B                                        
C A    ARRAY INTO WHICH A BAND MATRIX IS PACKED                         
C      A(ML+J-I,I)= (I,J)TH ELEMENT OF BAND MATRIX                      
C IA   ROW DIMENSION OF A                                               
C X    VECTOR TO BE MULTIPLIED                                          
C                                                                       
C OUTPUT PARAMETERS                                                     
C Y    BX, WHERE B IS THE BAND MATRIX                                   
C ERROR CONDITIONS                                                      
C N.LT.1       FATAL                                                    
C ML.LT.1      FATAL                                                    
C M.LT.ML      FATAL                                                    
C IA.LT.M      FATAL                                                    
         REAL A(IA,N),X(M),Y(N),SUM                                     
C/6S                                                                    
C        IF(N.LT.1) CALL SETERR(12H BAML-N.LT.1,12,1,2)                 
C        IF(ML.LT.1) CALL SETERR(13H BAML-ML.LT.1,13,2,2)               
C        IF(M.LT.ML) CALL SETERR(13H BAML-M.LT.ML,13,3,2)               
C        IF (IA.LT.M) CALL SETERR(13H BAML-IG.LT.M,13,4,2)              
C/7S                                                                    
         IF(N.LT.1) CALL SETERR(' BAML-N.LT.1',12,1,2)                  
         IF(ML.LT.1) CALL SETERR(' BAML-ML.LT.1',13,2,2)                
         IF(M.LT.ML) CALL SETERR(' BAML-M.LT.ML',13,3,2)                
         IF (IA.LT.M) CALL SETERR(' BAML-IG.LT.M',13,4,2)               
C/                                                                      
         JB=ML+1                                                        
         JE=M                                                           
         JEND=N-(M-ML)                                                  
         IS=1                                                           
         DO 10 I=1,N                                                    
            JB=MAX0(1,JB-1)                                             
            IX=IS                                                       
            SUM=0.0                                                     
            DO 5 J=JB,JE                                                
               SUM=SUM+A(J,I)*X(IX)                                     
               IX=IX+1                                                  
 5           CONTINUE                                                   
            Y(I)=SUM                                                    
            IF(I.GE.JEND)JE=JE-1                                        
            IF(JB.EQ.1)IS=IS+1                                          
 10       CONTINUE                                                      
          RETURN                                                        
          END                                                           
        SUBROUTINE  DBASS(N,ML,M,G,IG,B,IB,NB,COND)                     
C                                                                       
C THIS SUBROUTINE SOLVES AX= B WHERE A IS A BANDED UNSYMMETRIC          
C MATRIX.IT USES GAUSSIAN ELIMINATION WITH PARTIAL PIVOTING             
C IT ALSO RETURN AN ESTIMATE OF THE CONDITION NUMBER OF A               
C INPUT PARAMETERS                                                      
C N     ORDER OF THE SYSTEM                                             
C M     THE TOTAL NUMBER OF NONZERO BANDS IN THE MATRIX                 
C ML    THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL                   
C G     AN  IG X N ARRAY SUCH THAT                                      
C       G(ML+J-I,I)=A(I,J).I.E. THE LEFTMOST BAND OF A IS THE           
C       FIRST ROW OF G.                                                 
C IG    ROW DIMENSION OF G MUST BE .GE.M                                
C B     THE MATRIX OF RIGHT HAND SIDES                                  
C NB    THE NUMBER OF RIGHT HAND SIDES                                  
C IB    ROW DIMENSION OF B, MUST BE GREATER  OR EQUAL TO N              
C OUTPUT PARAMETERS                                                     
C B     THE SOLUTION VECTORS X                                          
C G     THE UPPER TRIANGULAR FACTOR OF A                                
C COND  AN ESIMATE OF THE CONDITION NUMBER OF A                         
C SCRATCH SPACE ALLOCATED-N INTEGER LOCATIONS                           
C                        ML*N DOUBLE PRECISION LOCATIONS                
C ERROR STATES                                                          
C 1 N.LT.1       FATAL                                                  
C 2 ML.LT.1      FATAL                                                  
C 3 ML.GT.M      FATAL                                                  
C 4 IG.LT.M      FATAL                                                  
C 5 IB.LT.N      FATAL                                                  
C 6 NB.LT.1      FATAL                                                  
C 10 +K SINGULAR MATRIX OF RANK K   RECOVERABLE                         
C                                                                       
         INTEGER N,ML,M,NB,IG,IB                                        
         DOUBLE PRECISION G(IG,N),B(IB,NB)                              
         DOUBLE PRECISION COND                                          
        DOUBLE PRECISION D(500)                                         
        INTEGER ISTA(1000)                                              
        COMMON /CSTAK/ D                                                
        EQUIVALENCE (D(1),ISTA(1))                                      
C CHECK FOR INPUT ERRORS                                                
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(13H DBASS-N.LT.1,13,1,2)               
C        IF(ML.LT.1) CALL SETERR(14H DBASS-ML.LT.1,14,2,2)              
C        IF(ML.GT.M) CALL SETERR(14H DBASS-ML.GT.M,14,3,2)              
C        IF (NB.LT.1) CALL SETERR(14H DBASS-NB.LT.1,14,6,2)             
C        IF (IG.LT.M) CALL SETERR(14H DBASS-IG.LT.M,14,4,2)             
C        IF (IB.LT.N) CALL SETERR(14H DBASS-IB.LT.N,14,5,2)             
C/7S                                                                    
         IF (N.LT.1) CALL SETERR(' DBASS-N.LT.1',13,1,2)                
         IF(ML.LT.1) CALL SETERR(' DBASS-ML.LT.1',14,2,2)               
         IF(ML.GT.M) CALL SETERR(' DBASS-ML.GT.M',14,3,2)               
         IF (NB.LT.1) CALL SETERR(' DBASS-NB.LT.1',14,6,2)              
         IF (IG.LT.M) CALL SETERR(' DBASS-IG.LT.M',14,4,2)              
         IF (IB.LT.N) CALL SETERR(' DBASS-IB.LT.N',14,5,2)              
C/                                                                      
         CALL ENTER(1)                                                  
         INTER=ISTKGT(N,2)                                              
         IF (ML.GT.1)JGL=ISTKGT(N*(ML-1),4)                             
         CALL DBACE(N,ML,M,G,IG,D(JGL),ML-1,ISTA(INTER),MU,COND)        
         IF (NERROR(NERR).EQ.0) GO TO 10                                
C/6S                                                                    
C           CALL N5ERR(22H DBASS-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
            CALL N5ERR(' DBASS-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
            CALL LEAVE                                                  
         RETURN                                                         
 10     CONTINUE                                                        
            CALL DBAFS(N,ML,D(JGL),ML-1,ISTA(INTER),B,IB,NB)            
            CALL   DBABS(N,G,IG,B,IB,NB,MU)                             
         CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
      SUBROUTINE  DBACE(N, ML, M, G, IG,GL,IGL,INTER, MU,COND)          
      INTEGER IG, N                                                     
      INTEGER INTER(N),IGL                                              
      DOUBLE PRECISION D(500)                                           
      DOUBLE PRECISION GL(IGL,N)                                        
      INTEGER M, ML                                                     
      DOUBLE PRECISION G(IG, N), COND                                   
      INTEGER  MU, IZ, IERR, ISTKGT, NERROR                             
      DOUBLE PRECISION ANORM, D1MACH,DBANM                              
      COMMON /CSTAK/ D                                                  
C BAND CONDITION ESTIMATOR AND DECOMPOSER                               
C INPUT PARAMETERS                                                      
C N        NUMBER OF ROWS IN A                                          
C ML       NUMBER OF NONZERO DIAGONAL ON AND BELOW THE DIAGONAL         
C M        NUMBER OF NONZERO DIAGONALS ABOVE THE DIAGONAL               
C G        ARRAY INTO WHICH THE BAND MATRIX A IS PACKED                 
C          G(ML+I-J,I)=A(I,J)                                           
C IG       ROW DIMENSION OF G                                           
C IGL      ROW DIMENSION OF GL, AT LEAST ML-1                           
C OUTPUT PARAMETERS                                                     
C G        THE U FROM THE LU DECOMPOSITION OF G                         
C GL       THE L FROM THE LU DECOMPOSITION OF G                         
C          AN IGL X N ARRAY                                             
C INTER    THE INTERCHANGES NEEDED TO PERFORM THE DECOMPOSITION         
C         AN INTEGER VECTOR OF LENGTH N                                 
C COND     A LOWER ESTIMATE OF THE CONDITION NUMBER OF A                
C          COND RANGES FROM 1 TO THE LARGEST NUMBER ON THE MACHINE      
C          THE LARGER THE NUMBER THE MORE ILL CONDITIONED THE MATRIX    
C          IN GENERAL IF COND IS 10,1 DECIMAL DIGIT IN A LINEAR         
C          SYSTEM WILL BE INACCURATE, COND IS 100,2 DECIMAL DIGITS      
C          WILL BE INACCURATE,ETC.                                      
C STORAGE ALLOCATED -N DOUBLE PRECISION LOCATIONS                       
C ERROR CONDITIONS                                                      
C 1   N.LT.1      FATAL                                                 
C 2   ML.GT.N     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IGL.LT.ML-1   FATAL                                               
C 10+K SINGULAR MATRIX OF RANK K RECOVERABLE                            
      CALL ENTER(1)                                                     
C/6S                                                                    
C     IF (N .LT. 1) CALL SETERR(13H DBACE-N.LT.1, 13, 1, 2)             
C     IF (ML .GT. N) CALL SETERR(14H DBACE-ML.GT.N, 14, 2, 2)           
C     IF (M .LT. ML) CALL SETERR(14H DBACE-M.LT.ML, 14, 3, 2)           
C     IF (IG .LT. M) CALL SETERR(14H DBACE-IG.LT.M, 14, 4, 2)           
C     IF (IGL.LT.ML-1) CALL SETERR(18H DBACE-IGL.LT.ML-1,18,5,2)        
C/7S                                                                    
      IF (N .LT. 1) CALL SETERR(' DBACE-N.LT.1', 13, 1, 2)              
      IF (ML .GT. N) CALL SETERR(' DBACE-ML.GT.N', 14, 2, 2)            
      IF (M .LT. ML) CALL SETERR(' DBACE-M.LT.ML', 14, 3, 2)            
      IF (IG .LT. M) CALL SETERR(' DBACE-IG.LT.M', 14, 4, 2)            
      IF (IGL.LT.ML-1) CALL SETERR(' DBACE-IGL.LT.ML-1',18,5,2)         
C/                                                                      
      ANORM=DBANM(N,ML,M,G,IG)                                          
      CALL  DBALU(N, ML, M, G, IG, GL, IGL, INTER, MU, 0.D0)            
      IF (NERROR(IERR) .EQ. 0) GOTO 1                                   
C/6S                                                                    
C     CALL N5ERR(21HDBACE-SINGULAR MATRIX,21,IERR,1)                    
C/7S                                                                    
      CALL N5ERR('DBACE-SINGULAR MATRIX',21,IERR,1)                     
C/                                                                      
         COND = D1MACH(2)                                               
         CALL LEAVE                                                     
         RETURN                                                         
   1  IZ = ISTKGT(N, 4)                                                 
      CALL DB4DCE(N, ML, G, IG, GL,IGL, INTER, COND, MU,                
     1   ANORM, D(IZ))                                                  
      CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE DB4DCE(N, ML, G, IG, GL, IGL, INTER, COND, MU,         
     1   ANORM, Z)                                                      
      INTEGER IG, N, IGL                                                
      INTEGER ML, INTER(N), MU                                          
      DOUBLE PRECISION G(IG, N), GL(IGL, N), COND, ANORM, Z(N)          
      INTEGER IB, KB, JEND, JJ, IEND, KP1                               
      INTEGER NP1, I, J, K, L, IMK                                      
      INTEGER M1, MIN0                                                  
      DOUBLE PRECISION  EK, SM, WK, ZK                                  
      DOUBLE PRECISION T, S, WKM, DASUM, SUM                            
      DOUBLE PRECISION BOUND, D1MACH, DSQRT, YNORM                      
      DOUBLE PRECISION ARGE                                             
      M1 = ML-1                                                         
      BOUND = DSQRT(D1MACH(2))/DBLE(FLOAT(N))                           
C SOLVE U(TRANSPOSE)Z=E,WHERE ELEMENTS OF E ARE +1 OR                   
C-1                                                                     
      EK = 1.D0                                                         
      M1=ML-1                                                           
      MUM1=MU-1                                                         
      DO  1 I = 1, N                                                    
         Z(I) = 0.D0                                                    
   1     CONTINUE                                                       
      DO  9 K = 1, N                                                    
         ZK = Z(K)                                                      
         IF (ZK .NE. 0.D0) EK = DSIGN(EK,- ZK)                          
            JEND = MIN0(K+MUM1, N)                                      
         T = EK-ZK                                                      
         IF (DABS(G(1, K)) .GE. DABS(T)) GOTO 4                         
            S=DABS(G(1,K))/DABS(T)                                      
            DO  3 I = 1, JEND                                           
               Z(I) = S*Z(I)                                            
   3           CONTINUE                                                 
            EK = S*EK                                                   
 4       WK=EK-Z(K)                                                     
         WKM=-EK-Z(K)                                                   
         S=DABS(WK)                                                     
         SM=DABS(WKM)                                                   
         IF (DABS(G(1,K)).EQ.0.D0) GO TO 101                            
             WK=WK/G(1,K)                                               
             WKM=WKM/G(1,K)                                             
             GO TO 102                                                  
 101         WK=1.0                                                     
            WKM=1.0                                                     
 102     CONTINUE                                                       
            KP1 = K+1                                                   
            IF (KP1.GT.JEND) GO TO 103                                  
            JJ = 2                                                      
            DO  5 J = KP1, JEND                                         
                SM=SM+DABS(Z(J)+WKM*G(JJ,K))                            
               Z(J) = Z(J)+G(JJ,K)*WK                                   
               S = S+DABS(Z(J))                                         
               JJ = JJ+1                                                
   5           CONTINUE                                                 
 103        CONTINUE                                                    
            IF (S .GE. SM) GOTO 7                                       
               T = WKM-WK                                               
               WK=WKM                                                   
               IF (KP1.GT.JEND) GO TO 7                                 
               JJ = 2                                                   
               DO  6 J = KP1, JEND                                      
                  Z(J) = Z(J)+T*G(JJ, K)                                
                  JJ = JJ+1                                             
   6              CONTINUE                                              
   7        CONTINUE                                                    
            Z(K)=WK                                                     
   9     CONTINUE                                                       
C                                                                       
C SOLVE L(TRANSPOSE)Y=W                                                 
C                                                                       
      S=1.0/DASUM(N,Z,1)                                                
      CALL DSCAL(N,S,Z,1)                                               
      NP1 = N+1                                                         
      IF(ML.EQ.1) GO TO 135                                             
      DO  13 KB = 1, N                                                  
         K = NP1-KB                                                     
         IF (K .GE. N) GOTO 13                                          
            SUM = 0.D0                                                  
            IEND = MIN0(KB-1, M1)                                       
            J = K+1                                                     
            DO  10 I = 1, IEND                                          
               SUM = SUM+GL(I, K)*Z(J)                                  
               J = J+1                                                  
  10           CONTINUE                                                 
            Z(K) = Z(K)+SUM                                             
            IF (DABS(Z(K)).LT.BOUND) GO TO 11                           
               S=1.0/DABS(Z(K))                                         
               CALL DSCAL(N,S,Z,1)                                      
 11         CONTINUE                                                    
        IF (DABS(Z(K)).LT.BOUND) GO TO 12                               
           S=1.D0/DABS(Z(K))                                            
           CALL DSCAL(N,S,Z,1)                                          
 12     CONTINUE                                                        
         L = INTER(K)                                                   
         T = Z(L)                                                       
         Z(L) = Z(K)                                                    
         Z(K) = T                                                       
  13     CONTINUE                                                       
 135   S=1.E0/DASUM(N,Z,1)                                              
       CALL DSCAL(N,S,Z,1)                                              
       YNORM=1.D0                                                       
C                                                                       
C SOLVELW=Y                                                             
C                                                                       
 14    IF(ML.EQ.1) GO TO 18                                             
      NM1=N-1                                                           
      DO 16 K=1,NM1                                                     
         I=INTER(K)                                                     
         KP1=K+1                                                        
         T=Z(I)                                                         
         Z(I)=Z(K)                                                      
         Z(K)=T                                                         
         IEND=MIN0(M1+K,N)                                              
         IMK=0                                                          
         DO 15 II=KP1,IEND                                              
            IMK=IMK+1                                                   
            Z(II)=Z(II)+GL(IMK,K)*T                                     
 15      CONTINUE                                                       
         IF (DABS(Z(K)).LT.BOUND) GO TO 16                              
            S=1.D0/DABS(Z(K))                                           
            CALL DSCAL(N,S,Z,1)                                         
            YNORM=YNORM*S                                               
 16      CONTINUE                                                       
  17     CONTINUE                                                       
      S=1.D0/DASUM(N,Z,1)                                               
       IF (S.GT.1.D0) GO TO 18                                          
         CALL DSCAL(N, S, Z, 1)                                         
         YNORM = YNORM*S                                                
C                                                                       
C SOLVE UZ=W                                                            
C                                                                       
  18  L = 1                                                             
      DO  23 KB = 1, N                                                  
         K = NP1-KB                                                     
         SUM = Z(K)                                                     
         IF (L .LE. 1) GOTO 20                                          
            IB = K                                                      
            DO  19 I = 2, L                                             
               IB = IB+1                                                
               SUM = SUM-G(I, K)*Z(IB)                                  
  19           CONTINUE                                                 
  20     L = MIN0(L+1, MU)                                              
         Z(K)=SUM                                                       
         IF (DABS(G(1, K)) .GE. DABS(SUM)) GOTO 210                     
  21        T = 0.D0                                                    
            IF (DABS(SUM) .NE. 0.D0) T = G(1, K)/SUM                    
            S = DABS(T)                                                 
            CALL DSCAL(N, S, Z, 1)                                      
            YNORM = YNORM*S                                             
 210     IF (G(1,K).NE.0.D0) Z(K)=Z(K)/G(1,K)                           
         IF (G(1,K).EQ.0.D0)Z(K)=1.D0                                   
  22     CONTINUE                                                       
  23     CONTINUE                                                       
       S=1.0/DASUM(N,Z,1)                                               
       YNORM=S*YNORM                                                    
      ARGE=D1MACH(2)                                                    
      IF (YNORM.GT.1.D0) GO TO 50                                       
      IF (ANORM.LE.YNORM*ARGE) GO TO 50                                 
         COND=ARGE                                                      
         RETURN                                                         
 50   COND=ANORM/YNORM                                                  
      RETURN                                                            
      END                                                               
        SUBROUTINE  DBALE(N,ML,M,G,IG,B,IB,NB)                          
C                                                                       
C THIS SUBROUTINE SOLVES AX= B WHERE A IS A BANDED UNSYMMETRIC          
C MATRIX.IT USES GAUSSIAN ELIMINATION WITH PARTIAL PIVOTING             
C INPUT PARAMETERS                                                      
C N     ORDER OF THE SYSTEM                                             
C M     THE TOTAL NUMBER OF NONZERO BANDS IN THE MATRIX                 
C ML    THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL                   
C G     AN  IG X N ARRAY SUCH THAT                                      
C       G(ML+J-I,I)=A(I,J).I.E. THE LEFTMOST BAND OF A IS THE           
C       FIRST ROW OF G.                                                 
C IG    ROW DIMENSION OF G MUST BE .GE.M                                
C B     THE MATRIX OF RIGHT HAND SIDES                                  
C NB    THE NUMBER OF RIGHT HAND SIDES                                  
C IB    ROW DIMENSION OF B, MUST BE GREATER  OR EQUAL TO N              
C OUTPUT PARAMETERS                                                     
C B     THE SOLUTION VECTORS X                                          
C G     THE UPPER TRIANGULAR FACTOR OF A                                
C SCRATCH SPACE ALLOCATED-NONE                                          
C ERROR STATES                                                          
C 1 N.LT.1       FATAL                                                  
C 2 ML.LT.1      FATAL                                                  
C 3 ML.GT.M      FATAL                                                  
C 4 IG.LT.M      FATAL                                                  
C 5 IB.LT.N      FATAL                                                  
C 6 NB.LT.1      FATAL                                                  
C 10 +K SINGULAR MATRIX OF RANK K   RECOVERABLE                         
C                                                                       
         INTEGER N,ML,M,NB,IG,IB                                        
         DOUBLE PRECISION G(IG,N),B(IB,NB)                              
C CHECK FOR INPUT ERRORS                                                
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(13H DBALE-N.LT.1,13,1,2)               
C        IF(ML.LT.1) CALL SETERR(14H DBALE-ML.LT.1,14,2,2)              
C        IF(ML.GT.M) CALL SETERR(14H DBALE-ML.GT.M,14,3,2)              
C        IF (NB.LT.1) CALL SETERR(14H DBALE-NB.LT.1,14,6,2)             
C        IF (IG.LT.M) CALL SETERR(14H DBALE-IG.LT.M,14,4,2)             
C        IF (IB.LT.N) CALL SETERR(14H DBALE-IB.LT.N,14,5,2)             
C/7S                                                                    
         IF (N.LT.1) CALL SETERR(' DBALE-N.LT.1',13,1,2)                
         IF(ML.LT.1) CALL SETERR(' DBALE-ML.LT.1',14,2,2)               
         IF(ML.GT.M) CALL SETERR(' DBALE-ML.GT.M',14,3,2)               
         IF (NB.LT.1) CALL SETERR(' DBALE-NB.LT.1',14,6,2)              
         IF (IG.LT.M) CALL SETERR(' DBALE-IG.LT.M',14,4,2)              
         IF (IB.LT.N) CALL SETERR(' DBALE-IB.LT.N',14,5,2)              
C/                                                                      
         CALL ENTER(1)                                                  
         CALL  DB4ADF(N,ML,M,G,IG,B,IB,NB,MU)                           
         IF (NERROR(NERR).EQ.0) GO TO 10                                
C/6S                                                                    
C           CALL N5ERR(22H DBALE-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
            CALL N5ERR(' DBALE-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
            CALL LEAVE                                                  
         RETURN                                                         
 10      CONTINUE                                                       
            CALL  DBABS(N,G,IG,B,IB,NB,MU)                              
         CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
          SUBROUTINE  DB4ADF(N,ML,M,G,IG,B,IB,NB,MU)                    
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED UNSYMMETRIC MATRIX USING GAUSSIAN ELIMINATION                  
C WITH PARTIAL PIVOTING AND APPLIES THE TRANSFORMATIONS                 
C FOR L(INVERSE) TO B                                                   
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF ELEMENTS ON OR BELOW                        
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C M       THE MAXIMUM NUMBER OF NONZERO ELEMENTS IN EACH                
C         COLUMN                                                        
C G       THE MATRIX A STORED AS AN IG X N ARRAY                        
C         WITH G(ML+J-I,I)=A(I,J).I.E.THE LEFTMOST                      
C         DIAGONAL OF THE BAND MATRIX IS THE FIRST ROW OF G             
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN M                  
C B       AN IB X NB MATRIX OF THE RIGHT HAND SIDES                     
C IB      ROW DIMENSION OF B,MUST BE AT LEAST N                         
C NB      NUMBER OF RIGHT HAND SIDES                                    
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C B       THE TRANSFORMED RIGHT HAND SIDE,THE SOLUTION TO               
C         LX=B                                                          
C MU      THE NUMBER OF NONZERO DIAGONALS IN THE UPPER                  
C         TRIANGULAR BAND FACTOR                                        
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IB.LT.N     FATAL                                                 
C 6   NB.LT.1     FATAL                                                 
C 10+K SINGULAR MATRIX OF RANK K  RECOVERABLE                           
           INTEGER ML,N,IG,IB,NB                                        
           DOUBLE PRECISION G(IG,N),B(IB,NB)                            
           DOUBLE PRECISION EPS,D1MACH,DBANM                            
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13HDB4ADF-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14HDB4ADF-ML.LT.1,14,2,2)                
C      IF (M.LT.ML) CALL SETERR(14HDB4ADF-ML.LT.M,14,3,2)               
C      IF (IG.LT.M) CALL SETERR(14HDB4ADF-IG,LT.M,14,4,2)               
C      IF (IB.LT.N) CALL SETERR(14HDB4ADF-IB.LT.N,14,5,2)               
C      IF (NB.LT.1)CALL SETERR(14HDB4ADF-NB.LT.1,14,6,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('DB4ADF-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR('DB4ADF-ML.LT.1',14,2,2)                 
       IF (M.LT.ML) CALL SETERR('DB4ADF-ML.LT.M',14,3,2)                
       IF (IG.LT.M) CALL SETERR('DB4ADF-IG,LT.M',14,4,2)                
       IF (IB.LT.N) CALL SETERR('DB4ADF-IB.LT.N',14,5,2)                
       IF (NB.LT.1)CALL SETERR('DB4ADF-NB.LT.1',14,6,2)                 
C/                                                                      
        CALL ENTER(1)                                                   
         EPS=D1MACH(4)*DBANM(N,ML,M,G,IG)                               
         CALL  DB4ALF(N,ML,M,G,IG,B,IB,NB,MU,EPS)                       
C/6S                                                                    
C         IF(NERROR(IERR).NE.0)                                         
C    1      CALL N5ERR(22HDB4ADF-SINGULAR MATRIX,22,IERR,1)             
C/7S                                                                    
          IF(NERROR(IERR).NE.0)                                         
     1      CALL N5ERR('DB4ADF-SINGULAR MATRIX',22,IERR,1)              
C/                                                                      
          CALL LEAVE                                                    
          RETURN                                                        
          END                                                           
          SUBROUTINE  DB4ALF(N,ML,M,G,IG,B,IB,NB,MU,EPS)                
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED UNSYMMETRIC MATRIX USING GAUSSIAN ELIMINATION                  
C WITH PARTIAL PIVOTING AND APPLIES THE TRANSFORMATIONS                 
C FOR L(INVERSE) TO B                                                   
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF ELEMENTS ON OR BELOW                        
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C M       THE MAXIMUM NUMBER OF NONZERO ELEMENTS IN EACH                
C         COLUMN                                                        
C G       THE MATRIX A STORED AS AN IG X N ARRAY                        
C         WITH G(ML+J-I,I)=A(I,J).I.E.THE LEFTMOST                      
C         DIAGONAL OF THE BAND MATRIX IS THE FIRST ROW OF G             
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN M                  
C B       AN IB X NB MATRIX OF THE RIGHT HAND SIDES                     
C IB      ROW DIMENSION OF B,MUST BE AT LEAST N                         
C NB      NUMBER OF RIGHT HAND SIDES                                    
C EPS      LARGEST NONACCEPTABLE PIVOT                                  
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C B       THE TRANSFORMED RIGHT HAND SIDE,THE SOLUTION TO               
C         LX=B                                                          
C MU      THE NUMBER OF NONZERO DIAGONALS IN THE UPPER                  
C         TRIANGULAR BAND FACTOR                                        
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IB.LT.N     FATAL                                                 
C 6   NB.LT.1     FATAL                                                 
C 10+K SINGULAR MATRIX OF RANK K  RECOVERABLE                           
           INTEGER ML,N,IG,IB,NB,IER                                    
           DOUBLE PRECISION G(IG,N),B(IB,NB)                            
           DOUBLE PRECISION EPS,XI                                      
           DOUBLE PRECISION X                                           
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13HDB4ALF-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14HDB4ALF-ML.LT.1,14,2,2)                
C      IF (M.LT.ML) CALL SETERR(14HDB4ALF-ML.LT.M,14,3,2)               
C      IF (IG.LT.M) CALL SETERR(14HDB4ALF-IG,LT.M,14,4,2)               
C      IF (IB.LT.N) CALL SETERR(14HDB4ALF-IB.LT.N,14,5,2)               
C      IF (NB.LT.1)CALL SETERR(14HDB4ALF-NB.LT.1,14,6,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('DB4ALF-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR('DB4ALF-ML.LT.1',14,2,2)                 
       IF (M.LT.ML) CALL SETERR('DB4ALF-ML.LT.M',14,3,2)                
       IF (IG.LT.M) CALL SETERR('DB4ALF-IG,LT.M',14,4,2)                
       IF (IB.LT.N) CALL SETERR('DB4ALF-IB.LT.N',14,5,2)                
       IF (NB.LT.1)CALL SETERR('DB4ALF-NB.LT.1',14,6,2)                 
C/                                                                      
       MU=M-ML+1                                                        
       MU1=MU                                                           
       MU2=MU                                                           
       CALL ENTER(1)                                                    
       IER=0                                                            
       M1=ML-1                                                          
       M2=M-ML                                                          
       LL=M1                                                            
       N2=2*N                                                           
       NP1=N+1                                                          
       MLP1=ML+1                                                        
       IF(M1.LT.1) GO TO 41                                             
       DO 40 I=1,M1                                                     
          JBEG=MLP1-I                                                   
         JEND=MIN0(M,N2-I)                                              
          DO 20 J=JBEG,JEND                                             
             JMLL=J-LL                                                  
              G(JMLL,I)=G(J,I)                                          
 20       CONTINUE                                                      
          LL=LL-1                                                       
          JBEG=M-LL                                                     
          DO 30 J=JBEG,M                                                
              G(J,I)=0.D0                                               
 30       CONTINUE                                                      
 40   CONTINUE                                                          
C                                                                       
C ZERO OUT LOWER RHS WART                                               
C                                                                       
 41    IF (M2.LT.1) GO TO 61                                            
       DO 60 I=1,M2                                                     
          JBEG=ML+I                                                     
          NP1MI=NP1-I                                                   
          DO 50 J=JBEG,M                                                
             G(J,NP1MI)=0.D0                                            
 50      CONTINUE                                                       
 60    CONTINUE                                                         
 61     CONTINUE                                                        
       DO 200 K=1,N                                                     
          X=DABS(G(1,K))                                                
          I=K                                                           
          LL=MIN0(M1+K,N)                                               
          KP1=K+1                                                       
          IF (LL.LT.KP1) GO TO 80                                       
C GET THE PIVOT ROW                                                     
          DO 70 J=KP1,LL                                                
            IF (DABS(G(1,J)).LE.X) GO TO 70                             
               I=J                                                      
               X=DABS(G(1,J))                                           
 70       CONTINUE                                                      
 80       CONTINUE                                                      
          IF(X.GT.EPS) GO TO 90                                         
C/6S                                                                    
C         IF(IER.EQ.0)CALL SETERR(22HDB4ALF-SINGULAR MATRIX,22,K+9,1)   
C/7S                                                                    
          IF(IER.EQ.0)CALL SETERR('DB4ALF-SINGULAR MATRIX',22,K+9,1)    
C/                                                                      
          G(1,I)=DSIGN(EPS,G(1,I))                                      
           IER=1                                                        
 90       CONTINUE                                                      
          IF (I.EQ.K) GO TO 110                                         
C NEED TO INTERCHANGE COLUMNS                                           
             DO 100 J=1,M                                               
                X=G(J,K)                                                
                G(J,K)=G(J,I)                                           
                G(J,I)=X                                                
 100         CONTINUE                                                   
             DO 105 J=1,NB                                              
                X=B(K,J)                                                
                B(K,J)=B(I,J)                                           
                B(I,J)=X                                                
 105         CONTINUE                                                   
 110      IF (K.GE.LL) GO TO 200                                        
          MM=MU1+I-K                                                    
          MU=MAX0(MU,MM)                                                
          MU2=MAX0(MU2-1,MM)                                            
          MU2P1=MU2+1                                                   
          XI=G(1,K)                                                     
          IF(XI.EQ.0.E0)XI=1.0                                          
          DO 170 I=KP1,LL                                               
             X=-G(1,I)/XI                                               
C APPLY TRANSFORMATIONS TO RIGHT HAND SIDE                              
             DO 130 J=1,NB                                              
                B(I,J)=B(I,J)+X*B(K,J)                                  
 130         CONTINUE                                                   
             IF (MU2.LT.2) GO TO 141                                    
             DO 140 J=2,MU2                                             
                G(J-1,I)=G(J,I)+X*G(J,K)                                
 140         CONTINUE                                                   
 141         IF (MU2.EQ.M) GO TO 170                                    
             DO 150 J=MU2P1,M                                           
 150            G(J-1,I)=G(J,I)                                         
 170    CONTINUE                                                        
        G(M,LL)=0.D0                                                    
 200   CONTINUE                                                         
 210   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
          SUBROUTINE   DBADC(N,ML,M,G,IG,AL,IAL,INT,MU)                 
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED UNSYMMETRIC MATRIX USING GAUSSIAN ELIMINATION                  
C WITH PARTIAL PIVOTING                                                 
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF NONZERO ELEMENTS ON OR BELOW                
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C M       THE MAXIMUM NUMBER OF NONZERO ELEMENTS IN EACH                
C         COLUMN                                                        
C G       THE MATRIX A STORED AS AN IG X N ARRAY                        
C         WITH G(ML+J-I)=A(I,J).I.E. THE LEFTMOST                       
C         DIAGONAL OF THE BAND MATRIX IS THE FIRST ROW OF G             
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN M                  
C IAL     ROW DIMENSION OF AL, MUST NOT BE LESS THAN ML                 
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C AL      AN IAL X N ARRAY CONTAINING THE LOWER TRIANGULAR              
C         BAND FACTOR OF A                                              
C INT     AN INTEGER VECTOR OF LENGTH N RECORDING INTERCHANGES          
C          INVOLVED IN GAUSSIAN ELIMINATION                             
C MU      THE NUMBER OF NONZERO DIAGONALS IN THE UPPER                  
C         TRIANGULAR BAND FACTOR                                        
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IAL.LT.ML-1 FATAL                                                 
C 10+K SINGULAR MATRIX OF RANK K   RECOVERABLE                          
           INTEGER IG,IAL                                               
           INTEGER N,ML,M,INT(N)                                        
           DOUBLE PRECISION G(IG,N),AL(IAL,N)                           
           DOUBLE PRECISION EPS,D1MACH,DBANM                            
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H DBADC-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H DBADC-ML.LT.1,14,2,2)                
C      IF (M.LT.ML) CALL SETERR(14H DBADC-ML.LT.M,14,3,2)               
C      IF (IG.LT.M) CALL SETERR(14H DBADC-IG,LT.M,14,4,2)               
C      IF (IAL.LT.ML-1)CALL SETERR(18H DBADC-IAL.LT.ML-1,18,5,2)        
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' DBADC-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR(' DBADC-ML.LT.1',14,2,2)                 
       IF (M.LT.ML) CALL SETERR(' DBADC-ML.LT.M',14,3,2)                
       IF (IG.LT.M) CALL SETERR(' DBADC-IG,LT.M',14,4,2)                
       IF (IAL.LT.ML-1)CALL SETERR(' DBADC-IAL.LT.ML-1',18,5,2)         
C/                                                                      
       CALL ENTER(1)                                                    
          EPS=DBANM(N,ML,M,G,IG)*D1MACH(4)                              
          CALL   DBALU(N,ML,M,G,IG,AL,IAL,INT,MU,EPS)                   
C/6S                                                                    
C         IF(NERROR(IERR).NE.0)                                         
C    1      CALL N5ERR(22H DBADC-SINGULAR MATRIX,22,IERR,1)             
C/7S                                                                    
          IF(NERROR(IERR).NE.0)                                         
     1      CALL N5ERR(' DBADC-SINGULAR MATRIX',22,IERR,1)              
C/                                                                      
          CALL LEAVE                                                    
          RETURN                                                        
          END                                                           
        DOUBLE PRECISION FUNCTION  DBANM(N,ML,M,G,IG)                   
        DOUBLE PRECISION G(IG,1),SUM                                    
C THIS SUBROUTINE COMPUTES THE INFINITY NORM OF A BAND MATRIX           
C STORED IN BAND FORM                                                   
C/6S                                                                    
C       IF (N.LT.1)CALL SETERR(12HDBANM-N.LT.1,12,1,2)                  
C       IF (ML.LT.1) CALL SETERR(13HDBANM-ML.LT.1,13,2,2)               
C       IF (M.LT.ML)CALL SETERR(13HDBANM-M.LT.ML,13,3,2)                
C       IF(IG.LT.M) CALL SETERR(13HDBANM-IG.LT.M,13,4,2)                
C/7S                                                                    
        IF (N.LT.1)CALL SETERR('DBANM-N.LT.1',12,1,2)                   
        IF (ML.LT.1) CALL SETERR('DBANM-ML.LT.1',13,2,2)                
        IF (M.LT.ML)CALL SETERR('DBANM-M.LT.ML',13,3,2)                 
        IF(IG.LT.M) CALL SETERR('DBANM-IG.LT.M',13,4,2)                 
C/                                                                      
        JB=ML+1                                                         
        JE=M                                                            
        JEND=N-(M-ML)                                                   
         DBANM=0.0D0                                                    
        DO 10 I=1,N                                                     
           SUM=0.0                                                      
           JB=MAX0(1,JB-1)                                              
           DO 5 J=JB,JE                                                 
              SUM=SUM+DABS(G(J,I))                                      
 5         CONTINUE                                                     
           IF(I.GE.JEND)JE=JE-1                                         
           IF(SUM.GT.DBANM) DBANM=SUM                                   
 10      CONTINUE                                                       
         RETURN                                                         
         END                                                            
          SUBROUTINE   DBALU(N,ML,M,G,IG,AL,IAL,INT,MU,EPS)             
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED UNSYMMETRIC MATRIX USING GAUSSIAN ELIMINATION                  
C WITH PARTIAL PIVOTING                                                 
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF NONZERO ELEMENTS ON OR BELOW                
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C M       THE MAXIMUM NUMBER OF NONZERO ELEMENTS IN EACH                
C         COLUMN                                                        
C G       THE MATRIX A STORED AS AN IG X N ARRAY                        
C         WITH G(ML+J-I,I)=A(I,J).I.E. THE LEFTMOST                     
C         DIAGONAL OF THE BAND MATRIX IS THE FIRST ROW OF G             
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN M                  
C IAL     ROW DIMENSION OF AL, MUST NOT BE LESS THAN ML-1               
C EPS     LARGEST NONACCEPTABLE PIVOT                                   
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C AL      AN IAL X N ARRAY CONTAINING THE LOWER TRIANGULAR              
C         BAND FACTOR OF A                                              
C INT     AN INTEGER VECTOR OF LENGTH N RECORDING INTERCHANGES          
C          INVOLVED IN GAUSSIAN ELIMINATION                             
C MU      THE NUMBER OF NONZERO DIAGONALS IN THE UPPER                  
C         TRIANGULAR BAND FACTOR                                        
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IAL.LT.ML-1 FATAL                                                 
C 10+K SINGULAR MATRIX OF RANK K   RECOVERABLE                          
           INTEGER IG,IAL                                               
           INTEGER N,ML,M,INT(N)                                        
           DOUBLE PRECISION G(IG,N),AL(IAL,N)                           
           DOUBLE PRECISION X                                           
           DOUBLE PRECISION EPS,XI                                      
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H DBALU-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H DBALU-ML.LT.1,14,2,2)                
C      IF (M.LT.ML) CALL SETERR(14H DBALU-M.LT.ML,14,3,2)               
C      IF (IG.LT.M) CALL SETERR(14H DBALU-IG.LT.M,14,4,2)               
C     IF (IAL.LT.ML-1)CALL SETERR(18H DBALU-IAL.LT.ML-1,18,5,2)         
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' DBALU-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR(' DBALU-ML.LT.1',14,2,2)                 
       IF (M.LT.ML) CALL SETERR(' DBALU-M.LT.ML',14,3,2)                
       IF (IG.LT.M) CALL SETERR(' DBALU-IG.LT.M',14,4,2)                
      IF (IAL.LT.ML-1)CALL SETERR(' DBALU-IAL.LT.ML-1',18,5,2)          
C/                                                                      
       IER=0                                                            
       MU=M-ML+1                                                        
       INTN=1                                                           
       MU1=MU                                                           
       MU2=MU                                                           
       NP1=N+1                                                          
       CALL ENTER(1)                                                    
       M1=ML-1                                                          
       M2=M-ML                                                          
       LL=M1                                                            
       MLP1=ML+1                                                        
       IF (M1.LT.1) GO TO 41                                            
       N2=2*N                                                           
       DO 40 I=1,M1                                                     
          JBEG=MLP1-I                                                   
          JEND=MIN0(M,N2-I)                                             
          DO 20 J=JBEG,JEND                                             
             JMLL=J-LL                                                  
              G(JMLL,I)=G(J,I)                                          
 20       CONTINUE                                                      
          LL=LL-1                                                       
          JBEG=M-LL                                                     
          DO 30 J=JBEG,M                                                
              G(J,I)=0.D0                                               
 30       CONTINUE                                                      
 40   CONTINUE                                                          
C                                                                       
C ZERO OUT LOWER RHS WART                                               
C                                                                       
 41    IF (M2.LT.1) GO TO 61                                            
       DO 60 I=1,M2                                                     
          JBEG=ML+I                                                     
          NP1MI=NP1-I                                                   
          DO 50 J=JBEG,M                                                
             G(J,NP1MI)=0.D0                                            
 50      CONTINUE                                                       
 60    CONTINUE                                                         
 61    CONTINUE                                                         
       DO 200 K=1,N                                                     
          X=DABS(G(1,K))                                                
          I=K                                                           
          LL=MIN0(M1+K,N)                                               
          KP1=K+1                                                       
          IF (LL.LT.KP1) GO TO 80                                       
C GET THE PIVOT ROW                                                     
          DO 70 J=KP1,LL                                                
            IF (DABS(G(1,J)).LE.X) GO TO 70                             
               I=J                                                      
               X=DABS(G(1,J))                                           
 70       CONTINUE                                                      
 80       IF (X.GT.EPS) GO TO 90                                        
C/6S                                                                    
C      IF (IER.EQ.0)CALL SETERR(22H DBALU-SINGULAR MATRIX,22,9+K,1)     
C/7S                                                                    
       IF (IER.EQ.0)CALL SETERR(' DBALU-SINGULAR MATRIX',22,9+K,1)      
C/                                                                      
          G(1,I)=DSIGN(EPS,G(1,I))                                      
             IER=1                                                      
 90       CONTINUE                                                      
          INT(K)=I                                                      
          IF (I.EQ.K) GO TO 110                                         
             INTN=-INTN                                                 
C NEED TO INTERCHANGE COLUMNS                                           
             DO 100 J=1,M                                               
                X=G(J,K)                                                
                G(J,K)=G(J,I)                                           
                G(J,I)=X                                                
 100         CONTINUE                                                   
 110      IF (K.GE.LL) GO TO 200                                        
          MM=MIN0(NP1,MU1+I)-K                                          
          MU=MAX0(MU,MM)                                                
          MU2=MAX0(MU2-1,MM)                                            
          IMK=0                                                         
          XI=G(1,K)                                                     
          IF(XI.EQ.0.E0)XI=1.0                                          
          MU2P1=MU2+1                                                   
          DO 170 I=KP1,LL                                               
             X=-G(1,I)/XI                                               
             IMK=IMK+1                                                  
             AL(IMK,K)=X                                                
             IF (MU2.LT.2) GO TO 141                                    
             DO 140 J=2,MU2                                             
                G(J-1,I)=G(J,I)+X*G(J,K)                                
 140         CONTINUE                                                   
 141         IF (MU2.EQ.M) GO TO 170                                    
             DO 150 J=MU2P1,M                                           
 150            G(J-1,I)=G(J,I)                                         
 170    CONTINUE                                                        
        G(M,LL)=0.D0                                                    
 200   CONTINUE                                                         
 210   INT(N)=INTN                                                      
       CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
         SUBROUTINE   DBAFS(N,ML,AL,IAL,INT,B,IB,NB)                    
C                                                                       
C THIS SUBROUTINE SOLVES LX=B WHERE L IS A LOWER TRIANGULAR             
C BAND MATRIX                                                           
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE SYSTEM                                        
C ML     THE NUMBER OF NONZERO ELEMENTS OF L ON AND BELOW               
C        THE DIAGONAL,THE ROW DIMENSION OF AL                           
C AL     AN IAL X N MATRIX CONTAINING THE LOWERTRIANGULAR               
C        BAND MATRIX. NOTE THAT AL(I-J,J)=L(I,J)                        
C IAL    ROW DIMENSION OF AL                                            
C INT    AN INTEGER VECTOR OF LENGTH N COMPUTED BY   DBALU              
C        RECORDING THE INTERCHANGES PERFORMED ON L                      
C B      A VECTOR OF LENGTH N CONTAINING THE RIGHT HAND SIDE            
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION X                                                 
C SCRATCH SPACE ALLOCATED - NONE                                        
C ERROR CONDITIONS                                                      
C 1     N.LT.1     FATAL                                                
C 2     ML.LT.1     FATAL                                               
C 3     IAL.LT.ML-1 FATAL                                               
C 4     INT(I)    NOT IN 1,.....N     FATAL                             
C 5     IB.LT.N          FATAL                                          
C 6     NB.LT.1          FATAL                                          
C                                                                       
         INTEGER IAL,N,ML,INT(N)                                        
        DOUBLE PRECISION AL(IAL,N),B(IB,NB)                             
        DOUBLE PRECISION X                                              
C CHECK ERROR CONDITIONS                                                
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H DBAFS-N.LT.1,13,1,2)                  
C      IF( ML.LT.1)CALL SETERR(14H DBAFS-ML.LT.1,14,2,2)                
C      IF (IAL.LT.ML-1)CALL SETERR(18H DBAFS-IAL.LT.ML-1,18,3,2)        
C      IF(IB.LT.N) CALL SETERR(14H DBAFS-IB.LT.N,14,5,2)                
C      IF(NB.LT.1) CALL SETERR(14H DBAFS-NB.LT.1,14,6,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' DBAFS-N.LT.1',13,1,2)                   
       IF( ML.LT.1)CALL SETERR(' DBAFS-ML.LT.1',14,2,2)                 
       IF (IAL.LT.ML-1)CALL SETERR(' DBAFS-IAL.LT.ML-1',18,3,2)         
       IF(IB.LT.N) CALL SETERR(' DBAFS-IB.LT.N',14,5,2)                 
       IF(NB.LT.1) CALL SETERR(' DBAFS-NB.LT.1',14,6,2)                 
C/                                                                      
       IF (ML.EQ.1) RETURN                                              
       IF (N.EQ.1) RETURN                                               
       CALL ENTER(1)                                                    
       M1=ML-1                                                          
        NM1=N-1                                                         
       DO 60 K=1,NM1                                                    
          I=INT(K)                                                      
          KP1=K+1                                                       
C/6S                                                                    
C         IF (I.LT.1.OR.I.GT.N)                                         
C    1       CALL SETERR(26HDBAFS-INT(I) NOT IN 1,..,N,26,4,2)          
C/7S                                                                    
          IF (I.LT.1.OR.I.GT.N)                                         
     1       CALL SETERR('DBAFS-INT(I) NOT IN 1,..,N',26,4,2)           
C/                                                                      
          DO 55 J=1,NB                                                  
          X=B(I,J)                                                      
          IF (I.EQ.K) GO TO 10                                          
C INTERCHANGE ELEMENTS OF B                                             
              B(I,J)=B(K,J)                                             
              B(K,J)=X                                                  
 10         CONTINUE                                                    
            IEND=M1+K                                                   
            IF (N.LT.IEND)IEND=N                                        
            IMK=0                                                       
            DO 50 II=KP1,IEND                                           
                 IMK=IMK+1                                              
                 B(II,J)=B(II,J)+AL(IMK,K)*X                            
 50         CONTINUE                                                    
 55       CONTINUE                                                      
 60       CONTINUE                                                      
 100     CALL LEAVE                                                     
          RETURN                                                        
         END                                                            
              SUBROUTINE   DBABS(N,U,IU,B,IB,NB,MU)                     
C                                                                       
C THIS SUBROUTINE SOLVES TX = B WHERE T IS AN                           
C UPPER TRIANGULAR BANDED MATRIX                                        
C                                                                       
C INPUT PARAMETERS                                                      
C N         THE ORDER OF THE SYSTEM                                     
C U         AN IU X N ARRAY CONTAINING THE UPPERTRIANGULAR              
C           MATRIX T WHERE U(1+J-I,I)=T(I,J)                            
C IU        ROW DIMENSION OF U                                          
C B         THE RIGHT HAND SIDES;OVERWRITTEN ON OUTPUT                  
C IB        ROW DIMENSION OF B MATRIX                                   
C NB        NUMBER OF RIGHT HAND SIDES                                  
C MU        THE NUMBER OF NONZERO DIAGONALS OF T                        
C OUTPUT PARAMETERS                                                     
C B         THE SOLUTION MATRIX X                                       
C SCRATCH SPACE NEEDED -NONE                                            
C ERROR CONDITIONS                                                      
C   1       N.LT.1        FATAL                                         
C   2       IU.LT.MU      FATAL                                         
C   3       MU.LT.1       FATAL                                         
C   4       IB.LT.N     FATAL                                           
C  5        NB.LT.1       FATAL                                         
C   10+K    SINGULAR U OF RANK K  RECOVERABLE                           
        INTEGER IU,N,MU                                                 
        DOUBLE PRECISION U(IU,N),B(IB,NB)                               
        DOUBLE PRECISION X                                              
C/6S                                                                    
C       IF (N.LT.1) CALL SETERR(13H DBABS-N.LT.1,13,1,2)                
C       IF (IU.LT.MU) CALL SETERR(15H DBABS-IU.LT.MU,15,2,2)            
C       IF (MU.LT.1) CALL SETERR(14H DBABS-MU.LT.1,14,3,2)              
C       IF (IB.LT.N) CALL SETERR(14H DBABS-IB.LT.N,14,4,2)              
C       IF (NB.LT.1) CALL SETERR(14H DBABS-NB.LT.1,14,5,2)              
C/7S                                                                    
        IF (N.LT.1) CALL SETERR(' DBABS-N.LT.1',13,1,2)                 
        IF (IU.LT.MU) CALL SETERR(' DBABS-IU.LT.MU',15,2,2)             
        IF (MU.LT.1) CALL SETERR(' DBABS-MU.LT.1',14,3,2)               
        IF (IB.LT.N) CALL SETERR(' DBABS-IB.LT.N',14,4,2)               
        IF (NB.LT.1) CALL SETERR(' DBABS-NB.LT.1',14,5,2)               
C/                                                                      
        CALL ENTER(1)                                                   
        L=1                                                             
        NP1=N+1                                                         
        DO 100 II=1,N                                                   
            I=NP1-II                                                    
            DO 50 J=1,NB                                                
            X=B(I,J)                                                    
            IF (L.LT.2) GO TO 30                                        
            KB=I                                                        
            DO 20 K=2,L                                                 
               KB=KB+1                                                  
               X=X-U(K,I)*B(KB,J)                                       
 20         CONTINUE                                                    
 30         IF (U(1,I).NE.0.D0) GO TO 40                                
C/6S                                                                    
C              CALL SETERR(22H DBABS-SINGULAR MATRIX,22,9+I,1)          
C/7S                                                                    
               CALL SETERR(' DBABS-SINGULAR MATRIX',22,9+I,1)           
C/                                                                      
               GO TO 150                                                
 40         B(I,J)=X/U(1,I)                                             
 50      CONTINUE                                                       
            L=MIN0(L+1,MU)                                              
 100     CONTINUE                                                       
 150     CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
         SUBROUTINE DBAML(N,ML,M,A,IA,X,Y)                              
C                                                                       
C MULTIPLICATION OF VECTOR X BY BAND MATRIX B                           
C                                                                       
C INPUT PARAMETERS                                                      
C N    ORDER OF MATRIX                                                  
C ML    NUMBER OF DIAGONALS ON AND BELOW DIAGONAL OF B                  
C M     NUMBER OF DIAGONALS OF B                                        
C A    ARRAY INTO WHICH A BAND MATRIX IS PACKED                         
C      A(ML+J-I,I)= (I,J)TH ELEMENT OF BAND MATRIX                      
C IA   ROW DIMENSION OF A                                               
C X    VECTOR TO BE MULTIPLIED                                          
C                                                                       
C OUTPUT PARAMETERS                                                     
C Y    BX, WHERE B IS THE BAND MATRIX                                   
C ERROR CONDITIONS                                                      
C N.LT.1       FATAL                                                    
C ML.LT.1      FATAL                                                    
C M.LT.ML      FATAL                                                    
C IA.LT.M      FATAL                                                    
         DOUBLE PRECISION A(IA,N),X(M),Y(N),SUM                         
C/6S                                                                    
C        IF(N.LT.1) CALL SETERR(12HDBAML-N.LT.1,12,1,2)                 
C        IF(ML.LT.1) CALL SETERR(13HDBAML-ML.LT.1,13,2,2)               
C        IF(M.LT.ML) CALL SETERR(13HDBAML-M.LT.ML,13,3,2)               
C        IF (IA.LT.M) CALL SETERR(13HDBAML-IG.LT.M,13,4,2)              
C/7S                                                                    
         IF(N.LT.1) CALL SETERR('DBAML-N.LT.1',12,1,2)                  
         IF(ML.LT.1) CALL SETERR('DBAML-ML.LT.1',13,2,2)                
         IF(M.LT.ML) CALL SETERR('DBAML-M.LT.ML',13,3,2)                
         IF (IA.LT.M) CALL SETERR('DBAML-IG.LT.M',13,4,2)               
C/                                                                      
         JB=ML+1                                                        
         JE=M                                                           
         JEND=N-(M-ML)                                                  
         IS=1                                                           
         DO 10 I=1,N                                                    
            JB=MAX0(1,JB-1)                                             
            IX=IS                                                       
            SUM=0.D0                                                    
            DO 5 J=JB,JE                                                
               SUM=SUM+A(J,I)*X(IX)                                     
               IX=IX+1                                                  
 5           CONTINUE                                                   
            Y(I)=SUM                                                    
            IF(I.GE.JEND)JE=JE-1                                        
            IF(JB.EQ.1)IS=IS+1                                          
 10       CONTINUE                                                      
          RETURN                                                        
          END                                                           
        SUBROUTINE  CBASS(N,ML,M,G,IG,B,IB,NB,COND)                     
C                                                                       
C THIS SUBROUTINE SOLVES AX= B WHERE A IS A BANDED UNSYMMETRIC          
C MATRIX.IT USES GAUSSIAN ELIMINATION WITH PARTIAL PIVOTING             
C IT ALSO RETURN AN ESTIMATE OF THE CONDITION NUMBER OF A               
C INPUT PARAMETERS                                                      
C N     ORDER OF THE SYSTEM                                             
C M     THE TOTAL NUMBER OF NONZERO BANDS IN THE MATRIX                 
C ML    THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL                   
C G     AN  IG X N ARRAY SUCH THAT                                      
C       G(ML+J-I,I)=A(I,J).I.E. THE LEFTMOST BAND OF A IS THE           
C       FIRST ROW OF G.                                                 
C IG    ROW DIMENSION OF G MUST BE .GE.M                                
C B     THE MATRIX OF RIGHT HAND SIDES                                  
C NB    THE NUMBER OF RIGHT HAND SIDES                                  
C IB    ROW DIMENSION OF B, MUST BE GREATER  OR EQUAL TO N              
C OUTPUT PARAMETERS                                                     
C B     THE SOLUTION VECTORS X                                          
C G     THE UPPER TRIANGULAR FACTOR OF A                                
C COND  AN ESIMATE OF THE CONDITION NUMBER OF A                         
C SCRATCH SPACE ALLOCATED-N INTEGER LOCATIONS                           
C                        ML*N DOUBLE PRECISION LOCATIONS                
C ERROR STATES                                                          
C 1 N.LT.1       FATAL                                                  
C 2 ML.LT.1      FATAL                                                  
C 3 ML.GT.M      FATAL                                                  
C 4 IG.LT.M      FATAL                                                  
C 5 IB.LT.N      FATAL                                                  
C 6 NB.LT.1      FATAL                                                  
C 10 +K SINGULAR MATRIX OF RANK K   RECOVERABLE                         
C                                                                       
         INTEGER N,ML,M,NB,IG,IB                                        
         COMPLEX G(IG,N),B(IB,NB)                                       
         COMPLEX DC(500)                                                
         REAL COND                                                      
        DOUBLE PRECISION D(500)                                         
        INTEGER ISTA(1000)                                              
        COMMON /CSTAK/ D                                                
        EQUIVALENCE (D(1),ISTA(1))                                      
        EQUIVALENCE(D(1),DC(1))                                         
C CHECK FOR INPUT ERRORS                                                
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(13H CBASS-N.LT.1,13,1,2)               
C        IF(ML.LT.1) CALL SETERR(14H CBASS-ML.LT.1,14,2,2)              
C        IF(ML.GT.M) CALL SETERR(14H CBASS-ML.GT.M,14,3,2)              
C        IF (NB.LT.1) CALL SETERR(14H CBASS-NB.LT.1,14,6,2)             
C        IF (IG.LT.M) CALL SETERR(14H CBASS-IG.LT.M,14,4,2)             
C        IF (IB.LT.N) CALL SETERR(14H CBASS-IB.LT.N,14,5,2)             
C/7S                                                                    
         IF (N.LT.1) CALL SETERR(' CBASS-N.LT.1',13,1,2)                
         IF(ML.LT.1) CALL SETERR(' CBASS-ML.LT.1',14,2,2)               
         IF(ML.GT.M) CALL SETERR(' CBASS-ML.GT.M',14,3,2)               
         IF (NB.LT.1) CALL SETERR(' CBASS-NB.LT.1',14,6,2)              
         IF (IG.LT.M) CALL SETERR(' CBASS-IG.LT.M',14,4,2)              
         IF (IB.LT.N) CALL SETERR(' CBASS-IB.LT.N',14,5,2)              
C/                                                                      
         CALL ENTER(1)                                                  
         INTER=ISTKGT(N,2)                                              
         IF (ML.GT.1)JGL=ISTKGT(N*(ML-1),5)                             
         CALL CBACE(N,ML,M,G,IG,DC(JGL),ML-1,ISTA(INTER),MU,COND)       
         IF (NERROR(NERR).EQ.0) GO TO 10                                
C/6S                                                                    
C           CALL N5ERR(22H CBASS-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
            CALL N5ERR(' CBASS-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
            CALL LEAVE                                                  
         RETURN                                                         
 10     CONTINUE                                                        
            CALL CBAFS(N,ML,DC(JGL),ML-1,ISTA(INTER),B,IB,NB)           
            CALL   CBABS(N,G,IG,B,IB,NB,MU)                             
         CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
      SUBROUTINE  CBACE(N, ML, M, G, IG,GL,IGL,INTER, MU,COND)          
      INTEGER IG, N                                                     
      INTEGER INTER(N),IGL                                              
      DOUBLE PRECISION D(500)                                           
      COMPLEX CD(500)                                                   
      COMPLEX GL(IGL,N)                                                 
      INTEGER M, ML                                                     
      COMPLEX G(IG,N)                                                   
      REAL COND                                                         
      INTEGER MU, IZ, IERR, ISTKGT, NERROR                              
      REAL ANORM,R1MACH,CBANM                                           
      COMMON /CSTAK/ D                                                  
      EQUIVALENCE(D(1),CD(1))                                           
C BAND CONDITION ESTIMATOR AND DECOMPOSER                               
C INPUT PARAMETERS                                                      
C N        NUMBER OF ROWS IN A                                          
C ML       NUMBER OF NONZERO DIAGONAL ON AND BELOW THE DIAGONAL         
C M        NUMBER OF NONZERO DIAGONALS ABOVE THE DIAGONAL               
C G        ARRAY INTO WHICH THE BAND MATRIX A IS PACKED                 
C          G(ML+I-J,I)=A(I,J)                                           
C IG       ROW DIMENSION OF G                                           
C IGL      ROW DIMENSION OF GL, AT LEAST ML-1                           
C OUTPUT PARAMETERS                                                     
C G        THE U FROM THE LU DECOMPOSITION OF G                         
C GL       THE L FROM THE LU DECOMPOSITION OF G                         
C          AN IGL X N ARRAY                                             
C INTER    THE INTERCHANGES NEEDED TO PERFORM THE DECOMPOSITION         
C         AN INTEGER VECTOR OF LENGTH N                                 
C COND     A LOWER ESTIMATE OF THE CONDITION NUMBER OF A                
C          COND RANGES FROM 1 TO THE LARGEST NUMBER ON THE MACHINE      
C          THE LARGER THE NUMBER THE MORE ILL CONDITIONED THE MATRIX    
C          IN GENERAL IF COND IS 10,1 DECIMAL DIGIT IN A LINEAR         
C          SYSTEM WILL BE INACCURATE, COND IS 100,2 DECIMAL DIGITS      
C          WILL BE INACCURATE,ETC.                                      
C STORAGE ALLOCATED -N COMPLEX LOCATIONS                                
C ERROR CONDITIONS                                                      
C 1   N.LT.1      FATAL                                                 
C 2   ML.GT.N     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IGL.LT.ML-1   FATAL                                               
C 10+K  SINGULAR MATRIX OF RANK K    RECOVERABLE                        
      CALL ENTER(1)                                                     
C/6S                                                                    
C     IF (N .LT. 1) CALL SETERR(13H CBACE-N.LT.1, 13, 1, 2)             
C     IF (ML .GT. N) CALL SETERR(14H CBACE-ML.GT.N, 14, 2, 2)           
C     IF (M .LT. ML) CALL SETERR(14H CBACE-M.LT.ML, 14, 3, 2)           
C     IF (IG .LT. M) CALL SETERR(14H CBACE-IG.LT.M, 14, 4, 2)           
C     IF (IGL.LT.ML-1) CALL SETERR(18H CBACE-IGL.LT.ML-1,18,5,2)        
C/7S                                                                    
      IF (N .LT. 1) CALL SETERR(' CBACE-N.LT.1', 13, 1, 2)              
      IF (ML .GT. N) CALL SETERR(' CBACE-ML.GT.N', 14, 2, 2)            
      IF (M .LT. ML) CALL SETERR(' CBACE-M.LT.ML', 14, 3, 2)            
      IF (IG .LT. M) CALL SETERR(' CBACE-IG.LT.M', 14, 4, 2)            
      IF (IGL.LT.ML-1) CALL SETERR(' CBACE-IGL.LT.ML-1',18,5,2)         
C/                                                                      
      ANORM=CBANM(N,ML,M,G,IG)                                          
      CALL  CBALU(N, ML, M, G, IG, GL, IGL, INTER, MU, 0.E0)            
      IF (NERROR(IERR) .EQ. 0) GOTO 1                                   
C/6S                                                                    
C         CALL N5ERR(21HCBACE-SINGULAR MATRIX,21,IERR,1)                
C/7S                                                                    
          CALL N5ERR('CBACE-SINGULAR MATRIX',21,IERR,1)                 
C/                                                                      
         COND = R1MACH(2)                                               
         CALL LEAVE                                                     
         RETURN                                                         
   1  IZ=ISTKGT(N,5)                                                    
      CALL CB4DCE(N, ML, G, IG, GL,IGL, INTER, COND, MU,                
     1   ANORM, CD(IZ))                                                 
      CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE CB4DCE(N, ML, G, IG, GL, IGL, INTER, COND, MU,         
     1   ANORM, Z)                                                      
      INTEGER IG, N, IGL                                                
      INTEGER ML, INTER(N), MU                                          
       COMPLEX G(IG,N),GL(IGL,N),Z(N)                                   
       REAL COND,ANORM                                                  
      INTEGER IB, KB, JEND, JJ, IEND, KP1                               
      INTEGER NP1, I, J, K, L, IMK                                      
      INTEGER M1, MIN0                                                  
      REAL FLOAT,CABS1                                                  
      COMPLEX EK,WK,ZK,WKM                                              
      REAL S,SM,YNORM,ARGE,R1MACH,SCASUM,BOUND                          
      COMPLEX SUM,T,CSIGN1,Z1,Z2                                        
      CSIGN1(Z1,Z2)=CABS1(Z1)*(Z2/CABS1(Z2))                            
      M1 = ML-1                                                         
C SOLVE U(TRANSPOSE)Z=E,WHERE ELEMENTS OF E ARE +1 OR                   
C-1                                                                     
      BOUND=SQRT(R1MACH(2))/FLOAT(N)                                    
      EK = CMPLX(1.E0,0.0)                                              
      M1=ML-1                                                           
      MUM1=MU-1                                                         
      DO  1 I = 1, N                                                    
         Z(I) = CMPLX(0.E0,0.E0)                                        
   1     CONTINUE                                                       
      DO  9 K = 1, N                                                    
         ZK = Z(K)                                                      
         IF (CABS1(ZK) .NE. 0.E0) EK = CSIGN1(EK,- ZK)                  
            JEND = MIN0(K+MUM1, N)                                      
         T = EK-ZK                                                      
         IF (CABS1(G(1, K)) .GE. CABS1(T)) GOTO 4                       
            S=CABS1(G(1,K))/CABS1(T)                                    
            DO  3 I = 1, JEND                                           
               Z(I) = S*Z(I)                                            
   3           CONTINUE                                                 
            EK = CMPLX(S,0.0)*EK                                        
 4       WK=EK-Z(K)                                                     
         WKM=-EK-Z(K)                                                   
         S=CABS1(WK)                                                    
         SM=CABS1(WKM)                                                  
         IF (CABS1(G(1,K)).EQ.0.0) GO TO 101                            
             WK=WK/CONJG(G(1,K))                                        
             WKM=WKM/CONJG(G(1,K))                                      
             GO TO 102                                                  
 101         WK=CMPLX(1.E0,0.E0)                                        
            WKM=CMPLX(1.E0,0.E0)                                        
 102     CONTINUE                                                       
            KP1 = K+1                                                   
            IF (KP1.GT.JEND) GO TO 103                                  
            JJ = 2                                                      
            DO  5 J = KP1, JEND                                         
                SM=SM+CABS1(Z(J)+WKM*CONJG(G(JJ,K)))                    
               Z(J) = Z(J)+CONJG(G(JJ,K))*WK                            
               S = S+CABS1(Z(J))                                        
               JJ = JJ+1                                                
   5           CONTINUE                                                 
 103        CONTINUE                                                    
            IF (S .GE. SM) GOTO 7                                       
               T = WKM-WK                                               
               WK=WKM                                                   
               IF (KP1.GT.JEND) GO TO 7                                 
               JJ = 2                                                   
               DO  6 J = KP1, JEND                                      
                  Z(J) = Z(J)+T*CONJG(G(JJ,K))                          
                  JJ = JJ+1                                             
   6              CONTINUE                                              
   7        CONTINUE                                                    
            Z(K)=WK                                                     
   9     CONTINUE                                                       
C SOLVE L(TRANSPOSE)Y=W                                                 
      S=1.0E0/SCASUM(N,Z,1)                                             
      CALL CSSCAL(N,S,Z,1)                                              
      NP1 = N+1                                                         
      NM1=N-1                                                           
      IF(ML.EQ.1) GO TO 135                                             
      DO  13 KB = 1, NM1                                                
         K = N-KB                                                       
            SUM = CMPLX(0.E0,0.E0)                                      
            IEND = MIN0(KB, M1)                                         
            J = K+1                                                     
            DO  10 I = 1, IEND                                          
               SUM = SUM+CONJG(GL(I,K))*Z(J)                            
               J = J+1                                                  
  10           CONTINUE                                                 
            Z(K) = Z(K)+SUM                                             
            IF (CABS1(Z(K)).LE.BOUND) GO TO 11                          
               S=1.0/CABS1(Z(K))                                        
               CALL CSSCAL(N,S,Z,1)                                     
 11          CONTINUE                                                   
         L = INTER(K)                                                   
         T = Z(L)                                                       
         Z(L) = Z(K)                                                    
         Z(K) = T                                                       
  13     CONTINUE                                                       
 135    S=1.0/SCASUM(N,Z,1)                                             
       CALL CSSCAL(N,S,Z,1)                                             
       YNORM=1.E0                                                       
C SOLVELW=Y                                                             
 14    IF(ML.EQ.1) GO TO 18                                             
      NM1=N-1                                                           
      DO 16 K=1,NM1                                                     
         I=INTER(K)                                                     
         KP1=K+1                                                        
         T=Z(I)                                                         
         Z(I)=Z(K)                                                      
         Z(K)=T                                                         
         IEND=MIN0(M1+K,N)                                              
         IMK=0                                                          
         DO 15 II=KP1,IEND                                              
            IMK=IMK+1                                                   
            Z(II)=Z(II)+GL(IMK,K)*T                                     
 15      CONTINUE                                                       
         IF (CABS1(Z(K)).LT.BOUND) GO TO 16                             
           S=1.E0/CABS1(Z(K))                                           
            CALL CSSCAL(N,S,Z,1)                                        
            YNORM=YNORM*S                                               
 16      CONTINUE                                                       
  17     CONTINUE                                                       
      S=1.0/SCASUM(N,Z,1)                                               
       IF (S.GT.1.E0) GO TO 18                                          
         CALL CSSCAL(N, S, Z, 1)                                        
         YNORM = YNORM*S                                                
C SOLVE UZ=W                                                            
  18  L = 1                                                             
      DO  23 KB = 1, N                                                  
         K = NP1-KB                                                     
         SUM = Z(K)                                                     
         IF (L .LE. 1) GOTO 20                                          
            IB = K                                                      
            DO  19 I = 2, L                                             
               IB = IB+1                                                
               SUM = SUM-(G(I, K))*Z(IB)                                
  19           CONTINUE                                                 
  20     L = MIN0(L+1, MU)                                              
         Z(K)=SUM                                                       
         IF (CABS1(G(1, K)) .GE. CABS1(SUM)) GOTO 210                   
  21        T = CMPLX(0.E0,0.E0)                                        
            IF (CABS1(SUM) .NE. 0.E0) T = G(1, K)/SUM                   
            S=CABS1(T)                                                  
            CALL CSSCAL(N, S, Z, 1)                                     
            YNORM = YNORM*S                                             
 210     IF (CABS1(G(1,K)).NE.0.E0) Z(K)=Z(K)/G(1,K)                    
         IF(CABS1(G(1,K)).EQ.0.E0) Z(K)=CMPLX(1.E0,0.E0)                
  22     CONTINUE                                                       
  23     CONTINUE                                                       
       S=1.0/SCASUM(N,Z,1)                                              
       YNORM=S*YNORM                                                    
       CALL CSSCAL(N,S,Z,1)                                             
      ARGE=R1MACH(2)                                                    
      IF (YNORM.GT.1.E0) GO TO 50                                       
      IF (ANORM.LE.YNORM*ARGE) GO TO 50                                 
         COND=ARGE                                                      
         RETURN                                                         
 50   COND=ANORM/YNORM                                                  
      RETURN                                                            
      END                                                               
        SUBROUTINE  CBALE(N,ML,M,G,IG,B,IB,NB)                          
C                                                                       
C THIS SUBROUTINE SOLVES AX= B WHERE A IS A BANDED UNSYMMETRIC          
C MATRIX.IT USES GAUSSIAN ELIMINATION WITH PARTIAL PIVOTING             
C INPUT PARAMETERS                                                      
C N     ORDER OF THE SYSTEM                                             
C M     THE TOTAL NUMBER OF NONZERO BANDS IN THE MATRIX                 
C ML    THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL                   
C G     AN  IG X N ARRAY SUCH THAT                                      
C       G(ML+J-I,I)=A(I,J).I.E. THE LEFTMOST BAND OF A IS THE           
C       FIRST ROW OF G.                                                 
C IG    ROW DIMENSION OF G MUST BE .GE.M                                
C B     THE MATRIX OF RIGHT HAND SIDES                                  
C NB    THE NUMBER OF RIGHT HAND SIDES                                  
C IB    ROW DIMENSION OF B, MUST BE GREATER  OR EQUAL TO N              
C OUTPUT PARAMETERS                                                     
C B     THE SOLUTION VECTORS X                                          
C G     THE UPPER TRIANGULAR FACTOR OF A                                
C SCRATCH SPACE ALLOCATED-NONE                                          
C ERROR STATES                                                          
C 1 N.LT.1       FATAL                                                  
C 2 ML.LT.1      FATAL                                                  
C 3 ML.GT.M      FATAL                                                  
C 4 IG.LT.M      FATAL                                                  
C 5 IB.LT.N      FATAL                                                  
C 6 NB.LT.1      FATAL                                                  
C 10 +K SINGULAR MATRIX OF RANK K   RECOVERABLE                         
C                                                                       
         INTEGER N,ML,M,NB,IG,IB                                        
         COMPLEX G(IG,N),B(IB,NB)                                       
C CHECK FOR INPUT ERRORS                                                
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(13H CBALE-N.LT.1,13,1,2)               
C        IF(ML.LT.1) CALL SETERR(14H CBALE-ML.LT.1,14,2,2)              
C        IF(ML.GT.M) CALL SETERR(14H CBALE-ML.GT.M,14,3,2)              
C        IF (NB.LT.1) CALL SETERR(14H CBALE-NB.LT.1,14,6,2)             
C        IF (IG.LT.M) CALL SETERR(14H CBALE-IG.LT.M,14,4,2)             
C        IF (IB.LT.N) CALL SETERR(14H CBALE-IB.LT.N,14,5,2)             
C/7S                                                                    
         IF (N.LT.1) CALL SETERR(' CBALE-N.LT.1',13,1,2)                
         IF(ML.LT.1) CALL SETERR(' CBALE-ML.LT.1',14,2,2)               
         IF(ML.GT.M) CALL SETERR(' CBALE-ML.GT.M',14,3,2)               
         IF (NB.LT.1) CALL SETERR(' CBALE-NB.LT.1',14,6,2)              
         IF (IG.LT.M) CALL SETERR(' CBALE-IG.LT.M',14,4,2)              
         IF (IB.LT.N) CALL SETERR(' CBALE-IB.LT.N',14,5,2)              
C/                                                                      
         CALL ENTER(1)                                                  
         CALL CB4ADF(N,ML,M,G,IG,B,IB,NB,MU)                            
         IF (NERROR(NERR).EQ.0) GO TO 10                                
C/6S                                                                    
C           CALL N5ERR(22H CBALE-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
            CALL N5ERR(' CBALE-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
            CALL LEAVE                                                  
         RETURN                                                         
 10      CONTINUE                                                       
            CALL  CBABS(N,G,IG,B,IB,NB,MU)                              
         CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
          SUBROUTINE CB4ADF(N,ML,M,G,IG,B,IB,NB,MU)                     
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED UNSYMMETRIC MATRIX USING GAUSSIAN ELIMINATION                  
C WITH PARTIAL PIVOTING AND APPLIES THE TRANSFORMATIONS                 
C FOR L(INVERSE) TO B                                                   
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF ELEMENTS ON OR BELOW                        
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C M       THE MAXIMUM NUMBER OF NONZERO ELEMENTS IN EACH                
C         COLUMN                                                        
C G       THE MATRIX A STORED AS AN IG X N ARRAY                        
C         WITH G(ML+J-I,I)=A(I,J).I.E.THE LEFTMOST                      
C         DIAGONAL OF THE BAND MATRIX IS THE FIRST ROW OF G             
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN M                  
C B       AN IB X NB MATRIX OF THE RIGHT HAND SIDES                     
C IB      ROW DIMENSION OF B,MUST BE AT LEAST N                         
C NB      NUMBER OF RIGHT HAND SIDES                                    
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C B       THE TRANSFORMED RIGHT HAND SIDE,THE SOLUTION TO               
C         LX=B                                                          
C MU      THE NUMBER OF NONZERO DIAGONALS IN THE UPPER                  
C         TRIANGULAR BAND FACTOR                                        
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IB.LT.N     FATAL                                                 
C 6   NB.LT.1     FATAL                                                 
C 10+K SINGULAR MATRIX OF RANK K  RECOVERABLE                           
           INTEGER ML,N,IG,IB,NB                                        
           COMPLEX G(IG,N),B(IB,NB)                                     
           REAL EPS,R1MACH                                              
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13HCB4ADF-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14HCB4ADF-ML.LT.1,14,2,2)                
C      IF (M.LT.ML) CALL SETERR(14HCB4ADF-ML.LT.M,14,3,2)               
C      IF (IG.LT.M) CALL SETERR(14HCB4ADF-IG.LT.M,14,4,2)               
C      IF (IB.LT.N) CALL SETERR(14HCB4ADF-IB.LT.N,14,5,2)               
C      IF (NB.LT.1)CALL SETERR(14HCB4ADF-NB.LT.1,14,6,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('CB4ADF-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR('CB4ADF-ML.LT.1',14,2,2)                 
       IF (M.LT.ML) CALL SETERR('CB4ADF-ML.LT.M',14,3,2)                
       IF (IG.LT.M) CALL SETERR('CB4ADF-IG.LT.M',14,4,2)                
       IF (IB.LT.N) CALL SETERR('CB4ADF-IB.LT.N',14,5,2)                
       IF (NB.LT.1)CALL SETERR('CB4ADF-NB.LT.1',14,6,2)                 
C/                                                                      
        CALL ENTER(1)                                                   
         EPS=R1MACH(4)*CBANM(N,ML,M,G,IG)                               
         CALL CB4ALF(N,ML,M,G,IG,B,IB,NB,MU,EPS)                        
C/6S                                                                    
C         IF(NERROR(IERR).NE.0)                                         
C    1      CALL N5ERR(22HCB4ADF-SINGULAR MATRIX,22,IERR,1)             
C/7S                                                                    
          IF(NERROR(IERR).NE.0)                                         
     1      CALL N5ERR('CB4ADF-SINGULAR MATRIX',22,IERR,1)              
C/                                                                      
          CALL LEAVE                                                    
          RETURN                                                        
          END                                                           
          SUBROUTINE CB4ALF(N,ML,M,G,IG,B,IB,NB,MU,EPS)                 
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED UNSYMMETRIC MATRIX USING GAUSSIAN ELIMINATION                  
C WITH PARTIAL PIVOTING AND APPLIES THE TRANSFORMATIONS                 
C FOR L(INVERSE) TO B                                                   
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF ELEMENTS ON OR BELOW                        
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C M       THE MAXIMUM NUMBER OF NONZERO ELEMENTS IN EACH                
C         COLUMN                                                        
C G       THE MATRIX A STORED AS AN IG X N ARRAY                        
C         WITH G(ML+J-I,I)=A(I,J).I.E.THE LEFTMOST                      
C         DIAGONAL OF THE BAND MATRIX IS THE FIRST ROW OF G             
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN M                  
C B       AN IB X NB MATRIX OF THE RIGHT HAND SIDES                     
C IB      ROW DIMENSION OF B,MUST BE AT LEAST N                         
C NB      NUMBER OF RIGHT HAND SIDES                                    
C EPS      LARGEST NONACCEPTABLE PIVOT                                  
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C B       THE TRANSFORMED RIGHT HAND SIDE,THE SOLUTION TO               
C         LX=B                                                          
C MU      THE NUMBER OF NONZERO DIAGONALS IN THE UPPER                  
C         TRIANGULAR BAND FACTOR                                        
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IB.LT.N     FATAL                                                 
C 6   NB.LT.1     FATAL                                                 
C 10+K SINGULAR MATRIX OF RANK K  RECOVERABLE                           
           INTEGER ML,N,IG,IB,NB                                        
           COMPLEX G(IG,N),B(IB,NB)                                     
           REAL EPS                                                     
           COMPLEX X,XI                                                 
           REAL XX                                                      
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13HCB4ALF-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14HCB4ALF-ML.LT.1,14,2,2)                
C      IF (M.LT.ML) CALL SETERR(14HCB4ALF-ML.LT.M,14,3,2)               
C      IF (IG.LT.M) CALL SETERR(14HCB4ALF-IG.LT.M,14,4,2)               
C      IF (IB.LT.N) CALL SETERR(14HCB4ALF-IB.LT.N,14,5,2)               
C      IF (NB.LT.1)CALL SETERR(14HCB4ALF-NB.LT.1,14,6,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('CB4ALF-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR('CB4ALF-ML.LT.1',14,2,2)                 
       IF (M.LT.ML) CALL SETERR('CB4ALF-ML.LT.M',14,3,2)                
       IF (IG.LT.M) CALL SETERR('CB4ALF-IG.LT.M',14,4,2)                
       IF (IB.LT.N) CALL SETERR('CB4ALF-IB.LT.N',14,5,2)                
       IF (NB.LT.1)CALL SETERR('CB4ALF-NB.LT.1',14,6,2)                 
C/                                                                      
       MU=M-ML+1                                                        
       MU1=MU                                                           
       MU2=MU                                                           
       CALL ENTER(1)                                                    
       IERR=0                                                           
       M1=ML-1                                                          
       M2=M-ML                                                          
       LL=M1                                                            
       MLP1=ML+1                                                        
       N2=2*N                                                           
        NP1=N+1                                                         
       IF (M1.LT.1) GO TO 41                                            
       DO 40 I=1,M1                                                     
          JBEG=MLP1-I                                                   
          JEND=MIN0(M,N2-I)                                             
          DO 20 J=JBEG,JEND                                             
             JMLL=J-LL                                                  
              G(JMLL,I)=G(J,I)                                          
 20       CONTINUE                                                      
          LL=LL-1                                                       
          JBEG=M-LL                                                     
          DO 30 J=JBEG,M                                                
              G(J,I)=CMPLX(0.0E0,0.E0)                                  
 30       CONTINUE                                                      
 40   CONTINUE                                                          
C                                                                       
C ZERO OUT LOWER RHS WART                                               
C                                                                       
 41    IF(M2.LT.1) GO TO 61                                             
       DO 60 I=1,M2                                                     
          JBEG=ML+I                                                     
          NP1MI=NP1-I                                                   
          DO 50 J=JBEG,M                                                
             G(J,NP1MI)=CMPLX(0.E0,0.E0)                                
 50      CONTINUE                                                       
 60    CONTINUE                                                         
 61     CONTINUE                                                        
       DO 200 K=1,N                                                     
          XX=CABS1(G(1,K))                                              
          I=K                                                           
          LL=MIN0(M1+K,N)                                               
          KP1=K+1                                                       
          IF (LL.LT.KP1) GO TO 80                                       
C GET THE PIVOT ROW                                                     
          DO 70 J=KP1,LL                                                
            IF (CABS1(G(1,J)).LE.XX) GO TO 70                           
               I=J                                                      
               XX=CABS1(G(1,J))                                         
 70       CONTINUE                                                      
 80       CONTINUE                                                      
          IF(XX.GT.EPS) GO TO 90                                        
C/6S                                                                    
C       IF(IERR.EQ.0)CALL SETERR(22HCB4ALF-SINGULAR MATRIX,22,K+9,1)    
C/7S                                                                    
        IF(IERR.EQ.0)CALL SETERR('CB4ALF-SINGULAR MATRIX',22,K+9,1)     
C/                                                                      
           IERR=1                                                       
            G(1,I)=CMPLX(EPS,0.0)                                       
 90       CONTINUE                                                      
          IF (I.EQ.K) GO TO 110                                         
C NEED TO INTERCHANGE COLUMNS                                           
             DO 100 J=1,M                                               
                X=G(J,K)                                                
                G(J,K)=G(J,I)                                           
                G(J,I)=X                                                
 100         CONTINUE                                                   
             DO 105 J=1,NB                                              
                X=B(K,J)                                                
                B(K,J)=B(I,J)                                           
                B(I,J)=X                                                
 105         CONTINUE                                                   
 110      IF (K.GE.LL) GO TO 200                                        
          MM=MU1+I-K                                                    
          MU=MAX0(MU,MM)                                                
          MU2=MAX0(MU2-1,MM)                                            
          XI=G(1,K)                                                     
          IF (CABS1(XI).EQ.0.0)XI=CMPLX(1.0,0.0)                        
           MU2P1=MU2+1                                                  
          DO 170 I=KP1,LL                                               
             X=-G(1,I)/XI                                               
C APPLY TRANSFORMATIONS TO RIGHT HAND SIDE                              
             DO 130 J=1,NB                                              
                B(I,J)=B(I,J)+X*B(K,J)                                  
 130         CONTINUE                                                   
              IF (MU2.LT.2) GO TO 141                                   
             DO 140 J=2,MU2                                             
                G(J-1,I)=G(J,I)+X*G(J,K)                                
 140         CONTINUE                                                   
 141         IF (MU2.EQ.M) GO TO 170                                    
             DO 150 J=MU2P1,M                                           
 150            G(J-1,I)=G(J,I)                                         
 170    CONTINUE                                                        
        G(M,LL)=(0.E0,0.E0)                                             
 200   CONTINUE                                                         
 210   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
          SUBROUTINE   CBADC(N,ML,M,G,IG,AL,IAL,INT,MU)                 
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED UNSYMMETRIC MATRIX USING GAUSSIAN ELIMINATION                  
C WITH PARTIAL PIVOTING                                                 
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF NONZERO ELEMENTS ON OR BELOW                
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C M       THE MAXIMUM NUMBER OF NONZERO ELEMENTS IN EACH                
C         COLUMN                                                        
C G       THE MATRIX A STORED AS AN IG X N ARRAY                        
C         WITH G(ML+J-I)=A(I,J).I.E. THE LEFTMOST                       
C         DIAGONAL OF THE BAND MATRIX IS THE FIRST ROW OF G             
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN M                  
C IAL     ROW DIMENSION OF AL, MUST NOT BE LESS THAN ML                 
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C AL      AN IAL X N ARRAY CONTAINING THE LOWER TRIANGULAR              
C         BAND FACTOR OF A                                              
C INT     AN INTEGER VECTOR OF LENGTH N RECORDING INTERCHANGES          
C          INVOLVED IN GAUSSIAN ELIMINATION                             
C MU      THE NUMBER OF NONZERO DIAGONALS IN THE UPPER                  
C         TRIANGULAR BAND FACTOR                                        
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IAL.LT.ML   FATAL                                                 
C 10+K SINGULAR MATRIX OF RANK K   RECOVERABLE                          
           INTEGER IG,IAL                                               
           INTEGER N,ML,M,INT(N)                                        
           COMPLEX G(IG,N),AL(IAL,N)                                    
           REAL EPS,R1MACH                                              
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H CBADC-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H CBADC-ML.LT.1,14,2,2)                
C      IF (M.LT.ML) CALL SETERR(14H CBADC-ML.LT.M,14,3,2)               
C      IF (IG.LT.M) CALL SETERR(14H CBADC-IG,LT.M,14,4,2)               
C      IF (IAL.LT.ML)CALL SETERR(16H CBADC-IAL.LT.ML,16,5,2)            
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' CBADC-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR(' CBADC-ML.LT.1',14,2,2)                 
       IF (M.LT.ML) CALL SETERR(' CBADC-ML.LT.M',14,3,2)                
       IF (IG.LT.M) CALL SETERR(' CBADC-IG,LT.M',14,4,2)                
       IF (IAL.LT.ML)CALL SETERR(' CBADC-IAL.LT.ML',16,5,2)             
C/                                                                      
       CALL ENTER(1)                                                    
          EPS=CBANM(N,ML,M,G,IG)*R1MACH(4)                              
          CALL   CBALU(N,ML,M,G,IG,AL,IAL,INT,MU,EPS)                   
C/6S                                                                    
C         IF(NERROR(IERR).NE.0)                                         
C    1      CALL N5ERR(22H CBADC-SINGULAR MATRIX,22,IERR,1)             
C/7S                                                                    
          IF(NERROR(IERR).NE.0)                                         
     1      CALL N5ERR(' CBADC-SINGULAR MATRIX',22,IERR,1)              
C/                                                                      
          CALL LEAVE                                                    
          RETURN                                                        
          END                                                           
        REAL FUNCTION  CBANM(N,ML,M,G,IG)                               
        COMPLEX G(IG,1)                                                 
        REAL SUM                                                        
C THIS SUBROUTINE COMPUTES THE INFINITY NORM OF A BAND MATRIX           
C STORED IN BAND FORM                                                   
C/6S                                                                    
C       IF (N.LT.1)CALL SETERR(12HCBANM-N.LT.1,12,1,2)                  
C       IF (ML.LT.1) CALL SETERR(13HCBANM-ML.LT.1,13,2,2)               
C       IF (M.LT.ML)CALL SETERR(13HCBANM-M.LT.ML,13,3,2)                
C       IF(IG.LT.M) CALL SETERR(13HCBANM-IG.LT.M,13,4,2)                
C/7S                                                                    
        IF (N.LT.1)CALL SETERR('CBANM-N.LT.1',12,1,2)                   
        IF (ML.LT.1) CALL SETERR('CBANM-ML.LT.1',13,2,2)                
        IF (M.LT.ML)CALL SETERR('CBANM-M.LT.ML',13,3,2)                 
        IF(IG.LT.M) CALL SETERR('CBANM-IG.LT.M',13,4,2)                 
C/                                                                      
        JB=ML+1                                                         
        JE=M                                                            
        JEND=N-(M-ML)                                                   
         CBANM=0.0D0                                                    
        DO 10 I=1,N                                                     
           SUM=0.0                                                      
           JB=MAX0(1,JB-1)                                              
           DO 5 J=JB,JE                                                 
              SUM=SUM+CABS(G(J,I))                                      
 5         CONTINUE                                                     
           IF(I.GE.JEND)JE=JE-1                                         
           IF(SUM.GT.CBANM) CBANM=SUM                                   
 10      CONTINUE                                                       
         RETURN                                                         
         END                                                            
          SUBROUTINE   CBALU(N,ML,M,G,IG,AL,IAL,INT,MU,EPS)             
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED UNSYMMETRIC MATRIX USING GAUSSIAN ELIMINATION                  
C WITH PARTIAL PIVOTING                                                 
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF NONZERO ELEMENTS ON OR BELOW                
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C M       THE MAXIMUM NUMBER OF NONZERO ELEMENTS IN EACH                
C         COLUMN                                                        
C G       THE MATRIX A STORED AS AN IG X N ARRAY                        
C         WITH G(ML+J-I,I)=A(I,J).I.E. THE LEFTMOST                     
C         DIAGONAL OF THE BAND MATRIX IS THE FIRST ROW OF G             
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN M                  
C IAL     ROW DIMENSION OF AL, MUST NOT BE LESS THAN ML-1               
C EPS     LARGEST NONACCEPTABLE PIVOT                                   
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C AL      AN IAL X N ARRAY CONTAINING THE LOWER TRIANGULAR              
C         BAND FACTOR OF A                                              
C INT     AN INTEGER VECTOR OF LENGTH N RECORDING INTERCHANGES          
C          INVOLVED IN GAUSSIAN ELIMINATION                             
C MU      THE NUMBER OF NONZERO DIAGONALS IN THE UPPER                  
C         TRIANGULAR BAND FACTOR                                        
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   M.LT.ML     FATAL                                                 
C 4   IG.LT.M     FATAL                                                 
C 5   IAL.LT.ML-1 FATAL                                                 
C 10+K SINGULAR MATRIX OF RANK K   RECOVERABLE                          
           INTEGER IG,IAL                                               
           INTEGER N,ML,M,INT(N)                                        
           COMPLEX G(IG,N),AL(IAL,N)                                    
           COMPLEX X,XI                                                 
           REAL EPS,XX                                                  
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H CBALU-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H CBALU-ML.LT.1,14,2,2)                
C      IF (M.LT.ML) CALL SETERR(14H CBALU-M.LT.ML,14,3,2)               
C      IF (IG.LT.M) CALL SETERR(14H CBALU-IG,LT.M,14,4,2)               
C     IF (IAL.LT.ML-1)CALL SETERR(18H CBALU-IAL.LT.ML-1,18,5,2)         
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' CBALU-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR(' CBALU-ML.LT.1',14,2,2)                 
       IF (M.LT.ML) CALL SETERR(' CBALU-M.LT.ML',14,3,2)                
       IF (IG.LT.M) CALL SETERR(' CBALU-IG,LT.M',14,4,2)                
      IF (IAL.LT.ML-1)CALL SETERR(' CBALU-IAL.LT.ML-1',18,5,2)          
C/                                                                      
       MU=M-ML+1                                                        
       INTN=1                                                           
       MU1=MU                                                           
       MU2=MU                                                           
       CALL ENTER(1)                                                    
       IERR=0                                                           
       M1=ML-1                                                          
       M2=M-ML                                                          
       LL=M1                                                            
       MLP1=ML+1                                                        
       N2=2*N                                                           
       NP1=N+1                                                          
       IF (M1.LT.1) GO TO 41                                            
       DO 40 I=1,M1                                                     
          JBEG=MLP1-I                                                   
         JEND=MIN0(M,N2-I)                                              
          DO 20 J=JBEG,JEND                                             
             JMLL=J-LL                                                  
              G(JMLL,I)=G(J,I)                                          
 20       CONTINUE                                                      
          LL=LL-1                                                       
          JBEG=M-LL                                                     
          DO 30 J=JBEG,M                                                
              G(J,I)=CMPLX(0.E0,0.E0)                                   
 30       CONTINUE                                                      
 40   CONTINUE                                                          
C                                                                       
C ZERO OUT LOWER RHS WART                                               
C                                                                       
 41    IF (M2.LT.1) GO TO 61                                            
       DO 60 I=1,M2                                                     
          JBEG=ML+I                                                     
          NP1MI=NP1-I                                                   
          DO 50 J=JBEG,M                                                
             G(J,NP1MI)=CMPLX(0.E0,0.E0)                                
 50      CONTINUE                                                       
 60    CONTINUE                                                         
 61     CONTINUE                                                        
       DO 200 K=1,N                                                     
          XX=CABS1(G(1,K))                                              
          I=K                                                           
          LL=MIN0(M1+K,N)                                               
          KP1=K+1                                                       
          IF (LL.LT.KP1) GO TO 80                                       
C GET THE PIVOT ROW                                                     
          DO 70 J=KP1,LL                                                
            IF (CABS1(G(1,J)).LE.XX) GO TO 70                           
               I=J                                                      
               XX=CABS1(G(1,J))                                         
 70       CONTINUE                                                      
 80       IF (XX.GT.EPS) GO TO 90                                       
          G(1,I)=CMPLX(EPS,0.0)                                         
C/6S                                                                    
C         IF (IERR.EQ.0)                                                
C    1       CALL SETERR(22H CBALU-SINGULAR MATRIX,22,9+K,1)            
C/7S                                                                    
          IF (IERR.EQ.0)                                                
     1       CALL SETERR(' CBALU-SINGULAR MATRIX',22,9+K,1)             
C/                                                                      
             IERR=1                                                     
 90       INT(K)=I                                                      
          IF (I.EQ.K) GO TO 110                                         
             INTN=-INTN                                                 
C NEED TO INTERCHANGE COLUMNS                                           
             DO 100 J=1,M                                               
                X=G(J,K)                                                
                G(J,K)=G(J,I)                                           
                G(J,I)=X                                                
 100         CONTINUE                                                   
 110      IF (K.GE.LL) GO TO 200                                        
          MM=MIN0(NP1,MU1+I)-K                                          
          MU=MAX0(MU,MM)                                                
          MU2=MAX0(MU2-1,MM)                                            
          IMK=0                                                         
          XI=G(1,K)                                                     
          IF (CABS1(XI).EQ.0.0)XI=CMPLX(1.0,0.0)                        
          MU2P1=MU2+1                                                   
          DO 170 I=KP1,LL                                               
             X=-G(1,I)/XI                                               
             IMK=IMK+1                                                  
             AL(IMK,K)=X                                                
         IF (MU2.LT.2) GO TO 141                                        
             DO 140 J=2,MU2                                             
                G(J-1,I)=G(J,I)+X*G(J,K)                                
 140         CONTINUE                                                   
 141         IF (MU2.EQ.M) GO TO 170                                    
             DO 150 J=MU2P1,M                                           
 150            G(J-1,I)=G(J,I)                                         
 170    CONTINUE                                                        
        G(M,LL)=(0.E0,0.E0)                                             
 200   CONTINUE                                                         
 210   INT(N)=INTN                                                      
       CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
         SUBROUTINE   CBAFS(N,ML,AL,IAL,INT,B,IB,NB)                    
C                                                                       
C THIS SUBROUTINE SOLVES LX=B WHERE L IS A LOWER TRIANGULAR             
C BAND MATRIX                                                           
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE SYSTEM                                        
C ML     THE NUMBER OF NONZERO ELEMENTS OF L ON AND BELOW               
C        THE DIAGONAL,THE ROW DIMENSION OF AL                           
C AL     AN IAL X N MATRIX CONTAINING THE LOWERTRIANGULAR               
C        BAND MATRIX. NOTE THAT AL(I-J,J)=L(I,J)                        
C IAL    ROW DIMENSION OF AL                                            
C INT    AN INTEGER VECTOR OF LENGTH N COMPUTED BY   CBALU              
C        RECORDING THE INTERCHANGES PERFORMED ON L                      
C B      A VECTOR OF LENGTH N CONTAINING THE RIGHT HAND SIDE            
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION X                                                 
C SCRATCH SPACE ALLOCATED - NONE                                        
C ERROR CONDITIONS                                                      
C 1     N.LT.1     FATAL                                                
C 2     ML.LT.1     FATAL                                               
C 3     IAL.LT.ML-1 FATAL                                               
C 4     INT(I)    NOT IN 1,.....N     FATAL                             
C 5     IB.LT.N          FATAL                                          
C 6     NB.LT.1          FATAL                                          
C                                                                       
         INTEGER IAL,N,ML,INT(N)                                        
        COMPLEX AL(IAL,N),B(IB,NB)                                      
        COMPLEX X                                                       
C CHECK ERROR CONDITIONS                                                
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H CBAFS-N.LT.1,13,1,2)                  
C      IF( ML.LT.1)CALL SETERR(14H CBAFS-ML.LT.1,14,2,2)                
C      IF (IAL.LT.ML-1)CALL SETERR(18H CBAFS-IAL.LT.ML-1,18,3,2)        
C      IF(IB.LT.N) CALL SETERR(14H CBAFS-IB.LT.N,14,5,2)                
C      IF(NB.LT.1) CALL SETERR(14H CBAFS-NB.LT.1,14,6,2)                
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' CBAFS-N.LT.1',13,1,2)                   
       IF( ML.LT.1)CALL SETERR(' CBAFS-ML.LT.1',14,2,2)                 
       IF (IAL.LT.ML-1)CALL SETERR(' CBAFS-IAL.LT.ML-1',18,3,2)         
       IF(IB.LT.N) CALL SETERR(' CBAFS-IB.LT.N',14,5,2)                 
       IF(NB.LT.1) CALL SETERR(' CBAFS-NB.LT.1',14,6,2)                 
C/                                                                      
       IF (ML.EQ.1) RETURN                                              
       IF (N.EQ.1) RETURN                                               
       CALL ENTER(1)                                                    
       M1=ML-1                                                          
        NM1=N-1                                                         
       DO 60 K=1,NM1                                                    
          I=INT(K)                                                      
          KP1=K+1                                                       
C/6S                                                                    
C         IF (I.LT.1.OR.I.GT.N)                                         
C    1       CALL SETERR(26HCBAFS-INT(I) NOT IN 1,..,N,26,4,2)          
C/7S                                                                    
          IF (I.LT.1.OR.I.GT.N)                                         
     1       CALL SETERR('CBAFS-INT(I) NOT IN 1,..,N',26,4,2)           
C/                                                                      
          DO 55 J=1,NB                                                  
          X=B(I,J)                                                      
          IF (I.EQ.K) GO TO 10                                          
C INTERCHANGE ELEMENTS OF B                                             
              B(I,J)=B(K,J)                                             
              B(K,J)=X                                                  
 10         CONTINUE                                                    
            IEND=M1+K                                                   
            IF (N.LT.IEND)IEND=N                                        
            IMK=0                                                       
            DO 50 II=KP1,IEND                                           
                 IMK=IMK+1                                              
                 B(II,J)=B(II,J)+AL(IMK,K)*X                            
 50         CONTINUE                                                    
 55       CONTINUE                                                      
 60       CONTINUE                                                      
 100     CALL LEAVE                                                     
          RETURN                                                        
         END                                                            
              SUBROUTINE   CBABS(N,G,IG,B,IB,NB,MU)                     
C                                                                       
C THIS SUBROUTINE SOLVES TX = B WHERE T IS AN                           
C UPPER TRIANGULAR BANDED MATRIX                                        
C                                                                       
C INPUT PARAMETERS                                                      
C N         THE ORDER OF THE SYSTEM                                     
C G         AN IG X N ARRAY CONTAINING THE UPPERTRIANGULAR              
C           MATRIX T WHERE G(1+J-I,I)=T(I,J)                            
C IG        ROW DIMENSION OF G                                          
C B         THE RIGHT HAND SIDES;OVERWRITTEN ON OUTPUT                  
C IB        ROW DIMENSION OF B MATRIX                                   
C NB        NUMBER OF RIGHT HAND SIDES                                  
C MU        THE NUMBER OF NONZERO DIAGONALS OF T                        
C OUTPUT PARAMETERS                                                     
C B         THE SOLUTION MATRIX X                                       
C SCRATCH SPACE NEEDED -NONE                                            
C ERROR CONDITIONS                                                      
C   1       N.LT.1        FATAL                                         
C   2       IG.LT.MU      FATAL                                         
C   3       MU.LT.1       FATAL                                         
C   4       IB.LT.N     FATAL                                           
C  5        NB.LT.1       FATAL                                         
C   10+K    SINGULAR G OF RANK K  RECOVERABLE                           
        INTEGER IG,N,MU                                                 
        COMPLEX G(IG,N),B(IB,NB)                                        
        COMPLEX X                                                       
C/6S                                                                    
C       IF (N.LT.1) CALL SETERR(13H CBABS-N.LT.1,13,1,2)                
C       IF (IG.LT.MU) CALL SETERR(15H CBABS-IU.LT.MU,15,2,2)            
C       IF (MU.LT.1) CALL SETERR(14H CBABS-MU.LT.1,14,3,2)              
C       IF (IB.LT.N) CALL SETERR(14H CBABS-IB.LT.N,14,4,2)              
C       IF (NB.LT.1) CALL SETERR(14H CBABS-NB.LT.1,14,5,2)              
C/7S                                                                    
        IF (N.LT.1) CALL SETERR(' CBABS-N.LT.1',13,1,2)                 
        IF (IG.LT.MU) CALL SETERR(' CBABS-IU.LT.MU',15,2,2)             
        IF (MU.LT.1) CALL SETERR(' CBABS-MU.LT.1',14,3,2)               
        IF (IB.LT.N) CALL SETERR(' CBABS-IB.LT.N',14,4,2)               
        IF (NB.LT.1) CALL SETERR(' CBABS-NB.LT.1',14,5,2)               
C/                                                                      
        CALL ENTER(1)                                                   
        L=1                                                             
        NP1=N+1                                                         
        DO 100 II=1,N                                                   
            I=NP1-II                                                    
            DO 50 J=1,NB                                                
            X=B(I,J)                                                    
            IF (L.LT.2) GO TO 30                                        
            KB=I                                                        
            DO 20 K=2,L                                                 
               KB=KB+1                                                  
               X=X-G(K,I)*B(KB,J)                                       
 20         CONTINUE                                                    
 30         IF (CABS1(G(1,I)).NE.0.E0) GO TO 40                         
C/6S                                                                    
C              CALL SETERR(22H CBABS-SINGULAR MATRIX,22,9+I,1)          
C/7S                                                                    
               CALL SETERR(' CBABS-SINGULAR MATRIX',22,9+I,1)           
C/                                                                      
               GO TO 150                                                
 40         B(I,J)=X/G(1,I)                                             
 50      CONTINUE                                                       
            L=MIN0(L+1,MU)                                              
 100     CONTINUE                                                       
 150     CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
         SUBROUTINE CBAML(N,ML,M,A,IA,X,Y)                              
C                                                                       
C MULTIPLICATION OF VECTOR X BY BAND MATRIX B                           
C                                                                       
C INPUT PARAMETERS                                                      
C N    ORDER OF MATRIX                                                  
C ML    NUMBER OF DIAGONALS ON AND BELOW DIAGONAL OF B                  
C M     NUMBER OF DIAGONALS OF B                                        
C A    ARRAY INTO WHICH A BAND MATRIX IS PACKED                         
C      A(ML+J-I,I)= (I,J)TH ELEMENT OF BAND MATRIX                      
C IA   ROW DIMENSION OF A                                               
C X    VECTOR TO BE MULTIPLIED                                          
C                                                                       
C OUTPUT PARAMETERS                                                     
C Y    BX, WHERE B IS THE BAND MATRIX                                   
C ERROR CONDITIONS                                                      
C N.LT.1       FATAL                                                    
C ML.LT.1      FATAL                                                    
C M.LT.ML      FATAL                                                    
C IA.LT.M      FATAL                                                    
         COMPLEX A(IA,N),X(M),Y(N),SUM                                  
C/6S                                                                    
C        IF(N.LT.1) CALL SETERR(12HCBAML-N.LT.1,12,1,2)                 
C        IF(ML.LT.1) CALL SETERR(13HCBAML-ML.LT.1,13,2,2)               
C        IF(M.LT.ML) CALL SETERR(13HCBAML-M.LT.ML,13,3,2)               
C        IF (IA.LT.M) CALL SETERR(13HCBAML-IG.LT.M,13,4,2)              
C/7S                                                                    
         IF(N.LT.1) CALL SETERR('CBAML-N.LT.1',12,1,2)                  
         IF(ML.LT.1) CALL SETERR('CBAML-ML.LT.1',13,2,2)                
         IF(M.LT.ML) CALL SETERR('CBAML-M.LT.ML',13,3,2)                
         IF (IA.LT.M) CALL SETERR('CBAML-IG.LT.M',13,4,2)               
C/                                                                      
         JB=ML+1                                                        
         JE=M                                                           
         JEND=N-(M-ML)                                                  
         IS=1                                                           
         DO 10 I=1,N                                                    
            JB=MAX0(1,JB-1)                                             
            IX=IS                                                       
            SUM=CMPLX(0.0,0.0)                                          
            DO 5 J=JB,JE                                                
               SUM=SUM+A(J,I)*X(IX)                                     
               IX=IX+1                                                  
 5           CONTINUE                                                   
            Y(I)=SUM                                                    
            IF(I.GE.JEND)JE=JE-1                                        
            IF(JB.EQ.1)IS=IS+1                                          
 10       CONTINUE                                                      
          RETURN                                                        
          END                                                           
        SUBROUTINE   BPSS(N,ML,G,IG,B,IB,NB,COND)                       
C                                                                       
C THIS SUBROUTINE SOLVES AX= B WHERE A IS A BANDED SYMMETRIC            
C POSITIVE DEFINITE MATRIX. IT USES GAUSSISAN ELIMINATION               
C WITHOUT PIVOTING. IT ALSO RETURNS AN ESTIMATE OF                      
C THE CONDITION NUMBER OF THE MATRIX G.                                 
C INPUT PARAMETERS                                                      
C N     ORDER OF THE SYSTEM                                             
C ML    THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL                   
C G     G IS AN MLXN ARRAY INTO WHICH A IS PACKED                       
C       G(1+J-I,I)=A(I,J),J.GE.I.I.E. THE DIAGONAL BAND OF A IS THE     
C       FIRST ROW OF G.                                                 
C IG    ROW DIMENSION OF G MUST BE .GE. ML                              
C B     THE MATRIX OF RIGHT HAND SIDES                                  
C NB    THE NUMBER OF RIGHT HAND SIDES                                  
C IB    ROW DIMENSION OF B, MUST BE GREATER  OR EQUAL TO N              
C OUTPUT PARAMETERS                                                     
C B     THE SOLUTION VECTORS X                                          
C G     THE UPPER TRIANGULAR FACTOR OF A                                
C COND  ESTIMATE OF THE LOWER BOUND ON THE CONDITION NUMBER OF A        
C SCRATCH SPACE ALLOCATED-NONE                                          
C ERROR STATES                                                          
C 1 N.LT.1       FATAL                                                  
C 2 ML.LT.1      FATAL                                                  
C 3 IG.LT.ML     FATAL                                                  
C 4 IB.LT.N      FATAL                                                  
C 5 NB.LT.1      FATAL                                                  
C 10+K   SINGULAR MATRIX OF RANK K     RECOVERABLE                      
C 10+N+K KTH PRINCIPAL MINOR IS NOT POSITIVE DEFINITE RECOVERABLE       
C                                                                       
         INTEGER ML,N,NB,IG,IB                                          
         REAL G(IG,N),B(IB,NB), COND                                    
C CHECK FOR INPUT ERRORS                                                
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(13H  BPSS-N.LT.1,13,1,2)               
C        IF(ML.LT.1) CALL SETERR(14H  BPSS-ML.LT.1,14,2,2)              
C        IF (NB.LT.1) CALL SETERR(14H  BPSS-NB.LT.1,14,5,2)             
C        IF (IG.LT.ML) CALL SETERR(15H  BPSS-IG.LT.ML,15,3,2)           
C        IF (IB.LT.N) CALL SETERR(14H  BPSS-IB.LT.N,14,4,2)             
C/7S                                                                    
         IF (N.LT.1) CALL SETERR('  BPSS-N.LT.1',13,1,2)                
         IF(ML.LT.1) CALL SETERR('  BPSS-ML.LT.1',14,2,2)               
         IF (NB.LT.1) CALL SETERR('  BPSS-NB.LT.1',14,5,2)              
         IF (IG.LT.ML) CALL SETERR('  BPSS-IG.LT.ML',15,3,2)            
         IF (IB.LT.N) CALL SETERR('  BPSS-IB.LT.N',14,4,2)              
C/                                                                      
         CALL ENTER(1)                                                  
           CALL  BPCE(N,ML,G,IG,COND)                                   
         IF (NERROR(NERR).EQ.0) GO TO 10                                
            IF (NERR.LT.10+N) GO TO 5                                   
C/6S                                                                    
C         CALL N5ERR(30H  BPSS-MATRIX NOT POSITIVE DEF,30,NERR,1)       
C/7S                                                                    
          CALL N5ERR('  BPSS-MATRIX NOT POSITIVE DEF',30,NERR,1)        
C/                                                                      
            GO TO 30                                                    
C/6S                                                                    
C5          CALL N5ERR(22H  BPSS-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
 5          CALL N5ERR('  BPSS-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
            GO TO 30                                                    
 10      CONTINUE                                                       
            CALL  BPFS(N,ML,G,IG,B,IB,NB)                               
            CALL  BPBS(N,ML,G,IG,B,IB,NB)                               
 30      CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
      SUBROUTINE  BPCE(N,ML,G,IG, COND)                                 
C                                                                       
C THIS SUBROUTINE DETERMINES A LOWER BOUND ON THE CONDITION             
C NUMBER OF A BAND POSITIVE DEFINITE MATRIX G                           
C                                                                       
C INPUT PARAMTERS                                                       
C    N      ORDER OF THE MATRIX G                                       
C    G      BAND POSITIVE DEFINITE MATRIX WHOSE CONDITION               
C           NUMBER IS REQUIRED                                          
C    ML     THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL               
C    IG     ROW DIMENSION OF G - MUST BE .GE.ML                         
C                                                                       
C OUTPUT PARAMETERS                                                     
C    G      A DECOMPOSITION OF THE MATRIX G                             
C    COND   AN ESTIMATE OF THE CONDITION NUMBER                         
C           OF THE MATRIX G                                             
C                                                                       
C SCRATCH STORAGE ALLOCATED - N REAL LOCATIONS                          
C ERROR CONDITIONS -                                                    
C       1    N.LT.1     FATAL                                           
C       2    ML.LT.1    FATAL                                           
C       3    IG.LT.ML   FATAL                                           
      INTEGER N,ML,IG                                                   
      REAL G(IG,N), COND, GNORM, BPNM,R1MACH                            
      COMMON /CSTAK/ D                                                  
      DOUBLE PRECISION D(500)                                           
      REAL R(1000)                                                      
      EQUIVALENCE (R(1), D(1))                                          
      CALL ENTER(1)                                                     
C/6S                                                                    
C     IF (N.LT.1)  CALL SETERR(13H  BPCE-N.LT.1, 13, 1, 2)              
C     IF (ML.LT.1) CALL SETERR(14H  BPCE-ML.LT.1, 14, 2, 2)             
C     IF (IG.LT.ML)CALL SETERR(15H  BPCE-IG.LT.ML, 15, 3, 2)            
C/7S                                                                    
      IF (N.LT.1)  CALL SETERR('  BPCE-N.LT.1', 13, 1, 2)               
      IF (ML.LT.1) CALL SETERR('  BPCE-ML.LT.1', 14, 2, 2)              
      IF (IG.LT.ML)CALL SETERR('  BPCE-IG.LT.ML', 15, 3, 2)             
C/                                                                      
      GNORM=BPNM(N,ML,G,IG)                                             
      CALL  BPLD(N,ML,G,IG,0.0)                                         
      IF(NERROR(NERR).EQ.0) GOTO 20                                     
      IF(NERROR(NERR).LT.10+N) GO TO 10                                 
C/6S                                                                    
C     CALL N5ERR(30H  BPCE-MATRIX NOT POSITIVE DEF,30,NERR,1)           
C/7S                                                                    
      CALL N5ERR('  BPCE-MATRIX NOT POSITIVE DEF',30,NERR,1)            
C/                                                                      
      GO TO 30                                                          
 10   COND = R1MACH(2)                                                  
C/6S                                                                    
C     CALL N5ERR(22H  BPCE-SINGULAR MATRIX,22,NERR,1)                   
C/7S                                                                    
      CALL N5ERR('  BPCE-SINGULAR MATRIX',22,NERR,1)                    
C/                                                                      
      GO TO 30                                                          
 20   IWORK = ISTKGT(N,3)                                               
      CALL B4PCE(N,ML,G,IG,GNORM,COND,R(IWORK))                         
 30   CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE B4PCE(N,ML,G,IG,ANORM,COND,Z)                          
      INTEGER N,ML,IG                                                   
      REAL G(IG,N), Z(N), ANORM, COND                                   
      REAL YNORM,S,T,SASUM,SDOT,SM,WKM,WK,EK                            
      INTEGER ML1,J,K,KP1,JEND,JK,NUMELE,NM1                            
      REAL R1MACH,GREAT,BIG,BIG1                                        
C SOLVE A(TRANSPOSE)W = E                                               
C WHERE E IS CHOSEN TO CAUSE MAXIMUM LOCAL GROWTH                       
C IN THE COMPONENTS OF W                                                
      ML1 = ML - 1                                                      
      BIG1=SQRT(R1MACH(2))/FLOAT(N)                                     
      BIG=BIG1                                                          
      IF (ANORM.GT.1.0)BIG=BIG1/ANORM                                   
      IF (BIG.LT.1.0)BIG=1.0                                            
      NM1=N-1                                                           
      EK = 1.0                                                          
      DO  2 J = 1, N                                                    
         Z(J) = 0.0                                                     
  2   CONTINUE                                                          
      DO 30 K=1,N                                                       
        IF (ABS(Z(K)) .NE. 0.0) EK=SIGN(EK,-Z(K))                       
        IF (ABS(EK-Z(K)) .LE. G(1,K)) GO TO 20                          
           S=G(1,K)/ABS(EK-Z(K))                                        
           CALL SSCAL(N,S,Z,1)                                          
           EK=S*EK                                                      
 20     CONTINUE                                                        
        WK=EK - Z(K)                                                    
        WKM=-EK-Z(K)                                                    
        S = ABS(WK)                                                     
        SM = ABS(WKM)                                                   
        KP1=K+1                                                         
        JEND= MIN0(K+ML1, N)                                            
        IF (KP1.GT.JEND) GO TO 28                                       
        JK = 2                                                          
        DO 24 J=KP1,JEND                                                
          SM = SM + ABS(Z(J) + WKM*G(JK,K))                             
          Z(J) = Z(J) + WK * G(JK,K)                                    
          S = S + ABS(Z(J))                                             
          JK = JK + 1                                                   
 24    CONTINUE                                                         
       IF ( S .GE. SM) GO TO 28                                         
          T= WKM - WK                                                   
          WK = WKM                                                      
          JK = 2                                                        
          DO 26 J=KP1,JEND                                              
             Z(J) = Z(J) + T*G(JK,K)                                    
             JK = JK + 1                                                
 26       CONTINUE                                                      
 28    CONTINUE                                                         
       Z(K)=1.0                                                         
       IF(G(1,K).NE.0.0) Z(K) = WK/G(1,K)                               
 30    CONTINUE                                                         
       S= 1.0/SASUM(N,Z,1)                                              
       CALL SSCAL(N,S,Z,1)                                              
C                                                                       
C SOLVE W=L(TRANSPOSE)Y FOR Y                                           
C                                                                       
      IF (ML.EQ.1) GO TO 100                                            
      DO  12 KB = 1, N                                                  
         K = N+1-KB                                                     
         NUMELE = MIN0(ML1,N-K)                                         
         IF(NUMELE.GT.0)Z(K) = Z(K) - SDOT(NUMELE,G(2,K),1,Z(K+1),1)    
         S = ABS(Z(K))                                                  
         IF (S .LE. BIG) GOTO 11                                        
         S = 1.0/S                                                      
         CALL SSCAL(N,S,Z,1)                                            
 11      CONTINUE                                                       
 12      CONTINUE                                                       
         S=1.0/SASUM(N,Z,1)                                             
         CALL SSCAL(N,S,Z,1)                                            
 100  YNORM = 1.0                                                       
C                                                                       
C   SOLVE LW=Y FOR W                                                    
C                                                                       
       IF (ML.EQ.1) GO TO 16                                            
       DO 40 K=1,NM1                                                    
          T=-Z(K)                                                       
          IF (ABS(T).LT.BIG) GO TO 29                                   
            S=1.0/ABS(T)                                                
            YNORM=YNORM*S                                               
            CALL SSCAL(N,S,Z,1)                                         
  29      CONTINUE                                                      
          NUMELE=MIN0(ML1,N-K)                                          
          CALL SAXPY(NUMELE,T,G(2,K),1,Z(K+1),1)                        
  40   CONTINUE                                                         
       S = 1.0/SASUM(N,Z,1)                                             
       IF (S.GT.1.0) GO TO 16                                           
       CALL SSCAL(N,S,Z,1)                                              
       YNORM = YNORM*S                                                  
C                                                                       
C   SOLVEL(TRANSPOSE)* Z = W                                            
C                                                                       
 16    DO  50 KB = 1, N                                                 
         K = N+1-KB                                                     
         IF (G(1,K).GE.ABS(Z(K))) GO TO 48                              
              S=ABS(G(1,K)/Z(K))                                        
              CALL SSCAL(N,S,Z,1)                                       
              YNORM=YNORM*S                                             
 48       T=1.0                                                         
         IF (G(1,K).NE.0.0)T=Z(K)/G(1,K)                                
         NUMELE = MIN0(ML1,N-K)                                         
         Z(K)=T                                                         
         IF(NUMELE.GT.0)Z(K)=Z(K)-SDOT(NUMELE,G(2,K),1,Z(K+1),1)        
 50      CONTINUE                                                       
C                                                                       
C    MAKE ZNORM = 1.0                                                   
C                                                                       
       S= 1.0/SASUM(N,Z,1)                                              
       CALL SSCAL(N,S,Z,1)                                              
       YNORM = YNORM*S                                                  
C                                                                       
C    CALCULATE FINAL VALUE OF CONDITION NUMBER                          
C                                                                       
       GREAT=R1MACH(2)                                                  
       IF (YNORM.GT.1.0) GO TO 60                                       
       IF (ANORM.LE.YNORM*GREAT) GO TO 60                               
       COND=GREAT                                                       
       RETURN                                                           
 60    COND=ANORM/YNORM                                                 
       RETURN                                                           
       END                                                              
        SUBROUTINE   BPLE(N,ML,G,IG,B,IB,NB)                            
C                                                                       
C THIS SUBROUTINE SOLVES AX= B WHERE A IS A BANDED SYMMETRIC            
C POSITIVE DEFINITE MATRIX. IT USES GAUSSISAN ELIMINATION               
C WITHOUT PIVOTING                                                      
C INPUT PARAMETERS                                                      
C N     ORDER OF THE SYSTEM                                             
C ML    THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL                   
C G     G IS AN MLXN ARRAY INTO WHICH A IS PACKED                       
C       G(1+J-I,I)=A(I,J),J.GE.I.I.E. THE DIAGONAL BAND OF A IS THE     
C       FIRST ROW OF G.                                                 
C IG    ROW DIMENSION OF G MUST BE .GE. ML                              
C B     THE MATRIX OF RIGHT HAND SIDES                                  
C NB    THE NUMBER OF RIGHT HAND SIDES                                  
C IB    ROW DIMENSION OF B, MUST BE GREATER  OR EQUAL TO N              
C OUTPUT PARAMETERS                                                     
C B     THE SOLUTION VECTORS X                                          
C G     THE UPPER TRIANGULAR FACTOR OF A                                
C SCRATCH SPACE ALLOCATED-NONE                                          
C ERROR STATES                                                          
C 1 N.LT.1       FATAL                                                  
C 2 ML.LT.1      FATAL                                                  
C 3 IG.LT.ML     FATAL                                                  
C 4 IB.LT.N      FATAL                                                  
C 5 NB.LT.1      FATAL                                                  
C 10+K   SINGULAR MATRIX OF RANK K     RECOVERABLE                      
C 10+N+K KTH PRINCIPAL MINOR IS NOT POSITIVE DEFINITE RECOVERABLE       
C                                                                       
         INTEGER ML,N,NB,IG,IB                                          
         REAL G(IG,N),B(IB,NB)                                          
C CHECK FOR INPUT ERRORS                                                
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(13H  BPLE-N.LT.1,13,1,2)               
C        IF(ML.LT.1) CALL SETERR(14H  BPLE-ML.LT.1,14,2,2)              
C        IF (NB.LT.1) CALL SETERR(14H  BPLE-NB.LT.1,14,5,2)             
C        IF (IG.LT.ML) CALL SETERR(15H  BPLE-IG.LT.ML,15,3,2)           
C        IF (IB.LT.N) CALL SETERR(14H  BPLE-IB.LT.N,14,4,2)             
C/7S                                                                    
         IF (N.LT.1) CALL SETERR('  BPLE-N.LT.1',13,1,2)                
         IF(ML.LT.1) CALL SETERR('  BPLE-ML.LT.1',14,2,2)               
         IF (NB.LT.1) CALL SETERR('  BPLE-NB.LT.1',14,5,2)              
         IF (IG.LT.ML) CALL SETERR('  BPLE-IG.LT.ML',15,3,2)            
         IF (IB.LT.N) CALL SETERR('  BPLE-IB.LT.N',14,4,2)              
C/                                                                      
         CALL ENTER(1)                                                  
           CALL  BPDC(N,ML,G,IG)                                        
         IF (NERROR(NERR).EQ.0) GO TO 10                                
            IF (NERR.LT.10+N) GO TO 5                                   
C/6S                                                                    
C         CALL N5ERR(30H  BPLE-MATRIX NOT POSITIVE DEF,30,NERR,1)       
C/7S                                                                    
          CALL N5ERR('  BPLE-MATRIX NOT POSITIVE DEF',30,NERR,1)        
C/                                                                      
            GO TO 30                                                    
C/6S                                                                    
C5          CALL N5ERR(22H  BPLE-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
 5          CALL N5ERR('  BPLE-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
            GO TO 30                                                    
 10      CONTINUE                                                       
            CALL  BPFS(N,ML,G,IG,B,IB,NB)                               
            CALL  BPBS(N,ML,G,IG,B,IB,NB)                               
 30      CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
          SUBROUTINE   BPDC(N,ML,G,IG)                                  
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED POSITIVE DEFINITE SYMMETRIC MATRIX USING GAUSSIAN              
C ELIMINATION WITHOUT PIVOTING.                                         
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF NONZERO ELEMENTS ON OR BELOW                
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C G       THE UPPER TRIANGULAR PORTION OF THE A MATRIX                  
C         STORED AS AN IG X N ARRAY WITH G(1+J-I,I)=A(I,J)              
C         I.E. THE DIAGONAL  OF THE BAND MATRIX IS THE                  
C         FIRST ROW OF G, THE FIRST SUPER DIAGONAL IS                   
C         THE SECOND ROW                                                
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN ML                 
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   IG.LT.ML    FATAL                                                 
C 10+K   SINGULAR MATRIX OF RANK K    RECOVERABLE                       
C 10+N+K KTH PRINCIPAL MINOR IS NOT POSITIVE DEFINITE-RECOVERABLE       
           INTEGER IG                                                   
           INTEGER N,ML                                                 
           REAL G(IG,N),EPS                                             
           REAL GNORM                                                   
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H  BPDC-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H  BPDC-ML.LT.1,14,2,2)                
C      IF (IG.LT.ML) CALL SETERR(15H  BPDC-IG,LT.ML,15,3,2)             
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('  BPDC-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR('  BPDC-ML.LT.1',14,2,2)                 
       IF (IG.LT.ML) CALL SETERR('  BPDC-IG,LT.ML',15,3,2)              
C/                                                                      
       IF (ML.EQ.1) RETURN                                              
       CALL ENTER(1)                                                    
       GNORM=BPNM(N,ML,G,IG)                                            
         EPS=GNORM*R1MACH(4)                                            
           CALL   BPLD(N,ML,G,IG,EPS)                                   
         IF (NERROR(NERR).EQ.0) GO TO 30                                
            IF (NERR.LT.10+N) GO TO 5                                   
C/6S                                                                    
C         CALL N5ERR(30H  BPDC-MATRIX NOT POSITIVE DEF,30,NERR,1)       
C/7S                                                                    
          CALL N5ERR('  BPDC-MATRIX NOT POSITIVE DEF',30,NERR,1)        
C/                                                                      
            GO TO 30                                                    
C/6S                                                                    
C5          CALL N5ERR(22H  BPDC-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
 5          CALL N5ERR('  BPDC-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
 30       CALL LEAVE                                                    
          RETURN                                                        
          END                                                           
      REAL FUNCTION BPNM(N,ML,G,IG)                                     
C                                                                       
C THIS SUBROUTINE COMPUTES THE MAXIMUM COLUMN SUM(1-NORM) OF            
C A BAND POSITIVE DEFINITE MATRIX                                       
C                                                                       
      INTEGER N,ML,IG                                                   
      REAL G(IG,N)                                                      
      REAL SUM                                                          
C/6S                                                                    
C      IF (N.LT.1) CALL SETERR(12H BPNM-N.LT.1,12,1,2)                  
C      IF (ML.LT.1) CALL SETERR(13H BPNM-ML.LT.1,13,2,2)                
C      IF (IG.LT.ML) CALL SETERR(14H BPNM-IG.LT.ML,14,3,2)              
C/7S                                                                    
       IF (N.LT.1) CALL SETERR(' BPNM-N.LT.1',12,1,2)                   
       IF (ML.LT.1) CALL SETERR(' BPNM-ML.LT.1',13,2,2)                 
       IF (IG.LT.ML) CALL SETERR(' BPNM-IG.LT.ML',14,3,2)               
C/                                                                      
      BPNM =0.0                                                         
      NMML = N-ML                                                       
C COMPUTE SUM OF COLUMN ELEMENTS STORED AS A COLUMN IN G                
      JE = ML                                                           
      DO 4 I=1,N                                                        
         SUM = 0.0                                                      
         DO 1 J = 1,JE                                                  
 1          SUM = SUM + ABS(G(J,I))                                     
         IF ( NMML.LT.I) JE = JE - 1                                    
C COMPUTE SUM OF COLUMN ELEMENTS STORED ON DIAGONAL IN G                
      K = I-1                                                           
      L = 2                                                             
 2    IF ( (L.GT.ML) .OR. (K.LT.1)  ) GO TO 3                           
      SUM = SUM + ABS(G(L,K))                                           
      K = K-1                                                           
      L = L+1                                                           
      GO TO 2                                                           
 3    IF (SUM.GT.BPNM) BPNM = SUM                                       
 4    CONTINUE                                                          
      RETURN                                                            
      END                                                               
          SUBROUTINE   BPLD(N,ML,G,IG,EPS)                              
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED POSITIVE DEFINITE SYMMETRIC MATRIX USING GUASSIAN              
C ELIMINATION WITHOUT PIVOTING.                                         
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF NONZERO ELEMENTS ON OR BELOW                
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C G       THE UPPER TRIANGULAR PORTION OF THE A MATRIX                  
C         STORED AS AN IG X N ARRAY WITH G(1+J-I,I)=A(I,J)              
C         I.E. THE DIAGONAL  OF THE BAND MATRIX IS THE                  
C         FIRST ROW OF G, THE FIRST SUPPER DIAGONAL IS                  
C         THE SECOND ROW                                                
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN ML                 
C EPS     IF THE DIAGONAL OF D IS LESS THAN OR EQUAL TO EPS             
C         THE MATRIX IS CONSIDERED SINGULAR                             
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   IG.LT.ML    FATAL                                                 
C 10+K   SINGULAR MATRIX OF RANK K    RECOVERABLE                       
C 10+N+K KTH PRINCIPAL MINOR IS NOT POSITIVE DEFINITE-RECOVERABLE       
           INTEGER IG                                                   
           INTEGER N,ML                                                 
           REAL G(IG,N),EPS                                             
           REAL T,X                                                     
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H  BPLD-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H  BPLD-ML.LT.1,14,2,2)                
C      IF (IG.LT.ML) CALL SETERR(15H  BPLD-IG.LT.ML,15,3,2)             
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('  BPLD-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR('  BPLD-ML.LT.1',14,2,2)                 
       IF (IG.LT.ML) CALL SETERR('  BPLD-IG.LT.ML',15,3,2)              
C/                                                                      
       CALL ENTER(1)                                                    
       IERR=0                                                           
       M1=ML-1                                                          
C                                                                       
C ZERO OUT LOWER RHS WART                                               
C                                                                       
       IEND=MIN0(M1,N)                                                  
       NP1=N+1                                                          
       IF (IEND.LT.1) GO TO 61                                          
       DO 60 I=1,IEND                                                   
          JBEG=I+1                                                      
          NP1MI=NP1-I                                                   
          DO 50 J=JBEG,ML                                               
             G(J,NP1MI)=0.0                                             
 50      CONTINUE                                                       
 60    CONTINUE                                                         
 61    DO 200 K=1,N                                                     
        X=G(1,K)                                                        
          IF (X.GT.EPS) GO TO 90                                        
             IF (X.LT.0.0) GO TO 70                                     
             G(1,K)=EPS                                                 
             X=G(1,K)                                                   
             IF (X.EQ.0.0)X=1.0                                         
C/6S                                                                    
C            IF (IERR.EQ.0)                                             
C    1       CALL SETERR(22H  BPLD-SINGULAR MATRIX,22,9+K,1)            
C/7S                                                                    
             IF (IERR.EQ.0)                                             
     1       CALL SETERR('  BPLD-SINGULAR MATRIX',22,9+K,1)             
C/                                                                      
             IERR=1                                                     
             GO TO 90                                                   
 70       CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(30H  BPLD-MATRIX NOT POSITIVE DEF,30,N+K+10,1)    
C/7S                                                                    
          CALL SETERR('  BPLD-MATRIX NOT POSITIVE DEF',30,N+K+10,1)     
C/                                                                      
             GOTO 210                                                   
 90       CONTINUE                                                      
            IEND=MIN0(N-K,M1)                                           
            IF (IEND.LT.1) GO TO 200                                    
            JEND=ML                                                     
          DO 170 I=1,IEND                                               
             T=G(I+1,K)/X                                               
             KPI=K+I                                                    
             JEND=JEND-1                                                
             DO 140 J=1,JEND                                            
                JPI=J+I                                                 
                G(J,KPI)=G(J,KPI)-T*G(JPI,K)                            
 140         CONTINUE                                                   
             G(I+1,K)=T                                                 
 170      CONTINUE                                                      
 200   CONTINUE                                                         
 210   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
         SUBROUTINE  BPFS(N,ML,G,IG,B,IB,NB)                            
C                                                                       
C THIS SUBROUTINE SOLVES LX=B WHERE L IS A LOWER TRIANGULAR             
C BAND MATRIX                                                           
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE SYSTEM                                        
C ML     THE NUMBER OF NONZERO ELEMENTS OF L ON AND BELOW               
C        THE DIAGONG,THE ROW DIMENSION OF G                             
C G     AN IG X N MATRIX CONTAINING THE LOWERTRIANGULAR                 
C        BAND MATRIX. NOTE THAT G(1+I-J,I)=L(I,J)                       
C IG    ROW DIMENSION OF G                                              
C B      MATRIX OF RIGHT HAND SIDES                                     
C IB     ROW DIMENSION OF B                                             
C NB     NUMBER OF RIGHT HAND SIDES                                     
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION X                                                 
C SCRATCH SPACE GLOCATED - NONE                                         
C ERROR CONDITIONS                                                      
C 1     N.LT.1     FATG                                                 
C 2     ML.LT.1     FATG                                                
C 3     IG.LT.ML   FATG                                                 
C 4     IB.LT.N     FATG                                                
C 5     NB.LT.1     FATG                                                
C                                                                       
        INTEGER IG,N,ML                                                 
        REAL G(IG,N),B(IB,NB)                                           
        REAL X                                                          
C CHECK ERROR CONDITIONS                                                
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H  BPFS-N.LT.1,13,1,2)                  
C      IF( ML.LT.1)CALL SETERR(14H  BPFS-ML.LT.1,14,2,2)                
C      IF (IG.LT.ML)CALL SETERR(15H  BPFS-IG.LT.ML,15,3,2)              
C      IF (IB.LT.N) CALL SETERR(14H  BPFS-IB.LT.N,14,4,2)               
C      IF (NB.LT.1) CALL SETERR(14H  BPFS-NB.LT.1,14,5,2)               
C/7S                                                                    
       IF (N.LT.1)CALL SETERR('  BPFS-N.LT.1',13,1,2)                   
       IF( ML.LT.1)CALL SETERR('  BPFS-ML.LT.1',14,2,2)                 
       IF (IG.LT.ML)CALL SETERR('  BPFS-IG.LT.ML',15,3,2)               
       IF (IB.LT.N) CALL SETERR('  BPFS-IB.LT.N',14,4,2)                
       IF (NB.LT.1) CALL SETERR('  BPFS-NB.LT.1',14,5,2)                
C/                                                                      
       IF (ML.EQ.1) RETURN                                              
       CALL ENTER(1)                                                    
       M1=ML-1                                                          
       DO 80 J=1,NB                                                     
       DO 60 K=1,N                                                      
          X=B(K,J)                                                      
 10         IF (K.EQ.N) GO TO 80                                        
            KP1=K+1                                                     
            IEND=M1+K                                                   
             II=1                                                       
            IF (N.LT.IEND)IEND=N                                        
            DO 50 I=KP1,IEND                                            
                 II=II+1                                                
                 B(I,J)=B(I,J)-G(II,K)*X                                
 50         CONTINUE                                                    
 60       CONTINUE                                                      
 80       CONTINUE                                                      
 100     CALL LEAVE                                                     
          RETURN                                                        
         END                                                            
              SUBROUTINE  BPBS(N,ML,G,IG,B,IB,NB)                       
C                                                                       
C THIS SUBROUTINE SOLVES DTX = B WHERE T IS A                           
C UNIT UPPER TRIANGULAR MATRIX AND D IS A DIAGONAL                      
C MATRIX                                                                
C                                                                       
C INPUT PARAMETERS                                                      
C N         THE ORDER OF THE SYSTEM                                     
C G         AN IG X N ARRAY CONTAINING THE UPPERTRIANGULAR              
C           MATRIX T WHERE G(1+J-I,I)=T(I,J)                            
C           AND THE DIAGONAL MATRIX D IN ITS FIRST ROW                  
C IG        ROW DIMENSION OF G                                          
C B         THE RIGHT HAND SIDE;OVERWRITTEN ON OUTPUT                   
C IB        ROW DIMENSION OF THE B MATRIX                               
C NB        NUMBER OF RIGHT HAND SIDES                                  
C ML        THE NUMBER OF NONZERO DIAGONALS OF T                        
C OUTPUT PARAMETERS                                                     
C B         A VECTOR CONAINING THE SOLUTION X                           
C SCRATCH SPACE NEEDED -NONE                                            
C ERROR CONDITIONS                                                      
C   1       N.LT.1        FATAL                                         
C   2       ML.LT.1       FATAL                                         
C   3       IG.LT.ML       FATAL                                        
C   4       IB.LT.N       FATAL                                         
C  5        NB.LT.1       FATAL                                         
C   10+K    SINGULAR G RANK K   RECOVERABLE                             
        INTEGER N,IG,ML                                                 
        REAL G(IG,N),B(IB,NB)                                           
        REAL X                                                          
C/6S                                                                    
C       IF (N.LT.1) CALL SETERR(13H  BPBS-N.LT.1,13,1,2)                
C       IF (ML.LT.1) CALL SETERR(14H  BPBS-ML.LT.1,14,2,2)              
C       IF (ML.GT.IG) CALL SETERR(15H  BPBS-ML.GT.IG,15,3,2)            
C       IF(IB.LT.N) CALL SETERR(14H  BPBS-IB.LT.N,14,4,2)               
C       IF(NB.LT.1) CALL SETERR(14H  BPBS-NB.LT.1,14,5,2)               
C/7S                                                                    
        IF (N.LT.1) CALL SETERR('  BPBS-N.LT.1',13,1,2)                 
        IF (ML.LT.1) CALL SETERR('  BPBS-ML.LT.1',14,2,2)               
        IF (ML.GT.IG) CALL SETERR('  BPBS-ML.GT.IG',15,3,2)             
        IF(IB.LT.N) CALL SETERR('  BPBS-IB.LT.N',14,4,2)                
        IF(NB.LT.1) CALL SETERR('  BPBS-NB.LT.1',14,5,2)                
C/                                                                      
        CALL ENTER(1)                                                   
        L=1                                                             
        NP1=N+1                                                         
        DO 100 II=1,N                                                   
            I=NP1-II                                                    
            IF (G(1,I).NE.0.0) GO TO 40                                 
C/6S                                                                    
C              CALL SETERR(22H  BPBS-SINGULAR MATRIX,22,9+I,1)          
C/7S                                                                    
               CALL SETERR('  BPBS-SINGULAR MATRIX',22,9+I,1)           
C/                                                                      
               GO TO 150                                                
 40     CONTINUE                                                        
        DO 70 J=1,NB                                                    
            B(I,J)=B(I,J)/G(1,I)                                        
            IF (L.LT.2) GO TO 70                                        
            X=B(I,J)                                                    
            KB=I                                                        
            DO 60 K=2,L                                                 
               KB=KB+1                                                  
               X=X-G(K,I)*B(KB,J)                                       
 60          CONTINUE                                                   
            B(I,J)=X                                                    
 70       CONTINUE                                                      
 80         L=MIN0(L+1,ML)                                              
 100     CONTINUE                                                       
 150     CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
       SUBROUTINE BPML(N,ML,G,IG,X,Y)                                   
C                                                                       
C BAND SYMMETRIC POSITIVE DEFINITE MULTIPLICATION                       
C                                                                       
C THIS SUBROUTINE MULTIPLIES A VECTOR X BY A SYMMETRIC                  
C BAND POSITIVE MATRIX A PACKED INTO G                                  
C                                                                       
C INPUT PARAMETERS                                                      
C N       ORDER OF THE MATRIX                                           
C ML      NUMBER OF NONZERO DIAGONALS ON AND BELOW THE DIAGONAL         
C         OF A                                                          
C G       MATRIX INTO WHICH A IS PACKED-G(J-I+1,I)=A(I,J)               
C IG      ROW DIMENSION OF G                                            
C X       VREAL VECTOR OF LENGTH N                                      
C OUTPUT PARAMTERS                                                      
C Y       A TIMES X                                                     
C                                                                       
C ERROR CONDITIONS                                                      
C 1  N<1                                                                
C 2  ML.LT.1                                                            
C 3  IG.LT.ML                                                           
           REAL G(IG,N),X(N),Y(N)                                       
C/6S                                                                    
C          IF(N.LT.1) CALL SETERR(13H BPML-N.LT.1 ,13,1,2)              
C          IF(ML.LT.1) CALL SETERR(13H BPML-ML.LT.1,13,2,2)             
C          IF(IG.LT.ML)CALL SETERR(14H BPML-IG.LT.ML,14,3,2)            
C/7S                                                                    
           IF(N.LT.1) CALL SETERR(' BPML-N.LT.1 ',13,1,2)               
           IF(ML.LT.1) CALL SETERR(' BPML-ML.LT.1',13,2,2)              
           IF(IG.LT.ML)CALL SETERR(' BPML-IG.LT.ML',14,3,2)             
C/                                                                      
           DO 10 I=1,N                                                  
              Y(I)=G(1,I)*X(I)                                          
 10        CONTINUE                                                     
           IF(ML.EQ.1) RETURN                                           
           DO 30 J=2,ML                                                 
              JEND=N+1-J                                                
              JM1=J-1                                                   
              DO 20 I=1,JEND                                            
                 IPJM1=I+JM1                                            
                 Y(I)=Y(I)+G(J,I)*X(IPJM1)                              
                 Y(IPJM1)=Y(IPJM1)+G(J,I)*X(I)                          
 20           CONTINUE                                                  
 30        CONTINUE                                                     
           RETURN                                                       
           END                                                          
        SUBROUTINE   DBPSS(N,ML,G,IG,B,IB,NB,COND)                      
C                                                                       
C THIS SUBROUTINE SOLVES AX= B WHERE A IS A BANDED SYMMETRIC            
C POSITIVE DEFINITE MATRIX. IT USES GAUSSIAN ELIMINATION                
C WITHOUT PIVOTING                                                      
C INPUT PARAMETERS                                                      
C N     ORDER OF THE SYSTEM                                             
C ML    THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL                   
C G     G IS AN ML X N ARRAY INTO WHICH A IS PACKED                     
C       G(1+J-I,I)=A(I,J),J.GE.I.I.E. THE DIAGONAL BAND OF A IS THE     
C       FIRST ROW OF G.                                                 
C IG    ROW DIMENSION OF G, MUST BE .GE. ML                             
C B     THE MATRIX OF RIGHT HAND SIDES                                  
C NB    THE NUMBER OF RIGHT HAND SIDES                                  
C IB    ROW DIMENSION OF B, MUST BE GREATER  OR EQUAL TO N              
C OUTPUT PARAMETERS                                                     
C B     THE SOLUTION VECTORS X                                          
C G     THE UPPER TRIANGULAR FACTOR OF A                                
C COND  AN ESTIMATE OF THE LOWER BOUND ON THE CONDITION NUMBER OF THE   
C       MATRIX G                                                        
C SCRATCH SPACE ALLOCATED-NONE                                          
C ERROR STATES                                                          
C 1 N.LT.1       FATAL                                                  
C 2 ML.LT.1      FATAL                                                  
C 3 IG.LT.ML     FATAL                                                  
C 4 IB.LT.N      FATAL                                                  
C 5 NB.LT.1      FATAL                                                  
C 10+K   SINGULAR MATRIX OF RANK K     RECOVERABLE                      
C 10+N+K KTH PRINCIPAL MINOR IS NOT POSITIVE DEFINITE RECOVERABLE       
C                                                                       
         INTEGER ML,N,NB,IG,IB                                          
         DOUBLE PRECISION G(IG,N),B(IB,NB), COND                        
C CHECK FOR INPUT ERRORS                                                
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(13H DBPSS-N.LT.1,13,1,2)               
C        IF(ML.LT.1) CALL SETERR(14H DBPSS-ML.LT.1,14,2,2)              
C        IF (NB.LT.1) CALL SETERR(14H DBPSS-NB.LT.1,14,5,2)             
C        IF (IG.LT.ML) CALL SETERR(15H DBPSS-IG.LT.ML,15,3,2)           
C        IF (IB.LT.N) CALL SETERR(14H DBPSS-IB.LT.N,14,4,2)             
C/7S                                                                    
         IF (N.LT.1) CALL SETERR(' DBPSS-N.LT.1',13,1,2)                
         IF(ML.LT.1) CALL SETERR(' DBPSS-ML.LT.1',14,2,2)               
         IF (NB.LT.1) CALL SETERR(' DBPSS-NB.LT.1',14,5,2)              
         IF (IG.LT.ML) CALL SETERR(' DBPSS-IG.LT.ML',15,3,2)            
         IF (IB.LT.N) CALL SETERR(' DBPSS-IB.LT.N',14,4,2)              
C/                                                                      
         CALL ENTER(1)                                                  
           CALL   DBPCE(N,ML,G,IG,COND)                                 
         IF (NERROR(NERR).EQ.0) GO TO 10                                
            IF (NERR.LT.10+N) GO TO 5                                   
C/6S                                                                    
C         CALL N5ERR(30H DBPSS-MATRIX NOT POSITIVE DEF,30,NERR,1)       
C/7S                                                                    
          CALL N5ERR(' DBPSS-MATRIX NOT POSITIVE DEF',30,NERR,1)        
C/                                                                      
            GO TO 30                                                    
C/6S                                                                    
C5          CALL N5ERR(22H DBPSS-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
 5          CALL N5ERR(' DBPSS-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
            GO TO 30                                                    
 10      CONTINUE                                                       
            CALL  DBPFS(N,ML,G,IG,B,IB,NB)                              
            CALL  DBPBS(N,ML,G,IG,B,IB,NB)                              
 30      CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
      SUBROUTINE DBPCE(N,ML,G,IG, COND)                                 
C                                                                       
C THIS SUBROUTINE DETERMINES A LOWER BOUND ON THE CONDITION             
C NUMBER OF A BAND POSITIVE DEFINITE MATRIX G                           
C                                                                       
C INPUT PARAMTERS                                                       
C    N      ORDER OF THE MATRIX G                                       
C    G      BAND POSITIVE DEFINITE MATRIX WHOSE CONDITION               
C           NUMBER IS REQUIRED                                          
C    ML     THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL               
C    IG     ROW DIMENSION OF G - MUST BE .GE.ML                         
C                                                                       
C OUTPUT PARAMETERS                                                     
C    G      A DECOMPOSITION OF THE MATRIX G                             
C    COND   AN ESTIMATE OF THE CONDITION NUMBER                         
C           OF THE MATRIX G                                             
C                                                                       
C SCRATCH STORAGE ALLOCATED - N DOUBLE PRECISION LOCATIONS              
C ERROR CONDITIONS -                                                    
C       1    N.LT.1     FATAL                                           
C       2    ML.LT.1    FATAL                                           
C       3    IG.LT.ML   FATAL                                           
      INTEGER N,ML,IG                                                   
      DOUBLE PRECISION G(IG,N), COND, GNORM,DBPNM,D1MACH                
      COMMON /CSTAK/ D                                                  
      DOUBLE PRECISION D(500)                                           
      DOUBLE PRECISION R(500)                                           
      EQUIVALENCE (R(1), D(1))                                          
      CALL ENTER(1)                                                     
C/6S                                                                    
C     IF (N.LT.1)  CALL SETERR(13H DBPCE-N.LT.1, 13, 1, 2)              
C     IF (ML.LT.1) CALL SETERR(14H DBPCE-ML.LT.1, 14, 2, 2)             
C     IF (IG.LT.ML)CALL SETERR(15H DBPCE-IG.LT.ML, 15, 3, 2)            
C/7S                                                                    
      IF (N.LT.1)  CALL SETERR(' DBPCE-N.LT.1', 13, 1, 2)               
      IF (ML.LT.1) CALL SETERR(' DBPCE-ML.LT.1', 14, 2, 2)              
      IF (IG.LT.ML)CALL SETERR(' DBPCE-IG.LT.ML', 15, 3, 2)             
C/                                                                      
      GNORM=DBPNM(N,ML,G,IG)                                            
      CALL DBPLD(N,ML,G,IG,0.D0)                                        
      IF(NERROR(NERR).EQ.0) GOTO 20                                     
      IF(NERROR(NERR).LT.10+N) GO TO 10                                 
C/6S                                                                    
C     CALL N5ERR(30H DBPCE-MATRIX NOT POSITIVE DEF,30,NERR,1)           
C/7S                                                                    
      CALL N5ERR(' DBPCE-MATRIX NOT POSITIVE DEF',30,NERR,1)            
C/                                                                      
      GO TO 30                                                          
 10   COND = D1MACH(2)                                                  
C/6S                                                                    
C     CALL N5ERR(22H DBPCE-SINGULAR MATRIX,22,NERR,1)                   
C/7S                                                                    
      CALL N5ERR(' DBPCE-SINGULAR MATRIX',22,NERR,1)                    
C/                                                                      
      GO TO 30                                                          
 20   IWORK = ISTKGT(N,4)                                               
      CALL DB4PCE(N,ML,G,IG,GNORM,COND,R(IWORK))                        
 30   CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE DB4PCE(N,ML,G,IG,ANORM,COND,Z)                         
      INTEGER N,ML,IG                                                   
      DOUBLE PRECISION G(IG,N), Z(N), ANORM, COND                       
      DOUBLE PRECISION YNORM,S,T,DASUM,DDOT,SM,WKM,WK,EK                
      INTEGER ML1,J,K,KP1,JEND,JK,NUMELE,NM1                            
      DOUBLE PRECISION D1MACH,GREAT,BIG,BIG1,DSQRT                      
C SOLVE A(TRANSPOSE)W = E                                               
C WHERE E IS CHOSEN TO CAUSE MAXIMUM LOCAL GROWTH                       
C IN THE COMPONENTS OF W                                                
      ML1 = ML - 1                                                      
      BIG1=DSQRT(D1MACH(2))/FLOAT(N)                                    
      BIG=BIG1                                                          
      IF (ANORM.GT.1.D0)BIG=BIG1/ANORM                                  
      IF (BIG.LT.1.D0)BIG=1.D0                                          
      NM1=N-1                                                           
      EK = 1.D0                                                         
      DO  2 J = 1, N                                                    
         Z(J) = 0.D0                                                    
  2   CONTINUE                                                          
      DO 30 K=1,N                                                       
        IF (DABS(Z(K)) .NE. 0.D0) EK=DSIGN(EK,-Z(K))                    
        IF (DABS(EK-Z(K)) .LE. G(1,K)) GO TO 20                         
           S=G(1,K)/DABS(EK-Z(K))                                       
           CALL DSCAL(N,S,Z,1)                                          
           EK=S*EK                                                      
 20     CONTINUE                                                        
        WK=EK - Z(K)                                                    
        WKM=-EK-Z(K)                                                    
        S = DABS(WK)                                                    
        SM = DABS(WKM)                                                  
        KP1=K+1                                                         
        JEND= MIN0(K+ML1, N)                                            
        IF (KP1.GT.JEND) GO TO 28                                       
        JK = 2                                                          
        DO 24 J=KP1,JEND                                                
          SM = SM + DABS(Z(J) + WKM*G(JK,K))                            
          Z(J) = Z(J) + WK * G(JK,K)                                    
          S = S + DABS(Z(J))                                            
          JK = JK + 1                                                   
 24    CONTINUE                                                         
       IF ( S .GE. SM) GO TO 28                                         
          T= WKM - WK                                                   
          WK = WKM                                                      
          JK = 2                                                        
          DO 26 J=KP1,JEND                                              
             Z(J) = Z(J) + T*G(JK,K)                                    
             JK = JK + 1                                                
 26       CONTINUE                                                      
 28    CONTINUE                                                         
       Z(K)=1.D0                                                        
       IF(G(1,K).NE.0.D0) Z(K) = WK/G(1,K)                              
 30    CONTINUE                                                         
       S= 1.D0/DASUM(N,Z,1)                                             
       CALL DSCAL(N,S,Z,1)                                              
C                                                                       
C SOLVE W=L(TRANSPOSE)Y FOR Y                                           
C                                                                       
      IF (ML.EQ.1) GO TO 100                                            
      DO  12 KB = 1, N                                                  
         K = N+1-KB                                                     
         NUMELE = MIN0(ML1,N-K)                                         
         IF(NUMELE.GT.0)Z(K) = Z(K) - DDOT(NUMELE,G(2,K),1,Z(K+1),1)    
         S = DABS(Z(K))                                                 
         IF (S .LE. BIG) GOTO 11                                        
         S = 1.D0/S                                                     
         CALL DSCAL(N,S,Z,1)                                            
 11      CONTINUE                                                       
 12      CONTINUE                                                       
         S=1.D0/DASUM(N,Z,1)                                            
         CALL DSCAL(N,S,Z,1)                                            
 100  YNORM = 1.D0                                                      
C                                                                       
C   SOLVE LW=Y FOR W                                                    
C                                                                       
       IF (ML.EQ.1) GO TO 16                                            
       DO 40 K=1,NM1                                                    
          T=-Z(K)                                                       
          IF (DABS(T).LT.BIG) GO TO 29                                  
            S=1.D0/DABS(T)                                              
            YNORM=YNORM*S                                               
            CALL DSCAL(N,S,Z,1)                                         
  29      CONTINUE                                                      
          NUMELE=MIN0(ML1,N-K)                                          
          CALL DAXPY(NUMELE,T,G(2,K),1,Z(K+1),1)                        
  40   CONTINUE                                                         
       S = 1.D0/DASUM(N,Z,1)                                            
       IF (S.GT.1.D0) GO TO 16                                          
       CALL DSCAL(N,S,Z,1)                                              
       YNORM = YNORM*S                                                  
C                                                                       
C   SOLVEL(TRANSPOSE)* Z = W                                            
C                                                                       
 16    DO  50 KB = 1, N                                                 
         K = N+1-KB                                                     
         IF (G(1,K).GE.DABS(Z(K))) GO TO 48                             
              S=DABS(G(1,K)/Z(K))                                       
              CALL DSCAL(N,S,Z,1)                                       
              YNORM=YNORM*S                                             
 48       T=1.D0                                                        
         IF (G(1,K).NE.0.D0)T=Z(K)/G(1,K)                               
         NUMELE = MIN0(ML1,N-K)                                         
         Z(K)=T                                                         
         IF (NUMELE.GT.0)Z(K)=Z(K)-DDOT(NUMELE,G(2,K),1,Z(K+1),1)       
 50      CONTINUE                                                       
C                                                                       
C    MAKE ZNORM = 1.D0                                                  
C                                                                       
       S= 1.D0/DASUM(N,Z,1)                                             
       CALL DSCAL(N,S,Z,1)                                              
       YNORM = YNORM*S                                                  
C                                                                       
C    CALCULATE FINAL VALUE OF CONDITION NUMBER                          
C                                                                       
       GREAT=D1MACH(2)                                                  
       IF (YNORM.GT.1.D0) GO TO 60                                      
       IF (ANORM.LE.YNORM*GREAT) GO TO 60                               
       COND=GREAT                                                       
       RETURN                                                           
 60    COND=ANORM/YNORM                                                 
       RETURN                                                           
       END                                                              
        SUBROUTINE   DBPLE(N,ML,G,IG,B,IB,NB)                           
C                                                                       
C THIS SUBROUTINE SOLVES AX= B WHERE A IS A BANDED SYMMETRIC            
C POSITIVE DEFINITE MATRIX. IT USES GAUSSIAN ELIMINATION                
C WITHOUT PIVOTING                                                      
C INPUT PARAMETERS                                                      
C N     ORDER OF THE SYSTEM                                             
C ML    THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL                   
C G     G IS AN ML X N ARRAY INTO WHICH A IS PACKED                     
C       G(1+J-I,I)=A(I,J),J.GE.I.I.E. THE DIAGONAL BAND OF A IS THE     
C       FIRST ROW OF G.                                                 
C IG    ROW DIMENSION OF G, MUST BE .GE. ML                             
C B     THE MATRIX OF RIGHT HAND SIDES                                  
C NB    THE NUMBER OF RIGHT HAND SIDES                                  
C IB    ROW DIMENSION OF B, MUST BE GREATER  OR EQUAL TO N              
C OUTPUT PARAMETERS                                                     
C B     THE SOLUTION VECTORS X                                          
C G     THE UPPER TRIANGULAR FACTOR OF A                                
C SCRATCH SPACE ALLOCATED-NONE                                          
C ERROR STATES                                                          
C 1 N.LT.1       FATAL                                                  
C 2 ML.LT.1      FATAL                                                  
C 3 IG.LT.ML     FATAL                                                  
C 4 IB.LT.N      FATAL                                                  
C 5 NB.LT.1        FATAL                                                
C 10+K   SINGULAR MATRIX OF RANK K     RECOVERABLE                      
C 10+N+K KTH PRINCIPAL MINOR IS NOT POSITIVE DEFINITE RECOVERABLE       
C                                                                       
         INTEGER ML,N,NB,IG,IB                                          
         DOUBLE PRECISION G(IG,N),B(IB,NB)                              
C CHECK FOR INPUT ERRORS                                                
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(13H DBPLE-N.LT.1,13,1,2)               
C        IF(ML.LT.1) CALL SETERR(14H DBPLE-ML.LT.1,14,2,2)              
C        IF (NB.LT.1) CALL SETERR(14H DBPLE-NB.LT.1,14,5,2)             
C        IF (IG.LT.ML) CALL SETERR(15H DBPLE-IG.LT.ML,15,3,2)           
C        IF (IB.LT.N) CALL SETERR(14H DBPLE-IB.LT.N,14,4,2)             
C/7S                                                                    
         IF (N.LT.1) CALL SETERR(' DBPLE-N.LT.1',13,1,2)                
         IF(ML.LT.1) CALL SETERR(' DBPLE-ML.LT.1',14,2,2)               
         IF (NB.LT.1) CALL SETERR(' DBPLE-NB.LT.1',14,5,2)              
         IF (IG.LT.ML) CALL SETERR(' DBPLE-IG.LT.ML',15,3,2)            
         IF (IB.LT.N) CALL SETERR(' DBPLE-IB.LT.N',14,4,2)              
C/                                                                      
         CALL ENTER(1)                                                  
           CALL  DBPDC(N,ML,G,IG)                                       
         IF (NERROR(NERR).EQ.0) GO TO 10                                
            IF (NERR.LT.10+N) GO TO 5                                   
C/6S                                                                    
C         CALL N5ERR(30H DBPLE-MATRIX NOT POSITIVE DEF,30,NERR,1)       
C/7S                                                                    
          CALL N5ERR(' DBPLE-MATRIX NOT POSITIVE DEF',30,NERR,1)        
C/                                                                      
            GO TO 30                                                    
C/6S                                                                    
C5          CALL N5ERR(22H DBPLE-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
 5          CALL N5ERR(' DBPLE-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
            GO TO 30                                                    
 10      CONTINUE                                                       
            CALL  DBPFS(N,ML,G,IG,B,IB,NB)                              
            CALL  DBPBS(N,ML,G,IG,B,IB,NB)                              
 30      CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
          SUBROUTINE   DBPDC(N,ML,G,IG)                                 
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED POSITIVE DEFINITE SYMMETRIC MATRIX USING GAUSSIAN              
C ELIMINATION WITHOUT PIVOTING.                                         
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF NONZERO ELEMENTS ON OR BELOW                
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C G       THE UPPER TRIANGULAR PORTION OF THE A MATRIX                  
C         STORED AS AN IG X N ARRAY WITH G(1+J-I,I)=A(I,J)              
C         I.E. THE DIAGONAL  OF THE BAND MATRIX IS THE                  
C         FIRST ROW OF G, THE FIRST SUPER DIAGONAL IS                   
C         THE SECOND ROW                                                
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN ML                 
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   IG.LT.ML    FATAL                                                 
C 10+K   SINGULAR MATRIX OF RANK K    RECOVERABLE                       
C 10+N+K KTH PRINCIPAL MINOR IS NOT POSITIVE DEFINITE-RECOVERABLE       
           INTEGER IG                                                   
           INTEGER N,ML                                                 
           DOUBLE PRECISION G(IG,N),EPS                                 
          DOUBLE PRECISION D1MACH,DBPNM                                 
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H DBPDC-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H DBPDC-ML.LT.1,14,2,2)                
C      IF (IG.LT.ML) CALL SETERR(15H DBPDC-IG,LT.ML,15,3,2)             
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' DBPDC-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR(' DBPDC-ML.LT.1',14,2,2)                 
       IF (IG.LT.ML) CALL SETERR(' DBPDC-IG,LT.ML',15,3,2)              
C/                                                                      
       IF (ML.EQ.1) RETURN                                              
       CALL ENTER(1)                                                    
         EPS=DBPNM(N,ML,G,IG)*D1MACH(4)                                 
           CALL   DBPLD(N,ML,G,IG,EPS)                                  
         IF (NERROR(NERR).EQ.0) GO TO 30                                
            IF (NERR.LT.10+N) GO TO 5                                   
C/6S                                                                    
C         CALL N5ERR(30H DBPDC-MATRIX NOT POSITIVE DEF,30,NERR,1)       
C/7S                                                                    
          CALL N5ERR(' DBPDC-MATRIX NOT POSITIVE DEF',30,NERR,1)        
C/                                                                      
            GO TO 30                                                    
C/6S                                                                    
C5          CALL N5ERR(22H DBPDC-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
 5          CALL N5ERR(' DBPDC-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
 30       CALL LEAVE                                                    
          RETURN                                                        
          END                                                           
         DOUBLE PRECISION FUNCTION DBPNM(N,ML,G,IG)                     
C                                                                       
C  COMPUTE THE MAXIMUM COLUMN SUM (1-NORM) OF A BAND POSITIVE           
C  DEFINITE MATRIX                                                      
C                                                                       
C                                                                       
      INTEGER N,ML,IG                                                   
      DOUBLE PRECISION G(IG,N)                                          
      DOUBLE PRECISION SUM                                              
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(12HDBPNM-N.LT.1,12,1,2)                
C        IF (ML.LT.1) CALL SETERR(13HDBPNM-ML.LT.1,13,2,2)              
C        IF (IG.LT.ML) CALL SETERR(14HDBPNM-IG.LT.ML,14,3,2)            
C/7S                                                                    
         IF (N.LT.1) CALL SETERR('DBPNM-N.LT.1',12,1,2)                 
         IF (ML.LT.1) CALL SETERR('DBPNM-ML.LT.1',13,2,2)               
         IF (IG.LT.ML) CALL SETERR('DBPNM-IG.LT.ML',14,3,2)             
C/                                                                      
      DBPNM =0.0D0                                                      
      NMML = N-ML                                                       
C COMPUTE SUM OF COLUMN ELEMENTS STORED AS A COLUMN IN G                
      JE = ML                                                           
      DO 4 I=1,N                                                        
         SUM = 0.0D0                                                    
         DO 1 J = 1,JE                                                  
 1          SUM = SUM + DABS(G(J,I))                                    
         IF ( NMML.LT.I) JE = JE - 1                                    
C COMPUTE SUM OF COLUMN ELEMENTS STORED ON DIAGONAL IN G                
      K = I-1                                                           
      L = 2                                                             
 2    IF ( (L.GT.ML) .OR. (K.LT.1)  ) GO TO 3                           
      SUM = SUM + DABS(G(L,K))                                          
      K = K-1                                                           
      L = L+1                                                           
      GO TO 2                                                           
 3    IF (SUM.GT.DBPNM) DBPNM = SUM                                     
 4    CONTINUE                                                          
      RETURN                                                            
      END                                                               
          SUBROUTINE  DBPLD(N,ML,G,IG,EPS)                              
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED POSITIVE DEFINITE SYMMETRIC MATRIX USING GUASSIAN              
C ELIMINATION WITHOUT PIVOTING.                                         
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF NONZERO ELEMENTS ON OR BELOW                
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C G       THE UPPER TRIANGULAR PORTION OF THE A MATRIX                  
C         STORED AS AN IG X N ARRAY WITH G(1+J-I,I)=A(I,J)              
C         I.E. THE DIAGONAL  OF THE BAND MATRIX IS THE                  
C         FIRST ROW OF G, THE FIRST SUPPER DIAGONAL IS                  
C         THE SECOND ROW                                                
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN ML                 
C EPS     IF THE DIAGONAL OF D IS LESS THAN OR EQUAL TO EPS             
C         THE MATRIX IS CONSIDERED SINGULAR                             
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   IG.LT.ML    FATAL                                                 
C 10+K   SINGULAR MATRIX OF RANK K    RECOVERABLE                       
C 10+N+K KTH PRINCIPAL MINOR IS NOT POSITIVE DEFINITE-RECOVERABLE       
           INTEGER IG                                                   
           INTEGER N,ML                                                 
           DOUBLE PRECISION G(IG,N),EPS                                 
           DOUBLE PRECISION T,X                                         
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H DBPLD-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H DBPLD-ML.LT.1,14,2,2)                
C      IF (IG.LT.ML) CALL SETERR(15H DBPLD-IG.LT.ML,15,3,2)             
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' DBPLD-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR(' DBPLD-ML.LT.1',14,2,2)                 
       IF (IG.LT.ML) CALL SETERR(' DBPLD-IG.LT.ML',15,3,2)              
C/                                                                      
       CALL ENTER(1)                                                    
       IERR=0                                                           
       M1=ML-1                                                          
       DO 200 K=1,N                                                     
        X=G(1,K)                                                        
          IF (X.GT.EPS) GO TO 90                                        
             IF (X.LT.0.D0) GO TO 70                                    
             G(1,K)=EPS                                                 
             X=G(1,K)                                                   
             IF (X.EQ.0.D0)X=1.D0                                       
C/6S                                                                    
C            IF (IERR.EQ.0)                                             
C    1       CALL SETERR(22H DBPLD-SINGULAR MATRIX,22,9+K,1)            
C/7S                                                                    
             IF (IERR.EQ.0)                                             
     1       CALL SETERR(' DBPLD-SINGULAR MATRIX',22,9+K,1)             
C/                                                                      
             IERR=1                                                     
             GO TO 90                                                   
 70       CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(30H DBPLD-MATRIX NOT POSITIVE DEF,30,N+K+10,1)    
C/7S                                                                    
          CALL SETERR(' DBPLD-MATRIX NOT POSITIVE DEF',30,N+K+10,1)     
C/                                                                      
             GOTO 210                                                   
 90       CONTINUE                                                      
            IEND=MIN0(N-K,M1)                                           
            IF (IEND.LT.1) GO TO 200                                    
            JEND=IEND                                                   
          DO 170 I=1,IEND                                               
             T=G(I+1,K)/X                                               
             KPI=K+I                                                    
             JPI=I                                                      
             DO 140 J=1,JEND                                            
                JPI=JPI+1                                               
                G(J,KPI)=G(J,KPI)-T*G(JPI,K)                            
 140         CONTINUE                                                   
             JEND=JEND-1                                                
             G(I+1,K)=T                                                 
 170      CONTINUE                                                      
 200   CONTINUE                                                         
 210   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
         SUBROUTINE  DBPFS(N,ML,G,IG,B,IB,NB)                           
C                                                                       
C THIS SUBROUTINE SOLVES LX=B WHERE L IS A LOWER TRIANGULAR             
C BAND MATRIX                                                           
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE SYSTEM                                        
C ML     THE NUMBER OF NONZERO ELEMENTS OF L ON AND BELOW               
C        THE DIAGONG,THE ROW DIMENSION OF G                             
C G     AN IG X N MATRIX CONTAINING THE LOWERTRIANGULAR                 
C        BAND MATRIX. NOTE THAT G(1+I-J,I)=L(I,J)                       
C IG    ROW DIMENSION OF G                                              
C B      MATRIX OF RIGHT HAND SIDES                                     
C IB     ROW DIMENSION OF B                                             
C NB     NUMBER OF RIGHT HAND SIDES                                     
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION X                                                 
C SCRATCH SPACE GLOCATED - NONE                                         
C ERROR CONDITIONS                                                      
C 1     N.LT.1     FATG                                                 
C 2     ML.LT.1     FATG                                                
C 3     IG.LT.ML   FATG                                                 
C 4     IB.LT.N     FATG                                                
C 5     NB.LT.1     FATG                                                
C                                                                       
        INTEGER IG,N,ML                                                 
        DOUBLE PRECISION G(IG,N),B(IB,NB)                               
        DOUBLE PRECISION X                                              
C CHECK ERROR CONDITIONS                                                
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H DBPFS-N.LT.1,13,1,2)                  
C      IF( ML.LT.1)CALL SETERR(14H DBPFS-ML.LT.1,14,2,2)                
C      IF (IG.LT.ML)CALL SETERR(15H DBPFS-IG.LT.ML,15,3,2)              
C      IF (IB.LT.N) CALL SETERR(14H DBPFS-IB.LT.N,14,4,2)               
C      IF (NB.LT.1) CALL SETERR(14H DBPFS-NB.LT.1,14,5,2)               
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' DBPFS-N.LT.1',13,1,2)                   
       IF( ML.LT.1)CALL SETERR(' DBPFS-ML.LT.1',14,2,2)                 
       IF (IG.LT.ML)CALL SETERR(' DBPFS-IG.LT.ML',15,3,2)               
       IF (IB.LT.N) CALL SETERR(' DBPFS-IB.LT.N',14,4,2)                
       IF (NB.LT.1) CALL SETERR(' DBPFS-NB.LT.1',14,5,2)                
C/                                                                      
       IF (ML.EQ.1) RETURN                                              
       CALL ENTER(1)                                                    
       M1=ML-1                                                          
       DO 80 J=1,NB                                                     
       DO 60 K=1,N                                                      
          X=B(K,J)                                                      
 10         IF (K.EQ.N) GO TO 80                                        
            KP1=K+1                                                     
            IEND=M1+K                                                   
             II=1                                                       
            IF (N.LT.IEND)IEND=N                                        
            DO 50 I=KP1,IEND                                            
                 II=II+1                                                
                 B(I,J)=B(I,J)-G(II,K)*X                                
 50         CONTINUE                                                    
 60       CONTINUE                                                      
 80       CONTINUE                                                      
 100     CALL LEAVE                                                     
          RETURN                                                        
         END                                                            
              SUBROUTINE  DBPBS(N,ML,G,IG,B,IB,NB)                      
C                                                                       
C THIS SUBROUTINE SOLVES DTX = B WHERE T IS A                           
C UNIT UPPER TRIANGULAR MATRIX AND D IS A DIAGONAL                      
C MATRIX                                                                
C                                                                       
C INPUT PARAMETERS                                                      
C N         THE ORDER OF THE SYSTEM                                     
C G         AN IG X N ARRAY CONTAINING THE UPPERTRIANGULAR              
C           MATRIX T WHERE G(1+J-I,I)=T(I,J)                            
C           AND THE DIAGONAL MATRIX D IN ITS FIRST ROW                  
C IG        ROW DIMENSION OF G                                          
C B         THE RIGHT HAND SIDE;OVERWRITTEN ON OUTPUT                   
C IB        ROW DIMENSION OF THE B MATRIX                               
C NB        NUMBER OF RIGHT HAND SIDES                                  
C ML        THE NUMBER OF NONZERO DIAGONALS OF T                        
C OUTPUT PARAMETERS                                                     
C B         A VECTOR CONAINING THE SOLUTION X                           
C SCRATCH SPACE NEEDED -NONE                                            
C ERROR CONDITIONS                                                      
C   1       N.LT.1        FATAL                                         
C   2       ML.LT.1       FATAL                                         
C   4       IB.LT.N       FATAL                                         
C  5        NB.LT.1       FATAL                                         
C   3       ML.GT.IG      FATAL                                         
C   10+K    SINGULAR G RANK K  RECOVERABLE                              
        INTEGER N,IG,ML                                                 
        DOUBLE PRECISION G(IG,N),B(IB,NB)                               
        DOUBLE PRECISION X                                              
C/6S                                                                    
C       IF (N.LT.1) CALL SETERR(13H DBPBS-N.LT.1,13,1,2)                
C       IF (IG.LT.1) CALL SETERR(14H DBPBS-IG.LT.1,14,2,2)              
C       IF (ML.LT.1) CALL SETERR(14H DBPBS-ML.LT.1,14,2,2)              
C       IF (ML.GT.IG) CALL SETERR(15H DBPBS-ML.GT.IG,15,3,2)            
C       IF(IB.LT.N) CALL SETERR(14H DBPBS-IB.LT.N,14,4,2)               
C       IF(NB.LT.1) CALL SETERR(14H DBPBS-NB.LT.1,14,5,2)               
C/7S                                                                    
        IF (N.LT.1) CALL SETERR(' DBPBS-N.LT.1',13,1,2)                 
        IF (IG.LT.1) CALL SETERR(' DBPBS-IG.LT.1',14,2,2)               
        IF (ML.LT.1) CALL SETERR(' DBPBS-ML.LT.1',14,2,2)               
        IF (ML.GT.IG) CALL SETERR(' DBPBS-ML.GT.IG',15,3,2)             
        IF(IB.LT.N) CALL SETERR(' DBPBS-IB.LT.N',14,4,2)                
        IF(NB.LT.1) CALL SETERR(' DBPBS-NB.LT.1',14,5,2)                
C/                                                                      
        CALL ENTER(1)                                                   
        L=1                                                             
        NP1=N+1                                                         
        DO 100 II=1,N                                                   
            I=NP1-II                                                    
            IF (G(1,I).NE.0.D0) GO TO 40                                
C/6S                                                                    
C              CALL SETERR(22H DBPBS-SINGULAR MATRIX,22,9+I,1)          
C/7S                                                                    
               CALL SETERR(' DBPBS-SINGULAR MATRIX',22,9+I,1)           
C/                                                                      
               GO TO 150                                                
 40     CONTINUE                                                        
        DO 70 J=1,NB                                                    
            B(I,J)=B(I,J)/G(1,I)                                        
            IF (L.LT.2) GO TO 70                                        
            X=B(I,J)                                                    
            KB=I                                                        
            DO 60 K=2,L                                                 
               KB=KB+1                                                  
               X=X-G(K,I)*B(KB,J)                                       
 60          CONTINUE                                                   
            B(I,J)=X                                                    
 70       CONTINUE                                                      
 80         L=MIN0(L+1,ML)                                              
 100     CONTINUE                                                       
 150     CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
       SUBROUTINE DBPML(N,ML,G,IG,X,Y)                                  
C                                                                       
C BAND SYMMETRIC POSITIVE DEFINITE MULTIPLICATION                       
C                                                                       
C THIS SUBROUTINE MULTIPLIES A VECTOR X BY A SYMMETRIC                  
C BAND POSITIVE MATRIX A PACKED INTO G                                  
C                                                                       
C INPUT PARAMETERS                                                      
C N       ORDER OF THE MATRIX                                           
C ML      NUMBER OF NONZERO DIAGONALS ON AND BELOW THE DIAGONAL         
C         OF A                                                          
C G       MATRIX INTO WHICH A IS PACKED-G(J-I+1,I)=A(I,J)               
C IG      ROW DIMENSION OF G                                            
C X       VDOUBLE PRECISION VECTOR OF LENGTH N                          
C OUTPUT PARAMTERS                                                      
C Y       A TIMES X                                                     
C                                                                       
C ERROR CONDITIONS                                                      
C 1  N<1                                                                
C 2  ML.LT.1                                                            
C 3  IG.LT.ML                                                           
           DOUBLE PRECISION G(IG,N),X(N),Y(N)                           
C/6S                                                                    
C          IF(N.LT.1) CALL SETERR(13HDBPML-N.LT.1 ,13,1,2)              
C          IF(ML.LT.1) CALL SETERR(13HDBPML-ML.LT.1,13,2,2)             
C          IF(IG.LT.ML)CALL SETERR(14HDBPML-IG.LT.ML,14,3,2)            
C/7S                                                                    
           IF(N.LT.1) CALL SETERR('DBPML-N.LT.1 ',13,1,2)               
           IF(ML.LT.1) CALL SETERR('DBPML-ML.LT.1',13,2,2)              
           IF(IG.LT.ML)CALL SETERR('DBPML-IG.LT.ML',14,3,2)             
C/                                                                      
           DO 10 I=1,N                                                  
              Y(I)=G(1,I)*X(I)                                          
 10        CONTINUE                                                     
           IF(ML.EQ.1) RETURN                                           
           DO 30 J=2,ML                                                 
              JEND=N+1-J                                                
              JM1=J-1                                                   
              DO 20 I=1,JEND                                            
                 IPJM1=I+JM1                                            
                 Y(I)=Y(I)+G(J,I)*X(IPJM1)                              
                 Y(IPJM1)=Y(IPJM1)+G(J,I)*X(I)                          
 20           CONTINUE                                                  
 30        CONTINUE                                                     
           RETURN                                                       
           END                                                          
        SUBROUTINE   CBPSS(N,ML,G,IG,B,IB,NB,COND)                      
C                                                                       
C THIS SUBROUTINE SOLVES AX= B WHERE A IS A BANDED HERMITIAN            
C POSITIVE DEFINITE MATRIX. IT USES GAUSSIAN ELIMINATION                
C WITHOUT PIVOTING                                                      
C INPUT PARAMETERS                                                      
C N     ORDER OF THE SYSTEM                                             
C ML    THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL                   
C G     G IS AN ML X N ARRAY INTO WHICH A IS PACKED                     
C       G(1+J-I,I)=A(I,J),J.GE.I.I.E. THE DIAGONAL BAND OF A IS THE     
C       FIRST ROW OF G.                                                 
C IG    ROW DIMENSION OF G, MUST BE .GE. ML                             
C B     THE MATRIX OF RIGHT HAND SIDES                                  
C NB    THE NUMBER OF RIGHT HAND SIDES                                  
C IB    ROW DIMENSION OF B, MUST BE GREATER  OR EQUAL TO N              
C OUTPUT PARAMETERS                                                     
C B     THE SOLUTION VECTORS X                                          
C G     THE UPPER TRIANGULAR FACTOR OF A                                
C COND  AN ESTIMATE OF THE LOWER BOUND ON THE CONDITION NUMBER OF THE   
C       MATRIX G                                                        
C SCRATCH SPACE ALLOCATED-NONE                                          
C ERROR STATES                                                          
C 1 N.LT.1       FATAL                                                  
C 2 ML.LT.1      FATAL                                                  
C 3 IG.LT.ML     FATAL                                                  
C 4 IB.LT.N      FATAL                                                  
C 5 NB.LT.1      FATAL                                                  
C 10+K   SINGULAR MATRIX OF RANK K     RECOVERABLE                      
C 10+N+K KTH PRINCIPAL MINOR IS NOT POSITIVE DEFINITE RECOVERABLE       
C                                                                       
         INTEGER ML,N,NB,IG,IB                                          
         COMPLEX G(IG,N),B(IB,NB)                                       
         REAL COND                                                      
C CHECK FOR INPUT ERRORS                                                
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(13H CBPSS-N.LT.1,13,1,2)               
C        IF(ML.LT.1) CALL SETERR(14H CBPSS-ML.LT.1,14,2,2)              
C        IF (NB.LT.1) CALL SETERR(14H CBPSS-NB.LT.1,14,5,2)             
C        IF (IG.LT.ML) CALL SETERR(15H CBPSS-IG.LT.ML,15,3,2)           
C        IF (IB.LT.N) CALL SETERR(14H CBPSS-IB.LT.N,14,4,2)             
C/7S                                                                    
         IF (N.LT.1) CALL SETERR(' CBPSS-N.LT.1',13,1,2)                
         IF(ML.LT.1) CALL SETERR(' CBPSS-ML.LT.1',14,2,2)               
         IF (NB.LT.1) CALL SETERR(' CBPSS-NB.LT.1',14,5,2)              
         IF (IG.LT.ML) CALL SETERR(' CBPSS-IG.LT.ML',15,3,2)            
         IF (IB.LT.N) CALL SETERR(' CBPSS-IB.LT.N',14,4,2)              
C/                                                                      
         CALL ENTER(1)                                                  
           CALL   CBPCE(N,ML,G,IG,COND)                                 
         IF (NERROR(NERR).EQ.0) GO TO 10                                
            IF (NERR.LT.10+N) GO TO 5                                   
C/6S                                                                    
C         CALL N5ERR(30H CBPSS-MATRIX NOT POSITIVE DEF,30,NERR,1)       
C/7S                                                                    
          CALL N5ERR(' CBPSS-MATRIX NOT POSITIVE DEF',30,NERR,1)        
C/                                                                      
            GO TO 30                                                    
C/6S                                                                    
C5          CALL N5ERR(22H CBPSS-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
 5          CALL N5ERR(' CBPSS-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
            GO TO 30                                                    
 10      CONTINUE                                                       
            CALL  CBPFS(N,ML,G,IG,B,IB,NB)                              
            CALL  CBPBS(N,ML,G,IG,B,IB,NB)                              
 30      CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
      SUBROUTINE CBPCE(N,ML,G,IG, COND)                                 
C                                                                       
C THIS SUBROUTINE DETERMINES A LOWER BOUND ON THE CONDITION             
C NUMBER OF A BAND POSITIVE DEFINITE MATRIX G                           
C                                                                       
C INPUT PARAMTERS                                                       
C    N      ORDER OF THE MATRIX G                                       
C    G      BAND POSITIVE DEFINITE MATRIX WHOSE CONDITION               
C           NUMBER IS REQUIRED                                          
C    ML     THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL               
C    IG     ROW DIMENSION OF G - MUST BE .GE.ML                         
C                                                                       
C OUTPUT PARAMETERS                                                     
C    G      A DECOMPOSITION OF THE MATRIX G                             
C    COND   AN ESTIMATE OF THE CONDITION NUMBER                         
C           OF THE MATRIX G                                             
C                                                                       
C SCRATCH STORAGE ALLOCATED - N COMPLEX LOCATIONS                       
C ERROR CONDITIONS -                                                    
C       1    N.LT.1     FATAL                                           
C       2    ML.LT.1    FATAL                                           
C       3    IG.LT.ML   FATAL                                           
      INTEGER N,ML,IG                                                   
      REAL  COND, GNORM, CBPNM,R1MACH                                   
      COMPLEX G(IG,N)                                                   
      COMMON /CSTAK/ D                                                  
      DOUBLE PRECISION D(500)                                           
      COMPLEX R(500)                                                    
      EQUIVALENCE (R(1), D(1))                                          
      CALL ENTER(1)                                                     
C/6S                                                                    
C     IF (N.LT.1)  CALL SETERR(13H CBPCE-N.LT.1, 13, 1, 2)              
C     IF (ML.LT.1) CALL SETERR(14H CBPCE-ML.LT.1, 14, 2, 2)             
C     IF (IG.LT.ML)CALL SETERR(15H CBPCE-IG.LT.ML, 15, 3, 2)            
C/7S                                                                    
      IF (N.LT.1)  CALL SETERR(' CBPCE-N.LT.1', 13, 1, 2)               
      IF (ML.LT.1) CALL SETERR(' CBPCE-ML.LT.1', 14, 2, 2)              
      IF (IG.LT.ML)CALL SETERR(' CBPCE-IG.LT.ML', 15, 3, 2)             
C/                                                                      
      GNORM=CBPNM(N,ML,G,IG)                                            
      CALL CBPLD(N,ML,G,IG,0.0)                                         
      IF(NERROR(NERR).EQ.0) GOTO 20                                     
      IF(NERROR(NERR).LT.10+N) GO TO 10                                 
C/6S                                                                    
C     CALL N5ERR(30H CBPCE-MATRIX NOT POSITIVE DEF,30,NERR,1)           
C/7S                                                                    
      CALL N5ERR(' CBPCE-MATRIX NOT POSITIVE DEF',30,NERR,1)            
C/                                                                      
      GO TO 30                                                          
 10   COND = R1MACH(2)                                                  
C/6S                                                                    
C     CALL N5ERR(22H CBPCE-SINGULAR MATRIX,22,NERR,1)                   
C/7S                                                                    
      CALL N5ERR(' CBPCE-SINGULAR MATRIX',22,NERR,1)                    
C/                                                                      
      GO TO 30                                                          
 20   IWORK = ISTKGT(N,5)                                               
      CALL CB4PCE(N,ML,G,IG,GNORM,COND,R(IWORK))                        
 30   CALL LEAVE                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE CB4PCE(N,ML,G,IG,ANORM,COND,Z)                         
      INTEGER N,ML,IG                                                   
      COMPLEX G(IG,N), Z(N)                                             
      REAL ANORM,COND                                                   
      REAL YNORM,SCASUM,S,SM                                            
      COMPLEX T,CDOTU,WKM,WK,EK,CSIGN1,Z1,Z2                            
      INTEGER ML1,J,K,KP1,JEND,JK,NUMELE,NM1                            
      REAL R1MACH,GREAT,BIG,BIG1                                        
      CSIGN1(Z1,Z2)=CABS1(Z1)*(Z2/CABS1(Z2))                            
C SOLVE A(TRANSPOSE)W = E                                               
C WHERE E IS CHOSEN TO CAUSE MAXIMUM LOCAL GROWTH                       
C IN THE COMPONENTS OF W                                                
      ML1 = ML - 1                                                      
      BIG1=SQRT(R1MACH(2))/FLOAT(N)                                     
      BIG=BIG1                                                          
      IF (ANORM.GT.1.0)BIG=BIG1/ANORM                                   
      IF (BIG.LT.1.0)BIG=1.0                                            
      NM1=N-1                                                           
      EK = CMPLX(1.0,0.0)                                               
      DO  2 J = 1, N                                                    
         Z(J) = (0.0,0.0)                                               
  2   CONTINUE                                                          
      DO 30 K=1,N                                                       
        IF (CABS1(Z(K)) .NE. 0.0) EK=CSIGN1(EK,-Z(K))                   
        IF (CABS1(EK-Z(K)) .LE. REAL(G(1,K))) GO TO 20                  
           S=REAL(G(1,K))/CABS1(EK-Z(K))                                
           CALL CSSCAL(N,S,Z,1)                                         
           EK=CMPLX(S,0.0E0)*EK                                         
 20     CONTINUE                                                        
        WK=EK - Z(K)                                                    
        WKM=-EK-Z(K)                                                    
        S = CABS1(WK)                                                   
        SM = CABS1(WKM)                                                 
        KP1=K+1                                                         
        JEND= MIN0(K+ML1, N)                                            
        IF (KP1.GT.JEND) GO TO 28                                       
        JK = 2                                                          
        DO 24 J=KP1,JEND                                                
          SM = SM + CABS1(Z(J) + WKM*CONJG(G(JK,K)))                    
          Z(J) = Z(J) + WK * CONJG(G(JK,K))                             
          S = S + CABS1(Z(J))                                           
          JK = JK + 1                                                   
 24    CONTINUE                                                         
       IF ( S .GE. SM) GO TO 28                                         
          T= WKM - WK                                                   
          WK = WKM                                                      
          JK = 2                                                        
          DO 26 J=KP1,JEND                                              
             Z(J) = Z(J) + T*CONJG(G(JK,K))                             
             JK = JK + 1                                                
 26       CONTINUE                                                      
 28    CONTINUE                                                         
       Z(K)=(1.0,0.0)                                                   
       IF(REAL(G(1,K)).NE.0.0) Z(K) = WK/G(1,K)                         
 30    CONTINUE                                                         
       S= 1.0/SCASUM(N,Z,1)                                             
       CALL CSSCAL(N,S,Z,1)                                             
C                                                                       
C SOLVE W=L(TRANSPOSE)Y FOR Y                                           
C                                                                       
      IF (ML.EQ.1) GO TO 100                                            
      DO  12 KB = 1, N                                                  
         K = N+1-KB                                                     
         NUMELE = MIN0(ML1,N-K)                                         
         IF(NUMELE.GT.0)Z(K) = Z(K) - CDOTU(NUMELE,G(2,K),1,Z(K+1),1)   
         S = CABS1(Z(K))                                                
         IF (S .LE. BIG) GOTO 11                                        
         S = 1.0/S                                                      
         CALL CSSCAL(N,S,Z,1)                                           
 11      CONTINUE                                                       
 12      CONTINUE                                                       
         S=1.0/SCASUM(N,Z,1)                                            
         CALL CSSCAL(N,S,Z,1)                                           
 100  YNORM = 1.0                                                       
C                                                                       
C   SOLVE LW=Y FOR W                                                    
C                                                                       
       IF (ML.EQ.1) GO TO 16                                            
       NP1=N+1                                                          
       DO 40 K=1,NM1                                                    
          T=-Z(K)                                                       
          IF (CABS1(T).LT.BIG) GO TO 29                                 
            S=1.0/CABS1(T)                                              
            YNORM=YNORM*S                                               
            CALL CSSCAL(N,S,Z,1)                                        
  29      CONTINUE                                                      
          IEND=MIN0(NP1-K,ML)                                           
          L=K+1                                                         
          IF(IEND.LT.2) GO TO 40                                        
          DO 31 I=2,IEND                                                
             Z(L)=Z(L)+T*CONJG(G(I,K))                                  
             L=L+1                                                      
  31      CONTINUE                                                      
  40   CONTINUE                                                         
       S = 1.0/SCASUM(N,Z,1)                                            
       IF (S.GT.1.0) GO TO 16                                           
       CALL CSSCAL(N,S,Z,1)                                             
       YNORM = YNORM*S                                                  
C                                                                       
C   SOLVEL(TRANSPOSE)* Z = W                                            
C                                                                       
 16    DO  50 KB = 1, N                                                 
         K = N+1-KB                                                     
         IF (REAL(G(1,K)).GE.CABS1(Z(K))) GO TO 48                      
              S=CABS1(G(1,K)/Z(K))                                      
              CALL CSSCAL(N,S,Z,1)                                      
              YNORM=YNORM*S                                             
 48       T=(1.0,0.0)                                                   
         IF (REAL(G(1,K)).NE.0.0)T=Z(K)/G(1,K)                          
         NUMELE = MIN0(ML1,N-K)                                         
         Z(K)=T                                                         
         IF (NUMELE.GT.0)Z(K)=T-CDOTU(NUMELE,G(2,K),1,Z(K+1),1)         
 50      CONTINUE                                                       
C                                                                       
C    MAKE ZNORM = 1.0                                                   
C                                                                       
       S= 1.0/SCASUM(N,Z,1)                                             
       CALL CSSCAL(N,S,Z,1)                                             
       YNORM = YNORM*S                                                  
C                                                                       
C    CALCULATE FINAL VALUE OF CONDITION NUMBER                          
C                                                                       
       GREAT=R1MACH(2)                                                  
       IF (YNORM.GT.1.0) GO TO 60                                       
       IF (ANORM.LE.YNORM*GREAT) GO TO 60                               
       COND=GREAT                                                       
       RETURN                                                           
 60    COND=ANORM/YNORM                                                 
       RETURN                                                           
       END                                                              
        SUBROUTINE   CBPLE(N,ML,G,IG,B,IB,NB)                           
C                                                                       
C THIS SUBROUTINE SOLVES AX= B WHERE A IS A BANDED HERMITIAN            
C POSITIVE DEFINITE MATRIX. IT USES GAUSSIAN ELIMINATION                
C WITHOUT PIVOTING                                                      
C INPUT PARAMETERS                                                      
C N     ORDER OF THE SYSTEM                                             
C ML    THE NUMBER OF BANDS ON AND BELOW THE DIAGONAL                   
C G     G IS AN ML X N ARRAY INTO WHICH A IS PACKED                     
C       G(1+J-I,I)=A(I,J),J.GE.I.I.E. THE DIAGONAL BAND OF A IS THE     
C       FIRST ROW OF G.                                                 
C IG    ROW DIMENSION OF G, MUST BE .GE. ML                             
C B     THE MATRIX OF RIGHT HAND SIDES                                  
C NB    THE NUMBER OF RIGHT HAND SIDES                                  
C IB    ROW DIMENSION OF B, MUST BE GREATER  OR EQUAL TO N              
C OUTPUT PARAMETERS                                                     
C B     THE SOLUTION VECTORS X                                          
C G     THE UPPER TRIANGULAR FACTOR OF A                                
C SCRATCH SPACE ALLOCATED-NONE                                          
C ERROR STATES                                                          
C 1 N.LT.1       FATAL                                                  
C 2 ML.LT.1      FATAL                                                  
C 3 IG.LT.ML     FATAL                                                  
C 4 IB.LT.N      FATAL                                                  
C 5 NB.LT.1        FATAL                                                
C 10+K   SINGULAR MATRIX OF RANK K     RECOVERABLE                      
C 10+N+K KTH PRINCIPAL MINOR IS NOT POSITIVE DEFINITE RECOVERABLE       
C                                                                       
         INTEGER ML,N,NB,IG,IB                                          
         COMPLEX G(IG,N),B(IB,NB)                                       
C CHECK FOR INPUT ERRORS                                                
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(13H CBPLE-N.LT.1,13,1,2)               
C        IF(ML.LT.1) CALL SETERR(14H CBPLE-ML.LT.1,14,2,2)              
C        IF (NB.LT.1) CALL SETERR(14H CBPLE-NB.LT.1,14,5,2)             
C        IF (IG.LT.ML) CALL SETERR(15H CBPLE-IG.LT.ML,15,3,2)           
C        IF (IB.LT.N) CALL SETERR(14H CBPLE-IB.LT.N,14,4,2)             
C/7S                                                                    
         IF (N.LT.1) CALL SETERR(' CBPLE-N.LT.1',13,1,2)                
         IF(ML.LT.1) CALL SETERR(' CBPLE-ML.LT.1',14,2,2)               
         IF (NB.LT.1) CALL SETERR(' CBPLE-NB.LT.1',14,5,2)              
         IF (IG.LT.ML) CALL SETERR(' CBPLE-IG.LT.ML',15,3,2)            
         IF (IB.LT.N) CALL SETERR(' CBPLE-IB.LT.N',14,4,2)              
C/                                                                      
         CALL ENTER(1)                                                  
           CALL  CBPDC(N,ML,G,IG)                                       
         IF (NERROR(NERR).EQ.0) GO TO 10                                
            IF (NERR.LT.10+N) GO TO 5                                   
C/6S                                                                    
C         CALL N5ERR(30H CBPLE-MATRIX NOT POSITIVE DEF,30,NERR,1)       
C/7S                                                                    
          CALL N5ERR(' CBPLE-MATRIX NOT POSITIVE DEF',30,NERR,1)        
C/                                                                      
            GO TO 30                                                    
C/6S                                                                    
C5          CALL N5ERR(22H CBPLE-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
 5          CALL N5ERR(' CBPLE-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
            GO TO 30                                                    
 10      CONTINUE                                                       
            CALL  CBPFS(N,ML,G,IG,B,IB,NB)                              
            CALL  CBPBS(N,ML,G,IG,B,IB,NB)                              
 30      CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
          SUBROUTINE   CBPDC(N,ML,G,IG)                                 
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED POSITIVE DEFINITE HERMITIAN MATRIX USING GAUSSIAN              
C ELIMINATION WITHOUT PIVOTING.                                         
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF NONZERO ELEMENTS ON OR BELOW                
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C G       THE UPPER TRIANGULAR PORTION OF THE A MATRIX                  
C         STORED AS AN IG X N ARRAY WITH G(1+J-I,I)=A(I,J)              
C         I.E. THE DIAGONAL  OF THE BAND MATRIX IS THE                  
C         FIRST ROW OF G, THE FIRST SUPER DIAGONAL IS                   
C         THE SECOND ROW                                                
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN ML                 
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   IG.LT.ML    FATAL                                                 
C 10+K   SINGULAR MATRIX OF RANK K    RECOVERABLE                       
C 10+N+K KTH PRINCIPAL MINOR IS NOT POSITIVE DEFINITE-RECOVERABLE       
           INTEGER IG                                                   
           INTEGER N,ML                                                 
           COMPLEX G(IG,N)                                              
           REAL EPS                                                     
          REAL R1MACH,CBPNM                                             
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H CBPDC-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H CBPDC-ML.LT.1,14,2,2)                
C      IF (IG.LT.ML) CALL SETERR(15H CBPDC-IG,LT.ML,15,3,2)             
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' CBPDC-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR(' CBPDC-ML.LT.1',14,2,2)                 
       IF (IG.LT.ML) CALL SETERR(' CBPDC-IG,LT.ML',15,3,2)              
C/                                                                      
       IF (ML.EQ.1) RETURN                                              
       CALL ENTER(1)                                                    
         EPS=CBPNM(N,ML,G,IG)*R1MACH(4)                                 
           CALL   CBPLD(N,ML,G,IG,EPS)                                  
         IF (NERROR(NERR).EQ.0) GO TO 30                                
            IF (NERR.LT.10+N) GO TO 5                                   
C/6S                                                                    
C         CALL N5ERR(30H CBPDC-MATRIX NOT POSITIVE DEF,30,NERR,1)       
C/7S                                                                    
          CALL N5ERR(' CBPDC-MATRIX NOT POSITIVE DEF',30,NERR,1)        
C/                                                                      
            GO TO 30                                                    
C/6S                                                                    
C5          CALL N5ERR(22H CBPDC-SINGULAR MATRIX,22,NERR,1)             
C/7S                                                                    
 5          CALL N5ERR(' CBPDC-SINGULAR MATRIX',22,NERR,1)              
C/                                                                      
 30       CALL LEAVE                                                    
          RETURN                                                        
          END                                                           
         REAL FUNCTION CBPNM(N,ML,G,IG)                                 
C                                                                       
C  COMPUTE THE MAXIMUM COLUMN SUM (1-NORM) OF A BAND POSITIVE           
C  DEFINITE MATRIX                                                      
C                                                                       
C                                                                       
      INTEGER N,ML,IG                                                   
      COMPLEX G(IG,N)                                                   
      REAL SUM                                                          
C/6S                                                                    
C        IF (N.LT.1) CALL SETERR(12HCBPNM-N.LT.1,12,1,2)                
C        IF (ML.LT.1) CALL SETERR(13HCBPNM-ML.LT.1,13,2,2)              
C        IF (IG.LT.ML) CALL SETERR(14HCBPNM-IG.LT.ML,14,3,2)            
C/7S                                                                    
         IF (N.LT.1) CALL SETERR('CBPNM-N.LT.1',12,1,2)                 
         IF (ML.LT.1) CALL SETERR('CBPNM-ML.LT.1',13,2,2)               
         IF (IG.LT.ML) CALL SETERR('CBPNM-IG.LT.ML',14,3,2)             
C/                                                                      
      CBPNM =0.0E0                                                      
      NMML = N-ML                                                       
C COMPUTE SUM OF COLUMN ELEMENTS STORED AS A COLUMN IN G                
      JE = ML                                                           
      DO 4 I=1,N                                                        
         SUM = 0.0E0                                                    
         DO 1 J = 1,JE                                                  
 1          SUM = SUM + CABS(G(J,I))                                    
         IF ( NMML.LT.I) JE = JE - 1                                    
C COMPUTE SUM OF COLUMN ELEMENTS STORED ON DIAGONAL IN G                
      K = I-1                                                           
      L = 2                                                             
 2    IF ( (L.GT.ML) .OR. (K.LT.1)  ) GO TO 3                           
      SUM = SUM + CABS(G(L,K))                                          
      K = K-1                                                           
      L = L+1                                                           
      GO TO 2                                                           
 3    IF (SUM.GT.CBPNM) CBPNM = SUM                                     
 4    CONTINUE                                                          
      RETURN                                                            
      END                                                               
          SUBROUTINE   CBPLD(N,ML,G,IG,EPS)                             
C                                                                       
C THIS SUBROUTINE DETERMINES THE LU DECOMPOSITION OF A                  
C BANDED POSITIVE DEFINITE HERMITIAN MATRIX USING GUASSIAN              
C ELIMINATION WITHOUT PIVOTING.                                         
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE MATRIX                                        
C ML      MAXIMUM NUMBER OF NONZERO ELEMENTS ON OR BELOW                
C         THE DIAGONAL IN ANY COLUMN OF THE MATRIX                      
C G       THE UPPER TRIANGULAR PORTION OF THE A MATRIX                  
C         STORED AS AN IG X N ARRAY WITH G(1+J-I,I)=A(I,J)              
C         I.E. THE DIAGONAL  OF THE BAND MATRIX IS THE                  
C         FIRST ROW OF G, THE FIRST SUPPER DIAGONAL IS                  
C         THE SECOND ROW                                                
C IG      ROW DIMENSION OF IG ,MUST NOT BE LESS THAN ML                 
C EPS     IF THE DIAGONAL OF D IS LESS THAN OR EQUAL TO EPS             
C         THE MATRIX IS CONSIDERED SINGULAR                             
C OUTPUT PARAMETERS                                                     
C G       THE UPPER TRIANGULAR BAND FACTOR OF A                         
C SCRATCH STORAGE ALLOCATED-NONE                                        
C ERROR STATES                                                          
C 1   N.LT.1      FATAL                                                 
C 2   ML.LT.1     FATAL                                                 
C 3   IG.LT.ML    FATAL                                                 
C 10+K   SINGULAR MATRIX OF RANK K    RECOVERABLE                       
C 10+N+K KTH PRINCIPAL MINOR IS NOT POSITIVE DEFINITE-RECOVERABLE       
           INTEGER IG                                                   
           INTEGER N,ML                                                 
           COMPLEX G(IG,N)                                              
           REAL EPS                                                     
           COMPLEX T,X                                                  
           REAL XX                                                      
C                                                                       
C CHECK FOR INPUT ERRORS                                                
C                                                                       
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H CBPLD-N.LT.1,13,1,2)                  
C      IF (ML.LT.1)CALL SETERR(14H CBPLD-ML.LT.1,14,2,2)                
C      IF (IG.LT.ML) CALL SETERR(15H CBPLD-IG.LT.ML,15,3,2)             
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' CBPLD-N.LT.1',13,1,2)                   
       IF (ML.LT.1)CALL SETERR(' CBPLD-ML.LT.1',14,2,2)                 
       IF (IG.LT.ML) CALL SETERR(' CBPLD-IG.LT.ML',15,3,2)              
C/                                                                      
       CALL ENTER(1)                                                    
       IERR=0                                                           
       M1=ML-1                                                          
       IEND=MIN0(M1,N)                                                  
C                                                                       
C ZERO OUT LOWER RHS WART                                               
C                                                                       
       NP1=N+1                                                          
       IF(IEND.LT.1) GO TO 61                                           
       DO 60 I=1,IEND                                                   
          JBEG=I+1                                                      
          NP1MI=NP1-I                                                   
          DO 50 J=JBEG,ML                                               
             G(J,NP1MI)=CMPLX(0.E0,0.E0)                                
 50      CONTINUE                                                       
 60    CONTINUE                                                         
 61    DO 200 K=1,N                                                     
        X=G(1,K)                                                        
        XX=REAL(X)                                                      
          IF (XX.GT.EPS) GO TO 90                                       
             IF (XX.LT.0.D0) GO TO 70                                   
             G(1,K)=CMPLX(EPS,0.E0)                                     
             X=G(1,K)                                                   
             IF (CABS1(X).EQ.0.E0)X=CMPLX(1.E0,0.0)                     
C/6S                                                                    
C            IF (IERR.EQ.0)                                             
C    1       CALL SETERR(22H CBPLD-SINGULAR MATRIX,22,9+K,1)            
C/7S                                                                    
             IF (IERR.EQ.0)                                             
     1       CALL SETERR(' CBPLD-SINGULAR MATRIX',22,9+K,1)             
C/                                                                      
             IERR=1                                                     
             GO TO 90                                                   
 70       CALL ERROFF                                                   
C/6S                                                                    
C         CALL SETERR(30H CBPLD-MATRIX NOT POSITIVE DEF,30,N+K+10,1)    
C/7S                                                                    
          CALL SETERR(' CBPLD-MATRIX NOT POSITIVE DEF',30,N+K+10,1)     
C/                                                                      
             GOTO 210                                                   
 90       CONTINUE                                                      
          IF (K.EQ.N) GO TO 200                                         
            IEND=MIN0(N-K,M1)                                           
          IF (IEND.LT.1) GO TO 200                                      
            JEND=ML                                                     
          DO 170 I=1,IEND                                               
             T=CONJG(G(I+1,K)/X)                                        
             KPI=K+I                                                    
             JEND=JEND-1                                                
             DO 140 J=1,JEND                                            
                JPI=J+I                                                 
                G(J,KPI)=G(J,KPI)-T*G(JPI,K)                            
 140         CONTINUE                                                   
             G(I+1,K)=T                                                 
 170      CONTINUE                                                      
 200   CONTINUE                                                         
 210   CALL LEAVE                                                       
       RETURN                                                           
       END                                                              
         SUBROUTINE  CBPFS(N,ML,G,IG,B,IB,NB)                           
C                                                                       
C THIS SUBROUTINE SOLVES LX=B WHERE L IS A LOWER TRIANGULAR             
C BAND MATRIX                                                           
C INPUT PARAMETERS                                                      
C N      THE ORDER OF THE SYSTEM                                        
C ML     THE NUMBER OF NONZERO ELEMENTS OF L ON AND BELOW               
C        THE DIAGONG,THE ROW DIMENSION OF G                             
C G     AN IG X N MATRIX CONTAINING THE LOWERTRIANGULAR                 
C        BAND MATRIX. NOTE THAT G(1+I-J,I)=L(I,J)                       
C IG    ROW DIMENSION OF G                                              
C B      MATRIX OF RIGHT HAND SIDES                                     
C IB     ROW DIMENSION OF B                                             
C NB     NUMBER OF RIGHT HAND SIDES                                     
C OUTPUT PARAMETERS                                                     
C B      THE SOLUTION X                                                 
C SCRATCH SPACE GLOCATED - NONE                                         
C ERROR CONDITIONS                                                      
C 1     N.LT.1     FATG                                                 
C 2     ML.LT.1     FATG                                                
C 3     IG.LT.ML   FATG                                                 
C 4     IB.LT.N     FATG                                                
C 5     NB.LT.1     FATG                                                
C                                                                       
        INTEGER IG,N,ML                                                 
        COMPLEX G(IG,N),B(IB,NB)                                        
        COMPLEX X                                                       
C CHECK ERROR CONDITIONS                                                
C/6S                                                                    
C      IF (N.LT.1)CALL SETERR(13H CBPFS-N.LT.1,13,1,2)                  
C      IF( ML.LT.1)CALL SETERR(14H CBPFS-ML.LT.1,14,2,2)                
C      IF (IG.LT.ML)CALL SETERR(15H CBPFS-IG.LT.ML,15,3,2)              
C      IF (IB.LT.N) CALL SETERR(14H CBPFS-IB.LT.N,14,4,2)               
C      IF (NB.LT.1) CALL SETERR(14H CBPFS-NB.LT.1,14,5,2)               
C/7S                                                                    
       IF (N.LT.1)CALL SETERR(' CBPFS-N.LT.1',13,1,2)                   
       IF( ML.LT.1)CALL SETERR(' CBPFS-ML.LT.1',14,2,2)                 
       IF (IG.LT.ML)CALL SETERR(' CBPFS-IG.LT.ML',15,3,2)               
       IF (IB.LT.N) CALL SETERR(' CBPFS-IB.LT.N',14,4,2)                
       IF (NB.LT.1) CALL SETERR(' CBPFS-NB.LT.1',14,5,2)                
C/                                                                      
       IF (ML.EQ.1) RETURN                                              
       CALL ENTER(1)                                                    
       M1=ML-1                                                          
       DO 80 J=1,NB                                                     
       DO 60 K=1,N                                                      
          X=B(K,J)                                                      
 10         IF (K.EQ.N) GO TO 80                                        
            KP1=K+1                                                     
            IEND=M1+K                                                   
             II=1                                                       
            IF (N.LT.IEND)IEND=N                                        
            DO 50 I=KP1,IEND                                            
                 II=II+1                                                
                 B(I,J)=B(I,J)-CONJG(G(II,K))*X                         
 50         CONTINUE                                                    
 60       CONTINUE                                                      
 80       CONTINUE                                                      
 100     CALL LEAVE                                                     
          RETURN                                                        
         END                                                            
              SUBROUTINE  CBPBS(N,ML,G,IG,B,IB,NB)                      
C                                                                       
C THIS SUBROUTINE SOLVES DTX = B WHERE T IS A                           
C UNIT UPPER TRIANGULAR MATRIX AND D IS A DIAGONAL                      
C MATRIX                                                                
C                                                                       
C INPUT PARAMETERS                                                      
C N         THE ORDER OF THE SYSTEM                                     
C G         AN IG X N ARRAY CONTAINING THE UPPERTRIANGULAR              
C           MATRIX T WHERE G(1+J-I,I)=T(I,J)                            
C           AND THE DIAGONAL MATRIX D IN ITS FIRST ROW                  
C IG        ROW DIMENSION OF G                                          
C B         THE RIGHT HAND SIDE;OVERWRITTEN ON OUTPUT                   
C IB        ROW DIMENSION OF THE B MATRIX                               
C NB        NUMBER OF RIGHT HAND SIDES                                  
C ML        THE NUMBER OF NONZERO DIAGONALS OF T                        
C OUTPUT PARAMETERS                                                     
C B         A VECTOR CONAINING THE SOLUTION X                           
C SCRATCH SPACE NEEDED -NONE                                            
C ERROR CONDITIONS                                                      
C   1       N.LT.1        FATAL                                         
C   2       ML.LT.1       FATAL                                         
C   4       IB.LT.N       FATAL                                         
C  5        NB.LT.1       FATAL                                         
C   3       ML.GT.IG      FATAL                                         
C   10+K    SINGULAR G RANK K  RECOVERABLE                              
        INTEGER N,IG,ML                                                 
        COMPLEX G(IG,N),B(IB,NB)                                        
        COMPLEX X                                                       
C/6S                                                                    
C       IF (N.LT.1) CALL SETERR(13H CBPBS-N.LT.1,13,1,2)                
C       IF (IG.LT.1) CALL SETERR(14H CBPBS-IG.LT.1,14,2,2)              
C       IF (ML.LT.1) CALL SETERR(14H CBPBS-ML.LT.1,14,2,2)              
C       IF (ML.GT.IG) CALL SETERR(15H CBPBS-ML.GT.IG,15,3,2)            
C       IF(IB.LT.N) CALL SETERR(14H CBPBS-IB.LT.N,14,4,2)               
C       IF(NB.LT.1) CALL SETERR(14H CBPBS-NB.LT.1,14,5,2)               
C/7S                                                                    
        IF (N.LT.1) CALL SETERR(' CBPBS-N.LT.1',13,1,2)                 
        IF (IG.LT.1) CALL SETERR(' CBPBS-IG.LT.1',14,2,2)               
        IF (ML.LT.1) CALL SETERR(' CBPBS-ML.LT.1',14,2,2)               
        IF (ML.GT.IG) CALL SETERR(' CBPBS-ML.GT.IG',15,3,2)             
        IF(IB.LT.N) CALL SETERR(' CBPBS-IB.LT.N',14,4,2)                
        IF(NB.LT.1) CALL SETERR(' CBPBS-NB.LT.1',14,5,2)                
C/                                                                      
        CALL ENTER(1)                                                   
        L=1                                                             
        NP1=N+1                                                         
        DO 100 II=1,N                                                   
            I=NP1-II                                                    
            IF (CABS1(G(1,I)).NE.0.E0) GO TO 40                         
C/6S                                                                    
C              CALL SETERR(22H CBPBS-SINGULAR MATRIX,22,9+I,1)          
C/7S                                                                    
               CALL SETERR(' CBPBS-SINGULAR MATRIX',22,9+I,1)           
C/                                                                      
               GO TO 150                                                
 40     CONTINUE                                                        
        DO 70 J=1,NB                                                    
            B(I,J)=B(I,J)/G(1,I)                                        
            IF (L.LT.2) GO TO 70                                        
            X=B(I,J)                                                    
            KB=I                                                        
            DO 60 K=2,L                                                 
               KB=KB+1                                                  
               X=X-G(K,I)*B(KB,J)                                       
 60          CONTINUE                                                   
            B(I,J)=X                                                    
 70       CONTINUE                                                      
 80         L=MIN0(L+1,ML)                                              
 100     CONTINUE                                                       
 150     CALL LEAVE                                                     
         RETURN                                                         
         END                                                            
       SUBROUTINE CBPML(N,ML,G,IG,X,Y)                                  
C                                                                       
C BAND SYMMETRIC POSITIVE DEFINITE MULTIPLICATION                       
C                                                                       
C THIS SUBROUTINE MULTIPLIES A VECTOR X BY A SYMMETRIC                  
C BAND POSITIVE MATRIX A PACKED INTO G                                  
C                                                                       
C INPUT PARAMETERS                                                      
C N       ORDER OF THE MATRIX                                           
C ML      NUMBER OF NONZERO DIAGONALS ON AND BELOW THE DIAGONAL         
C         OF A                                                          
C G       MATRIX INTO WHICH A IS PACKED-G(J-I+1,I)=A(I,J)               
C IG      ROW DIMENSION OF G                                            
C X       VCOMPLEX VECTOR OF LENGTH N                                   
C OUTPUT PARAMTERS                                                      
C Y       A TIMES X                                                     
C                                                                       
C ERROR CONDITIONS                                                      
C 1  N<1                                                                
C 2  ML.LT.1                                                            
C 3  IG.LT.ML                                                           
           COMPLEX G(IG,N),X(N),Y(N)                                    
C/6S                                                                    
C          IF(N.LT.1) CALL SETERR(13HCBPML-N.LT.1 ,13,1,2)              
C          IF(ML.LT.1) CALL SETERR(13HCBPML-ML.LT.1,13,2,2)             
C          IF(IG.LT.ML)CALL SETERR(14HCBPML-IG.LT.ML,14,3,2)            
C/7S                                                                    
           IF(N.LT.1) CALL SETERR('CBPML-N.LT.1 ',13,1,2)               
           IF(ML.LT.1) CALL SETERR('CBPML-ML.LT.1',13,2,2)              
           IF(IG.LT.ML)CALL SETERR('CBPML-IG.LT.ML',14,3,2)             
C/                                                                      
           DO 10 I=1,N                                                  
              Y(I)=G(1,I)*X(I)                                          
 10        CONTINUE                                                     
           IF(ML.EQ.1) RETURN                                           
           DO 30 J=2,ML                                                 
              JEND=N+1-J                                                
              JM1=J-1                                                   
              DO 20 I=1,JEND                                            
                 IPJM1=I+JM1                                            
                 Y(I)=Y(I)+CONJG(G(J,I))*X(IPJM1)                       
                 Y(IPJM1)=Y(IPJM1)+G(J,I)*X(I)                          
 20           CONTINUE                                                  
 30        CONTINUE                                                     
           RETURN                                                       
           END                                                          
C****END OF ROUTINES FOR PORT 3 REST OF LINEAR ALGEBRA CHAPTER**********
