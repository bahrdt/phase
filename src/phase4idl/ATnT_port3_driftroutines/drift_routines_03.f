      REAL FUNCTION EEBSF(K,T1,N1,A1,T2,N2,A2)                          
C                                                                       
C                                                                       
C PURPOSE - TO ESTIMATE THE ERROR IN A B-SPLINE APPROXIMATION.          
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A B-SPLIN      
C            APPROXIMATION TO A FUNCTION.                               
C                                                                       
C METHOD -                                                              
C                                                                       
C   LET (K,T1,N1,A1) REPRESENT AN APPROXIMATION Y1 TO SOME FUNCTIO      
C   USING B-SPLINES ON THE MESH T1 WITH COEFFICIENTS A1.                
C   LET (K,T2,N2,A2) REPRESENT A REFINEMENT Y2 OF THE (K,T1,N1,A1)      
C   APPROXIMATION.                                                      
C                                                                       
C   LET T BE THE UNION OF THE MESHES T1 AND T2.                         
C                                                                       
C   LET MEST = (K-1)*PI+1 .                                             
C                                                                       
C   THE ERROR IN THE (K,T2,N2,A2) APPROXIMATION IS ESTIMATED            
C   BY SEARCHING EACH T INTERVAL AT A PATTERN OF MEST POINTS XEST       
C                                                                       
C      MAX(ABS(Y2-Y1))/((H1(I)/H2(I))**K-1)                             
C                                                                       
C   WHERE H1(I) IS DEFINED TO BE THE LENGTH OF THE LARGEST MESH IN      
C   OF T1 INTERSECTING (T(I),T(I+1)). SIMILARLY FOR H2(I).              
C                                                                       
C   THE PATTERN OF POINTS XEST USED IS COS(THETA) WHERE THE MEST T      
C   VALUES ARE UNIFORMLY DISTRIBUTED ON (-PI,0).                        
C                                                                       
C   THIS SEARCH PATTERN IS SUFFICIENT TO GUARANTEE THAT THE ERROR       
C   ESTIMATE IS COMPUTED ACCURATE TO WITHIN A FACTOR OF 2.              
C                                                                       
C INPUT -                                                               
C                                                                       
C   K    - THE ORDER OF THE B-SPLINES USED.                             
C          2 .LE. K IS ASSUMED.                                         
C   T1   - THE UNREFINED B-SPLINE MESH.                                 
C   N1   - THE NUMBER OF POINTS IN THE T1 MESH.                         
C   A1   - THE UNREFINED B-SPLINE COEFFICIENTS.                         
C   T2   - THE REFINED B-SPLINE MESH.                                   
C   N2   - THE NUMBER OF POINTS IN THE T2 MESH.                         
C   A2   - THE REFINED B-SPLINE COEFFICIENTS.                           
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   PROCEDURE VALUE - THE ESTIMATED ERROR IN Y1.                        
C                                                                       
C SCRATCH SPACE ALLOCATED - 5*K + MEST + 2 REAL WORDS.                  
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - N1.LE.K.                                                        
C   3 - N2.LE.K.                                                        
C   4 - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2)).                           
C   5 - T1 NOT MONOTONE INCREASING.                                     
C   6 - T2 NOT MONOTONE INCREASING.                                     
C                                                                       
      INTEGER I                                                         
      REAL X(2),EREST1(2),EREST2(2),EEBSI                               
      INTEGER K,N1,N2                                                   
      REAL T1(N1),A1(1),T2(N2),A2(1)                                    
C                                                                       
C                                                                       
C                                                                       
C REAL A1(N1-K),A2(N2-K)                                                
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15H EEBSF - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR(' EEBSF - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N1.GT.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16H EEBSF - N1.LE.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR(' EEBSF - N1.LE.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( N2.GT.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H EEBSF - N2.LE.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' EEBSF - N2.LE.K',16,3,2)                            
C/                                                                      
C                                                                       
 1004 CONTINUE                                                          
      IF( T1(1).EQ.T2(1).AND.T1(N1).EQ.T2(N2) )      GOTO 1006          
C/6S                                                                    
C           CALL SETERR(45H EEBSF - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))
C    *,45,4,2)                                                          
C/7S                                                                    
            CALL SETERR(' EEBSF - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))' 
     *,45,4,2)                                                          
C/                                                                      
C                                                                       
 1006 CONTINUE                                                          
      I21010 = N1-1                                                     
      DO 1008 I = 1, I21010                                             
      IF( T1(I).LE.T1(I+1) )      GOTO 1011                             
C/6S                                                                    
C     CALL SETERR(35H EEBSF - T1 NOT MONOTONE INCREASING,35,5,2)        
C/7S                                                                    
      CALL SETERR(' EEBSF - T1 NOT MONOTONE INCREASING',35,5,2)         
C/                                                                      
 1011 CONTINUE                                                          
      IF( I+K.LE.N1 )      GOTO 1013                                    
      GOTO 1008                                                         
 1013 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T1(IX1005).GT.T1(I) )      GOTO 1015                          
C/6S                                                                    
C     CALL SETERR(35H EEBSF - T1 NOT MONOTONE INCREASING,35,5,2)        
C/7S                                                                    
      CALL SETERR(' EEBSF - T1 NOT MONOTONE INCREASING',35,5,2)         
C/                                                                      
 1015 CONTINUE                                                          
 1008 CONTINUE                                                          
 1009 CONTINUE                                                          
      I21019 = N2-1                                                     
      DO 1017 I = 1, I21019                                             
      IF( T2(I).LE.T2(I+1) )      GOTO 1020                             
C/6S                                                                    
C     CALL SETERR(35H EEBSF - T2 NOT MONOTONE INCREASING,35,6,2)        
C/7S                                                                    
      CALL SETERR(' EEBSF - T2 NOT MONOTONE INCREASING',35,6,2)         
C/                                                                      
 1020 CONTINUE                                                          
      IF( I+K.LE.N2 )      GOTO 1022                                    
      GOTO 1017                                                         
 1022 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T2(IX1005).GT.T2(I) )      GOTO 1024                          
C/6S                                                                    
C     CALL SETERR(35H EEBSF - T2 NOT MONOTONE INCREASING,35,6,2)        
C/7S                                                                    
      CALL SETERR(' EEBSF - T2 NOT MONOTONE INCREASING',35,6,2)         
C/                                                                      
 1024 CONTINUE                                                          
C                                                                       
 1017 CONTINUE                                                          
 1018 CONTINUE                                                          
      X(1) = T1(1)                                                      
      X(2) = T1(N1)                                                     
C                                                                       
      EEBSF = EEBSI(K,T1,N1,A1,T2,N2,A2,X,2,EREST1,EREST2)              
      RETURN                                                            
C                                                                       
      END                                                               
      REAL FUNCTION EEBSI(K,T1,N1,A1,T2,N2,A2,X,NX,EREST1,EREST2)       
C                                                                       
C                                                                       
C PURPOSE - TO ESTIMATE THE ERROR IN A B-SPLINE APPROXIMATION.          
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A B-SPLIN      
C            APPROXIMATION, OVER GIVEN INTERVALS.                       
C                                                                       
C METHOD -                                                              
C                                                                       
C   LET (K,T1,N1,A1) REPRESENT AN APPROXIMATION Y1 TO SOME FUNCTIO      
C   USING B-SPLINES ON THE MESH T1 WITH COEFFICIENTS A1.                
C   LET (K,T2,N2,A2) REPRESENT A REFINEMENT Y2 OF THE (K,T1,N1,A1)      
C   APPROXIMATION.                                                      
C                                                                       
C   LET T BE THE UNION OF THE MESHES T1 AND T2.                         
C                                                                       
C   LET MEST = (K-1)*PI+1 .                                             
C                                                                       
C   THE ERROR IN THE (K,T2,N2,A2) APPROXIMATION IS ESTIMATED ON EA      
C   INTERVAL (X(I),X(I+1)), BY SEACHING AT A PATTERN OF MEST POINT      
C   IN EACH T INTERVAL INTERSECTING IT, TO BE                           
C                                                                       
C      MAX(ABS(Y2-Y1))/((H1(I)/H2(I))**K-1)                             
C                                                                       
C   WHERE H1(I) IS DEFINED TO BE THE LENGTH OF THE LARGEST MESH IN      
C   OF T1 INTERSECTING (X(I),X(I+1)). SIMILARLY FOR H2(I).              
C                                                                       
C   THE PATTERN OF POINTS XEST USED IS COS(THETA) WHERE THE MEST T      
C   VALUES ARE UNIFORMLY DISTRIBUTED ON (-PI,0).                        
C                                                                       
C   THIS SEARCH PATTERN IS SUFFICIENT TO GUARANTEE THAT THE ERROR       
C   ESTIMATE IS COMPUTED ACCURATE TO WITHIN A FACTOR OF 2.              
C                                                                       
C INPUT -                                                               
C                                                                       
C   K    - THE ORDER OF THE B-SPLINES USED.                             
C          2 .LE. K IS ASSUMED.                                         
C   T1   - THE UNREFINED B-SPLINE MESH.                                 
C   N1   - THE NUMBER OF POINTS IN THE T1 MESH.                         
C   A1   - THE UNREFINED B-SPLINE COEFFICIENTS.                         
C   T2   - THE REFINED B-SPLINE MESH.                                   
C   N2   - THE NUMBER OF POINTS IN THE T2 MESH.                         
C   A2   - THE REFINED B-SPLINE COEFFICIENTS.                           
C   X    - (X(I),X(I+1)) GIVES THE I-TH INTERVAL AN ERROR ESTIMATE      
C          DESIRED FOR, I = 1,...,NX-1.                                 
C          X MUST BE MONOTONE INCREASING.                               
C   NX   - THE NUMBER OF POINTS IN X.                                   
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   EREST1 - EREST1(I) IS THE ERROR ESTIMATE FOR THE T1                 
C            APPROXIMATION ON THE I-TH X INTERVAL, I = 1,...,NX-1.      
C            EREST1(I) = R1MACH(2) IS RETURNED IF T2 IS NOT A REFI      
C            OF T1 ON (X(I),X(I+1)).                                    
C            IF X(I) = X(I+1) THEN EREST1(I) IS MEANINGLESS.            
C                                                                       
C            EREST1(NX) = MAX(EREST1(1),...,EREST1(NX-1)).              
C                                                                       
C   EREST2 - EREST2(I) IS THE ERROR ESTIMATE FOR THE T2                 
C            APPROXIMATION ON THE I-TH X INTERVAL, I = 1,...,NX-1.      
C            EREST2(I) = R1MACH(2) IS RETURNED IF T2 IS NOT A REFI      
C            OF T1 ON (X(I),X(I+1)).                                    
C            IF X(I) = X(I+1) THEN EREST2(I) IS MEANINGLESS.            
C                                                                       
C            EREST2(NX) = MAX(EREST2(1),...,EREST2(NX-1)).              
C                                                                       
C   PROCEDURE VALUE - EREST1(NX).                                       
C                                                                       
C SCRATCH SPACE ALLOCATED - 5*K + MEST + NX REAL WORDS.                 
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - N1.LE.K.                                                        
C   3 - N2.LE.K.                                                        
C   4 - NX.LT.2.                                                        
C   5 - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2)).                           
C   6 - (X(1),X(NX)) NOT PART OF (T1(1),T1(N1)).                        
C   7 - T1 NOT MONOTONE INCREASING.                                     
C   8 - T2 NOT MONOTONE INCREASING.                                     
C   9 - X IS NOT MONOTONE INCREASING.                                   
C                                                                       
      INTEGER I,MEST                                                    
      REAL EEBSM                                                        
      INTEGER K,N1,N2,NX                                                
      REAL T1(N1),A1(1),T2(N2),A2(1),X(NX),EREST1(NX),EREST2(NX)        
C                                                                       
C                                                                       
C                                                                       
C REAL A1(N1-K),A2(N2-K)                                                
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15H EEBSI - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR(' EEBSI - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N1.GT.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16H EEBSI - N1.LE.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR(' EEBSI - N1.LE.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( N2.GT.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H EEBSI - N2.LE.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' EEBSI - N2.LE.K',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( NX.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(16H EEBSI - NX.LT.2,16,4,2)                           
C/7S                                                                    
      CALL SETERR(' EEBSI - NX.LT.2',16,4,2)                            
C/                                                                      
C                                                                       
 1006 CONTINUE                                                          
      IF( T1(1).EQ.T2(1).AND.T1(N1).EQ.T2(N2) )      GOTO 1008          
C/6S                                                                    
C           CALL SETERR(45H EEBSI - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))
C    *,45,5,2)                                                          
C/7S                                                                    
            CALL SETERR(' EEBSI - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))' 
     *,45,5,2)                                                          
C/                                                                      
C                                                                       
 1008 CONTINUE                                                          
      IF( X(1).GE.T1(1).AND.X(NX).LE.T1(N1) )      GOTO 1010            
C/6S                                                                    
C           CALL SETERR(48H EEBSI - (X(1),X(NX)) NOT PART OF (T1(1),T1(N
C    *1)),48,6,2)                                                       
C/7S                                                                    
            CALL SETERR(' EEBSI - (X(1),X(NX)) NOT PART OF (T1(1),T1(N1)
     *)',48,6,2)                                                        
C/                                                                      
C                                                                       
 1010 CONTINUE                                                          
      I21014 = N1-1                                                     
      DO 1012 I = 1, I21014                                             
      IF( T1(I).LE.T1(I+1) )      GOTO 1015                             
C/6S                                                                    
C     CALL SETERR(35H EEBSI - T1 NOT MONOTONE INCREASING,35,7,2)        
C/7S                                                                    
      CALL SETERR(' EEBSI - T1 NOT MONOTONE INCREASING',35,7,2)         
C/                                                                      
 1015 CONTINUE                                                          
      IF( I+K.LE.N1 )      GOTO 1017                                    
      GOTO 1012                                                         
 1017 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T1(IX1005).GT.T1(I) )      GOTO 1019                          
C/6S                                                                    
C     CALL SETERR(35H EEBSI - T1 NOT MONOTONE INCREASING,35,7,2)        
C/7S                                                                    
      CALL SETERR(' EEBSI - T1 NOT MONOTONE INCREASING',35,7,2)         
C/                                                                      
 1019 CONTINUE                                                          
 1012 CONTINUE                                                          
 1013 CONTINUE                                                          
      I21023 = N2-1                                                     
      DO 1021 I = 1, I21023                                             
      IF( T2(I).LE.T2(I+1) )      GOTO 1024                             
C/6S                                                                    
C     CALL SETERR(35H EEBSI - T2 NOT MONOTONE INCREASING,35,8,2)        
C/7S                                                                    
      CALL SETERR(' EEBSI - T2 NOT MONOTONE INCREASING',35,8,2)         
C/                                                                      
 1024 CONTINUE                                                          
      IF( I+K.LE.N2 )      GOTO 1026                                    
      GOTO 1021                                                         
 1026 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T2(IX1005).GT.T2(I) )      GOTO 1028                          
C/6S                                                                    
C     CALL SETERR(35H EEBSI - T2 NOT MONOTONE INCREASING,35,8,2)        
C/7S                                                                    
      CALL SETERR(' EEBSI - T2 NOT MONOTONE INCREASING',35,8,2)         
C/                                                                      
 1028 CONTINUE                                                          
C                                                                       
 1021 CONTINUE                                                          
 1022 CONTINUE                                                          
      I21032 = NX-1                                                     
      DO 1030 I = 1, I21032                                             
      IF( X(I).LE.X(I+1) )      GOTO 1033                               
C/6S                                                                    
C           CALL SETERR(37H EEBSI - X IS NOT MONOTONE INCREASING,37,9,2)
C/7S                                                                    
            CALL SETERR(' EEBSI - X IS NOT MONOTONE INCREASING',37,9,2) 
C/                                                                      
 1033 CONTINUE                                                          
C                                                                       
 1030 CONTINUE                                                          
 1031 CONTINUE                                                          
      MEST = FLOAT(K-1)*4.0E0*ATAN(1.0E0)+1.0E0                         
C                                                                       
      EEBSI = EEBSM(K,T1,N1,A1,T2,N2,A2,X,NX,MEST,EREST1,EREST2)        
      RETURN                                                            
C                                                                       
      END                                                               
      REAL FUNCTION EEBSM(K,T1,N1,A1,T2,N2,A2,X,NX,MEST,EREST1,ERE      
     *ST2)                                                              
C                                                                       
C                                                                       
C PURPOSE - TO ESTIMATE THE ERROR IN A B-SPLINE APPROXIMATION.          
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A B-SPLIN      
C            APPROXIMATION, USING MEST POINTS IN EACH INTERVAL SEA      
C                                                                       
C METHOD -                                                              
C                                                                       
C   LET (K,T1,N1,A1) REPRESENT AN APPROXIMATION Y1 TO SOME FUNCTIO      
C   USING B-SPLINES ON THE MESH T1 WITH COEFFICIENTS A1.                
C   LET (K,T2,N2,A2) REPRESENT A REFINEMENT Y2 OF THE (K,T1,N1,A1)      
C   APPROXIMATION.                                                      
C                                                                       
C   LET T BE THE UNION OF THE MESHES T1 AND T2.                         
C                                                                       
C   THE ERROR IN THE (K,T2,N2,A2) APPROXIMATION IS ESTIMATED ON EA      
C   INTERVAL (X(I),X(I+1)), BY SEACHING AT A PATTERN OF MEST POINT      
C   IN EACH T INTERVAL INTERSECTING IT, TO BE                           
C                                                                       
C      MAX(ABS(Y2-Y1))/((H1(I)/H2(I))**K-1)                             
C                                                                       
C   WHERE H1(I) IS DEFINED TO BE THE LENGTH OF THE LARGEST MESH IN      
C   OF T1 INTERSECTING (X(I),X(I+1)). SIMILARLY FOR H2(I).              
C                                                                       
C   THE PATTERN OF POINTS XEST USED IS COS(THETA) WHERE THE MEST T      
C   VALUES ARE UNIFORMLY DISTRIBUTED ON (-PI,0).                        
C                                                                       
C   THIS SEARCH IS SUFFICIENT TO GUARANTEE THAT THE ERROR ESTIMATE      
C   COMPUTED TO A RELATIVE ACCURACY OF                                  
C                                                                       
C        0.5*(K-1)*PI/(MEST-1)                                          
C                                                                       
C INPUT -                                                               
C                                                                       
C   K    - THE ORDER OF THE B-SPLINES USED.                             
C          2 .LE. K IS ASSUMED.                                         
C   T1   - THE UNREFINED B-SPLINE MESH.                                 
C   N1   - THE NUMBER OF POINTS IN THE T1 MESH.                         
C   A1   - THE UNREFINED B-SPLINE COEFFICIENTS.                         
C   T2   - THE REFINED B-SPLINE MESH.                                   
C   N2   - THE NUMBER OF POINTS IN THE T2 MESH.                         
C   A2   - THE REFINED B-SPLINE COEFFICIENTS.                           
C   X    - (X(I),X(I+1)) GIVES THE I-TH INTERVAL AN ERROR ESTIMATE      
C          DESIRED FOR, I = 1,...,NX-1.                                 
C          X MUST BE MONOTONE INCREASING.                               
C   NX   - THE NUMBER OF POINTS IN X.                                   
C   MEST - THE NUMBER OF POINTS TO BE USED IN SEARCHING EACH T INT      
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   EREST1 - EREST1(I) IS THE ERROR ESTIMATE FOR THE T1                 
C            APPROXIMATION ON THE I-TH X INTERVAL, I = 1,...,NX-1.      
C            EREST1(I) = R1MACH(2) IS RETURNED IF T2 IS NOT A REFI      
C            OF T1 ON (X(I),X(I+1)).                                    
C            IF X(I) = X(I+1) THEN EREST1(I) IS MEANINGLESS.            
C                                                                       
C            EREST1(NX) = MAX(EREST1(1),...,EREST1(NX-1)).              
C                                                                       
C   EREST2 - EREST2(I) IS THE ERROR ESTIMATE FOR THE T2                 
C            APPROXIMATION ON THE I-TH X INTERVAL, I = 1,...,NX-1.      
C            EREST2(I) = R1MACH(2) IS RETURNED IF T2 IS NOT A REFI      
C            OF T1 ON (X(I),X(I+1)).                                    
C            IF X(I) = X(I+1) THEN EREST2(I) IS MEANINGLESS.            
C                                                                       
C            EREST2(NX) = MAX(EREST2(1),...,EREST2(NX-1)).              
C                                                                       
C   PROCEDURE VALUE - EREST1(NX).                                       
C                                                                       
C SCRATCH SPACE ALLOCATED - 5*K + MEST + NX REAL WORDS.                 
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - K.LT.2.                                                        
C    2 - N1.LE.K.                                                       
C    3 - N2.LE.K.                                                       
C    4 - NX.LT.2.                                                       
C    5 - MEST.LT.1.                                                     
C    6 - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2)).                          
C    7 - (X(1),X(NX)) NOT PART OF (T1(1),T1(N1)).                       
C    8 - T1 NOT MONOTONE INCREASING.                                    
C    9 - T2 NOT MONOTONE INCREASING.                                    
C   10 - X IS NOT MONOTONE INCREASING.                                  
C                                                                       
      INTEGER I,IXEST,ISTKGT                                            
      REAL VALUE,EEBSP                                                  
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      REAL WS(500)                                                      
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER K,N1,N2,NX,MEST                                           
      REAL T1(N1),A1(1),T2(N2),A2(1),X(NX),EREST1(NX),EREST2(NX)        
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C REAL A1(N1-K),A2(N2-K)                                                
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15H EEBSM - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR(' EEBSM - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N1.GT.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16H EEBSM - N1.LE.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR(' EEBSM - N1.LE.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( N2.GT.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H EEBSM - N2.LE.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' EEBSM - N2.LE.K',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( NX.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(16H EEBSM - NX.LT.2,16,4,2)                           
C/7S                                                                    
      CALL SETERR(' EEBSM - NX.LT.2',16,4,2)                            
C/                                                                      
 1006 CONTINUE                                                          
      IF( MEST.GE.1 )      GOTO 1008                                    
C/6S                                                                    
C     CALL SETERR(18H EEBSM - MEST.LT.1,18,5,2)                         
C/7S                                                                    
      CALL SETERR(' EEBSM - MEST.LT.1',18,5,2)                          
C/                                                                      
C                                                                       
 1008 CONTINUE                                                          
      IF( T1(1).EQ.T2(1).AND.T1(N1).EQ.T2(N2) )      GOTO 1010          
C/6S                                                                    
C           CALL SETERR(45H EEBSM - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))
C    *,45,6,2)                                                          
C/7S                                                                    
            CALL SETERR(' EEBSM - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))' 
     *,45,6,2)                                                          
C/                                                                      
C                                                                       
 1010 CONTINUE                                                          
      IF( X(1).GE.T1(1).AND.X(NX).LE.T1(N1) )      GOTO 1012            
C/6S                                                                    
C           CALL SETERR(48H EEBSM - (X(1),X(NX)) NOT PART OF (T1(1),T1(N
C    *1)),48,7,2)                                                       
C/7S                                                                    
            CALL SETERR(' EEBSM - (X(1),X(NX)) NOT PART OF (T1(1),T1(N1)
     *)',48,7,2)                                                        
C/                                                                      
C                                                                       
 1012 CONTINUE                                                          
      I21016 = N1-1                                                     
      DO 1014 I = 1, I21016                                             
      IF( T1(I).LE.T1(I+1) )      GOTO 1017                             
C/6S                                                                    
C     CALL SETERR(35H EEBSM - T1 NOT MONOTONE INCREASING,35,8,2)        
C/7S                                                                    
      CALL SETERR(' EEBSM - T1 NOT MONOTONE INCREASING',35,8,2)         
C/                                                                      
 1017 CONTINUE                                                          
      IF( I+K.LE.N1 )      GOTO 1019                                    
      GOTO 1014                                                         
 1019 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T1(IX1005).GT.T1(I) )      GOTO 1021                          
C/6S                                                                    
C     CALL SETERR(35H EEBSM - T1 NOT MONOTONE INCREASING,35,8,2)        
C/7S                                                                    
      CALL SETERR(' EEBSM - T1 NOT MONOTONE INCREASING',35,8,2)         
C/                                                                      
 1021 CONTINUE                                                          
 1014 CONTINUE                                                          
 1015 CONTINUE                                                          
      I21025 = N2-1                                                     
      DO 1023 I = 1, I21025                                             
      IF( T2(I).LE.T2(I+1) )      GOTO 1026                             
C/6S                                                                    
C     CALL SETERR(35H EEBSM - T2 NOT MONOTONE INCREASING,35,9,2)        
C/7S                                                                    
      CALL SETERR(' EEBSM - T2 NOT MONOTONE INCREASING',35,9,2)         
C/                                                                      
 1026 CONTINUE                                                          
      IF( I+K.LE.N2 )      GOTO 1028                                    
      GOTO 1023                                                         
 1028 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T2(IX1005).GT.T2(I) )      GOTO 1030                          
C/6S                                                                    
C     CALL SETERR(35H EEBSM - T2 NOT MONOTONE INCREASING,35,9,2)        
C/7S                                                                    
      CALL SETERR(' EEBSM - T2 NOT MONOTONE INCREASING',35,9,2)         
C/                                                                      
 1030 CONTINUE                                                          
C                                                                       
 1023 CONTINUE                                                          
 1024 CONTINUE                                                          
      I21034 = NX-1                                                     
      DO 1032 I = 1, I21034                                             
      IF( X(I).LE.X(I+1) )      GOTO 1035                               
C/6S                                                                    
C           CALL SETERR(37H EEBSM - X IS NOT MONOTONE INCREASING,37,10,2
C    *)                                                                 
C/7S                                                                    
            CALL SETERR(' EEBSM - X IS NOT MONOTONE INCREASING',37,10,2 
     *)                                                                 
C/                                                                      
 1035 CONTINUE                                                          
C                                                                       
 1032 CONTINUE                                                          
 1033 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
      IXEST = ISTKGT(MEST,3)                                            
C                                                                       
      IF( MEST.LE.1 )      GOTO 1037                                    
      CALL UMD(-4.0E0*ATAN(1.0E0),0.0E0,MEST,WS(IXEST))                 
      GOTO 1038                                                         
 1037 CONTINUE                                                          
      WS(IXEST) = -2.0E0*ATAN(1.0E0)                                    
C                                                                       
 1038 CONTINUE                                                          
      IF( MEST.LE.1 )      GOTO 1039                                    
      WS(IXEST) = 0.5E0*(WS(IXEST)+WS(IXEST+1))                         
 1039 CONTINUE                                                          
      IF( MEST.LE.2 )      GOTO 1041                                    
      IX1003 = IXEST+MEST-2                                             
      IX1004 = IXEST+MEST-1                                             
      IX1001 = IXEST+MEST-1                                             
      WS(IX1001) = 0.5E0*(WS(IX1003)+WS(IX1004))                        
C                                                                       
C                                                                       
 1041 CONTINUE                                                          
      DO 1043 I = 1, MEST                                               
      IX1005 = IXEST+I-1                                                
      IX1001 = IXEST+I-1                                                
      WS(IX1001) = COS(WS(IX1005))                                      
C                                                                       
 1043 CONTINUE                                                          
 1044 CONTINUE                                                          
            VALUE = EEBSP(K,T1,N1,A1,T2,N2,A2,X,NX,WS(IXEST),MEST,EREST1
     *,EREST2)                                                          
C                                                                       
      CALL LEAVE                                                        
C                                                                       
      EEBSM = VALUE                                                     
      RETURN                                                            
C                                                                       
      END                                                               
      REAL FUNCTION EEBSP(K,T1,N1,A1,T2,N2,A2,X,NX,XEST,MEST,EREST      
     *1,EREST2)                                                         
C                                                                       
C                                                                       
C PURPOSE - TO ESTIMATE THE ERROR IN A B-SPLINE APPROXIMATION.          
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A B-SPLIN      
C            APPROXIMATION, USING A GIVEN PATTERN IN THE SEARCH.        
C                                                                       
C METHOD -                                                              
C                                                                       
C   LET (K,T1,N1,A1) REPRESENT AN APPROXIMATION Y1 TO SOME FUNCTIO      
C   USING B-SPLINES ON THE MESH T1 WITH COEFFICIENTS A1.                
C   LET (K,T2,N2,A2) REPRESENT A REFINEMENT Y2 OF THE (K,T1,N1,A1)      
C   APPROXIMATION.                                                      
C                                                                       
C   LET T BE THE UNION OF THE MESHES T1 AND T2.                         
C                                                                       
C   THE ERROR IN THE (K,T2,N2,A2) APPROXIMATION IS ESTIMATED ON EA      
C   INTERVAL (X(I),X(I+1)), BY SEACHING AT THE PATTERN OF MEST POI      
C   IN EACH T INTERVAL INTERSECTING IT, TO BE                           
C                                                                       
C      MAX(ABS(Y2-Y1))/((H1(I)/H2(I))**K-1)                             
C                                                                       
C   WHERE H1(I) IS DEFINED TO BE THE LENGTH OF THE LARGEST MESH IN      
C   OF T1 INTERSECTING (X(I),X(I+1)). SIMILARLY FOR H2(I).              
C                                                                       
C INPUT -                                                               
C                                                                       
C   K    - THE ORDER OF THE B-SPLINES USED.                             
C          2 .LE. K IS ASSUMED.                                         
C   T1   - THE UNREFINED B-SPLINE MESH.                                 
C   N1   - THE NUMBER OF POINTS IN THE T1 MESH.                         
C   A1   - THE UNREFINED B-SPLINE COEFFICIENTS.                         
C   T2   - THE REFINED B-SPLINE MESH.                                   
C   N2   - THE NUMBER OF POINTS IN THE T2 MESH.                         
C   A2   - THE REFINED B-SPLINE COEFFICIENTS.                           
C   X    - (X(I),X(I+1)) GIVES THE I-TH INTERVAL AN ERROR ESTIMATE      
C          DESIRED FOR, I = 1,...,NX-1.                                 
C          X MUST BE MONOTONE INCREASING.                               
C   NX   - THE NUMBER OF POINTS IN X.                                   
C   XEST - THE PATTERN ON (-1,+1) WHICH IS TO BE SCALED AND USED I      
C          SEARCH FOR THE MAXIMUM DEVIATION IN EACH T MESH INTERVA      
C          XEST MUST BE MONOTONE INCREASING.                            
C   MEST - THE LENGTH OF THE ARRAY XEST.                                
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   EREST1 - EREST1(I) IS THE ERROR ESTIMATE FOR THE T1                 
C            APPROXIMATION ON THE I-TH X INTERVAL, I = 1,...,NX-1.      
C            EREST1(I) = R1MACH(2) IS RETURNED IF T2 IS NOT A REFI      
C            OF T1 ON (X(I),X(I+1)).                                    
C            IF X(I) = X(I+1) THEN EREST1(I) IS MEANINGLESS.            
C                                                                       
C            EREST1(NX) = MAX(EREST1(1),...,EREST1(NX-1)).              
C                                                                       
C   EREST2 - EREST2(I) IS THE ERROR ESTIMATE FOR THE T2                 
C            APPROXIMATION ON THE I-TH X INTERVAL, I = 1,...,NX-1.      
C            EREST2(I) = R1MACH(2) IS RETURNED IF T2 IS NOT A REFI      
C            OF T1 ON (X(I),X(I+1)).                                    
C            IF X(I) = X(I+1) THEN EREST2(I) IS MEANINGLESS.            
C                                                                       
C            EREST2(NX) = MAX(EREST2(1),...,EREST2(NX-1)).              
C                                                                       
C   PROCEDURE VALUE - EREST1(NX).                                       
C                                                                       
C SCRATCH SPACE ALLOCATED - 5*K + NX REAL WORDS.                        
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - K.LT.2.                                                        
C    2 - N1.LE.K.                                                       
C    3 - N2.LE.K.                                                       
C    4 - NX.LT.2.                                                       
C    5 - MEST.LT.1.                                                     
C    6 - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2)).                          
C    7 - (X(1),X(NX)) NOT PART OF (T1(1),T1(N1)).                       
C    8 - T1 NOT MONOTONE INCREASING.                                    
C    9 - T2 NOT MONOTONE INCREASING.                                    
C   10 - X IS NOT MONOTONE INCREASING.                                  
C   11 - XEST(I) NOT IN (-1,+1).                                        
C   12 - XEST IS NOT MONOTONE INCREASING.                               
C                                                                       
      INTEGER X2540(1)                                                  
            INTEGER ID(1),I,IADIF1,IADIF2,ISTKGT,IERR,ILO1,ILO2,ILEFT1,I
     *LEFT2,I1,I2,IXX,IX                                                
      REAL Y1(1),Y2(1),XA(1),R1MACH,BIG,POWER,XLEFT,XRIGHT              
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      REAL WS(500)                                                      
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER K,N1,N2,NX,MEST                                           
            REAL T1(N1),A1(1),T2(N2),A2(1),X(NX),XEST(MEST),EREST1(NX),E
     *REST2(NX)                                                         
C                                                                       
      EQUIVALENCE (X2540(1),ID(1))                                      
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
      DATA X2540(1)/0/                                                  
C                                                                       
C REAL A1(N1-K),A2(N2-K)                                                
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C DEFINE H1 = EREST1                                                    
C DEFINE H2 = EREST2                                                    
C                                                                       
      BIG = R1MACH(2)                                                   
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15H EEBSP - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR(' EEBSP - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N1.GT.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16H EEBSP - N1.LE.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR(' EEBSP - N1.LE.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( N2.GT.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H EEBSP - N2.LE.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' EEBSP - N2.LE.K',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( NX.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(16H EEBSP - NX.LT.2,16,4,2)                           
C/7S                                                                    
      CALL SETERR(' EEBSP - NX.LT.2',16,4,2)                            
C/                                                                      
 1006 CONTINUE                                                          
      IF( MEST.GE.1 )      GOTO 1008                                    
C/6S                                                                    
C     CALL SETERR(18H EEBSP - MEST.LT.1,18,5,2)                         
C/7S                                                                    
      CALL SETERR(' EEBSP - MEST.LT.1',18,5,2)                          
C/                                                                      
C                                                                       
 1008 CONTINUE                                                          
      IF( T1(1).EQ.T2(1).AND.T1(N1).EQ.T2(N2) )      GOTO 1010          
C/6S                                                                    
C           CALL SETERR(45H EEBSP - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))
C    *,45,6,2)                                                          
C/7S                                                                    
            CALL SETERR(' EEBSP - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))' 
     *,45,6,2)                                                          
C/                                                                      
C                                                                       
 1010 CONTINUE                                                          
      IF( X(1).GE.T1(1).AND.X(NX).LE.T1(N1) )      GOTO 1012            
C/6S                                                                    
C           CALL SETERR(48H EEBSP - (X(1),X(NX)) NOT PART OF (T1(1),T1(N
C    *1)),48,7,2)                                                       
C/7S                                                                    
            CALL SETERR(' EEBSP - (X(1),X(NX)) NOT PART OF (T1(1),T1(N1)
     *)',48,7,2)                                                        
C/                                                                      
C                                                                       
 1012 CONTINUE                                                          
      I21016 = N1-1                                                     
      DO 1014 I = 1, I21016                                             
      IF( T1(I).LE.T1(I+1) )      GOTO 1017                             
C/6S                                                                    
C     CALL SETERR(35H EEBSP - T1 NOT MONOTONE INCREASING,35,8,2)        
C/7S                                                                    
      CALL SETERR(' EEBSP - T1 NOT MONOTONE INCREASING',35,8,2)         
C/                                                                      
 1017 CONTINUE                                                          
      IF( I+K.LE.N1 )      GOTO 1019                                    
      GOTO 1014                                                         
 1019 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T1(IX1005).GT.T1(I) )      GOTO 1021                          
C/6S                                                                    
C     CALL SETERR(35H EEBSP - T1 NOT MONOTONE INCREASING,35,8,2)        
C/7S                                                                    
      CALL SETERR(' EEBSP - T1 NOT MONOTONE INCREASING',35,8,2)         
C/                                                                      
 1021 CONTINUE                                                          
 1014 CONTINUE                                                          
 1015 CONTINUE                                                          
      I21025 = N2-1                                                     
      DO 1023 I = 1, I21025                                             
      IF( T2(I).LE.T2(I+1) )      GOTO 1026                             
C/6S                                                                    
C     CALL SETERR(35H EEBSP - T2 NOT MONOTONE INCREASING,35,9,2)        
C/7S                                                                    
      CALL SETERR(' EEBSP - T2 NOT MONOTONE INCREASING',35,9,2)         
C/                                                                      
 1026 CONTINUE                                                          
      IF( I+K.LE.N2 )      GOTO 1028                                    
      GOTO 1023                                                         
 1028 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T2(IX1005).GT.T2(I) )      GOTO 1030                          
C/6S                                                                    
C     CALL SETERR(35H EEBSP - T2 NOT MONOTONE INCREASING,35,9,2)        
C/7S                                                                    
      CALL SETERR(' EEBSP - T2 NOT MONOTONE INCREASING',35,9,2)         
C/                                                                      
 1030 CONTINUE                                                          
C                                                                       
 1023 CONTINUE                                                          
 1024 CONTINUE                                                          
      I21034 = NX-1                                                     
      DO 1032 I = 1, I21034                                             
      IF( X(I).LE.X(I+1) )      GOTO 1035                               
C/6S                                                                    
C           CALL SETERR(37H EEBSP - X IS NOT MONOTONE INCREASING,37,10,2
C    *)                                                                 
C/7S                                                                    
            CALL SETERR(' EEBSP - X IS NOT MONOTONE INCREASING',37,10,2 
     *)                                                                 
C/                                                                      
 1035 CONTINUE                                                          
C                                                                       
 1032 CONTINUE                                                          
 1033 CONTINUE                                                          
      DO 1037 I = 1, MEST                                               
            IF( XEST(I).GE.(-1.0E0).AND.XEST(I).LE.(+1.0E0) )      GOTO 
     *1040                                                              
C/6S                                                                    
C     CALL SETERR(31H EEBSP - XEST(I) NOT IN (-1,+1),31,11,2)           
C/7S                                                                    
      CALL SETERR(' EEBSP - XEST(I) NOT IN (-1,+1)',31,11,2)            
C/                                                                      
 1040 CONTINUE                                                          
      IF( I.NE.MEST )      GOTO 1042                                    
      GOTO 1037                                                         
C                                                                       
 1042 CONTINUE                                                          
      IF( XEST(I).LE.XEST(I+1) )      GOTO 1044                         
C/6S                                                                    
C           CALL SETERR(40H EEBSP - XEST IS NOT MONOTONE INCREASING,40,1
C    *2,2)                                                              
C/7S                                                                    
            CALL SETERR(' EEBSP - XEST IS NOT MONOTONE INCREASING',40,1 
     *2,2)                                                              
C/                                                                      
 1044 CONTINUE                                                          
C                                                                       
 1037 CONTINUE                                                          
 1038 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
C ALLOCATE SCRATCH SPACE FOR CALLS TO SPLN2.                            
C                                                                       
      IADIF1 = ISTKGT(2*K,3)                                            
      IADIF2 = IADIF1+K                                                 
C                                                                       
      IERR = ISTKGT(NX,3)                                               
C THE DEVIATION ON EACH T INTERVAL.                                     
C                                                                       
      CALL SETR(NX,0.0E0,EREST1)                                        
C H1 == 0.                                                              
      CALL SETR(NX,0.0E0,EREST2)                                        
C H2 == 0.                                                              
      CALL SETR(NX,0.0E0,WS(IERR))                                      
C                                                                       
C INITIALIZE PARAMETERS FOR SPLN2.                                      
C                                                                       
      ILO1 = 0                                                          
      ILO2 = 0                                                          
      ILEFT1 = 1                                                        
      ILEFT2 = 1                                                        
C                                                                       
      I1 = 1                                                            
C CURRENT RIGHT-MOST T1 AND                                             
      I2 = 1                                                            
C T2 MESH POINTS.                                                       
C                                                                       
      IX = 1                                                            
C CURRENT LEFT-MOST X INTERVAL.                                         
C                                                                       
C GET H1, H2 AND THE DEVIATION OVER EACH X INTERVAL.                    
C                                                                       
      XLEFT = X(1)                                                      
 1048 CONTINUE                                                          
      IF( XLEFT.GE.X(NX) )      GOTO 1047                               
 1049 CONTINUE                                                          
      IF( T1(I1).GT.XLEFT.OR.I1.GE.N1 )      GOTO 1050                  
      I1 = I1 + (1)                                                     
      GOTO 1049                                                         
 1050 CONTINUE                                                          
 1051 CONTINUE                                                          
      IF( T2(I2).GT.XLEFT.OR.I2.GE.N2 )      GOTO 1052                  
      I2 = I2 + (1)                                                     
C                                                                       
      GOTO 1051                                                         
 1052 CONTINUE                                                          
      XRIGHT = AMIN1(T1(I1),T2(I2),X(NX))                               
C                                                                       
      DO 1053 I = 1, MEST                                               
C     SEARCH (XLEFT,XRIGHT).                                            
      XA(1) = XLEFT+0.5E0*(XRIGHT-XLEFT)*(1.0E0+XEST(I))                
      XA(1) = AMAX1(XLEFT,AMIN1(XA(1),XRIGHT))                          
C                                                                       
            CALL SPLN2(K,T1,N1,A1,XA,1,ID,1,Y1,K,WS(IADIF1),ILO1,ILEFT1)
            CALL SPLN2(K,T2,N2,A2,XA,1,ID,1,Y2,K,WS(IADIF2),ILO2,ILEFT2)
C                                                                       
C     UPDATE ALL X INTERVALS CONTAINING XA(1).                          
C                                                                       
      IXX = IX                                                          
 1058 CONTINUE                                                          
      IF( X(IXX).GT.XA(1).OR.IXX.GE.NX )      GOTO 1057                 
      IF( X(IXX+1).GE.XA(1) )      GOTO 1059                            
      IX = IXX                                                          
      GOTO 1056                                                         
C                                                                       
 1059 CONTINUE                                                          
      EREST1(IXX) = AMAX1(EREST1(IXX),T1(ILEFT1+1)-T1(ILEFT1))          
      EREST2(IXX) = AMAX1(EREST2(IXX),T2(ILEFT2+1)-T2(ILEFT2))          
C                                                                       
      IX1005 = IERR+IXX-1                                               
      IX1001 = IERR+IXX-1                                               
      WS(IX1001) = AMAX1(WS(IX1005),ABS(Y1(1)-Y2(1)))                   
 1056 CONTINUE                                                          
      IXX = IXX + (1)                                                   
      GOTO 1058                                                         
 1057 CONTINUE                                                          
 1053 CONTINUE                                                          
 1054 CONTINUE                                                          
C                                                                       
C NOW GET THE ERROR ESTIMATES.                                          
C                                                                       
 1046 CONTINUE                                                          
      XLEFT = XRIGHT                                                    
      GOTO 1048                                                         
 1047 CONTINUE                                                          
      I21063 = NX-1                                                     
      DO 1061 I = 1, I21063                                             
            IF( EREST1(I).LE.EREST2(I).OR.EREST2(I).LE.0.0E0 )      GOTO
     * 1064                                                             
      POWER = (EREST1(I)/EREST2(I))**(K)                                
C                                                                       
      IX1002 = IERR+I-1                                                 
      EREST2(I) = WS(IX1002)/(POWER-1.0E0)                              
      EREST1(I) = EREST2(I)*POWER                                       
C                                                                       
      EREST1(NX) = AMAX1(EREST1(NX),EREST1(I))                          
      EREST2(NX) = AMAX1(EREST2(NX),EREST2(I))                          
      GOTO 1065                                                         
 1064 CONTINUE                                                          
      EREST1(I) = BIG                                                   
      EREST2(I) = BIG                                                   
      EREST1(NX) = BIG                                                  
      EREST2(NX) = BIG                                                  
 1065 CONTINUE                                                          
C                                                                       
 1061 CONTINUE                                                          
 1062 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      EEBSP = EREST1(NX)                                                
      RETURN                                                            
C                                                                       
      END                                                               
      DOUBLE PRECISION FUNCTION DEEBSF(K,T1,N1,A1,T2,N2,A2)             
C                                                                       
C                                                                       
C PURPOSE - TO ESTIMATE THE ERROR IN A B-SPLINE APPROXIMATION.          
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A B-SPLIN      
C            APPROXIMATION TO A FUNCTION.                               
C                                                                       
C METHOD -                                                              
C                                                                       
C   LET (K,T1,N1,A1) REPRESENT AN APPROXIMATION Y1 TO SOME FUNCTIO      
C   USING B-SPLINES ON THE MESH T1 WITH COEFFICIENTS A1.                
C   LET (K,T2,N2,A2) REPRESENT A REFINEMENT Y2 OF THE (K,T1,N1,A1)      
C   APPROXIMATION.                                                      
C                                                                       
C   LET T BE THE UNION OF THE MESHES T1 AND T2.                         
C                                                                       
C   LET MEST = (K-1)*PI+1 .                                             
C                                                                       
C   THE ERROR IN THE (K,T2,N2,A2) APPROXIMATION IS ESTIMATED            
C   BY SEARCHING EACH T INTERVAL AT A PATTERN OF MEST POINTS XEST       
C                                                                       
C      MAX(ABS(Y2-Y1))/((H1(I)/H2(I))**K-1)                             
C                                                                       
C   WHERE H1(I) IS DEFINED TO BE THE LENGTH OF THE LARGEST MESH IN      
C   OF T1 INTERSECTING (T(I),T(I+1)). SIMILARLY FOR H2(I).              
C                                                                       
C   THE PATTERN OF POINTS XEST USED IS COS(THETA) WHERE THE MEST T      
C   VALUES ARE UNIFORMLY DISTRIBUTED ON (-PI,0).                        
C                                                                       
C   THIS SEARCH PATTERN IS SUFFICIENT TO GUARANTEE THAT THE ERROR       
C   ESTIMATE IS COMPUTED ACCURATE TO WITHIN A FACTOR OF 2.              
C                                                                       
C INPUT -                                                               
C                                                                       
C   K    - THE ORDER OF THE B-SPLINES USED.                             
C          2 .LE. K IS ASSUMED.                                         
C   T1   - THE UNREFINED B-SPLINE MESH.                                 
C   N1   - THE NUMBER OF POINTS IN THE T1 MESH.                         
C   A1   - THE UNREFINED B-SPLINE COEFFICIENTS.                         
C   T2   - THE REFINED B-SPLINE MESH.                                   
C   N2   - THE NUMBER OF POINTS IN THE T2 MESH.                         
C   A2   - THE REFINED B-SPLINE COEFFICIENTS.                           
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   PROCEDURE VALUE - THE ESTIMATED ERROR IN Y1.                        
C                                                                       
C SCRATCH SPACE ALLOCATED - 5*K + MEST + 2 LONG REAL WORDS.             
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - N1.LE.K.                                                        
C   3 - N2.LE.K.                                                        
C   4 - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2)).                           
C   5 - T1 NOT MONOTONE INCREASING.                                     
C   6 - T2 NOT MONOTONE INCREASING.                                     
C                                                                       
      INTEGER I                                                         
      DOUBLE PRECISION X(2),EREST1(2),EREST2(2),DEEBSI                  
      INTEGER K,N1,N2                                                   
      DOUBLE PRECISION T1(N1),A1(1),T2(N2),A2(1)                        
C                                                                       
C                                                                       
C                                                                       
C LONG REAL A1(N1-K),A2(N2-K)                                           
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15HDEEBSF - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR('DEEBSF - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N1.GT.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16HDEEBSF - N1.LE.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR('DEEBSF - N1.LE.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( N2.GT.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HDEEBSF - N2.LE.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR('DEEBSF - N2.LE.K',16,3,2)                            
C/                                                                      
C                                                                       
 1004 CONTINUE                                                          
      IF( T1(1).EQ.T2(1).AND.T1(N1).EQ.T2(N2) )      GOTO 1006          
C/6S                                                                    
C           CALL SETERR(45HDEEBSF - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))
C    *,45,4,2)                                                          
C/7S                                                                    
            CALL SETERR('DEEBSF - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))' 
     *,45,4,2)                                                          
C/                                                                      
C                                                                       
 1006 CONTINUE                                                          
      I21010 = N1-1                                                     
      DO 1008 I = 1, I21010                                             
      IF( T1(I).LE.T1(I+1) )      GOTO 1011                             
C/6S                                                                    
C     CALL SETERR(35HDEEBSF - T1 NOT MONOTONE INCREASING,35,5,2)        
C/7S                                                                    
      CALL SETERR('DEEBSF - T1 NOT MONOTONE INCREASING',35,5,2)         
C/                                                                      
 1011 CONTINUE                                                          
      IF( I+K.LE.N1 )      GOTO 1013                                    
      GOTO 1008                                                         
 1013 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T1(IX1005).GT.T1(I) )      GOTO 1015                          
C/6S                                                                    
C     CALL SETERR(35HDEEBSF - T1 NOT MONOTONE INCREASING,35,5,2)        
C/7S                                                                    
      CALL SETERR('DEEBSF - T1 NOT MONOTONE INCREASING',35,5,2)         
C/                                                                      
 1015 CONTINUE                                                          
 1008 CONTINUE                                                          
 1009 CONTINUE                                                          
      I21019 = N2-1                                                     
      DO 1017 I = 1, I21019                                             
      IF( T2(I).LE.T2(I+1) )      GOTO 1020                             
C/6S                                                                    
C     CALL SETERR(35HDEEBSF - T2 NOT MONOTONE INCREASING,35,6,2)        
C/7S                                                                    
      CALL SETERR('DEEBSF - T2 NOT MONOTONE INCREASING',35,6,2)         
C/                                                                      
 1020 CONTINUE                                                          
      IF( I+K.LE.N2 )      GOTO 1022                                    
      GOTO 1017                                                         
 1022 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T2(IX1005).GT.T2(I) )      GOTO 1024                          
C/6S                                                                    
C     CALL SETERR(35HDEEBSF - T2 NOT MONOTONE INCREASING,35,6,2)        
C/7S                                                                    
      CALL SETERR('DEEBSF - T2 NOT MONOTONE INCREASING',35,6,2)         
C/                                                                      
 1024 CONTINUE                                                          
C                                                                       
 1017 CONTINUE                                                          
 1018 CONTINUE                                                          
      X(1) = T1(1)                                                      
      X(2) = T1(N1)                                                     
C                                                                       
      DEEBSF = DEEBSI(K,T1,N1,A1,T2,N2,A2,X,2,EREST1,EREST2)            
      RETURN                                                            
C                                                                       
      END                                                               
      DOUBLE PRECISION FUNCTION DEEBSI(K,T1,N1,A1,T2,N2,A2,X,NX,ER      
     *EST1,EREST2)                                                      
C                                                                       
C                                                                       
C PURPOSE - TO ESTIMATE THE ERROR IN A B-SPLINE APPROXIMATION.          
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A B-SPLIN      
C            APPROXIMATION, OVER GIVEN INTERVALS.                       
C                                                                       
C METHOD -                                                              
C                                                                       
C   LET (K,T1,N1,A1) REPRESENT AN APPROXIMATION Y1 TO SOME FUNCTIO      
C   USING B-SPLINES ON THE MESH T1 WITH COEFFICIENTS A1.                
C   LET (K,T2,N2,A2) REPRESENT A REFINEMENT Y2 OF THE (K,T1,N1,A1)      
C   APPROXIMATION.                                                      
C                                                                       
C   LET T BE THE UNION OF THE MESHES T1 AND T2.                         
C                                                                       
C   LET MEST = (K-1)*PI+1 .                                             
C                                                                       
C   THE ERROR IN THE (K,T2,N2,A2) APPROXIMATION IS ESTIMATED ON EA      
C   INTERVAL (X(I),X(I+1)), BY SEACHING AT A PATTERN OF MEST POINT      
C   IN EACH T INTERVAL INTERSECTING IT, TO BE                           
C                                                                       
C      MAX(ABS(Y2-Y1))/((H1(I)/H2(I))**K-1)                             
C                                                                       
C   WHERE H1(I) IS DEFINED TO BE THE LENGTH OF THE LARGEST MESH IN      
C   OF T1 INTERSECTING (X(I),X(I+1)). SIMILARLY FOR H2(I).              
C                                                                       
C   THE PATTERN OF POINTS XEST USED IS COS(THETA) WHERE THE MEST T      
C   VALUES ARE UNIFORMLY DISTRIBUTED ON (-PI,0).                        
C                                                                       
C   THIS SEARCH PATTERN IS SUFFICIENT TO GUARANTEE THAT THE ERROR       
C   ESTIMATE IS COMPUTED ACCURATE TO WITHIN A FACTOR OF 2.              
C                                                                       
C INPUT -                                                               
C                                                                       
C   K    - THE ORDER OF THE B-SPLINES USED.                             
C          2 .LE. K IS ASSUMED.                                         
C   T1   - THE UNREFINED B-SPLINE MESH.                                 
C   N1   - THE NUMBER OF POINTS IN THE T1 MESH.                         
C   A1   - THE UNREFINED B-SPLINE COEFFICIENTS.                         
C   T2   - THE REFINED B-SPLINE MESH.                                   
C   N2   - THE NUMBER OF POINTS IN THE T2 MESH.                         
C   A2   - THE REFINED B-SPLINE COEFFICIENTS.                           
C   X    - (X(I),X(I+1)) GIVES THE I-TH INTERVAL AN ERROR ESTIMATE      
C          DESIRED FOR, I = 1,...,NX-1.                                 
C          X MUST BE MONOTONE INCREASING.                               
C   NX   - THE NUMBER OF POINTS IN X.                                   
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   EREST1 - EREST1(I) IS THE ERROR ESTIMATE FOR THE T1                 
C            APPROXIMATION ON THE I-TH X INTERVAL, I = 1,...,NX-1.      
C            EREST1(I) = D1MACH(2) IS RETURNED IF T2 IS NOT A REFI      
C            OF T1 ON (X(I),X(I+1)).                                    
C            IF X(I) = X(I+1) THEN EREST1(I) IS MEANINGLESS.            
C                                                                       
C            EREST1(NX) = MAX(EREST1(1),...,EREST1(NX-1)).              
C                                                                       
C   EREST2 - EREST2(I) IS THE ERROR ESTIMATE FOR THE T2                 
C            APPROXIMATION ON THE I-TH X INTERVAL, I = 1,...,NX-1.      
C            EREST2(I) = D1MACH(2) IS RETURNED IF T2 IS NOT A REFI      
C            OF T1 ON (X(I),X(I+1)).                                    
C            IF X(I) = X(I+1) THEN EREST2(I) IS MEANINGLESS.            
C                                                                       
C            EREST2(NX) = MAX(EREST2(1),...,EREST2(NX-1)).              
C                                                                       
C   PROCEDURE VALUE - EREST1(NX).                                       
C                                                                       
C SCRATCH SPACE ALLOCATED - 5*K + MEST + NX LONG REAL WORDS.            
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - N1.LE.K.                                                        
C   3 - N2.LE.K.                                                        
C   4 - NX.LT.2.                                                        
C   5 - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2)).                           
C   6 - (X(1),X(NX)) NOT PART OF (T1(1),T1(N1)).                        
C   7 - T1 NOT MONOTONE INCREASING.                                     
C   8 - T2 NOT MONOTONE INCREASING.                                     
C   9 - X IS NOT MONOTONE INCREASING.                                   
C                                                                       
      INTEGER I,MEST                                                    
      DOUBLE PRECISION DEEBSM, DATAN                                    
      INTEGER K,N1,N2,NX                                                
            DOUBLE PRECISION T1(N1),A1(1),T2(N2),A2(1),X(NX),EREST1(NX),
     *EREST2(NX)                                                        
C                                                                       
C                                                                       
C                                                                       
C LONG REAL A1(N1-K),A2(N2-K)                                           
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15HDEEBSI - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR('DEEBSI - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N1.GT.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16HDEEBSI - N1.LE.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR('DEEBSI - N1.LE.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( N2.GT.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HDEEBSI - N2.LE.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR('DEEBSI - N2.LE.K',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( NX.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(16HDEEBSI - NX.LT.2,16,4,2)                           
C/7S                                                                    
      CALL SETERR('DEEBSI - NX.LT.2',16,4,2)                            
C/                                                                      
C                                                                       
 1006 CONTINUE                                                          
      IF( T1(1).EQ.T2(1).AND.T1(N1).EQ.T2(N2) )      GOTO 1008          
C/6S                                                                    
C           CALL SETERR(45HDEEBSI - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))
C    *,45,5,2)                                                          
C/7S                                                                    
            CALL SETERR('DEEBSI - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))' 
     *,45,5,2)                                                          
C/                                                                      
C                                                                       
 1008 CONTINUE                                                          
      IF( X(1).GE.T1(1).AND.X(NX).LE.T1(N1) )      GOTO 1010            
C/6S                                                                    
C           CALL SETERR(48HDEEBSI - (X(1),X(NX)) NOT PART OF (T1(1),T1(N
C    *1)),48,6,2)                                                       
C/7S                                                                    
            CALL SETERR('DEEBSI - (X(1),X(NX)) NOT PART OF (T1(1),T1(N1)
     *)',48,6,2)                                                        
C/                                                                      
C                                                                       
 1010 CONTINUE                                                          
      I21014 = N1-1                                                     
      DO 1012 I = 1, I21014                                             
      IF( T1(I).LE.T1(I+1) )      GOTO 1015                             
C/6S                                                                    
C     CALL SETERR(35HDEEBSI - T1 NOT MONOTONE INCREASING,35,7,2)        
C/7S                                                                    
      CALL SETERR('DEEBSI - T1 NOT MONOTONE INCREASING',35,7,2)         
C/                                                                      
 1015 CONTINUE                                                          
      IF( I+K.LE.N1 )      GOTO 1017                                    
      GOTO 1012                                                         
 1017 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T1(IX1005).GT.T1(I) )      GOTO 1019                          
C/6S                                                                    
C     CALL SETERR(35HDEEBSI - T1 NOT MONOTONE INCREASING,35,7,2)        
C/7S                                                                    
      CALL SETERR('DEEBSI - T1 NOT MONOTONE INCREASING',35,7,2)         
C/                                                                      
 1019 CONTINUE                                                          
 1012 CONTINUE                                                          
 1013 CONTINUE                                                          
      I21023 = N2-1                                                     
      DO 1021 I = 1, I21023                                             
      IF( T2(I).LE.T2(I+1) )      GOTO 1024                             
C/6S                                                                    
C     CALL SETERR(35HDEEBSI - T2 NOT MONOTONE INCREASING,35,8,2)        
C/7S                                                                    
      CALL SETERR('DEEBSI - T2 NOT MONOTONE INCREASING',35,8,2)         
C/                                                                      
 1024 CONTINUE                                                          
      IF( I+K.LE.N2 )      GOTO 1026                                    
      GOTO 1021                                                         
 1026 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T2(IX1005).GT.T2(I) )      GOTO 1028                          
C/6S                                                                    
C     CALL SETERR(35HDEEBSI - T2 NOT MONOTONE INCREASING,35,8,2)        
C/7S                                                                    
      CALL SETERR('DEEBSI - T2 NOT MONOTONE INCREASING',35,8,2)         
C/                                                                      
 1028 CONTINUE                                                          
C                                                                       
 1021 CONTINUE                                                          
 1022 CONTINUE                                                          
      I21032 = NX-1                                                     
      DO 1030 I = 1, I21032                                             
      IF( X(I).LE.X(I+1) )      GOTO 1033                               
C/6S                                                                    
C           CALL SETERR(37HDEEBSI - X IS NOT MONOTONE INCREASING,37,9,2)
C/7S                                                                    
            CALL SETERR('DEEBSI - X IS NOT MONOTONE INCREASING',37,9,2) 
C/                                                                      
 1033 CONTINUE                                                          
C                                                                       
 1030 CONTINUE                                                          
 1031 CONTINUE                                                          
      MEST = FLOAT(K-1)*4.0D0*DATAN(1.0D0)+1.0D0                        
C                                                                       
            DEEBSI = DEEBSM(K,T1,N1,A1,T2,N2,A2,X,NX,MEST,EREST1,EREST2)
      RETURN                                                            
C                                                                       
      END                                                               
      DOUBLE PRECISION FUNCTION DEEBSM(K,T1,N1,A1,T2,N2,A2,X,NX,ME      
     *ST,EREST1,EREST2)                                                 
C                                                                       
C                                                                       
C PURPOSE - TO ESTIMATE THE ERROR IN A B-SPLINE APPROXIMATION.          
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A B-SPLIN      
C            APPROXIMATION, USING MEST POINTS IN EACH INTERVAL SEA      
C                                                                       
C METHOD -                                                              
C                                                                       
C   LET (K,T1,N1,A1) REPRESENT AN APPROXIMATION Y1 TO SOME FUNCTIO      
C   USING B-SPLINES ON THE MESH T1 WITH COEFFICIENTS A1.                
C   LET (K,T2,N2,A2) REPRESENT A REFINEMENT Y2 OF THE (K,T1,N1,A1)      
C   APPROXIMATION.                                                      
C                                                                       
C   LET T BE THE UNION OF THE MESHES T1 AND T2.                         
C                                                                       
C   THE ERROR IN THE (K,T2,N2,A2) APPROXIMATION IS ESTIMATED ON EA      
C   INTERVAL (X(I),X(I+1)), BY SEACHING AT A PATTERN OF MEST POINT      
C   IN EACH T INTERVAL INTERSECTING IT, TO BE                           
C                                                                       
C      MAX(ABS(Y2-Y1))/((H1(I)/H2(I))**K-1)                             
C                                                                       
C   WHERE H1(I) IS DEFINED TO BE THE LENGTH OF THE LARGEST MESH IN      
C   OF T1 INTERSECTING (X(I),X(I+1)). SIMILARLY FOR H2(I).              
C                                                                       
C   THE PATTERN OF POINTS XEST USED IS COS(THETA) WHERE THE MEST T      
C   VALUES ARE UNIFORMLY DISTRIBUTED ON (-PI,0).                        
C                                                                       
C   THIS SEARCH IS SUFFICIENT TO GUARANTEE THAT THE ERROR ESTIMATE      
C   COMPUTED TO A RELATIVE ACCURACY OF                                  
C                                                                       
C        0.5*(K-1)*PI/(MEST-1)                                          
C                                                                       
C INPUT -                                                               
C                                                                       
C   K    - THE ORDER OF THE B-SPLINES USED.                             
C          2 .LE. K IS ASSUMED.                                         
C   T1   - THE UNREFINED B-SPLINE MESH.                                 
C   N1   - THE NUMBER OF POINTS IN THE T1 MESH.                         
C   A1   - THE UNREFINED B-SPLINE COEFFICIENTS.                         
C   T2   - THE REFINED B-SPLINE MESH.                                   
C   N2   - THE NUMBER OF POINTS IN THE T2 MESH.                         
C   A2   - THE REFINED B-SPLINE COEFFICIENTS.                           
C   X    - (X(I),X(I+1)) GIVES THE I-TH INTERVAL AN ERROR ESTIMATE      
C          DESIRED FOR, I = 1,...,NX-1.                                 
C          X MUST BE MONOTONE INCREASING.                               
C   NX   - THE NUMBER OF POINTS IN X.                                   
C   MEST - THE NUMBER OF POINTS TO BE USED IN SEARCHING EACH T INT      
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   EREST1 - EREST1(I) IS THE ERROR ESTIMATE FOR THE T1                 
C            APPROXIMATION ON THE I-TH X INTERVAL, I = 1,...,NX-1.      
C            EREST1(I) = D1MACH(2) IS RETURNED IF T2 IS NOT A REFI      
C            OF T1 ON (X(I),X(I+1)).                                    
C            IF X(I) = X(I+1) THEN EREST1(I) IS MEANINGLESS.            
C                                                                       
C            EREST1(NX) = MAX(EREST1(1),...,EREST1(NX-1)).              
C                                                                       
C   EREST2 - EREST2(I) IS THE ERROR ESTIMATE FOR THE T2                 
C            APPROXIMATION ON THE I-TH X INTERVAL, I = 1,...,NX-1.      
C            EREST2(I) = D1MACH(2) IS RETURNED IF T2 IS NOT A REFI      
C            OF T1 ON (X(I),X(I+1)).                                    
C            IF X(I) = X(I+1) THEN EREST2(I) IS MEANINGLESS.            
C                                                                       
C            EREST2(NX) = MAX(EREST2(1),...,EREST2(NX-1)).              
C                                                                       
C   PROCEDURE VALUE - EREST1(NX).                                       
C                                                                       
C SCRATCH SPACE ALLOCATED - 5*K + MEST + NX LONG REAL WORDS.            
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - K.LT.2.                                                        
C    2 - N1.LE.K.                                                       
C    3 - N2.LE.K.                                                       
C    4 - NX.LT.2.                                                       
C    5 - MEST.LT.1.                                                     
C    6 - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2)).                          
C    7 - (X(1),X(NX)) NOT PART OF (T1(1),T1(N1)).                       
C    8 - T1 NOT MONOTONE INCREASING.                                    
C    9 - T2 NOT MONOTONE INCREASING.                                    
C   10 - X IS NOT MONOTONE INCREASING.                                  
C                                                                       
      INTEGER I,IXEST,ISTKGT                                            
      DOUBLE PRECISION VALUE,DEEBSP,DATAN,DCOS                          
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      DOUBLE PRECISION WS(500)                                          
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER K,N1,N2,NX,MEST                                           
            DOUBLE PRECISION T1(N1),A1(1),T2(N2),A2(1),X(NX),EREST1(NX),
     *EREST2(NX)                                                        
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C LONG REAL A1(N1-K),A2(N2-K)                                           
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15HDEEBSM - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR('DEEBSM - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N1.GT.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16HDEEBSM - N1.LE.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR('DEEBSM - N1.LE.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( N2.GT.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HDEEBSM - N2.LE.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR('DEEBSM - N2.LE.K',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( NX.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(16HDEEBSM - NX.LT.2,16,4,2)                           
C/7S                                                                    
      CALL SETERR('DEEBSM - NX.LT.2',16,4,2)                            
C/                                                                      
 1006 CONTINUE                                                          
      IF( MEST.GE.1 )      GOTO 1008                                    
C/6S                                                                    
C     CALL SETERR(18HDEEBSM - MEST.LT.1,18,5,2)                         
C/7S                                                                    
      CALL SETERR('DEEBSM - MEST.LT.1',18,5,2)                          
C/                                                                      
C                                                                       
 1008 CONTINUE                                                          
      IF( T1(1).EQ.T2(1).AND.T1(N1).EQ.T2(N2) )      GOTO 1010          
C/6S                                                                    
C           CALL SETERR(45HDEEBSM - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))
C    *,45,6,2)                                                          
C/7S                                                                    
            CALL SETERR('DEEBSM - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))' 
     *,45,6,2)                                                          
C/                                                                      
C                                                                       
 1010 CONTINUE                                                          
      IF( X(1).GE.T1(1).AND.X(NX).LE.T1(N1) )      GOTO 1012            
C/6S                                                                    
C           CALL SETERR(48HDEEBSM - (X(1),X(NX)) NOT PART OF (T1(1),T1(N
C    *1)),48,7,2)                                                       
C/7S                                                                    
            CALL SETERR('DEEBSM - (X(1),X(NX)) NOT PART OF (T1(1),T1(N1)
     *)',48,7,2)                                                        
C/                                                                      
C                                                                       
 1012 CONTINUE                                                          
      I21016 = N1-1                                                     
      DO 1014 I = 1, I21016                                             
      IF( T1(I).LE.T1(I+1) )      GOTO 1017                             
C/6S                                                                    
C     CALL SETERR(35HDEEBSM - T1 NOT MONOTONE INCREASING,35,8,2)        
C/7S                                                                    
      CALL SETERR('DEEBSM - T1 NOT MONOTONE INCREASING',35,8,2)         
C/                                                                      
 1017 CONTINUE                                                          
      IF( I+K.LE.N1 )      GOTO 1019                                    
      GOTO 1014                                                         
 1019 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T1(IX1005).GT.T1(I) )      GOTO 1021                          
C/6S                                                                    
C     CALL SETERR(35HDEEBSM - T1 NOT MONOTONE INCREASING,35,8,2)        
C/7S                                                                    
      CALL SETERR('DEEBSM - T1 NOT MONOTONE INCREASING',35,8,2)         
C/                                                                      
 1021 CONTINUE                                                          
 1014 CONTINUE                                                          
 1015 CONTINUE                                                          
      I21025 = N2-1                                                     
      DO 1023 I = 1, I21025                                             
      IF( T2(I).LE.T2(I+1) )      GOTO 1026                             
C/6S                                                                    
C     CALL SETERR(35HDEEBSM - T2 NOT MONOTONE INCREASING,35,9,2)        
C/7S                                                                    
      CALL SETERR('DEEBSM - T2 NOT MONOTONE INCREASING',35,9,2)         
C/                                                                      
 1026 CONTINUE                                                          
      IF( I+K.LE.N2 )      GOTO 1028                                    
      GOTO 1023                                                         
 1028 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T2(IX1005).GT.T2(I) )      GOTO 1030                          
C/6S                                                                    
C     CALL SETERR(35HDEEBSM - T2 NOT MONOTONE INCREASING,35,9,2)        
C/7S                                                                    
      CALL SETERR('DEEBSM - T2 NOT MONOTONE INCREASING',35,9,2)         
C/                                                                      
 1030 CONTINUE                                                          
C                                                                       
 1023 CONTINUE                                                          
 1024 CONTINUE                                                          
      I21034 = NX-1                                                     
      DO 1032 I = 1, I21034                                             
      IF( X(I).LE.X(I+1) )      GOTO 1035                               
C/6S                                                                    
C           CALL SETERR(37HDEEBSM - X IS NOT MONOTONE INCREASING,37,10,2
C    *)                                                                 
C/7S                                                                    
            CALL SETERR('DEEBSM - X IS NOT MONOTONE INCREASING',37,10,2 
     *)                                                                 
C/                                                                      
 1035 CONTINUE                                                          
C                                                                       
 1032 CONTINUE                                                          
 1033 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
      IXEST = ISTKGT(MEST,4)                                            
C                                                                       
      IF( MEST.LE.1 )      GOTO 1037                                    
      CALL DUMD(-4.0D0*DATAN(1.0D0),0.0D0,MEST,WS(IXEST))               
      GOTO 1038                                                         
 1037 CONTINUE                                                          
      WS(IXEST) = -2.0D0*DATAN(1.0D0)                                   
C                                                                       
 1038 CONTINUE                                                          
      IF( MEST.LE.1 )      GOTO 1039                                    
      WS(IXEST) = 0.5D0*(WS(IXEST)+WS(IXEST+1))                         
 1039 CONTINUE                                                          
      IF( MEST.LE.2 )      GOTO 1041                                    
      IX1003 = IXEST+MEST-2                                             
      IX1004 = IXEST+MEST-1                                             
      IX1001 = IXEST+MEST-1                                             
      WS(IX1001) = 0.5D0*(WS(IX1003)+WS(IX1004))                        
C                                                                       
C                                                                       
 1041 CONTINUE                                                          
      DO 1043 I = 1, MEST                                               
      IX1005 = IXEST+I-1                                                
      IX1001 = IXEST+I-1                                                
      WS(IX1001) = DCOS(WS(IX1005))                                     
C                                                                       
 1043 CONTINUE                                                          
 1044 CONTINUE                                                          
            VALUE = DEEBSP(K,T1,N1,A1,T2,N2,A2,X,NX,WS(IXEST),MEST,EREST
     *1,EREST2)                                                         
C                                                                       
      CALL LEAVE                                                        
C                                                                       
      DEEBSM = VALUE                                                    
      RETURN                                                            
C                                                                       
      END                                                               
      DOUBLE PRECISION FUNCTION DEEBSP(K,T1,N1,A1,T2,N2,A2,X,NX,XE      
     *ST,MEST,EREST1,EREST2)                                            
C                                                                       
C                                                                       
C PURPOSE - TO ESTIMATE THE ERROR IN A B-SPLINE APPROXIMATION.          
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A B-SPLIN      
C            APPROXIMATION, USING A GIVEN PATTERN IN THE SEARCH.        
C                                                                       
C METHOD -                                                              
C                                                                       
C   LET (K,T1,N1,A1) REPRESENT AN APPROXIMATION Y1 TO SOME FUNCTIO      
C   USING B-SPLINES ON THE MESH T1 WITH COEFFICIENTS A1.                
C   LET (K,T2,N2,A2) REPRESENT A REFINEMENT Y2 OF THE (K,T1,N1,A1)      
C   APPROXIMATION.                                                      
C                                                                       
C   LET T BE THE UNION OF THE MESHES T1 AND T2.                         
C                                                                       
C   THE ERROR IN THE (K,T2,N2,A2) APPROXIMATION IS ESTIMATED ON EA      
C   INTERVAL (X(I),X(I+1)), BY SEACHING AT THE PATTERN OF MEST POI      
C   IN EACH T INTERVAL INTERSECTING IT, TO BE                           
C                                                                       
C      MAX(ABS(Y2-Y1))/((H1(I)/H2(I))**K-1)                             
C                                                                       
C   WHERE H1(I) IS DEFINED TO BE THE LENGTH OF THE LARGEST MESH IN      
C   OF T1 INTERSECTING (X(I),X(I+1)). SIMILARLY FOR H2(I).              
C                                                                       
C INPUT -                                                               
C                                                                       
C   K    - THE ORDER OF THE B-SPLINES USED.                             
C          2 .LE. K IS ASSUMED.                                         
C   T1   - THE UNREFINED B-SPLINE MESH.                                 
C   N1   - THE NUMBER OF POINTS IN THE T1 MESH.                         
C   A1   - THE UNREFINED B-SPLINE COEFFICIENTS.                         
C   T2   - THE REFINED B-SPLINE MESH.                                   
C   N2   - THE NUMBER OF POINTS IN THE T2 MESH.                         
C   A2   - THE REFINED B-SPLINE COEFFICIENTS.                           
C   X    - (X(I),X(I+1)) GIVES THE I-TH INTERVAL AN ERROR ESTIMATE      
C          DESIRED FOR, I = 1,...,NX-1.                                 
C          X MUST BE MONOTONE INCREASING.                               
C   NX   - THE NUMBER OF POINTS IN X.                                   
C   XEST - THE PATTERN ON (-1,+1) WHICH IS TO BE SCALED AND USED I      
C          SEARCH FOR THE MAXIMUM DEVIATION IN EACH T MESH INTERVA      
C          XEST MUST BE MONOTONE INCREASING.                            
C   MEST - THE LENGTH OF THE ARRAY XEST.                                
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   EREST1 - EREST1(I) IS THE ERROR ESTIMATE FOR THE T1                 
C            APPROXIMATION ON THE I-TH X INTERVAL, I = 1,...,NX-1.      
C            EREST1(I) = D1MACH(2) IS RETURNED IF T2 IS NOT A REFI      
C            OF T1 ON (X(I),X(I+1)).                                    
C            IF X(I) = X(I+1) THEN EREST1(I) IS MEANINGLESS.            
C                                                                       
C            EREST1(NX) = MAX(EREST1(1),...,EREST1(NX-1)).              
C                                                                       
C   EREST2 - EREST2(I) IS THE ERROR ESTIMATE FOR THE T2                 
C            APPROXIMATION ON THE I-TH X INTERVAL, I = 1,...,NX-1.      
C            EREST2(I) = D1MACH(2) IS RETURNED IF T2 IS NOT A REFI      
C            OF T1 ON (X(I),X(I+1)).                                    
C            IF X(I) = X(I+1) THEN EREST2(I) IS MEANINGLESS.            
C                                                                       
C            EREST2(NX) = MAX(EREST2(1),...,EREST2(NX-1)).              
C                                                                       
C   PROCEDURE VALUE - EREST1(NX).                                       
C                                                                       
C SCRATCH SPACE ALLOCATED - 5*K + NX LONG REAL WORDS.                   
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - K.LT.2.                                                        
C    2 - N1.LE.K.                                                       
C    3 - N2.LE.K.                                                       
C    4 - NX.LT.2.                                                       
C    5 - MEST.LT.1.                                                     
C    6 - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2)).                          
C    7 - (X(1),X(NX)) NOT PART OF (T1(1),T1(N1)).                       
C    8 - T1 NOT MONOTONE INCREASING.                                    
C    9 - T2 NOT MONOTONE INCREASING.                                    
C   10 - X IS NOT MONOTONE INCREASING.                                  
C   11 - XEST(I) NOT IN (-1,+1).                                        
C   12 - XEST IS NOT MONOTONE INCREASING.                               
C                                                                       
      INTEGER X2540(1)                                                  
            INTEGER ID(1),I,IADIF1,IADIF2,ISTKGT,IERR,ILO1,ILO2,ILEFT1,I
     *LEFT2,I1,I2,IXX,IX                                                
            DOUBLE PRECISION Y1(1),Y2(1),XA(1),D1MACH,BIG,POWER,XLEFT,XR
     *IGHT                                                              
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      DOUBLE PRECISION WS(500)                                          
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER K,N1,N2,NX,MEST                                           
            DOUBLE PRECISION T1(N1),A1(1),T2(N2),A2(1),X(NX),XEST(MEST),
     *EREST1(NX),EREST2(NX)                                             
C                                                                       
      EQUIVALENCE (X2540(1),ID(1))                                      
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
      DATA X2540(1)/0/                                                  
C                                                                       
C LONG REAL A1(N1-K),A2(N2-K)                                           
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C DEFINE H1 = EREST1                                                    
C DEFINE H2 = EREST2                                                    
C                                                                       
      BIG = D1MACH(2)                                                   
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15HDEEBSP - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR('DEEBSP - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N1.GT.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16HDEEBSP - N1.LE.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR('DEEBSP - N1.LE.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( N2.GT.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HDEEBSP - N2.LE.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR('DEEBSP - N2.LE.K',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( NX.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(16HDEEBSP - NX.LT.2,16,4,2)                           
C/7S                                                                    
      CALL SETERR('DEEBSP - NX.LT.2',16,4,2)                            
C/                                                                      
 1006 CONTINUE                                                          
      IF( MEST.GE.1 )      GOTO 1008                                    
C/6S                                                                    
C     CALL SETERR(18HDEEBSP - MEST.LT.1,18,5,2)                         
C/7S                                                                    
      CALL SETERR('DEEBSP - MEST.LT.1',18,5,2)                          
C/                                                                      
C                                                                       
 1008 CONTINUE                                                          
      IF( T1(1).EQ.T2(1).AND.T1(N1).EQ.T2(N2) )      GOTO 1010          
C/6S                                                                    
C           CALL SETERR(45HDEEBSP - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))
C    *,45,6,2)                                                          
C/7S                                                                    
            CALL SETERR('DEEBSP - (T1(1),T1(N1)) IS NOT (T2(1),T2(N2))' 
     *,45,6,2)                                                          
C/                                                                      
C                                                                       
 1010 CONTINUE                                                          
      IF( X(1).GE.T1(1).AND.X(NX).LE.T1(N1) )      GOTO 1012            
C/6S                                                                    
C           CALL SETERR(48HDEEBSP - (X(1),X(NX)) NOT PART OF (T1(1),T1(N
C    *1)),48,7,2)                                                       
C/7S                                                                    
            CALL SETERR('DEEBSP - (X(1),X(NX)) NOT PART OF (T1(1),T1(N1)
     *)',48,7,2)                                                        
C/                                                                      
C                                                                       
 1012 CONTINUE                                                          
      I21016 = N1-1                                                     
      DO 1014 I = 1, I21016                                             
      IF( T1(I).LE.T1(I+1) )      GOTO 1017                             
C/6S                                                                    
C     CALL SETERR(35HDEEBSP - T1 NOT MONOTONE INCREASING,35,8,2)        
C/7S                                                                    
      CALL SETERR('DEEBSP - T1 NOT MONOTONE INCREASING',35,8,2)         
C/                                                                      
 1017 CONTINUE                                                          
      IF( I+K.LE.N1 )      GOTO 1019                                    
      GOTO 1014                                                         
 1019 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T1(IX1005).GT.T1(I) )      GOTO 1021                          
C/6S                                                                    
C     CALL SETERR(35HDEEBSP - T1 NOT MONOTONE INCREASING,35,8,2)        
C/7S                                                                    
      CALL SETERR('DEEBSP - T1 NOT MONOTONE INCREASING',35,8,2)         
C/                                                                      
 1021 CONTINUE                                                          
 1014 CONTINUE                                                          
 1015 CONTINUE                                                          
      I21025 = N2-1                                                     
      DO 1023 I = 1, I21025                                             
      IF( T2(I).LE.T2(I+1) )      GOTO 1026                             
C/6S                                                                    
C     CALL SETERR(35HDEEBSP - T2 NOT MONOTONE INCREASING,35,9,2)        
C/7S                                                                    
      CALL SETERR('DEEBSP - T2 NOT MONOTONE INCREASING',35,9,2)         
C/                                                                      
 1026 CONTINUE                                                          
      IF( I+K.LE.N2 )      GOTO 1028                                    
      GOTO 1023                                                         
 1028 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T2(IX1005).GT.T2(I) )      GOTO 1030                          
C/6S                                                                    
C     CALL SETERR(35HDEEBSP - T2 NOT MONOTONE INCREASING,35,9,2)        
C/7S                                                                    
      CALL SETERR('DEEBSP - T2 NOT MONOTONE INCREASING',35,9,2)         
C/                                                                      
 1030 CONTINUE                                                          
C                                                                       
 1023 CONTINUE                                                          
 1024 CONTINUE                                                          
      I21034 = NX-1                                                     
      DO 1032 I = 1, I21034                                             
      IF( X(I).LE.X(I+1) )      GOTO 1035                               
C/6S                                                                    
C           CALL SETERR(37HDEEBSP - X IS NOT MONOTONE INCREASING,37,10,2
C    *)                                                                 
C/7S                                                                    
            CALL SETERR('DEEBSP - X IS NOT MONOTONE INCREASING',37,10,2 
     *)                                                                 
C/                                                                      
 1035 CONTINUE                                                          
C                                                                       
 1032 CONTINUE                                                          
 1033 CONTINUE                                                          
      DO 1037 I = 1, MEST                                               
            IF( XEST(I).GE.(-1.0D0).AND.XEST(I).LE.(+1.0D0) )      GOTO 
     *1040                                                              
C/6S                                                                    
C     CALL SETERR(31HDEEBSP - XEST(I) NOT IN (-1,+1),31,11,2)           
C/7S                                                                    
      CALL SETERR('DEEBSP - XEST(I) NOT IN (-1,+1)',31,11,2)            
C/                                                                      
 1040 CONTINUE                                                          
      IF( I.NE.MEST )      GOTO 1042                                    
      GOTO 1037                                                         
C                                                                       
 1042 CONTINUE                                                          
      IF( XEST(I).LE.XEST(I+1) )      GOTO 1044                         
C/6S                                                                    
C           CALL SETERR(40HDEEBSP - XEST IS NOT MONOTONE INCREASING,40,1
C    *2,2)                                                              
C/7S                                                                    
            CALL SETERR('DEEBSP - XEST IS NOT MONOTONE INCREASING',40,1 
     *2,2)                                                              
C/                                                                      
 1044 CONTINUE                                                          
C                                                                       
 1037 CONTINUE                                                          
 1038 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
C ALLOCATE SCRATCH SPACE FOR CALLS TO DSPLN2.                           
C                                                                       
      IADIF1 = ISTKGT(2*K,4)                                            
      IADIF2 = IADIF1+K                                                 
C                                                                       
      IERR = ISTKGT(NX,4)                                               
C THE DEVIATION ON EACH T INTERVAL.                                     
C                                                                       
      CALL SETD(NX,0.0D0,EREST1)                                        
C H1 == 0.                                                              
      CALL SETD(NX,0.0D0,EREST2)                                        
C H2 == 0.                                                              
      CALL SETD(NX,0.0D0,WS(IERR))                                      
C                                                                       
C INITIALIZE PARAMETERS FOR DSPLN2.                                     
C                                                                       
      ILO1 = 0                                                          
      ILO2 = 0                                                          
      ILEFT1 = 1                                                        
      ILEFT2 = 1                                                        
C                                                                       
      I1 = 1                                                            
C CURRENT RIGHT-MOST T1 AND                                             
      I2 = 1                                                            
C T2 MESH POINTS.                                                       
C                                                                       
      IX = 1                                                            
C CURRENT LEFT-MOST X INTERVAL.                                         
C                                                                       
C GET H1, H2 AND THE DEVIATION OVER EACH X INTERVAL.                    
C                                                                       
      XLEFT = X(1)                                                      
 1048 CONTINUE                                                          
      IF( XLEFT.GE.X(NX) )      GOTO 1047                               
 1049 CONTINUE                                                          
      IF( T1(I1).GT.XLEFT.OR.I1.GE.N1 )      GOTO 1050                  
      I1 = I1 + (1)                                                     
      GOTO 1049                                                         
 1050 CONTINUE                                                          
 1051 CONTINUE                                                          
      IF( T2(I2).GT.XLEFT.OR.I2.GE.N2 )      GOTO 1052                  
      I2 = I2 + (1)                                                     
C                                                                       
      GOTO 1051                                                         
 1052 CONTINUE                                                          
      XRIGHT = DMIN1(T1(I1),T2(I2),X(NX))                               
C                                                                       
      DO 1053 I = 1, MEST                                               
C     SEARCH (XLEFT,XRIGHT).                                            
      XA(1) = XLEFT+0.5D0*(XRIGHT-XLEFT)*(1.0D0+XEST(I))                
      XA(1) = DMAX1(XLEFT,DMIN1(XA(1),XRIGHT))                          
C                                                                       
            CALL DSPLN2(K,T1,N1,A1,XA,1,ID,1,Y1,K,WS(IADIF1),ILO1,ILEFT1
     *)                                                                 
            CALL DSPLN2(K,T2,N2,A2,XA,1,ID,1,Y2,K,WS(IADIF2),ILO2,ILEFT2
     *)                                                                 
C                                                                       
C     UPDATE ALL X INTERVALS CONTAINING XA(1).                          
C                                                                       
      IXX = IX                                                          
 1058 CONTINUE                                                          
      IF( X(IXX).GT.XA(1).OR.IXX.GE.NX )      GOTO 1057                 
      IF( X(IXX+1).GE.XA(1) )      GOTO 1059                            
      IX = IXX                                                          
      GOTO 1056                                                         
C                                                                       
 1059 CONTINUE                                                          
      EREST1(IXX) = DMAX1(EREST1(IXX),T1(ILEFT1+1)-T1(ILEFT1))          
      EREST2(IXX) = DMAX1(EREST2(IXX),T2(ILEFT2+1)-T2(ILEFT2))          
C                                                                       
      IX1005 = IERR+IXX-1                                               
      IX1001 = IERR+IXX-1                                               
      WS(IX1001) = DMAX1(WS(IX1005),DABS(Y1(1)-Y2(1)))                  
 1056 CONTINUE                                                          
      IXX = IXX + (1)                                                   
      GOTO 1058                                                         
 1057 CONTINUE                                                          
 1053 CONTINUE                                                          
 1054 CONTINUE                                                          
C                                                                       
C NOW GET THE ERROR ESTIMATES.                                          
C                                                                       
 1046 CONTINUE                                                          
      XLEFT = XRIGHT                                                    
      GOTO 1048                                                         
 1047 CONTINUE                                                          
      I21063 = NX-1                                                     
      DO 1061 I = 1, I21063                                             
            IF( EREST1(I).LE.EREST2(I).OR.EREST2(I).LE.0.0D0 )      GOTO
     * 1064                                                             
      POWER = (EREST1(I)/EREST2(I))**(K)                                
C                                                                       
      IX1002 = IERR+I-1                                                 
      EREST2(I) = WS(IX1002)/(POWER-1.0D0)                              
      EREST1(I) = EREST2(I)*POWER                                       
C                                                                       
      EREST1(NX) = DMAX1(EREST1(NX),EREST1(I))                          
      EREST2(NX) = DMAX1(EREST2(NX),EREST2(I))                          
      GOTO 1065                                                         
 1064 CONTINUE                                                          
      EREST1(I) = BIG                                                   
      EREST2(I) = BIG                                                   
      EREST1(NX) = BIG                                                  
      EREST2(NX) = BIG                                                  
 1065 CONTINUE                                                          
C                                                                       
 1061 CONTINUE                                                          
 1062 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      DEEBSP = EREST1(NX)                                               
      RETURN                                                            
C                                                                       
      END                                                               
      REAL FUNCTION EESFF(K,T,N,A,F)                                    
C                                                                       
C                                                                       
C PURPOSE -                                                             
C                                                                       
C   TO FIND THE MAXIMUM ABSOLUTE DIFFERENCE BETWEEN F(Y) AND S(Y),      
C   WHERE S(Y) IS THE B-SPLINE GIVEN BY (K,T,N,A).                      
C                                                                       
C METHOD -                                                              
C                                                                       
C   LET MEST = (2*K-1)*PI + 1.                                          
C                                                                       
C   THE MAXIMUM IS FOUND (ESTIMATED) BY SEARCHING EACH T                
C   INTERVAL AT A PATTERN OF MEST POINTS GIVEN BY                       
C   COS(THETA) WHERE MEST EQUALLY SPACED THETA VALUES ON (-PI,0) A      
C   THIS SEARCH GUARANTEES THAT IF F IS A POLYNOMIAL OF DEGREE LES      
C   2*K, THE ERROR ESTIMATE WILL BE COMPUTED ACCURATE TO WITHIN A       
C   FACTOR OF 2.                                                        
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A              
C            SPLINE FIT TO A FUNCTION.                                  
C                                                                       
C INPUT -                                                               
C                                                                       
C   K      - THE B-SPLINE ORDER USED.                                   
C   T      - THE B-SPLINE MESH.                                         
C   N      - THE NUMBER OF POINTS IN THE MESH T.                        
C   A      - THE B-SPLINE COEFFICIENTS.                                 
C   F      - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    F(X,NX,FX,WX)                                      
C                                                                       
C            F MUST DECLARED EXTERNAL IN THE USERS CALLING PROGRAM      
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F IS TO BE EVALUATED.            
C              NX   - THE LENGTH OF THE ARRAY X.                        
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I) = F( X(I) ), I = 1,...,NX.                    
C              WX - WX IS A DUMMY ARRAY OF LENGTH NX TO MAKE THE C      
C                   CONSISTANT WITH THAT TO F IN DL2SFF.                
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   PROCEDURE VALUE - THE MAXIMUM ERROR FOUND.                          
C                                                                       
C SCRATCH SPACE ALLOCATED - 4*K + (2*K-1)*PI + 1 REAL WORDS.            
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - N.LE.K.                                                         
C   3 - T NOT MONOTONE INCREASING.                                      
C                                                                       
      INTEGER I                                                         
      REAL X(2),ERR(2),EESFI                                            
      EXTERNAL F                                                        
      INTEGER K,N                                                       
      REAL T(N),A(1)                                                    
C                                                                       
C                                                                       
C                                                                       
C A(N-K).                                                               
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15H EESFF - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR(' EESFF - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N.GT.K )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15H EESFF - N.LE.K,15,2,2)                            
C/7S                                                                    
      CALL SETERR(' EESFF - N.LE.K',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
C                                                                       
      I21006 = N-1                                                      
      DO 1004 I = 1, I21006                                             
      IF( T(I).LE.T(I+1) )      GOTO 1007                               
C/6S                                                                    
C     CALL SETERR(34H EESFF - T NOT MONOTONE INCREASING,34,3,2)         
C/7S                                                                    
      CALL SETERR(' EESFF - T NOT MONOTONE INCREASING',34,3,2)          
C/                                                                      
 1007 CONTINUE                                                          
      IF( I+K.LE.N )      GOTO 1009                                     
      GOTO 1004                                                         
 1009 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).GT.T(I) )      GOTO 1011                            
C/6S                                                                    
C     CALL SETERR(34H EESFF - T NOT MONOTONE INCREASING,34,3,2)         
C/7S                                                                    
      CALL SETERR(' EESFF - T NOT MONOTONE INCREASING',34,3,2)          
C/                                                                      
 1011 CONTINUE                                                          
C                                                                       
 1004 CONTINUE                                                          
 1005 CONTINUE                                                          
      X(1) = T(1)                                                       
      X(2) = T(N)                                                       
C                                                                       
      EESFF = EESFI(K,T,N,A,F,X,2,ERR)                                  
      RETURN                                                            
C                                                                       
      END                                                               
      REAL FUNCTION EESFI(K,T,N,A,F,X,NX,EEST)                          
C                                                                       
C                                                                       
C PURPOSE -                                                             
C                                                                       
C   TO FIND THE MAXIMUM ABSOLUTE DIFFERENCE BETWEEN F(Y) AND S(Y),      
C   WHERE S(Y) IS THE B-SPLINE GIVEN BY (K,T,N,A), ON EACH INTERVA      
C   (X(I),X(I+1)) FOR I = 1,...,NX-1.                                   
C                                                                       
C METHOD -                                                              
C                                                                       
C   LET MEST = (2*K-1)*PI + 1.                                          
C                                                                       
C   THE MAXIMUM IS FOUND (ESTIMATED) BY                                 
C   SEARCHING EACH T INTERVAL AT A PATTERN OF MEST POINTS GIVEN BY      
C   COS(THETA) WHERE MEST EQUALLY SPACED THETA VALUES ON (-PI,0) A      
C   THIS SEARCH GUARANTEES THAT IF F IS A POLYNOMIAL OF DEGREE LES      
C   2*K, THE ERROR ESTIMATE WILL BE COMPUTED ACCURATE TO WITHIN A       
C   FACTOR OF 2.                                                        
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A              
C            SPLINE FIT TO A FUNCTION, OVER GIVEN INTERVALS.            
C                                                                       
C INPUT -                                                               
C                                                                       
C   K      - THE B-SPLINE ORDER USED.                                   
C   T      - THE B-SPLINE MESH.                                         
C   N      - THE NUMBER OF POINTS IN THE MESH T.                        
C   A      - THE B-SPLINE COEFFICIENTS.                                 
C   F      - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    F(X,NX,FX,WX)                                      
C                                                                       
C            F MUST DECLARED EXTERNAL IN THE USERS CALLING PROGRAM      
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F IS TO BE EVALUATED.            
C              NX   - THE LENGTH OF THE ARRAY X.                        
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I) = F( X(I) ), I = 1,...,NX.                    
C              WX - WX IS A DUMMY ARRAY OF LENGTH NX TO MAKE THE C      
C                   CONSISTANT WITH THAT TO F IN DL2SFF.                
C   X      - THE INTERVALS ON WHICH THE ERROR IS DESIRED.               
C            X MUST BE MONOTONE INCREASING.                             
C   NX     - THE NUMBER OF POINTS IN X.                                 
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   EEST - EEST(I) IS THE MAXIMUM ERROR FOUND ON THE I-TH X INTERV      
C          FOR I = 1,...,NX-1.                                          
C          IF X(I) = X(I+1) THEN EEST(I) IS MEANINGLESS.                
C                                                                       
C          EEST(NX) = MAX(EEST(1),...,EEST(NX-1))                       
C                                                                       
C   PROCEDURE VALUE - EEST(NX).                                         
C                                                                       
C SCRATCH SPACE ALLOCATED - 4*K + (2*K-1)*PI + 1 REAL WORDS.            
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - N.LE.K.                                                         
C   3 - NX.LT.2.                                                        
C   4 - T NOT MONOTONE INCREASING.                                      
C   5 - (X(1),X(NX)) NOT PART OF (T(1),T(N)).                           
C   6 - X IS NOT MONOTONE INCREASING.                                   
C                                                                       
      INTEGER I,MEST                                                    
      REAL EESFM                                                        
      EXTERNAL F                                                        
      INTEGER K,N,NX                                                    
      REAL T(N),A(1),X(NX),EEST(NX)                                     
C                                                                       
C                                                                       
C                                                                       
C A(N-K).                                                               
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15H EESFI - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR(' EESFI - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N.GT.K )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15H EESFI - N.LE.K,15,2,2)                            
C/7S                                                                    
      CALL SETERR(' EESFI - N.LE.K',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NX.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H EESFI - NX.LT.2,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' EESFI - NX.LT.2',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
C                                                                       
      I21008 = N-1                                                      
      DO 1006 I = 1, I21008                                             
      IF( T(I).LE.T(I+1) )      GOTO 1009                               
C/6S                                                                    
C     CALL SETERR(34H EESFI - T NOT MONOTONE INCREASING,34,4,2)         
C/7S                                                                    
      CALL SETERR(' EESFI - T NOT MONOTONE INCREASING',34,4,2)          
C/                                                                      
 1009 CONTINUE                                                          
      IF( I+K.LE.N )      GOTO 1011                                     
      GOTO 1006                                                         
 1011 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).GT.T(I) )      GOTO 1013                            
C/6S                                                                    
C     CALL SETERR(34H EESFI - T NOT MONOTONE INCREASING,34,4,2)         
C/7S                                                                    
      CALL SETERR(' EESFI - T NOT MONOTONE INCREASING',34,4,2)          
C/                                                                      
 1013 CONTINUE                                                          
C                                                                       
 1006 CONTINUE                                                          
 1007 CONTINUE                                                          
      IF( X(1).GE.T(1).AND.X(NX).LE.T(N) )      GOTO 1015               
C/6S                                                                    
C           CALL SETERR(45H EESFI - (X(1),X(NX)) NOT PART OF (T(1),T(N))
C    *,45,5,2)                                                          
C/7S                                                                    
            CALL SETERR(' EESFI - (X(1),X(NX)) NOT PART OF (T(1),T(N))' 
     *,45,5,2)                                                          
C/                                                                      
C                                                                       
 1015 CONTINUE                                                          
      I21019 = NX-1                                                     
      DO 1017 I = 1, I21019                                             
      IF( X(I).LE.X(I+1) )      GOTO 1020                               
C/6S                                                                    
C           CALL SETERR(37H EESFI - X IS NOT MONOTONE INCREASING,37,6,2)
C/7S                                                                    
            CALL SETERR(' EESFI - X IS NOT MONOTONE INCREASING',37,6,2) 
C/                                                                      
 1020 CONTINUE                                                          
C                                                                       
 1017 CONTINUE                                                          
 1018 CONTINUE                                                          
      MEST = FLOAT(2*K-1)*4.0E0*ATAN(1.0E0)+1.0E0                       
C                                                                       
      EESFI = EESFM(K,T,N,A,F,X,NX,MEST,EEST)                           
      RETURN                                                            
C                                                                       
      END                                                               
      REAL FUNCTION EESFM(K,T,N,A,F,X,NX,MEST,EEST)                     
C                                                                       
C                                                                       
C PURPOSE -                                                             
C                                                                       
C   TO FIND THE MAXIMUM ABSOLUTE DIFFERENCE BETWEEN F(Y) AND S(Y),      
C   WHERE S(Y) IS THE B-SPLINE GIVEN BY (K,T,N,A), ON EACH INTERVA      
C   (X(I),X(I+1)) FOR I = 1,...,NX-1.                                   
C                                                                       
C METHOD -                                                              
C                                                                       
C   THE MAXIMUM IS FOUND (ESTIMATED) BY                                 
C   SEARCHING EACH T INTERVAL AT A PATTERN OF MEST POINTS GIVEN BY      
C   COS(THETA) WHERE MEST EQUALLY SPACED THETA VALUES ON (-PI,0) A      
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A              
C            SPLINE FIT TO A FUNCTION, USING MEST POINTS IN THE SE      
C                                                                       
C INPUT -                                                               
C                                                                       
C   K      - THE B-SPLINE ORDER USED.                                   
C   T      - THE B-SPLINE MESH.                                         
C   N      - THE NUMBER OF POINTS IN THE MESH T.                        
C   A      - THE B-SPLINE COEFFICIENTS.                                 
C   F      - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    F(X,NX,FX,WX)                                      
C                                                                       
C            F MUST DECLARED EXTERNAL IN THE USERS CALLING PROGRAM      
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F IS TO BE EVALUATED.            
C              NX   - THE LENGTH OF THE ARRAY X.                        
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I) = F( X(I) ), I = 1,...,NX.                    
C              WX - WX IS A DUMMY ARRAY OF LENGTH NX TO MAKE THE C      
C                   CONSISTANT WITH THAT TO F IN DL2SFF.                
C   X      - THE INTERVALS ON WHICH THE ERROR IS DESIRED.               
C            X MUST BE MONOTONE INCREASING.                             
C   NX     - THE NUMBER OF POINTS IN X.                                 
C   MEST   - THE NUMBER OF POINTS TO BE USED SEARCHING EACH T INTE      
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   EEST - EEST(I) IS THE MAXIMUM ERROR FOUND ON THE I-TH X INTERV      
C          FOR I = 1,...,NX-1.                                          
C          IF X(I) = X(I+1) THEN EEST(I) IS MEANINGLESS.                
C                                                                       
C          EEST(NX) = MAX(EEST(1),...,EEST(NX-1))                       
C                                                                       
C   PROCEDURE VALUE - EEST(NX).                                         
C                                                                       
C SCRATCH SPACE ALLOCATED - 4*K + MEST REAL WORDS.                      
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - N.LE.K.                                                         
C   3 - NX.LT.2.                                                        
C   4 - MEST.LT.1.                                                      
C   5 - T NOT MONOTONE INCREASING.                                      
C   6 - (X(1),X(NX)) NOT PART OF (T(1),T(N)).                           
C   7 - X IS NOT MONOTONE INCREASING.                                   
C                                                                       
      INTEGER I,IXEST,ISTKGT                                            
      REAL VALUE,EESFP                                                  
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      REAL WS(500)                                                      
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      EXTERNAL F                                                        
      INTEGER K,N,NX,MEST                                               
      REAL T(N),A(1),X(NX),EEST(NX)                                     
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(N-K).                                                               
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15H EESFM - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR(' EESFM - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N.GT.K )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15H EESFM - N.LE.K,15,2,2)                            
C/7S                                                                    
      CALL SETERR(' EESFM - N.LE.K',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NX.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H EESFM - NX.LT.2,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' EESFM - NX.LT.2',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( MEST.GE.1 )      GOTO 1006                                    
C/6S                                                                    
C     CALL SETERR(18H EESFM - MEST.LT.1,18,4,2)                         
C/7S                                                                    
      CALL SETERR(' EESFM - MEST.LT.1',18,4,2)                          
C/                                                                      
 1006 CONTINUE                                                          
C                                                                       
      I21010 = N-1                                                      
      DO 1008 I = 1, I21010                                             
      IF( T(I).LE.T(I+1) )      GOTO 1011                               
C/6S                                                                    
C     CALL SETERR(34H EESFM - T NOT MONOTONE INCREASING,34,5,2)         
C/7S                                                                    
      CALL SETERR(' EESFM - T NOT MONOTONE INCREASING',34,5,2)          
C/                                                                      
 1011 CONTINUE                                                          
      IF( I+K.LE.N )      GOTO 1013                                     
      GOTO 1008                                                         
 1013 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).GT.T(I) )      GOTO 1015                            
C/6S                                                                    
C     CALL SETERR(34H EESFM - T NOT MONOTONE INCREASING,34,5,2)         
C/7S                                                                    
      CALL SETERR(' EESFM - T NOT MONOTONE INCREASING',34,5,2)          
C/                                                                      
 1015 CONTINUE                                                          
C                                                                       
 1008 CONTINUE                                                          
 1009 CONTINUE                                                          
      IF( X(1).GE.T(1).AND.X(NX).LE.T(N) )      GOTO 1017               
C/6S                                                                    
C           CALL SETERR(45H EESFM - (X(1),X(NX)) NOT PART OF (T(1),T(N))
C    *,45,6,2)                                                          
C/7S                                                                    
            CALL SETERR(' EESFM - (X(1),X(NX)) NOT PART OF (T(1),T(N))' 
     *,45,6,2)                                                          
C/                                                                      
C                                                                       
 1017 CONTINUE                                                          
      I21021 = NX-1                                                     
      DO 1019 I = 1, I21021                                             
      IF( X(I).LE.X(I+1) )      GOTO 1022                               
C/6S                                                                    
C           CALL SETERR(37H EESFM - X IS NOT MONOTONE INCREASING,37,7,2)
C/7S                                                                    
            CALL SETERR(' EESFM - X IS NOT MONOTONE INCREASING',37,7,2) 
C/                                                                      
 1022 CONTINUE                                                          
C                                                                       
 1019 CONTINUE                                                          
 1020 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
C ALLOCATE AND MAKE THE XEST ARRAY.                                     
C                                                                       
      IXEST = ISTKGT(MEST,3)                                            
C                                                                       
      IF( MEST.LE.1 )      GOTO 1024                                    
      CALL UMD(-4.0E0*ATAN(1.0E0),0.0E0,MEST,WS(IXEST))                 
      GOTO 1025                                                         
 1024 CONTINUE                                                          
      WS(IXEST) = -2.0E0*ATAN(1.0E0)                                    
C                                                                       
 1025 CONTINUE                                                          
      IF( MEST.LE.1 )      GOTO 1026                                    
      WS(IXEST) = 0.5E0*(WS(IXEST)+WS(IXEST+1))                         
 1026 CONTINUE                                                          
      IF( MEST.LE.2 )      GOTO 1028                                    
      IX1003 = IXEST+MEST-2                                             
      IX1004 = IXEST+MEST-1                                             
      IX1001 = IXEST+MEST-1                                             
      WS(IX1001) = 0.5E0*(WS(IX1003)+WS(IX1004))                        
C                                                                       
 1028 CONTINUE                                                          
      DO 1030 I = 1, MEST                                               
      IX1005 = IXEST+I-1                                                
      IX1001 = IXEST+I-1                                                
      WS(IX1001) = COS(WS(IX1005))                                      
C                                                                       
 1030 CONTINUE                                                          
 1031 CONTINUE                                                          
      VALUE = EESFP(K,T,N,A,F,X,NX,WS(IXEST),MEST,EEST)                 
C                                                                       
      CALL LEAVE                                                        
C                                                                       
      EESFM = VALUE                                                     
      RETURN                                                            
C                                                                       
      END                                                               
      REAL FUNCTION EESFP(K,T,N,A,F,X,NX,XEST,MEST,EEST)                
C                                                                       
C                                                                       
C PURPOSE -                                                             
C                                                                       
C   TO FIND THE MAXIMUM ABSOLUTE DIFFERENCE BETWEEN F(Y) AND S(Y),      
C   WHERE S(Y) IS THE B-SPLINE GIVEN BY (K,T,N,A), ON EACH INTERVA      
C   (X(I),X(I+1)) FOR I = 1,...,NX-1.                                   
C                                                                       
C METHOD -                                                              
C                                                                       
C   THE MAXIMUM IS FOUND (ESTIMATED) BY                                 
C   SEARCHING EACH T INTERVAL AT A PATTERN OF MEST POINTS GIVEN BY      
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A ,            
C            SPLINE FIT TO A FUNCTION, USING A GIVEN PATTERN IN TH      
C                                                                       
C INPUT -                                                               
C                                                                       
C   K      - THE B-SPLINE ORDER USED.                                   
C   T      - THE B-SPLINE MESH.                                         
C   N      - THE NUMBER OF POINTS IN THE MESH T.                        
C   A      - THE B-SPLINE COEFFICIENTS.                                 
C   F      - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    F(X,NX,FX,WX)                                      
C                                                                       
C            F MUST DECLARED EXTERNAL IN THE USERS CALLING PROGRAM      
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F IS TO BE EVALUATED.            
C              NX   - THE LENGTH OF THE ARRAY X.                        
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I) = F( X(I) ), I = 1,...,NX.                    
C              WX - WX IS A DUMMY ARRAY OF LENGTH NX TO MAKE THE C      
C                   CONSISTANT WITH THAT TO F IN DL2SFF.                
C   X      - THE INTERVALS ON WHICH THE ERROR IS DESIRED.               
C            X MUST BE MONOTONE INCREASING.                             
C   NX     - THE NUMBER OF POINTS IN X.                                 
C   XEST   - THE PATTERN OF POINTS ON (-1,+1) TO BE SCALED AND USE      
C            THE SEARCH OF EACH MESH INTERVAL FOR THE MAXIMUM ERRO      
C            XEST MUST BE MONOTONE INCREASING.                          
C   MEST   - THE NUMBER OF POINTS IN XEST.                              
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   EEST - EEST(I) IS THE MAXIMUM ERROR FOUND ON THE I-TH X INTERV      
C          FOR I = 1,...,NX-1.                                          
C          IF X(I) = X(I+1) THEN EEST(I) IS MEANINGLESS.                
C                                                                       
C          EEST(NX) = MAX(EEST(1),...,EEST(NX-1))                       
C                                                                       
C   PROCEDURE VALUE - EEST(NX).                                         
C                                                                       
C SCRATCH SPACE ALLOCATED - 4*K REAL WORDS.                             
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - N.LE.K.                                                         
C   3 - NX.LT.2.                                                        
C   4 - MEST.LT.1.                                                      
C   5 - T NOT MONOTONE INCREASING.                                      
C   6 - (X(1),X(NX)) NOT PART OF (T(1),T(N)).                           
C   7 - X IS NOT MONOTONE INCREASING.                                   
C   8 - XEST(I) NOT IN (-1,+1).                                         
C   9 - XEST IS NOT MONOTONE INCREASING.                                
C                                                                       
      INTEGER X2360(1)                                                  
      INTEGER ID(1),I,IADIFF,ISTKGT,ILEFT,ILO,JLO,J,L                   
      REAL Y(1),FY(1),WY(1),SY(1)                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      REAL WS(500)                                                      
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      EXTERNAL F                                                        
      INTEGER K,N,NX,MEST                                               
      REAL T(N),A(1),X(NX),XEST(MEST),EEST(NX)                          
C                                                                       
      EQUIVALENCE (X2360(1),ID(1))                                      
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
      DATA X2360(1)/0/                                                  
C                                                                       
C A(N-K).                                                               
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15H EESFP - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR(' EESFP - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N.GT.K )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15H EESFP - N.LE.K,15,2,2)                            
C/7S                                                                    
      CALL SETERR(' EESFP - N.LE.K',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NX.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H EESFP - NX.LT.2,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' EESFP - NX.LT.2',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( MEST.GE.1 )      GOTO 1006                                    
C/6S                                                                    
C     CALL SETERR(18H EESFP - MEST.LT.1,18,4,2)                         
C/7S                                                                    
      CALL SETERR(' EESFP - MEST.LT.1',18,4,2)                          
C/                                                                      
 1006 CONTINUE                                                          
C                                                                       
      I21010 = N-1                                                      
      DO 1008 I = 1, I21010                                             
      IF( T(I).LE.T(I+1) )      GOTO 1011                               
C/6S                                                                    
C     CALL SETERR(34H EESFP - T NOT MONOTONE INCREASING,34,5,2)         
C/7S                                                                    
      CALL SETERR(' EESFP - T NOT MONOTONE INCREASING',34,5,2)          
C/                                                                      
 1011 CONTINUE                                                          
      IF( I+K.LE.N )      GOTO 1013                                     
      GOTO 1008                                                         
 1013 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).GT.T(I) )      GOTO 1015                            
C/6S                                                                    
C     CALL SETERR(34H EESFP - T NOT MONOTONE INCREASING,34,5,2)         
C/7S                                                                    
      CALL SETERR(' EESFP - T NOT MONOTONE INCREASING',34,5,2)          
C/                                                                      
 1015 CONTINUE                                                          
C                                                                       
 1008 CONTINUE                                                          
 1009 CONTINUE                                                          
      IF( X(1).GE.T(1).AND.X(NX).LE.T(N) )      GOTO 1017               
C/6S                                                                    
C           CALL SETERR(45H EESFP - (X(1),X(NX)) NOT PART OF (T(1),T(N))
C    *,45,6,2)                                                          
C/7S                                                                    
            CALL SETERR(' EESFP - (X(1),X(NX)) NOT PART OF (T(1),T(N))' 
     *,45,6,2)                                                          
C/                                                                      
C                                                                       
 1017 CONTINUE                                                          
      I21021 = NX-1                                                     
      DO 1019 I = 1, I21021                                             
      IF( X(I).LE.X(I+1) )      GOTO 1022                               
C/6S                                                                    
C           CALL SETERR(37H EESFP - X IS NOT MONOTONE INCREASING,37,7,2)
C/7S                                                                    
            CALL SETERR(' EESFP - X IS NOT MONOTONE INCREASING',37,7,2) 
C/                                                                      
 1022 CONTINUE                                                          
C                                                                       
 1019 CONTINUE                                                          
 1020 CONTINUE                                                          
      DO 1024 I = 1, MEST                                               
            IF( XEST(I).GE.(-1.0E0).AND.XEST(I).LE.(+1.0E0) )      GOTO 
     *1027                                                              
C/6S                                                                    
C     CALL SETERR(31H EESFP - XEST(I) NOT IN (-1,+1),31,8,2)            
C/7S                                                                    
      CALL SETERR(' EESFP - XEST(I) NOT IN (-1,+1)',31,8,2)             
C/                                                                      
 1027 CONTINUE                                                          
      IF( I.NE.MEST )      GOTO 1029                                    
      GOTO 1024                                                         
C                                                                       
 1029 CONTINUE                                                          
      IF( XEST(I).LE.XEST(I+1) )      GOTO 1031                         
C/6S                                                                    
C           CALL SETERR(40H EESFP - XEST IS NOT MONOTONE INCREASING,40,9
C    *,2)                                                               
C/7S                                                                    
            CALL SETERR(' EESFP - XEST IS NOT MONOTONE INCREASING',40,9 
     *,2)                                                               
C/                                                                      
 1031 CONTINUE                                                          
C                                                                       
 1024 CONTINUE                                                          
 1025 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
C ALLOCATE SCRATCH SPACE FOR CALLS TO SPLN2.                            
C                                                                       
      IADIFF = ISTKGT(K,3)                                              
C                                                                       
      CALL SETR(NX,0.0E0,EEST)                                          
C                                                                       
      ILO = 0                                                           
      ILEFT = 1                                                         
C                                                                       
      JLO = 1                                                           
C CURRENT LEFT-MOST X INTERVAL.                                         
C                                                                       
      I21035 = N-1                                                      
      DO 1033 I = 1, I21035                                             
      IF( T(I).NE.T(I+1).AND.T(I+1).GE.X(1) )      GOTO 1036            
      GOTO 1033                                                         
 1036 CONTINUE                                                          
      IF( T(I).LE.X(NX) )      GOTO 1038                                
      GOTO 1034                                                         
C                                                                       
 1038 CONTINUE                                                          
      DO 1040 L = 1, MEST                                               
      Y(1) = T(I)+0.5E0*(T(I+1)-T(I))*(1.0E0+XEST(L))                   
      Y(1) = AMAX1(T(I),AMIN1(T(I+1),Y(1)))                             
C                                                                       
      CALL F(Y,1,FY,WY)                                                 
      CALL SPLN2(K,T,N,A,Y,1,ID,1,SY,K,WS(IADIFF),ILO,ILEFT)            
C                                                                       
      J = JLO                                                           
 1045 CONTINUE                                                          
      IF( X(J).GT.Y(1).OR.J.GE.NX )      GOTO 1044                      
      IF( X(J+1).GE.Y(1) )      GOTO 1046                               
      JLO = J                                                           
      GOTO 1043                                                         
C                                                                       
 1046 CONTINUE                                                          
      EEST(J) = AMAX1(EEST(J),ABS(FY(1)-SY(1)))                         
      EEST(NX) = AMAX1(EEST(NX),EEST(J))                                
 1043 CONTINUE                                                          
      J = J + (1)                                                       
      GOTO 1045                                                         
 1044 CONTINUE                                                          
 1040 CONTINUE                                                          
 1041 CONTINUE                                                          
C                                                                       
 1033 CONTINUE                                                          
 1034 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      EESFP = EEST(NX)                                                  
      RETURN                                                            
C                                                                       
      END                                                               
      DOUBLE PRECISION FUNCTION DEESFF(K,T,N,A,F)                       
C                                                                       
C                                                                       
C PURPOSE -                                                             
C                                                                       
C   TO FIND THE MAXIMUM ABSOLUTE DIFFERENCE BETWEEN F(Y) AND S(Y),      
C   WHERE S(Y) IS THE B-SPLINE GIVEN BY (K,T,N,A).                      
C                                                                       
C METHOD -                                                              
C                                                                       
C   LET MEST = (2*K-1)*PI + 1.                                          
C                                                                       
C   THE MAXIMUM IS FOUND (ESTIMATED) BY SEARCHING EACH T                
C   INTERVAL AT A PATTERN OF MEST POINTS GIVEN BY                       
C   COS(THETA) WHERE MEST EQUALLY SPACED THETA VALUES ON (-PI,0) A      
C   THIS SEARCH GUARANTEES THAT IF F IS A POLYNOMIAL OF DEGREE LES      
C   2*K, THE ERROR ESTIMATE WILL BE COMPUTED ACCURATE TO WITHIN A       
C   FACTOR OF 2.                                                        
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A              
C            SPLINE FIT TO A FUNCTION.                                  
C                                                                       
C INPUT -                                                               
C                                                                       
C   K      - THE B-SPLINE ORDER USED.                                   
C   T      - THE B-SPLINE MESH.                                         
C   N      - THE NUMBER OF POINTS IN THE MESH T.                        
C   A      - THE B-SPLINE COEFFICIENTS.                                 
C   F      - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    F(X,NX,FX,WX)                                      
C                                                                       
C            F MUST DECLARED EXTERNAL IN THE USERS CALLING PROGRAM      
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F IS TO BE EVALUATED.            
C              NX   - THE LENGTH OF THE ARRAY X.                        
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I) = F( X(I) ), I = 1,...,NX.                    
C              WX - WX IS A DUMMY ARRAY OF LENGTH NX TO MAKE THE C      
C                   CONSISTANT WITH THAT TO F IN DL2SFF.                
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   PROCEDURE VALUE - THE MAXIMUM ERROR FOUND.                          
C                                                                       
C SCRATCH SPACE ALLOCATED - 4*K + (2*K-1)*PI + 1 LONG REAL WORDS.       
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - N.LE.K.                                                         
C   3 - T NOT MONOTONE INCREASING.                                      
C                                                                       
      INTEGER I                                                         
      DOUBLE PRECISION X(2),ERR(2),DEESFI                               
      EXTERNAL F                                                        
      INTEGER K,N                                                       
      DOUBLE PRECISION T(N),A(1)                                        
C                                                                       
C                                                                       
C                                                                       
C A(N-K).                                                               
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15HDEESFF - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR('DEESFF - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N.GT.K )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15HDEESFF - N.LE.K,15,2,2)                            
C/7S                                                                    
      CALL SETERR('DEESFF - N.LE.K',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
C                                                                       
      I21006 = N-1                                                      
      DO 1004 I = 1, I21006                                             
      IF( T(I).LE.T(I+1) )      GOTO 1007                               
C/6S                                                                    
C     CALL SETERR(34HDEESFF - T NOT MONOTONE INCREASING,34,3,2)         
C/7S                                                                    
      CALL SETERR('DEESFF - T NOT MONOTONE INCREASING',34,3,2)          
C/                                                                      
 1007 CONTINUE                                                          
      IF( I+K.LE.N )      GOTO 1009                                     
      GOTO 1004                                                         
 1009 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).GT.T(I) )      GOTO 1011                            
C/6S                                                                    
C     CALL SETERR(34HDEESFF - T NOT MONOTONE INCREASING,34,3,2)         
C/7S                                                                    
      CALL SETERR('DEESFF - T NOT MONOTONE INCREASING',34,3,2)          
C/                                                                      
 1011 CONTINUE                                                          
C                                                                       
 1004 CONTINUE                                                          
 1005 CONTINUE                                                          
      X(1) = T(1)                                                       
      X(2) = T(N)                                                       
C                                                                       
      DEESFF = DEESFI(K,T,N,A,F,X,2,ERR)                                
      RETURN                                                            
C                                                                       
      END                                                               
      DOUBLE PRECISION FUNCTION DEESFI(K,T,N,A,F,X,NX,EEST)             
C                                                                       
C                                                                       
C PURPOSE -                                                             
C                                                                       
C   TO FIND THE MAXIMUM ABSOLUTE DIFFERENCE BETWEEN F(Y) AND S(Y),      
C   WHERE S(Y) IS THE B-SPLINE GIVEN BY (K,T,N,A), ON EACH INTERVA      
C   (X(I),X(I+1)) FOR I = 1,...,NX-1.                                   
C                                                                       
C METHOD -                                                              
C                                                                       
C   LET MEST = (2*K-1)*PI + 1.                                          
C                                                                       
C   THE MAXIMUM IS FOUND (ESTIMATED) BY                                 
C   SEARCHING EACH T INTERVAL AT A PATTERN OF MEST POINTS GIVEN BY      
C   COS(THETA) WHERE MEST EQUALLY SPACED THETA VALUES ON (-PI,0) A      
C   THIS SEARCH GUARANTEES THAT IF F IS A POLYNOMIAL OF DEGREE LES      
C   2*K, THE ERROR ESTIMATE WILL BE COMPUTED ACCURATE TO WITHIN A       
C   FACTOR OF 2.                                                        
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A              
C            SPLINE FIT TO A FUNCTION, OVER GIVEN INTERVALS.            
C                                                                       
C INPUT -                                                               
C                                                                       
C   K      - THE B-SPLINE ORDER USED.                                   
C   T      - THE B-SPLINE MESH.                                         
C   N      - THE NUMBER OF POINTS IN THE MESH T.                        
C   A      - THE B-SPLINE COEFFICIENTS.                                 
C   F      - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    F(X,NX,FX,WX)                                      
C                                                                       
C            F MUST DECLARED EXTERNAL IN THE USERS CALLING PROGRAM      
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F IS TO BE EVALUATED.            
C              NX   - THE LENGTH OF THE ARRAY X.                        
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I) = F( X(I) ), I = 1,...,NX.                    
C              WX - WX IS A DUMMY ARRAY OF LENGTH NX TO MAKE THE C      
C                   CONSISTANT WITH THAT TO F IN DL2SFF.                
C   X      - THE INTERVALS ON WHICH THE ERROR IS DESIRED.               
C            X MUST BE MONOTONE INCREASING.                             
C   NX     - THE NUMBER OF POINTS IN X.                                 
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   EEST - EEST(I) IS THE MAXIMUM ERROR FOUND ON THE I-TH X INTERV      
C          FOR I = 1,...,NX-1.                                          
C          IF X(I) = X(I+1) THEN EEST(I) IS MEANINGLESS.                
C                                                                       
C          EEST(NX) = MAX(EEST(1),...,EEST(NX-1))                       
C                                                                       
C   PROCEDURE VALUE - EEST(NX).                                         
C                                                                       
C SCRATCH SPACE ALLOCATED - 4*K + (2*K-1)*PI + 1 LONG REAL WORDS.       
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - N.LE.K.                                                         
C   3 - NX.LT.2.                                                        
C   4 - T NOT MONOTONE INCREASING.                                      
C   5 - (X(1),X(NX)) NOT PART OF (T(1),T(N)).                           
C   6 - X IS NOT MONOTONE INCREASING.                                   
C                                                                       
      INTEGER I,MEST                                                    
      DOUBLE PRECISION DEESFM,DATAN                                     
      EXTERNAL F                                                        
      INTEGER K,N,NX                                                    
      DOUBLE PRECISION T(N),A(1),X(NX),EEST(NX)                         
C                                                                       
C                                                                       
C                                                                       
C A(N-K).                                                               
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15HDEESFI - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR('DEESFI - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N.GT.K )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15HDEESFI - N.LE.K,15,2,2)                            
C/7S                                                                    
      CALL SETERR('DEESFI - N.LE.K',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NX.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HDEESFI - NX.LT.2,16,3,2)                           
C/7S                                                                    
      CALL SETERR('DEESFI - NX.LT.2',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
C                                                                       
      I21008 = N-1                                                      
      DO 1006 I = 1, I21008                                             
      IF( T(I).LE.T(I+1) )      GOTO 1009                               
C/6S                                                                    
C     CALL SETERR(34HDEESFI - T NOT MONOTONE INCREASING,34,4,2)         
C/7S                                                                    
      CALL SETERR('DEESFI - T NOT MONOTONE INCREASING',34,4,2)          
C/                                                                      
 1009 CONTINUE                                                          
      IF( I+K.LE.N )      GOTO 1011                                     
      GOTO 1006                                                         
 1011 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).GT.T(I) )      GOTO 1013                            
C/6S                                                                    
C     CALL SETERR(34HDEESFI - T NOT MONOTONE INCREASING,34,4,2)         
C/7S                                                                    
      CALL SETERR('DEESFI - T NOT MONOTONE INCREASING',34,4,2)          
C/                                                                      
 1013 CONTINUE                                                          
C                                                                       
 1006 CONTINUE                                                          
 1007 CONTINUE                                                          
      IF( X(1).GE.T(1).AND.X(NX).LE.T(N) )      GOTO 1015               
C/6S                                                                    
C           CALL SETERR(45HDEESFI - (X(1),X(NX)) NOT PART OF (T(1),T(N))
C    *,45,5,2)                                                          
C/7S                                                                    
            CALL SETERR('DEESFI - (X(1),X(NX)) NOT PART OF (T(1),T(N))' 
     *,45,5,2)                                                          
C/                                                                      
C                                                                       
 1015 CONTINUE                                                          
      I21019 = NX-1                                                     
      DO 1017 I = 1, I21019                                             
      IF( X(I).LE.X(I+1) )      GOTO 1020                               
C/6S                                                                    
C           CALL SETERR(37HDEESFI - X IS NOT MONOTONE INCREASING,37,6,2)
C/7S                                                                    
            CALL SETERR('DEESFI - X IS NOT MONOTONE INCREASING',37,6,2) 
C/                                                                      
 1020 CONTINUE                                                          
C                                                                       
 1017 CONTINUE                                                          
 1018 CONTINUE                                                          
      MEST = FLOAT(2*K-1)*4.0D0*DATAN(1.0D0)+1.0D0                      
C                                                                       
      DEESFI = DEESFM(K,T,N,A,F,X,NX,MEST,EEST)                         
      RETURN                                                            
C                                                                       
      END                                                               
      DOUBLE PRECISION FUNCTION DEESFM(K,T,N,A,F,X,NX,MEST,EEST)        
C                                                                       
C                                                                       
C PURPOSE -                                                             
C                                                                       
C   TO FIND THE MAXIMUM ABSOLUTE DIFFERENCE BETWEEN F(Y) AND S(Y),      
C   WHERE S(Y) IS THE B-SPLINE GIVEN BY (K,T,N,A), ON EACH INTERVA      
C   (X(I),X(I+1)) FOR I = 1,...,NX-1.                                   
C                                                                       
C METHOD -                                                              
C                                                                       
C   THE MAXIMUM IS FOUND (ESTIMATED) BY                                 
C   SEARCHING EACH T INTERVAL AT A PATTERN OF MEST POINTS GIVEN BY      
C   COS(THETA) WHERE MEST EQUALLY SPACED THETA VALUES ON (-PI,0) A      
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A              
C            SPLINE FIT TO A FUNCTION, USING MEST POINTS IN THE SE      
C                                                                       
C INPUT -                                                               
C                                                                       
C   K      - THE B-SPLINE ORDER USED.                                   
C   T      - THE B-SPLINE MESH.                                         
C   N      - THE NUMBER OF POINTS IN THE MESH T.                        
C   A      - THE B-SPLINE COEFFICIENTS.                                 
C   F      - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    F(X,NX,FX,WX)                                      
C                                                                       
C            F MUST DECLARED EXTERNAL IN THE USERS CALLING PROGRAM      
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F IS TO BE EVALUATED.            
C              NX   - THE LENGTH OF THE ARRAY X.                        
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I) = F( X(I) ), I = 1,...,NX.                    
C              WX - WX IS A DUMMY ARRAY OF LENGTH NX TO MAKE THE C      
C                   CONSISTANT WITH THAT TO F IN DL2SFF.                
C   X      - THE INTERVALS ON WHICH THE ERROR IS DESIRED.               
C            X MUST BE MONOTONE INCREASING.                             
C   NX     - THE NUMBER OF POINTS IN X.                                 
C   MEST   - THE NUMBER OF POINTS TO BE USED SEARCHING EACH T INTE      
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   EEST - EEST(I) IS THE MAXIMUM ERROR FOUND ON THE I-TH X INTERV      
C          FOR I = 1,...,NX-1.                                          
C          IF X(I) = X(I+1) THEN EEST(I) IS MEANINGLESS.                
C                                                                       
C          EEST(NX) = MAX(EEST(1),...,EEST(NX-1))                       
C                                                                       
C   PROCEDURE VALUE - EEST(NX).                                         
C                                                                       
C SCRATCH SPACE ALLOCATED - 4*K + MEST LONG REAL WORDS.                 
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - N.LE.K.                                                         
C   3 - NX.LT.2.                                                        
C   4 - MEST.LT.1.                                                      
C   5 - T NOT MONOTONE INCREASING.                                      
C   6 - (X(1),X(NX)) NOT PART OF (T(1),T(N)).                           
C   7 - X IS NOT MONOTONE INCREASING.                                   
C                                                                       
      INTEGER I,IXEST,ISTKGT                                            
      DOUBLE PRECISION VALUE,DEESFP,DATAN,DCOS                          
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      DOUBLE PRECISION WS(500)                                          
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      EXTERNAL F                                                        
      INTEGER K,N,NX,MEST                                               
      DOUBLE PRECISION T(N),A(1),X(NX),EEST(NX)                         
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(N-K).                                                               
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15HDEESFM - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR('DEESFM - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N.GT.K )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15HDEESFM - N.LE.K,15,2,2)                            
C/7S                                                                    
      CALL SETERR('DEESFM - N.LE.K',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NX.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HDEESFM - NX.LT.2,16,3,2)                           
C/7S                                                                    
      CALL SETERR('DEESFM - NX.LT.2',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( MEST.GE.1 )      GOTO 1006                                    
C/6S                                                                    
C     CALL SETERR(18HDEESFM - MEST.LT.1,18,4,2)                         
C/7S                                                                    
      CALL SETERR('DEESFM - MEST.LT.1',18,4,2)                          
C/                                                                      
 1006 CONTINUE                                                          
C                                                                       
      I21010 = N-1                                                      
      DO 1008 I = 1, I21010                                             
      IF( T(I).LE.T(I+1) )      GOTO 1011                               
C/6S                                                                    
C     CALL SETERR(34HDEESFM - T NOT MONOTONE INCREASING,34,5,2)         
C/7S                                                                    
      CALL SETERR('DEESFM - T NOT MONOTONE INCREASING',34,5,2)          
C/                                                                      
 1011 CONTINUE                                                          
      IF( I+K.LE.N )      GOTO 1013                                     
      GOTO 1008                                                         
 1013 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).GT.T(I) )      GOTO 1015                            
C/6S                                                                    
C     CALL SETERR(34HDEESFM - T NOT MONOTONE INCREASING,34,5,2)         
C/7S                                                                    
      CALL SETERR('DEESFM - T NOT MONOTONE INCREASING',34,5,2)          
C/                                                                      
 1015 CONTINUE                                                          
C                                                                       
 1008 CONTINUE                                                          
 1009 CONTINUE                                                          
      IF( X(1).GE.T(1).AND.X(NX).LE.T(N) )      GOTO 1017               
C/6S                                                                    
C           CALL SETERR(45HDEESFM - (X(1),X(NX)) NOT PART OF (T(1),T(N))
C    *,45,6,2)                                                          
C/7S                                                                    
            CALL SETERR('DEESFM - (X(1),X(NX)) NOT PART OF (T(1),T(N))' 
     *,45,6,2)                                                          
C/                                                                      
C                                                                       
 1017 CONTINUE                                                          
      I21021 = NX-1                                                     
      DO 1019 I = 1, I21021                                             
      IF( X(I).LE.X(I+1) )      GOTO 1022                               
C/6S                                                                    
C           CALL SETERR(37HDEESFM - X IS NOT MONOTONE INCREASING,37,7,2)
C/7S                                                                    
            CALL SETERR('DEESFM - X IS NOT MONOTONE INCREASING',37,7,2) 
C/                                                                      
 1022 CONTINUE                                                          
C                                                                       
 1019 CONTINUE                                                          
 1020 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
C ALLOCATE AND MAKE THE XEST ARRAY.                                     
C                                                                       
      IXEST = ISTKGT(MEST,4)                                            
C                                                                       
      IF( MEST.LE.1 )      GOTO 1024                                    
      CALL DUMD(-4.0D0*DATAN(1.0D0),0.0D0,MEST,WS(IXEST))               
      GOTO 1025                                                         
 1024 CONTINUE                                                          
      WS(IXEST) = -2.0D0*DATAN(1.0D0)                                   
C                                                                       
 1025 CONTINUE                                                          
      IF( MEST.LE.1 )      GOTO 1026                                    
      WS(IXEST) = 0.5D0*(WS(IXEST)+WS(IXEST+1))                         
 1026 CONTINUE                                                          
      IF( MEST.LE.2 )      GOTO 1028                                    
      IX1003 = IXEST+MEST-2                                             
      IX1004 = IXEST+MEST-1                                             
      IX1001 = IXEST+MEST-1                                             
      WS(IX1001) = 0.5D0*(WS(IX1003)+WS(IX1004))                        
C                                                                       
 1028 CONTINUE                                                          
      DO 1030 I = 1, MEST                                               
      IX1005 = IXEST+I-1                                                
      IX1001 = IXEST+I-1                                                
      WS(IX1001) = DCOS(WS(IX1005))                                     
C                                                                       
 1030 CONTINUE                                                          
 1031 CONTINUE                                                          
      VALUE = DEESFP(K,T,N,A,F,X,NX,WS(IXEST),MEST,EEST)                
C                                                                       
      CALL LEAVE                                                        
C                                                                       
      DEESFM = VALUE                                                    
      RETURN                                                            
C                                                                       
      END                                                               
      DOUBLE PRECISION FUNCTION DEESFP(K,T,N,A,F,X,NX,XEST,MEST,EEST)   
C                                                                       
C                                                                       
C PURPOSE -                                                             
C                                                                       
C   TO FIND THE MAXIMUM ABSOLUTE DIFFERENCE BETWEEN F(Y) AND S(Y),      
C   WHERE S(Y) IS THE B-SPLINE GIVEN BY (K,T,N,A), ON EACH INTERVA      
C   (X(I),X(I+1)) FOR I = 1,...,NX-1.                                   
C                                                                       
C METHOD -                                                              
C                                                                       
C   THE MAXIMUM IS FOUND (ESTIMATED) BY                                 
C   SEARCHING EACH T INTERVAL AT A PATTERN OF MEST POINTS GIVEN BY      
C                                                                       
C MNEMONIC - DOUBLE PRECISION ESTIMATION OF THE ERROR IN A ,            
C            SPLINE FIT TO A FUNCTION, USING A GIVEN PATTERN IN TH      
C                                                                       
C INPUT -                                                               
C                                                                       
C   K      - THE B-SPLINE ORDER USED.                                   
C   T      - THE B-SPLINE MESH.                                         
C   N      - THE NUMBER OF POINTS IN THE MESH T.                        
C   A      - THE B-SPLINE COEFFICIENTS.                                 
C   F      - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    F(X,NX,FX,WX)                                      
C                                                                       
C            F MUST DECLARED EXTERNAL IN THE USERS CALLING PROGRAM      
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F IS TO BE EVALUATED.            
C              NX   - THE LENGTH OF THE ARRAY X.                        
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I) = F( X(I) ), I = 1,...,NX.                    
C              WX - WX IS A DUMMY ARRAY OF LENGTH NX TO MAKE THE C      
C                   CONSISTANT WITH THAT TO F IN DL2SFF.                
C   X      - THE INTERVALS ON WHICH THE ERROR IS DESIRED.               
C            X MUST BE MONOTONE INCREASING.                             
C   NX     - THE NUMBER OF POINTS IN X.                                 
C   XEST   - THE PATTERN OF POINTS ON (-1,+1) TO BE SCALED AND USE      
C            THE SEARCH OF EACH MESH INTERVAL FOR THE MAXIMUM ERRO      
C            XEST MUST BE MONOTONE INCREASING.                          
C   MEST   - THE NUMBER OF POINTS IN XEST.                              
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   EEST - EEST(I) IS THE MAXIMUM ERROR FOUND ON THE I-TH X INTERV      
C          FOR I = 1,...,NX-1.                                          
C          IF X(I) = X(I+1) THEN EEST(I) IS MEANINGLESS.                
C                                                                       
C          EEST(NX) = MAX(EEST(1),...,EEST(NX-1))                       
C                                                                       
C   PROCEDURE VALUE - EEST(NX).                                         
C                                                                       
C SCRATCH SPACE ALLOCATED - 4*K LONG REAL WORDS.                        
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - N.LE.K.                                                         
C   3 - NX.LT.2.                                                        
C   4 - MEST.LT.1.                                                      
C   5 - T NOT MONOTONE INCREASING.                                      
C   6 - (X(1),X(NX)) NOT PART OF (T(1),T(N)).                           
C   7 - X IS NOT MONOTONE INCREASING.                                   
C   8 - XEST(I) NOT IN (-1,+1).                                         
C   9 - XEST IS NOT MONOTONE INCREASING.                                
C                                                                       
      INTEGER X2360(1)                                                  
      INTEGER ID(1),I,IADIFF,ISTKGT,ILEFT,ILO,JLO,J,L                   
      DOUBLE PRECISION Y(1),FY(1),WY(1),SY(1)                           
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      DOUBLE PRECISION WS(500)                                          
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      EXTERNAL F                                                        
      INTEGER K,N,NX,MEST                                               
      DOUBLE PRECISION T(N),A(1),X(NX),XEST(MEST),EEST(NX)              
C                                                                       
      EQUIVALENCE (X2360(1),ID(1))                                      
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
      DATA X2360(1)/0/                                                  
C                                                                       
C A(N-K).                                                               
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT.                                                      
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15HDEESFP - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR('DEESFP - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N.GT.K )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15HDEESFP - N.LE.K,15,2,2)                            
C/7S                                                                    
      CALL SETERR('DEESFP - N.LE.K',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NX.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HDEESFP - NX.LT.2,16,3,2)                           
C/7S                                                                    
      CALL SETERR('DEESFP - NX.LT.2',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( MEST.GE.1 )      GOTO 1006                                    
C/6S                                                                    
C     CALL SETERR(18HDEESFP - MEST.LT.1,18,4,2)                         
C/7S                                                                    
      CALL SETERR('DEESFP - MEST.LT.1',18,4,2)                          
C/                                                                      
 1006 CONTINUE                                                          
C                                                                       
      I21010 = N-1                                                      
      DO 1008 I = 1, I21010                                             
      IF( T(I).LE.T(I+1) )      GOTO 1011                               
C/6S                                                                    
C     CALL SETERR(34HDEESFP - T NOT MONOTONE INCREASING,34,5,2)         
C/7S                                                                    
      CALL SETERR('DEESFP - T NOT MONOTONE INCREASING',34,5,2)          
C/                                                                      
 1011 CONTINUE                                                          
      IF( I+K.LE.N )      GOTO 1013                                     
      GOTO 1008                                                         
 1013 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).GT.T(I) )      GOTO 1015                            
C/6S                                                                    
C     CALL SETERR(34HDEESFP - T NOT MONOTONE INCREASING,34,5,2)         
C/7S                                                                    
      CALL SETERR('DEESFP - T NOT MONOTONE INCREASING',34,5,2)          
C/                                                                      
 1015 CONTINUE                                                          
C                                                                       
 1008 CONTINUE                                                          
 1009 CONTINUE                                                          
      IF( X(1).GE.T(1).AND.X(NX).LE.T(N) )      GOTO 1017               
C/6S                                                                    
C           CALL SETERR(45HDEESFP - (X(1),X(NX)) NOT PART OF (T(1),T(N))
C    *,45,6,2)                                                          
C/7S                                                                    
            CALL SETERR('DEESFP - (X(1),X(NX)) NOT PART OF (T(1),T(N))' 
     *,45,6,2)                                                          
C/                                                                      
C                                                                       
 1017 CONTINUE                                                          
      I21021 = NX-1                                                     
      DO 1019 I = 1, I21021                                             
      IF( X(I).LE.X(I+1) )      GOTO 1022                               
C/6S                                                                    
C           CALL SETERR(37HDEESFP - X IS NOT MONOTONE INCREASING,37,7,2)
C/7S                                                                    
            CALL SETERR('DEESFP - X IS NOT MONOTONE INCREASING',37,7,2) 
C/                                                                      
 1022 CONTINUE                                                          
C                                                                       
 1019 CONTINUE                                                          
 1020 CONTINUE                                                          
      DO 1024 I = 1, MEST                                               
            IF( XEST(I).GE.(-1.0D0).AND.XEST(I).LE.(+1.0D0) )      GOTO 
     *1027                                                              
C/6S                                                                    
C     CALL SETERR(31HDEESFP - XEST(I) NOT IN (-1,+1),31,8,2)            
C/7S                                                                    
      CALL SETERR('DEESFP - XEST(I) NOT IN (-1,+1)',31,8,2)             
C/                                                                      
 1027 CONTINUE                                                          
      IF( I.NE.MEST )      GOTO 1029                                    
      GOTO 1024                                                         
C                                                                       
 1029 CONTINUE                                                          
      IF( XEST(I).LE.XEST(I+1) )      GOTO 1031                         
C/6S                                                                    
C           CALL SETERR(40HDEESFP - XEST IS NOT MONOTONE INCREASING,40,9
C    *,2)                                                               
C/7S                                                                    
            CALL SETERR('DEESFP - XEST IS NOT MONOTONE INCREASING',40,9 
     *,2)                                                               
C/                                                                      
 1031 CONTINUE                                                          
C                                                                       
 1024 CONTINUE                                                          
 1025 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
C ALLOCATE SCRATCH SPACE FOR CALLS TO DSPLN2.                           
C                                                                       
      IADIFF = ISTKGT(K,4)                                              
C                                                                       
      CALL SETD(NX,0.0D0,EEST)                                          
C                                                                       
      ILO = 0                                                           
      ILEFT = 1                                                         
C                                                                       
      JLO = 1                                                           
C CURRENT LEFT-MOST X INTERVAL.                                         
C                                                                       
      I21035 = N-1                                                      
      DO 1033 I = 1, I21035                                             
      IF( T(I).NE.T(I+1).AND.T(I+1).GE.X(1) )      GOTO 1036            
      GOTO 1033                                                         
 1036 CONTINUE                                                          
      IF( T(I).LE.X(NX) )      GOTO 1038                                
      GOTO 1034                                                         
C                                                                       
 1038 CONTINUE                                                          
      DO 1040 L = 1, MEST                                               
      Y(1) = T(I)+0.5D0*(T(I+1)-T(I))*(1.0D0+XEST(L))                   
      Y(1) = DMAX1(T(I),DMIN1(T(I+1),Y(1)))                             
C                                                                       
      CALL F(Y,1,FY,WY)                                                 
      CALL DSPLN2(K,T,N,A,Y,1,ID,1,SY,K,WS(IADIFF),ILO,ILEFT)           
C                                                                       
      J = JLO                                                           
 1045 CONTINUE                                                          
      IF( X(J).GT.Y(1).OR.J.GE.NX )      GOTO 1044                      
      IF( X(J+1).GE.Y(1) )      GOTO 1046                               
      JLO = J                                                           
      GOTO 1043                                                         
C                                                                       
 1046 CONTINUE                                                          
      EEST(J) = DMAX1(EEST(J),DABS(FY(1)-SY(1)))                        
      EEST(NX) = DMAX1(EEST(NX),EEST(J))                                
 1043 CONTINUE                                                          
      J = J + (1)                                                       
      GOTO 1045                                                         
 1044 CONTINUE                                                          
 1040 CONTINUE                                                          
 1041 CONTINUE                                                          
C                                                                       
 1033 CONTINUE                                                          
 1034 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      DEESFP = EEST(NX)                                                 
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE L2SFF(FW,K,T,NT,A)                                     
C                                                                       
C                                                                       
C TO FIT A FUNCTION F WITH A B-SPLINE.                                  
C                                                                       
C THE MNEMONIC IS - DOUBLE PRECISION L2 SPLINE FIT TO A FUNCTION.       
C                                                                       
C METHOD - WEIGHTED LEAST-SQUARES FIT.                                  
C                                                                       
C   THE FUNCTIONAL                                                      
C                                                                       
C       INTEGRAL ( T(1) TO T(NT) )                                      
C          ( (F - F)**2 * W(X) ) DX                                     
C                                                                       
C   IS MINIMIZED OVER ALL B-SPLINES F OF ORDER K ON THE MESH T.         
C                                                                       
C   THE INTEGRALS ARE DONE PIECEWISE WITH A K POINT                     
C   GAUSSIAN-QUADRATURE RULE.                                           
C                                                                       
C INPUT -                                                               
C                                                                       
C   FW     - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    FW(X,NX,FX,WX)                                     
C                                                                       
C            F MUST BE DECLARED EXTERNAL IN THE USER S CALLING PROGRAM  
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F AND W ARE TO BE EVALUATED      
C              NX   - THE LENGTH OF THE ARRAY X.                        
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I) = F( X(I) ), I = 1,...,NX.                    
C              WX - WX(I) = W( X(I) ), I = 1,...,NX.                    
C                   IF WX IS NOT SET, WX = 1 IS THE DEFAULT.            
C                                                                       
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED IN THE FITTING PROCEDURE      
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE APPROXIMATION.           
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   LET NDT = THE NUMBER OF DISTINCT POINTS IN THE B-SPLINE MESH T      
C   AND NXFIT = (NDT-1) * K                                             
C                                                                       
C   THEN,         S( L2SFF) =                                           
C                                                                       
C     NXFIT + 2*K +                                                     
C                                                                       
C     MAX( 17*K , 2*NXFIT +                                             
C                                                                       
C                 MAX ( S(FW) , (NT-K+4)*K + 1 INTEGER ) )              
C                                                                       
C   WORDS.                                                              
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - NT.LE.K.                                                        
C   3 - THE MESH T IS NOT MONOTONE INCREASING.                          
C   4 - MULT(T(I)).GT.K.                                                
C   5 - NEGATIVE WEIGHTS. (RECOVERABLE)                                 
C   6 - SINGULAR LEAST SQUARES MATRIX. (RECOVERABLE)                    
C                                                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      REAL WS(500)                                                      
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
            INTEGER I,J,NDT,NXFIT,IXFIT,JXFIT,IY,IW,IXQ,IWQ,ISTKGT,NERRO
     *R,NERR                                                            
      EXTERNAL FW                                                       
      INTEGER K,NT                                                      
      REAL T(NT),A(1)                                                   
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C                                                                       
      CALL ENTER(1)                                                     
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15H L2SFF - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR(' L2SFF - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16H L2SFF - NT.LE.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR(' L2SFF - NT.LE.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
C                                                                       
C GET THE FITTING POINTS.                                               
C                                                                       
      NDT = 1                                                           
C FIND THE NUMBER OF DISTINCT MESH POINTS.                              
      I21006 = NT-1                                                     
      DO 1004 I = 1, I21006                                             
      IF( T(I).LE.T(I+1) )      GOTO 1007                               
C/6S                                                                    
C           CALL SETERR(46H L2SFF - THE MESH T IS NOT MONOTONE INCREASIN
C    *G,46,3,2)                                                         
C/7S                                                                    
            CALL SETERR(' L2SFF - THE MESH T IS NOT MONOTONE INCREASING'
     *,46,3,2)                                                          
C/                                                                      
 1007 CONTINUE                                                          
      IF( T(I+1).LE.T(I) )      GOTO 1009                               
      NDT = NDT + (1)                                                   
 1009 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1011                                    
      GOTO 1004                                                         
 1011 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1013                            
C/6S                                                                    
C     CALL SETERR(24H L2SFF - MULT(T(I)).GT.K,24,4,2)                   
C/7S                                                                    
      CALL SETERR(' L2SFF - MULT(T(I)).GT.K',24,4,2)                    
C/                                                                      
 1013 CONTINUE                                                          
C                                                                       
 1004 CONTINUE                                                          
 1005 CONTINUE                                                          
      NXFIT = K*(NDT-1)                                                 
C                                                                       
      IXFIT = ISTKGT(NXFIT,3)                                           
C CREATE THE FITTING POINTS.                                            
C                                                                       
      IXQ = ISTKGT(K,3)                                                 
      IWQ = ISTKGT(K,3)                                                 
C GET THE GAUSS-QUADRATURE RULE.                                        
      CALL GQ1(K,WS(IXQ),WS(IWQ))                                       
C                                                                       
      JXFIT = IXFIT                                                     
      I21017 = NT-1                                                     
      DO 1015 I = 1, I21017                                             
      IF( T(I).NE.T(I+1) )      GOTO 1018                               
      GOTO 1015                                                         
 1018 CONTINUE                                                          
C                                                                       
      DO 1020 J = 1, K                                                  
      IX1004 = IXQ+J-1                                                  
            WS(JXFIT) = AMAX1(T(I),AMIN1(0.5E0*((T(I)+T(I+1))+(T(I+1)-T(
     *I))*WS(IX1004)),T(I+1)))                                          
      JXFIT = JXFIT + (1)                                               
 1020 CONTINUE                                                          
 1021 CONTINUE                                                          
C                                                                       
 1015 CONTINUE                                                          
 1016 CONTINUE                                                          
      IY = ISTKGT(NXFIT,3)                                              
      IW = ISTKGT(NXFIT,3)                                              
C                                                                       
      CALL SETR(NXFIT,1.0E0,WS(IW))                                     
C DEFAULT WEIGHTS.                                                      
C                                                                       
      CALL FW(WS(IXFIT),NXFIT,WS(IY),WS(IW))                            
C                                                                       
      JXFIT = IW                                                        
C NOW ADJUST THE WEIGHTS.                                               
      I21025 = NT-1                                                     
      DO 1023 I = 1, I21025                                             
      IF( T(I).NE.T(I+1) )      GOTO 1026                               
      GOTO 1023                                                         
 1026 CONTINUE                                                          
C                                                                       
      DO 1028 J = 1, K                                                  
      IX1001 = IWQ+J-1                                                  
      WS(JXFIT) = WS(JXFIT) * (0.5E0*(T(I+1)-T(I))*WS(IX1001))          
      IF( WS(JXFIT).GE.0.0E0 )      GOTO 1031                           
C/6S                                                                    
C     CALL SETERR(25H L2SFF - NEGATIVE WEIGHTS,25,5,1)                  
C/7S                                                                    
      CALL SETERR(' L2SFF - NEGATIVE WEIGHTS',25,5,1)                   
C/                                                                      
      CALL LEAVE                                                        
      RETURN                                                            
 1031 CONTINUE                                                          
      JXFIT = JXFIT + (1)                                               
 1028 CONTINUE                                                          
 1029 CONTINUE                                                          
C                                                                       
 1023 CONTINUE                                                          
 1024 CONTINUE                                                          
      CALL DL2SH(WS(IXFIT),WS(IY),NXFIT,1,WS(IW),K,T,NT,A)              
C                                                                       
      IF( NERROR(NERR).EQ.0 )      GOTO 1033                            
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38H L2SFF - SINGULAR LEAST SQUARES MATRIX,38,6,1
C    *)                                                                 
C/7S                                                                    
            CALL SETERR(' L2SFF - SINGULAR LEAST SQUARES MATRIX',38,6,1 
     *)                                                                 
C/                                                                      
C                                                                       
 1033 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE L2SFH(FW,MD,K,T,NT,A)                                  
C                                                                       
C                                                                       
C TO FIT A FUNCTION F WITH A B-SPLINE.                                  
C                                                                       
C THE MNEMONIC IS - DOUBLE PRECISION L2 SPLINE FIT TO A FUNCTION,       
C                   USING HERMITE DATA.                                 
C                                                                       
C METHOD - WEIGHTED LEAST-SQUARES FIT.                                  
C                                                                       
C   THE FUNCTIONAL                                                      
C                                                                       
C       SUM(J = 1,...,MD) INTEGRAL ( T(1) TO T(NT) )                    
C          ( (F-SUP-(J-1) - F-SUP-(J-1))**2 * W-SUB-J (X) ) DX          
C                                                                       
C   IS MINIMIZED OVER ALL B-SPLINES F OF ORDER K ON THE MESH T.         
C                                                                       
C   THE INTEGRALS ARE DONE PIECEWISE WITH A CEIL( K/MD ) POINT          
C   GAUSSIAN-QUADRATURE RULE.                                           
C                                                                       
C INPUT -                                                               
C                                                                       
C   FW     - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    FW(X,NX,MD,FX,WX)                                  
C                                                                       
C            F MUST BE DECLARED EXTERNAL IN THE USER S CALLING PROGRAM  
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F AND W ARE TO BE EVALUATED      
C              NX   - THE LENGTH OF THE ARRAY X.                        
C              MD   - THE NUMBER OF DERIVATIVES TO BE EVALUATED AN      
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I,J) = THE (J-1)-ST DERIVATIVE OF F AT X(I)      
C                             J = 1,...,MD, I = 1,...,NX.               
C              WX - WX(I,J) = THE WEIGHT W-SUB-J (X) FOR THE            
C                             (J-1)-ST DERIVATIVE OF F AT X(I),         
C                             J = 1,...,MD, I = 1,...,NX.               
C                   IF WX IS NOT SET, WX = 1 IS THE DEFAULT.            
C                                                                       
C   MD     - THE NUMBER OF DERIVATIVES TO BE USED IN THE FITTING.       
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED IN THE FITTING PROCEDURE      
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE APPROXIMATION.           
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   LET NDT = THE NUMBER OF DISTINCT POINTS IN THE B-SPLINE MESH T      
C   MQ = CEIL( K/MD ), AND NXFIT = (NDT-1) * MQ                         
C                                                                       
C   THEN,         S( L2SFH) =                                           
C                                                                       
C     2*MQ +                                                            
C                                                                       
C     MAX( 17*MQ , NXFIT*(2*MD+1) +                                     
C                                                                       
C                  MAX( S(FW) , (NT-K+MD)*K +                           
C                                                                       
C                               MAX( 3*K , K*(MIN((K+1)/2,MD) + 1)      
C                                                                       
C                               MD INTEGER ) )                          
C                                                                       
C   WORDS.                                                              
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - MD.LT.1.                                                        
C   2 - MD.GT.K.                                                        
C   3 - K.LT.2.                                                         
C   4 - NT.LE.K.                                                        
C   5 - THE MESH T IS NOT MONOTONE INCREASING.                          
C   6 - MULT(T(I)).GT.K.                                                
C   7 - NEGATIVE WEIGHTS. (RECOVERABLE)                                 
C   8 - SINGULAR LEAST SQUARES MATRIX. (RECOVERABLE)                    
C                                                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      REAL WS(500)                                                      
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER I,NDT,NERROR,NERR                                         
      EXTERNAL FW                                                       
      INTEGER MD,K,NT                                                   
      REAL T(NT),A(1)                                                   
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C                                                                       
      CALL ENTER(1)                                                     
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( MD.GE.1 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(16H L2SFH - MD.LT.1,16,1,2)                           
C/7S                                                                    
      CALL SETERR(' L2SFH - MD.LT.1',16,1,2)                            
C/                                                                      
 1000 CONTINUE                                                          
      IF( MD.LE.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16H L2SFH - MD.GT.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR(' L2SFH - MD.GT.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( K.GE.2 )      GOTO 1004                                       
C/6S                                                                    
C     CALL SETERR(15H L2SFH - K.LT.2,15,3,2)                            
C/7S                                                                    
      CALL SETERR(' L2SFH - K.LT.2',15,3,2)                             
C/                                                                      
 1004 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(16H L2SFH - NT.LE.K,16,4,2)                           
C/7S                                                                    
      CALL SETERR(' L2SFH - NT.LE.K',16,4,2)                            
C/                                                                      
 1006 CONTINUE                                                          
C                                                                       
C GET THE FITTING POINTS.                                               
C                                                                       
      NDT = 1                                                           
C FIND THE NUMBER OF DISTINCT MESH POINTS.                              
      I21010 = NT-1                                                     
      DO 1008 I = 1, I21010                                             
      IF( T(I).LE.T(I+1) )      GOTO 1011                               
C/6S                                                                    
C           CALL SETERR(46H L2SFH - THE MESH T IS NOT MONOTONE INCREASIN
C    *G,46,5,2)                                                         
C/7S                                                                    
            CALL SETERR(' L2SFH - THE MESH T IS NOT MONOTONE INCREASING'
     *,46,5,2)                                                          
C/                                                                      
 1011 CONTINUE                                                          
      IF( T(I+1).LE.T(I) )      GOTO 1013                               
      NDT = NDT + (1)                                                   
 1013 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1015                                    
      GOTO 1008                                                         
 1015 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1017                            
C/6S                                                                    
C     CALL SETERR(24H L2SFH - MULT(T(I)).GT.K,24,6,2)                   
C/7S                                                                    
      CALL SETERR(' L2SFH - MULT(T(I)).GT.K',24,6,2)                    
C/                                                                      
 1017 CONTINUE                                                          
C                                                                       
 1008 CONTINUE                                                          
 1009 CONTINUE                                                          
      CALL L2SFG(FW,MD,(K+MD-1)/MD,K,T,NT,A)                            
C                                                                       
      IF( NERROR(NERR).NE.9 )      GOTO 1019                            
      CALL ERROFF                                                       
C/6S                                                                    
C     CALL SETERR(25H L2SFH - NEGATIVE WEIGHTS,25,7,1)                  
C/7S                                                                    
      CALL SETERR(' L2SFH - NEGATIVE WEIGHTS',25,7,1)                   
C/                                                                      
      GOTO 1020                                                         
 1019 CONTINUE                                                          
      IF( NERROR(NERR).NE.10 )      GOTO 1021                           
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38H L2SFH - SINGULAR LEAST SQUARES MATRIX,38,8,1
C    *)                                                                 
C/7S                                                                    
            CALL SETERR(' L2SFH - SINGULAR LEAST SQUARES MATRIX',38,8,1 
     *)                                                                 
C/                                                                      
C                                                                       
 1021 CONTINUE                                                          
 1020 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE L2SFG(FW,MD,MQ,K,T,NT,A)                               
C                                                                       
C                                                                       
C TO FIT A FUNCTION F WITH A B-SPLINE.                                  
C                                                                       
C THE MNEMONIC IS - DOUBLE PRECISION L2 SPLINE FIT TO A FUNCTION,       
C                   USING GAUSSIAN QUADRATURE.                          
C                                                                       
C METHOD - WEIGHTED LEAST-SQUARES FIT.                                  
C                                                                       
C   THE FUNCTIONAL                                                      
C                                                                       
C       SUM(J = 1,...,MD) INTEGRAL ( T(1) TO T(NT) )                    
C          ( (F-SUP-(J-1) - F-SUP-(J-1))**2 * W-SUB-J (X) ) DX          
C                                                                       
C   IS MINIMIZED OVER ALL B-SPLINES F OF ORDER K ON THE MESH T.         
C                                                                       
C   THE INTEGRALS ARE DONE PIECEWISE WITH AN MQ POINT                   
C   GAUSSIAN-QUADRATURE RULE.                                           
C                                                                       
C INPUT -                                                               
C                                                                       
C   FW     - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    FW(X,NX,MD,FX,WX)                                  
C                                                                       
C            F MUST BE DECLARED EXTERNAL IN THE USER S CALLING PROGRAM  
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F AND W ARE TO BE EVALUATED      
C              NX   - THE LENGTH OF THE ARRAY X.                        
C              MD   - THE NUMBER OF DERIVATIVES TO BE EVALUATED AN      
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I,J) = THE (J-1)-ST DERIVATIVE OF F AT X(I)      
C                             J = 1,...,MD, I = 1,...,NX.               
C              WX - WX(I,J) = THE WEIGHT W-SUB-J (X) FOR THE            
C                             (J-1)-ST DERIVATIVE OF F AT X(I),         
C                             J = 1,...,MD, I = 1,...,NX.               
C                   IF WX IS NOT SET, WX = 1 IS THE DEFAULT.            
C                                                                       
C   MD     - THE NUMBER OF DERIVATIVES TO BE USED IN THE FITTING.       
C   MQ     - THE NUMBER OF POINTS IN THE GAUSSIAN QUADRATURE RULE.      
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED IN THE FITTING PROCEDURE      
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE APPROXIMATION.           
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   LET NDT = THE NUMBER OF DISTINCT POINTS IN THE B-SPLINE MESH T      
C   AND NXFIT = (NDT-1)*MQ.                                             
C                                                                       
C   THEN,         S( L2SFG) =                                           
C                                                                       
C     2*MQ +                                                            
C                                                                       
C     MAX( 17*MQ , NXFIT*(2*MD+1) +                                     
C                                                                       
C                  MAX( S(FW) , (NT-K+MD)*K +                           
C                                                                       
C                               MAX( 3*K , K*(MIN((K+1)/2,MD) + 1)      
C                                                                       
C                               MD INTEGER ) )                          
C                                                                       
C   WORDS.                                                              
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - MD.LT.1.                                                       
C    2 - MD.GT.K.                                                       
C    3 - MQ.LT.1.                                                       
C    4 - K.LT.2.                                                        
C    5 - NT.LE.K.                                                       
C    6 - THE MESH T IS NOT MONOTONE INCREASING.                         
C    7 - MULT(T(I)).GT.K.                                               
C    8 - (NDT-1)*MQ*MD.LT.NT-K.                                         
C    9 - NEGATIVE WEIGHTS. (RECOVERABLE)                                
C   10 - SINGULAR LEAST SQUARES MATRIX. (RECOVERABLE)                   
C                                                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      REAL WS(500)                                                      
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER I,NDT,IXQ,IWQ,ISTKGT,NERROR,NERR                          
      EXTERNAL FW                                                       
      INTEGER MD,MQ,K,NT                                                
      REAL T(NT),A(1)                                                   
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C                                                                       
      CALL ENTER(1)                                                     
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( MD.GE.1 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(16H L2SFG - MD.LT.1,16,1,2)                           
C/7S                                                                    
      CALL SETERR(' L2SFG - MD.LT.1',16,1,2)                            
C/                                                                      
 1000 CONTINUE                                                          
      IF( MD.LE.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16H L2SFG - MD.GT.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR(' L2SFG - MD.GT.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( MQ.GE.1 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H L2SFG - MQ.LT.1,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' L2SFG - MQ.LT.1',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( K.GE.2 )      GOTO 1006                                       
C/6S                                                                    
C     CALL SETERR(15H L2SFG - K.LT.2,15,4,2)                            
C/7S                                                                    
      CALL SETERR(' L2SFG - K.LT.2',15,4,2)                             
C/                                                                      
 1006 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1008                                      
C/6S                                                                    
C     CALL SETERR(16H L2SFG - NT.LE.K,16,5,2)                           
C/7S                                                                    
      CALL SETERR(' L2SFG - NT.LE.K',16,5,2)                            
C/                                                                      
 1008 CONTINUE                                                          
C                                                                       
C GET THE FITTING POINTS.                                               
C                                                                       
      NDT = 1                                                           
C FIND THE NUMBER OF DISTINCT MESH POINTS.                              
      I21012 = NT-1                                                     
      DO 1010 I = 1, I21012                                             
      IF( T(I).LE.T(I+1) )      GOTO 1013                               
C/6S                                                                    
C           CALL SETERR(46H L2SFG - THE MESH T IS NOT MONOTONE INCREASIN
C    *G,46,6,2)                                                         
C/7S                                                                    
            CALL SETERR(' L2SFG - THE MESH T IS NOT MONOTONE INCREASING'
     *,46,6,2)                                                          
C/                                                                      
 1013 CONTINUE                                                          
      IF( T(I+1).LE.T(I) )      GOTO 1015                               
      NDT = NDT + (1)                                                   
 1015 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1017                                    
      GOTO 1010                                                         
 1017 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1019                            
C/6S                                                                    
C     CALL SETERR(24H L2SFG - MULT(T(I)).GT.K,24,7,2)                   
C/7S                                                                    
      CALL SETERR(' L2SFG - MULT(T(I)).GT.K',24,7,2)                    
C/                                                                      
 1019 CONTINUE                                                          
C                                                                       
 1010 CONTINUE                                                          
 1011 CONTINUE                                                          
      IF( (NDT-1)*MQ*MD.GE.NT-K )      GOTO 1021                        
C/6S                                                                    
C     CALL SETERR(30H L2SFG - (NDT-1)*MQ*MD.LT.NT-K,30,8,2)             
C/7S                                                                    
      CALL SETERR(' L2SFG - (NDT-1)*MQ*MD.LT.NT-K',30,8,2)              
C/                                                                      
 1021 CONTINUE                                                          
C                                                                       
C GET THE GAUSSIAN QUADRATURE RULE.                                     
C                                                                       
      IXQ = ISTKGT(MQ,3)                                                
      IWQ = ISTKGT(MQ,3)                                                
      CALL GQ1(MQ,WS(IXQ),WS(IWQ))                                      
C                                                                       
      CALL L2SFQ(FW,MD,WS(IXQ),WS(IWQ),MQ,K,T,NT,A)                     
C                                                                       
      IF( NERROR(NERR).NE.10 )      GOTO 1023                           
      CALL ERROFF                                                       
C/6S                                                                    
C     CALL SETERR(25H L2SFG - NEGATIVE WEIGHTS,25,9,1)                  
C/7S                                                                    
      CALL SETERR(' L2SFG - NEGATIVE WEIGHTS',25,9,1)                   
C/                                                                      
      GOTO 1024                                                         
 1023 CONTINUE                                                          
      IF( NERROR(NERR).NE.11 )      GOTO 1025                           
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38H L2SFG - SINGULAR LEAST SQUARES MATRIX,38,10,
C    *1)                                                                
C/7S                                                                    
            CALL SETERR(' L2SFG - SINGULAR LEAST SQUARES MATRIX',38,10, 
     *1)                                                                
C/                                                                      
C                                                                       
 1025 CONTINUE                                                          
 1024 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE L2SFQ(FW,MD,XQ,WQ,MQ,K,T,NT,A)                         
C                                                                       
C                                                                       
C TO FIT A FUNCTION F WITH A B-SPLINE.                                  
C                                                                       
C THE MNEMONIC IS - DOUBLE PRECISION L2 SPLINE FIT TO A FUNCTION,       
C                   USING A QUADRATURE RULE.                            
C                                                                       
C METHOD - WEIGHTED LEAST-SQUARES FIT.                                  
C                                                                       
C   THE FUNCTIONAL                                                      
C                                                                       
C       SUM(J = 1,...,MD) INTEGRAL ( T(1) TO T(NT) )                    
C          ( (F-SUP-(J-1) - F-SUP-(J-1))**2 * W-SUB-J (X) ) DX          
C                                                                       
C   IS MINIMIZED OVER ALL B-SPLINES F OF ORDER K ON THE MESH T.         
C                                                                       
C   THE INTEGRALS ARE DONE PIECEWISE WITH THE MQ POINT                  
C   QUADRATURE RULE WITH WEIGHTS WQ AND ABSCISSAE XQ.                   
C                                                                       
C INPUT -                                                               
C                                                                       
C   FW     - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    FW(X,NX,MD,FX,WX)                                  
C                                                                       
C            F MUST BE DECLARED EXTERNAL IN THE USER S CALLING PROGRAM  
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F AND W ARE TO BE EVALUATED      
C              NX   - THE LENGTH OF THE ARRAY X.                        
C              MD   - THE NUMBER OF DERIVATIVES TO BE EVALUATED AN      
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I,J) = THE (J-1)-ST DERIVATIVE OF F AT X(I)      
C                             J = 1,...,MD, I = 1,...,NX.               
C              WX - WX(I,J) = THE WEIGHT W-SUB-J (X) FOR THE            
C                             (J-1)-ST DERIVATIVE OF F AT X(I),         
C                             J = 1,...,MD, I = 1,...,NX.               
C                   IF WX IS NOT SET, WX = 1 IS THE DEFAULT.            
C                                                                       
C   MD     - THE NUMBER OF DERIVATIVES TO BE USED IN THE FITTING.       
C   XQ     - THE INTEGRALS ARE DONE PIECEWISE USING THE QUADRATURE      
C   WQ     - RULE ON (-1,+1) WITH MQ ABSCISSAE XQ AND WEIGHTS WQ.       
C   MQ     - THE NUMBER OF POINTS IN THE QUADRATURE RULE.               
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED IN THE FITTING PROCEDURE      
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE APPROXIMATION.           
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   LET NDT = THE NUMBER OF DISTINCT POINTS IN THE B-SPLINE MESH T      
C   AND NXFIT = (NDT-1) * MQ                                            
C                                                                       
C   THEN,         S( L2SFQ) =                                           
C                                                                       
C     NXFIT*(2*MD+1) +                                                  
C                                                                       
C     MAX( S(FW) , (NT-K+MD)*K +                                        
C                                                                       
C                  MAX( 3*K , K*(MIN((K+1)/2,MD) + 1) ) + MD INTEG      
C                                                                       
C   WORDS.                                                              
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - MD.LT.1.                                                       
C    2 - MD.GT.K.                                                       
C    3 - MQ.LT.1.                                                       
C    4 - XQ(I) NOT IN (-1,+1).                                          
C    5 - K.LT.2.                                                        
C    6 - NT.LE.K.                                                       
C    7 - THE MESH T IS NOT MONOTONE INCREASING.                         
C    8 - MULT(T(I)).GT.K.                                               
C    9 - (NDT-1)*MQ*MD.LT.NT-K.                                         
C   10 - NEGATIVE WEIGHTS. (RECOVERABLE)                                
C   11 - SINGULAR LEAST SQUARES MATRIX. (RECOVERABLE)                   
C                                                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      REAL WS(500)                                                      
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
            INTEGER I,J,NDT,NXFIT,IXFIT,JXFIT,IY,IW,IQ,ISTKGT,NERROR,NER
     *R                                                                 
      EXTERNAL FW                                                       
      INTEGER MD,MQ,K,NT                                                
      REAL XQ(MQ),WQ(MQ),T(NT),A(1)                                     
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C                                                                       
      CALL ENTER(1)                                                     
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( MD.GE.1 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(16H L2SFQ - MD.LT.1,16,1,2)                           
C/7S                                                                    
      CALL SETERR(' L2SFQ - MD.LT.1',16,1,2)                            
C/                                                                      
 1000 CONTINUE                                                          
      IF( MD.LE.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16H L2SFQ - MD.GT.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR(' L2SFQ - MD.GT.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( MQ.GE.1 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H L2SFQ - MQ.LT.1,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' L2SFQ - MQ.LT.1',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      DO 1006 I = 1, MQ                                                 
            IF( XQ(I).GE.(-1.0E0).AND.XQ(I).LE.(+1.0E0) )      GOTO 1009
C/6S                                                                    
C     CALL SETERR(29H L2SFQ - XQ(I) NOT IN (-1,+1),29,4,2)              
C/7S                                                                    
      CALL SETERR(' L2SFQ - XQ(I) NOT IN (-1,+1)',29,4,2)               
C/                                                                      
 1009 CONTINUE                                                          
 1006 CONTINUE                                                          
 1007 CONTINUE                                                          
      IF( K.GE.2 )      GOTO 1011                                       
C/6S                                                                    
C     CALL SETERR(15H L2SFQ - K.LT.2,15,5,2)                            
C/7S                                                                    
      CALL SETERR(' L2SFQ - K.LT.2',15,5,2)                             
C/                                                                      
 1011 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1013                                      
C/6S                                                                    
C     CALL SETERR(16H L2SFQ - NT.LE.K,16,6,2)                           
C/7S                                                                    
      CALL SETERR(' L2SFQ - NT.LE.K',16,6,2)                            
C/                                                                      
 1013 CONTINUE                                                          
C                                                                       
C GET THE FITTING POINTS.                                               
C                                                                       
      NDT = 1                                                           
C FIND THE NUMBER OF DISTINCT MESH POINTS.                              
      I21017 = NT-1                                                     
      DO 1015 I = 1, I21017                                             
      IF( T(I).LE.T(I+1) )      GOTO 1018                               
C/6S                                                                    
C           CALL SETERR(46H L2SFQ - THE MESH T IS NOT MONOTONE INCREASIN
C    *G,46,7,2)                                                         
C/7S                                                                    
            CALL SETERR(' L2SFQ - THE MESH T IS NOT MONOTONE INCREASING'
     *,46,7,2)                                                          
C/                                                                      
 1018 CONTINUE                                                          
      IF( T(I+1).LE.T(I) )      GOTO 1020                               
      NDT = NDT + (1)                                                   
 1020 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1022                                    
      GOTO 1015                                                         
 1022 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1024                            
C/6S                                                                    
C     CALL SETERR(24H L2SFQ - MULT(T(I)).GT.K,24,8,2)                   
C/7S                                                                    
      CALL SETERR(' L2SFQ - MULT(T(I)).GT.K',24,8,2)                    
C/                                                                      
 1024 CONTINUE                                                          
C                                                                       
 1015 CONTINUE                                                          
 1016 CONTINUE                                                          
      NXFIT = (NDT-1)*MQ                                                
C                                                                       
      IF( NXFIT*MD.GE.NT-K )      GOTO 1026                             
C/6S                                                                    
C     CALL SETERR(30H L2SFQ - (NDT-1)*MQ*MD.LT.NT-K,30,9,2)             
C/7S                                                                    
      CALL SETERR(' L2SFQ - (NDT-1)*MQ*MD.LT.NT-K',30,9,2)              
C/                                                                      
 1026 CONTINUE                                                          
C                                                                       
      IXFIT = ISTKGT(NXFIT,3)                                           
C CREATE THE FITTING POINTS.                                            
C                                                                       
      JXFIT = IXFIT                                                     
      I21030 = NT-1                                                     
      DO 1028 I = 1, I21030                                             
      IF( T(I).NE.T(I+1) )      GOTO 1031                               
      GOTO 1028                                                         
 1031 CONTINUE                                                          
C                                                                       
      DO 1033 J = 1, MQ                                                 
            WS(JXFIT) = AMAX1(T(I),AMIN1(0.5E0*((T(I)+T(I+1))+(T(I+1)-T(
     *I))*XQ(J)),T(I+1)))                                               
      JXFIT = JXFIT + (1)                                               
 1033 CONTINUE                                                          
 1034 CONTINUE                                                          
C                                                                       
 1028 CONTINUE                                                          
 1029 CONTINUE                                                          
      IY = ISTKGT(MD*NXFIT,3)                                           
      IW = ISTKGT(MD*NXFIT,3)                                           
C                                                                       
      CALL SETR(MD*NXFIT,1.0E0,WS(IW))                                  
C DEFAULT WEIGHTS.                                                      
C                                                                       
      CALL FW(WS(IXFIT),NXFIT,MD,WS(IY),WS(IW))                         
C                                                                       
      JXFIT = IW                                                        
C NOW ADJUST THE WEIGHTS.                                               
      I21038 = NT-1                                                     
      DO 1036 I = 1, I21038                                             
      IF( T(I).NE.T(I+1) )      GOTO 1039                               
      GOTO 1036                                                         
 1039 CONTINUE                                                          
C                                                                       
      DO 1041 IQ = 1, MQ                                                
      DO 1044 J = 1, MD                                                 
      IX1001 = JXFIT+(J-1)*NXFIT                                        
      WS(IX1001) = WS(IX1001) * (0.5E0*(T(I+1)-T(I))*WQ(IQ))            
      IX1005 = JXFIT+(J-1)*NXFIT                                        
      IF( WS(IX1005).GE.0.0E0 )      GOTO 1047                          
C/6S                                                                    
C     CALL SETERR(25H L2SFQ - NEGATIVE WEIGHTS,25,10,1)                 
C/7S                                                                    
      CALL SETERR(' L2SFQ - NEGATIVE WEIGHTS',25,10,1)                  
C/                                                                      
      CALL LEAVE                                                        
      RETURN                                                            
 1047 CONTINUE                                                          
 1044 CONTINUE                                                          
 1045 CONTINUE                                                          
      JXFIT = JXFIT + (1)                                               
 1041 CONTINUE                                                          
 1042 CONTINUE                                                          
C                                                                       
 1036 CONTINUE                                                          
 1037 CONTINUE                                                          
      CALL DL2SH(WS(IXFIT),WS(IY),NXFIT,MD,WS(IW),K,T,NT,A)             
C                                                                       
      IF( NERROR(NERR).EQ.0 )      GOTO 1049                            
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38H L2SFQ - SINGULAR LEAST SQUARES MATRIX,38,11,
C    *1)                                                                
C/7S                                                                    
            CALL SETERR(' L2SFQ - SINGULAR LEAST SQUARES MATRIX',38,11, 
     *1)                                                                
C/                                                                      
C                                                                       
 1049 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DL2SFF(FW,K,T,NT,A)                                    
C                                                                       
C                                                                       
C TO FIT A FUNCTION F WITH A B-SPLINE.                                  
C                                                                       
C THE MNEMONIC IS - DOUBLE PRECISION L2 SPLINE FIT TO A FUNCTION.       
C                                                                       
C METHOD - WEIGHTED LEAST-SQUARES FIT.                                  
C                                                                       
C   THE FUNCTIONAL                                                      
C                                                                       
C       INTEGRAL ( T(1) TO T(NT) )                                      
C          ( (F - F)**2 * W(X) ) DX                                     
C                                                                       
C   IS MINIMIZED OVER ALL B-SPLINES F OF ORDER K ON THE MESH T.         
C                                                                       
C   THE INTEGRALS ARE DONE PIECEWISE WITH A K POINT                     
C   GAUSSIAN-QUADRATURE RULE.                                           
C                                                                       
C INPUT -                                                               
C                                                                       
C   FW     - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    FW(X,NX,FX,WX)                                     
C                                                                       
C            F MUST BE DECLARED EXTERNAL IN THE USER S CALLING PROGRAM  
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F AND W ARE TO BE EVALUATED      
C              NX   - THE LENGTH OF THE ARRAY X.                        
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I) = F( X(I) ), I = 1,...,NX.                    
C              WX - WX(I) = W( X(I) ), I = 1,...,NX.                    
C                   IF WX IS NOT SET, WX = 1 IS THE DEFAULT.            
C                                                                       
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED IN THE FITTING PROCEDURE      
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE APPROXIMATION.           
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   LET NDT = THE NUMBER OF DISTINCT POINTS IN THE B-SPLINE MESH T      
C   AND NXFIT = (NDT-1) * K                                             
C                                                                       
C   THEN,         S(DL2SFF) =                                           
C                                                                       
C     NXFIT + 2*K +                                                     
C                                                                       
C     MAX( 17*K , 2*NXFIT +                                             
C                                                                       
C                 MAX ( S(FW) , (NT-K+4)*K + 1 INTEGER ) )              
C                                                                       
C   WORDS.                                                              
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - K.LT.2.                                                         
C   2 - NT.LE.K.                                                        
C   3 - THE MESH T IS NOT MONOTONE INCREASING.                          
C   4 - MULT(T(I)).GT.K.                                                
C   5 - NEGATIVE WEIGHTS. (RECOVERABLE)                                 
C   6 - SINGULAR LEAST SQUARES MATRIX. (RECOVERABLE)                    
C                                                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      DOUBLE PRECISION WS(500)                                          
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
            INTEGER I,J,NDT,NXFIT,IXFIT,JXFIT,IY,IW,IXQ,IWQ,ISTKGT,NERRO
     *R,NERR                                                            
      EXTERNAL FW                                                       
      INTEGER K,NT                                                      
      DOUBLE PRECISION T(NT),A(1)                                       
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C                                                                       
      CALL ENTER(1)                                                     
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( K.GE.2 )      GOTO 1000                                       
C/6S                                                                    
C     CALL SETERR(15HDL2SFF - K.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR('DL2SFF - K.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16HDL2SFF - NT.LE.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR('DL2SFF - NT.LE.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
C                                                                       
C GET THE FITTING POINTS.                                               
C                                                                       
      NDT = 1                                                           
C FIND THE NUMBER OF DISTINCT MESH POINTS.                              
      I21006 = NT-1                                                     
      DO 1004 I = 1, I21006                                             
      IF( T(I).LE.T(I+1) )      GOTO 1007                               
C/6S                                                                    
C           CALL SETERR(46HDL2SFF - THE MESH T IS NOT MONOTONE INCREASIN
C    *G,46,3,2)                                                         
C/7S                                                                    
            CALL SETERR('DL2SFF - THE MESH T IS NOT MONOTONE INCREASING'
     *,46,3,2)                                                          
C/                                                                      
 1007 CONTINUE                                                          
      IF( T(I+1).LE.T(I) )      GOTO 1009                               
      NDT = NDT + (1)                                                   
 1009 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1011                                    
      GOTO 1004                                                         
 1011 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1013                            
C/6S                                                                    
C     CALL SETERR(24HDL2SFF - MULT(T(I)).GT.K,24,4,2)                   
C/7S                                                                    
      CALL SETERR('DL2SFF - MULT(T(I)).GT.K',24,4,2)                    
C/                                                                      
 1013 CONTINUE                                                          
C                                                                       
 1004 CONTINUE                                                          
 1005 CONTINUE                                                          
      NXFIT = K*(NDT-1)                                                 
C                                                                       
      IXFIT = ISTKGT(NXFIT,4)                                           
C CREATE THE FITTING POINTS.                                            
C                                                                       
      IXQ = ISTKGT(K,4)                                                 
      IWQ = ISTKGT(K,4)                                                 
C GET THE GAUSS-QUADRATURE RULE.                                        
      CALL DGQ1(K,WS(IXQ),WS(IWQ))                                      
C                                                                       
      JXFIT = IXFIT                                                     
      I21017 = NT-1                                                     
      DO 1015 I = 1, I21017                                             
      IF( T(I).NE.T(I+1) )      GOTO 1018                               
      GOTO 1015                                                         
 1018 CONTINUE                                                          
C                                                                       
      DO 1020 J = 1, K                                                  
      IX1004 = IXQ+J-1                                                  
            WS(JXFIT) = DMAX1(T(I),DMIN1(0.5D0*((T(I)+T(I+1))+(T(I+1)-T(
     *I))*WS(IX1004)),T(I+1)))                                          
      JXFIT = JXFIT + (1)                                               
 1020 CONTINUE                                                          
 1021 CONTINUE                                                          
C                                                                       
 1015 CONTINUE                                                          
 1016 CONTINUE                                                          
      IY = ISTKGT(NXFIT,4)                                              
      IW = ISTKGT(NXFIT,4)                                              
C                                                                       
      CALL SETD(NXFIT,1.0D0,WS(IW))                                     
C DEFAULT WEIGHTS.                                                      
C                                                                       
      CALL FW(WS(IXFIT),NXFIT,WS(IY),WS(IW))                            
C                                                                       
      JXFIT = IW                                                        
C NOW ADJUST THE WEIGHTS.                                               
      I21025 = NT-1                                                     
      DO 1023 I = 1, I21025                                             
      IF( T(I).NE.T(I+1) )      GOTO 1026                               
      GOTO 1023                                                         
 1026 CONTINUE                                                          
C                                                                       
      DO 1028 J = 1, K                                                  
      IX1001 = IWQ+J-1                                                  
      WS(JXFIT) = WS(JXFIT) * (0.5D0*(T(I+1)-T(I))*WS(IX1001))          
      IF( WS(JXFIT).GE.0.0D0 )      GOTO 1031                           
C/6S                                                                    
C     CALL SETERR(25HDL2SFF - NEGATIVE WEIGHTS,25,5,1)                  
C/7S                                                                    
      CALL SETERR('DL2SFF - NEGATIVE WEIGHTS',25,5,1)                   
C/                                                                      
      CALL LEAVE                                                        
      RETURN                                                            
 1031 CONTINUE                                                          
      JXFIT = JXFIT + (1)                                               
 1028 CONTINUE                                                          
 1029 CONTINUE                                                          
C                                                                       
 1023 CONTINUE                                                          
 1024 CONTINUE                                                          
      CALL DDL2SH(WS(IXFIT),WS(IY),NXFIT,1,WS(IW),K,T,NT,A)             
C                                                                       
      IF( NERROR(NERR).EQ.0 )      GOTO 1033                            
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38HDL2SFF - SINGULAR LEAST SQUARES MATRIX,38,6,1
C    *)                                                                 
C/7S                                                                    
            CALL SETERR('DL2SFF - SINGULAR LEAST SQUARES MATRIX',38,6,1 
     *)                                                                 
C/                                                                      
C                                                                       
 1033 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DL2SFH(FW,MD,K,T,NT,A)                                 
C                                                                       
C                                                                       
C TO FIT A FUNCTION F WITH A B-SPLINE.                                  
C                                                                       
C THE MNEMONIC IS - DOUBLE PRECISION L2 SPLINE FIT TO A FUNCTION,       
C                   USING HERMITE DATA.                                 
C                                                                       
C METHOD - WEIGHTED LEAST-SQUARES FIT.                                  
C                                                                       
C   THE FUNCTIONAL                                                      
C                                                                       
C       SUM(J = 1,...,MD) INTEGRAL ( T(1) TO T(NT) )                    
C          ( (F-SUP-(J-1) - F-SUP-(J-1))**2 * W-SUB-J (X) ) DX          
C                                                                       
C   IS MINIMIZED OVER ALL B-SPLINES F OF ORDER K ON THE MESH T.         
C                                                                       
C   THE INTEGRALS ARE DONE PIECEWISE WITH A CEIL( K/MD ) POINT          
C   GAUSSIAN-QUADRATURE RULE.                                           
C                                                                       
C INPUT -                                                               
C                                                                       
C   FW     - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    FW(X,NX,MD,FX,WX)                                  
C                                                                       
C            F MUST BE DECLARED EXTERNAL IN THE USER S CALLING PROGRAM  
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F AND W ARE TO BE EVALUATED      
C              NX   - THE LENGTH OF THE ARRAY X.                        
C              MD   - THE NUMBER OF DERIVATIVES TO BE EVALUATED AN      
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I,J) = THE (J-1)-ST DERIVATIVE OF F AT X(I)      
C                             J = 1,...,MD, I = 1,...,NX.               
C              WX - WX(I,J) = THE WEIGHT W-SUB-J (X) FOR THE            
C                             (J-1)-ST DERIVATIVE OF F AT X(I),         
C                             J = 1,...,MD, I = 1,...,NX.               
C                   IF WX IS NOT SET, WX = 1 IS THE DEFAULT.            
C                                                                       
C   MD     - THE NUMBER OF DERIVATIVES TO BE USED IN THE FITTING.       
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED IN THE FITTING PROCEDURE      
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE APPROXIMATION.           
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   LET NDT = THE NUMBER OF DISTINCT POINTS IN THE B-SPLINE MESH T      
C   MQ = CEIL( K/MD ), AND NXFIT = (NDT-1) * MQ                         
C                                                                       
C   THEN,         S(DL2SFH) =                                           
C                                                                       
C     2*MQ +                                                            
C                                                                       
C     MAX( 17*MQ , NXFIT*(2*MD+1) +                                     
C                                                                       
C                  MAX( S(FW) , (NT-K+MD)*K +                           
C                                                                       
C                               MAX( 3*K , K*(MIN((K+1)/2,MD) + 1)      
C                                                                       
C                               MD INTEGER ) )                          
C                                                                       
C   WORDS.                                                              
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - MD.LT.1.                                                        
C   2 - MD.GT.K.                                                        
C   3 - K.LT.2.                                                         
C   4 - NT.LE.K.                                                        
C   5 - THE MESH T IS NOT MONOTONE INCREASING.                          
C   6 - MULT(T(I)).GT.K.                                                
C   7 - NEGATIVE WEIGHTS. (RECOVERABLE)                                 
C   8 - SINGULAR LEAST SQUARES MATRIX. (RECOVERABLE)                    
C                                                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      DOUBLE PRECISION WS(500)                                          
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER I,NDT,NERROR,NERR                                         
      EXTERNAL FW                                                       
      INTEGER MD,K,NT                                                   
      DOUBLE PRECISION T(NT),A(1)                                       
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C                                                                       
      CALL ENTER(1)                                                     
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( MD.GE.1 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(16HDL2SFH - MD.LT.1,16,1,2)                           
C/7S                                                                    
      CALL SETERR('DL2SFH - MD.LT.1',16,1,2)                            
C/                                                                      
 1000 CONTINUE                                                          
      IF( MD.LE.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16HDL2SFH - MD.GT.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR('DL2SFH - MD.GT.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( K.GE.2 )      GOTO 1004                                       
C/6S                                                                    
C     CALL SETERR(15HDL2SFH - K.LT.2,15,3,2)                            
C/7S                                                                    
      CALL SETERR('DL2SFH - K.LT.2',15,3,2)                             
C/                                                                      
 1004 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(16HDL2SFH - NT.LE.K,16,4,2)                           
C/7S                                                                    
      CALL SETERR('DL2SFH - NT.LE.K',16,4,2)                            
C/                                                                      
 1006 CONTINUE                                                          
C                                                                       
C GET THE FITTING POINTS.                                               
C                                                                       
      NDT = 1                                                           
C FIND THE NUMBER OF DISTINCT MESH POINTS.                              
      I21010 = NT-1                                                     
      DO 1008 I = 1, I21010                                             
      IF( T(I).LE.T(I+1) )      GOTO 1011                               
C/6S                                                                    
C           CALL SETERR(46HDL2SFH - THE MESH T IS NOT MONOTONE INCREASIN
C    *G,46,5,2)                                                         
C/7S                                                                    
            CALL SETERR('DL2SFH - THE MESH T IS NOT MONOTONE INCREASING'
     *,46,5,2)                                                          
C/                                                                      
 1011 CONTINUE                                                          
      IF( T(I+1).LE.T(I) )      GOTO 1013                               
      NDT = NDT + (1)                                                   
 1013 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1015                                    
      GOTO 1008                                                         
 1015 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1017                            
C/6S                                                                    
C     CALL SETERR(24HDL2SFH - MULT(T(I)).GT.K,24,6,2)                   
C/7S                                                                    
      CALL SETERR('DL2SFH - MULT(T(I)).GT.K',24,6,2)                    
C/                                                                      
 1017 CONTINUE                                                          
C                                                                       
 1008 CONTINUE                                                          
 1009 CONTINUE                                                          
      CALL DL2SFG(FW,MD,(K+MD-1)/MD,K,T,NT,A)                           
C                                                                       
      IF( NERROR(NERR).NE.9 )      GOTO 1019                            
      CALL ERROFF                                                       
C/6S                                                                    
C     CALL SETERR(25HDL2SFH - NEGATIVE WEIGHTS,25,7,1)                  
C/7S                                                                    
      CALL SETERR('DL2SFH - NEGATIVE WEIGHTS',25,7,1)                   
C/                                                                      
      GOTO 1020                                                         
 1019 CONTINUE                                                          
      IF( NERROR(NERR).NE.10 )      GOTO 1021                           
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38HDL2SFH - SINGULAR LEAST SQUARES MATRIX,38,8,1
C    *)                                                                 
C/7S                                                                    
            CALL SETERR('DL2SFH - SINGULAR LEAST SQUARES MATRIX',38,8,1 
     *)                                                                 
C/                                                                      
C                                                                       
 1021 CONTINUE                                                          
 1020 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DL2SFG(FW,MD,MQ,K,T,NT,A)                              
C                                                                       
C                                                                       
C TO FIT A FUNCTION F WITH A B-SPLINE.                                  
C                                                                       
C THE MNEMONIC IS - DOUBLE PRECISION L2 SPLINE FIT TO A FUNCTION,       
C                   USING GAUSSIAN QUADRATURE.                          
C                                                                       
C METHOD - WEIGHTED LEAST-SQUARES FIT.                                  
C                                                                       
C   THE FUNCTIONAL                                                      
C                                                                       
C       SUM(J = 1,...,MD) INTEGRAL ( T(1) TO T(NT) )                    
C          ( (F-SUP-(J-1) - F-SUP-(J-1))**2 * W-SUB-J (X) ) DX          
C                                                                       
C   IS MINIMIZED OVER ALL B-SPLINES F OF ORDER K ON THE MESH T.         
C                                                                       
C   THE INTEGRALS ARE DONE PIECEWISE WITH AN MQ POINT                   
C   GAUSSIAN-QUADRATURE RULE.                                           
C                                                                       
C INPUT -                                                               
C                                                                       
C   FW     - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    FW(X,NX,MD,FX,WX)                                  
C                                                                       
C            F MUST BE DECLARED EXTERNAL IN THE USER S CALLING PROGRAM  
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F AND W ARE TO BE EVALUATED      
C              NX   - THE LENGTH OF THE ARRAY X.                        
C              MD   - THE NUMBER OF DERIVATIVES TO BE EVALUATED AN      
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I,J) = THE (J-1)-ST DERIVATIVE OF F AT X(I)      
C                             J = 1,...,MD, I = 1,...,NX.               
C              WX - WX(I,J) = THE WEIGHT W-SUB-J (X) FOR THE            
C                             (J-1)-ST DERIVATIVE OF F AT X(I),         
C                             J = 1,...,MD, I = 1,...,NX.               
C                   IF WX IS NOT SET, WX = 1 IS THE DEFAULT.            
C                                                                       
C   MD     - THE NUMBER OF DERIVATIVES TO BE USED IN THE FITTING.       
C   MQ     - THE NUMBER OF POINTS IN THE GAUSSIAN QUADRATURE RULE.      
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED IN THE FITTING PROCEDURE      
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE APPROXIMATION.           
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   LET NDT = THE NUMBER OF DISTINCT POINTS IN THE B-SPLINE MESH T      
C   AND NXFIT = (NDT-1)*MQ.                                             
C                                                                       
C   THEN,         S(DL2SFG) =                                           
C                                                                       
C     2*MQ +                                                            
C                                                                       
C     MAX( 17*MQ , NXFIT*(2*MD+1) +                                     
C                                                                       
C                  MAX( S(FW) , (NT-K+MD)*K +                           
C                                                                       
C                               MAX( 3*K , K*(MIN((K+1)/2,MD) + 1)      
C                                                                       
C                               MD INTEGER ) )                          
C                                                                       
C   WORDS.                                                              
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - MD.LT.1.                                                       
C    2 - MD.GT.K.                                                       
C    3 - MQ.LT.1.                                                       
C    4 - K.LT.2.                                                        
C    5 - NT.LE.K.                                                       
C    6 - THE MESH T IS NOT MONOTONE INCREASING.                         
C    7 - MULT(T(I)).GT.K.                                               
C    8 - (NDT-1)*MQ*MD.LT.NT-K.                                         
C    9 - NEGATIVE WEIGHTS. (RECOVERABLE)                                
C   10 - SINGULAR LEAST SQUARES MATRIX. (RECOVERABLE)                   
C                                                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      DOUBLE PRECISION WS(500)                                          
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER I,NDT,IXQ,IWQ,ISTKGT,NERROR,NERR                          
      EXTERNAL FW                                                       
      INTEGER MD,MQ,K,NT                                                
      DOUBLE PRECISION T(NT),A(1)                                       
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C                                                                       
      CALL ENTER(1)                                                     
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( MD.GE.1 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(16HDL2SFG - MD.LT.1,16,1,2)                           
C/7S                                                                    
      CALL SETERR('DL2SFG - MD.LT.1',16,1,2)                            
C/                                                                      
 1000 CONTINUE                                                          
      IF( MD.LE.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16HDL2SFG - MD.GT.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR('DL2SFG - MD.GT.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( MQ.GE.1 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HDL2SFG - MQ.LT.1,16,3,2)                           
C/7S                                                                    
      CALL SETERR('DL2SFG - MQ.LT.1',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( K.GE.2 )      GOTO 1006                                       
C/6S                                                                    
C     CALL SETERR(15HDL2SFG - K.LT.2,15,4,2)                            
C/7S                                                                    
      CALL SETERR('DL2SFG - K.LT.2',15,4,2)                             
C/                                                                      
 1006 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1008                                      
C/6S                                                                    
C     CALL SETERR(16HDL2SFG - NT.LE.K,16,5,2)                           
C/7S                                                                    
      CALL SETERR('DL2SFG - NT.LE.K',16,5,2)                            
C/                                                                      
 1008 CONTINUE                                                          
C                                                                       
C GET THE FITTING POINTS.                                               
C                                                                       
      NDT = 1                                                           
C FIND THE NUMBER OF DISTINCT MESH POINTS.                              
      I21012 = NT-1                                                     
      DO 1010 I = 1, I21012                                             
      IF( T(I).LE.T(I+1) )      GOTO 1013                               
C/6S                                                                    
C           CALL SETERR(46HDL2SFG - THE MESH T IS NOT MONOTONE INCREASIN
C    *G,46,6,2)                                                         
C/7S                                                                    
            CALL SETERR('DL2SFG - THE MESH T IS NOT MONOTONE INCREASING'
     *,46,6,2)                                                          
C/                                                                      
 1013 CONTINUE                                                          
      IF( T(I+1).LE.T(I) )      GOTO 1015                               
      NDT = NDT + (1)                                                   
 1015 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1017                                    
      GOTO 1010                                                         
 1017 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1019                            
C/6S                                                                    
C     CALL SETERR(24HDL2SFG - MULT(T(I)).GT.K,24,7,2)                   
C/7S                                                                    
      CALL SETERR('DL2SFG - MULT(T(I)).GT.K',24,7,2)                    
C/                                                                      
 1019 CONTINUE                                                          
C                                                                       
 1010 CONTINUE                                                          
 1011 CONTINUE                                                          
      IF( (NDT-1)*MQ*MD.GE.NT-K )      GOTO 1021                        
C/6S                                                                    
C     CALL SETERR(30HDL2SFG - (NDT-1)*MQ*MD.LT.NT-K,30,8,2)             
C/7S                                                                    
      CALL SETERR('DL2SFG - (NDT-1)*MQ*MD.LT.NT-K',30,8,2)              
C/                                                                      
 1021 CONTINUE                                                          
C                                                                       
C GET THE GAUSSIAN QUADRATURE RULE.                                     
C                                                                       
      IXQ = ISTKGT(MQ,4)                                                
      IWQ = ISTKGT(MQ,4)                                                
      CALL DGQ1(MQ,WS(IXQ),WS(IWQ))                                     
C                                                                       
      CALL DL2SFQ(FW,MD,WS(IXQ),WS(IWQ),MQ,K,T,NT,A)                    
C                                                                       
      IF( NERROR(NERR).NE.10 )      GOTO 1023                           
      CALL ERROFF                                                       
C/6S                                                                    
C     CALL SETERR(25HDL2SFG - NEGATIVE WEIGHTS,25,9,1)                  
C/7S                                                                    
      CALL SETERR('DL2SFG - NEGATIVE WEIGHTS',25,9,1)                   
C/                                                                      
      GOTO 1024                                                         
 1023 CONTINUE                                                          
      IF( NERROR(NERR).NE.11 )      GOTO 1025                           
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38HDL2SFG - SINGULAR LEAST SQUARES MATRIX,38,10,
C    *1)                                                                
C/7S                                                                    
            CALL SETERR('DL2SFG - SINGULAR LEAST SQUARES MATRIX',38,10, 
     *1)                                                                
C/                                                                      
C                                                                       
 1025 CONTINUE                                                          
 1024 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DL2SFQ(FW,MD,XQ,WQ,MQ,K,T,NT,A)                        
C                                                                       
C                                                                       
C TO FIT A FUNCTION F WITH A B-SPLINE.                                  
C                                                                       
C THE MNEMONIC IS - DOUBLE PRECISION L2 SPLINE FIT TO A FUNCTION,       
C                   USING A QUADRATURE RULE.                            
C                                                                       
C METHOD - WEIGHTED LEAST-SQUARES FIT.                                  
C                                                                       
C   THE FUNCTIONAL                                                      
C                                                                       
C       SUM(J = 1,...,MD) INTEGRAL ( T(1) TO T(NT) )                    
C          ( (F-SUP-(J-1) - F-SUP-(J-1))**2 * W-SUB-J (X) ) DX          
C                                                                       
C   IS MINIMIZED OVER ALL B-SPLINES F OF ORDER K ON THE MESH T.         
C                                                                       
C   THE INTEGRALS ARE DONE PIECEWISE WITH THE MQ POINT                  
C   QUADRATURE RULE WITH WEIGHTS WQ AND ABSCISSAE XQ.                   
C                                                                       
C INPUT -                                                               
C                                                                       
C   FW     - THE NAME OF A USER SUPPLIED SUBROUTINE                     
C                                                                       
C                    FW(X,NX,MD,FX,WX)                                  
C                                                                       
C            F MUST BE DECLARED EXTERNAL IN THE USER S CALLING PROGRAM  
C                                                                       
C            INPUT -                                                    
C                                                                       
C              X    - THE POINTS WHERE F AND W ARE TO BE EVALUATED      
C              NX   - THE LENGTH OF THE ARRAY X.                        
C              MD   - THE NUMBER OF DERIVATIVES TO BE EVALUATED AN      
C                                                                       
C            OUTPUT -                                                   
C                                                                       
C              FX - FX(I,J) = THE (J-1)-ST DERIVATIVE OF F AT X(I)      
C                             J = 1,...,MD, I = 1,...,NX.               
C              WX - WX(I,J) = THE WEIGHT W-SUB-J (X) FOR THE            
C                             (J-1)-ST DERIVATIVE OF F AT X(I),         
C                             J = 1,...,MD, I = 1,...,NX.               
C                   IF WX IS NOT SET, WX = 1 IS THE DEFAULT.            
C                                                                       
C   MD     - THE NUMBER OF DERIVATIVES TO BE USED IN THE FITTING.       
C   XQ     - THE INTEGRALS ARE DONE PIECEWISE USING THE QUADRATURE      
C   WQ     - RULE ON (-1,+1) WITH MQ ABSCISSAE XQ AND WEIGHTS WQ.       
C   MQ     - THE NUMBER OF POINTS IN THE QUADRATURE RULE.               
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED IN THE FITTING PROCEDURE      
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT -                                                              
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE APPROXIMATION.           
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   LET NDT = THE NUMBER OF DISTINCT POINTS IN THE B-SPLINE MESH T      
C   AND NXFIT = (NDT-1) * MQ                                            
C                                                                       
C   THEN,         S(DL2SFQ) =                                           
C                                                                       
C     NXFIT*(2*MD+1) +                                                  
C                                                                       
C     MAX( S(FW) , (NT-K+MD)*K +                                        
C                                                                       
C                  MAX( 3*K , K*(MIN((K+1)/2,MD) + 1) ) + MD INTEG      
C                                                                       
C   WORDS.                                                              
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - MD.LT.1.                                                       
C    2 - MD.GT.K.                                                       
C    3 - MQ.LT.1.                                                       
C    4 - XQ(I) NOT IN (-1,+1).                                          
C    5 - K.LT.2.                                                        
C    6 - NT.LE.K.                                                       
C    7 - THE MESH T IS NOT MONOTONE INCREASING.                         
C    8 - MULT(T(I)).GT.K.                                               
C    9 - (NDT-1)*MQ*MD.LT.NT-K.                                         
C   10 - NEGATIVE WEIGHTS. (RECOVERABLE)                                
C   11 - SINGULAR LEAST SQUARES MATRIX. (RECOVERABLE)                   
C                                                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      DOUBLE PRECISION WS(500)                                          
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
            INTEGER I,J,NDT,NXFIT,IXFIT,JXFIT,IY,IW,IQ,ISTKGT,NERROR,NER
     *R                                                                 
      EXTERNAL FW                                                       
      INTEGER MD,MQ,K,NT                                                
      DOUBLE PRECISION XQ(MQ),WQ(MQ),T(NT),A(1)                         
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C                                                                       
      CALL ENTER(1)                                                     
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( MD.GE.1 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(16HDL2SFQ - MD.LT.1,16,1,2)                           
C/7S                                                                    
      CALL SETERR('DL2SFQ - MD.LT.1',16,1,2)                            
C/                                                                      
 1000 CONTINUE                                                          
      IF( MD.LE.K )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16HDL2SFQ - MD.GT.K,16,2,2)                           
C/7S                                                                    
      CALL SETERR('DL2SFQ - MD.GT.K',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( MQ.GE.1 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HDL2SFQ - MQ.LT.1,16,3,2)                           
C/7S                                                                    
      CALL SETERR('DL2SFQ - MQ.LT.1',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      DO 1006 I = 1, MQ                                                 
            IF( XQ(I).GE.(-1.0D0).AND.XQ(I).LE.(+1.0D0) )      GOTO 1009
C/6S                                                                    
C     CALL SETERR(29HDL2SFQ - XQ(I) NOT IN (-1,+1),29,4,2)              
C/7S                                                                    
      CALL SETERR('DL2SFQ - XQ(I) NOT IN (-1,+1)',29,4,2)               
C/                                                                      
 1009 CONTINUE                                                          
 1006 CONTINUE                                                          
 1007 CONTINUE                                                          
      IF( K.GE.2 )      GOTO 1011                                       
C/6S                                                                    
C     CALL SETERR(15HDL2SFQ - K.LT.2,15,5,2)                            
C/7S                                                                    
      CALL SETERR('DL2SFQ - K.LT.2',15,5,2)                             
C/                                                                      
 1011 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1013                                      
C/6S                                                                    
C     CALL SETERR(16HDL2SFQ - NT.LE.K,16,6,2)                           
C/7S                                                                    
      CALL SETERR('DL2SFQ - NT.LE.K',16,6,2)                            
C/                                                                      
 1013 CONTINUE                                                          
C                                                                       
C GET THE FITTING POINTS.                                               
C                                                                       
      NDT = 1                                                           
C FIND THE NUMBER OF DISTINCT MESH POINTS.                              
      I21017 = NT-1                                                     
      DO 1015 I = 1, I21017                                             
      IF( T(I).LE.T(I+1) )      GOTO 1018                               
C/6S                                                                    
C           CALL SETERR(46HDL2SFQ - THE MESH T IS NOT MONOTONE INCREASIN
C    *G,46,7,2)                                                         
C/7S                                                                    
            CALL SETERR('DL2SFQ - THE MESH T IS NOT MONOTONE INCREASING'
     *,46,7,2)                                                          
C/                                                                      
 1018 CONTINUE                                                          
      IF( T(I+1).LE.T(I) )      GOTO 1020                               
      NDT = NDT + (1)                                                   
 1020 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1022                                    
      GOTO 1015                                                         
 1022 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1024                            
C/6S                                                                    
C     CALL SETERR(24HDL2SFQ - MULT(T(I)).GT.K,24,8,2)                   
C/7S                                                                    
      CALL SETERR('DL2SFQ - MULT(T(I)).GT.K',24,8,2)                    
C/                                                                      
 1024 CONTINUE                                                          
C                                                                       
 1015 CONTINUE                                                          
 1016 CONTINUE                                                          
      NXFIT = (NDT-1)*MQ                                                
C                                                                       
      IF( NXFIT*MD.GE.NT-K )      GOTO 1026                             
C/6S                                                                    
C     CALL SETERR(30HDL2SFQ - (NDT-1)*MQ*MD.LT.NT-K,30,9,2)             
C/7S                                                                    
      CALL SETERR('DL2SFQ - (NDT-1)*MQ*MD.LT.NT-K',30,9,2)              
C/                                                                      
 1026 CONTINUE                                                          
C                                                                       
      IXFIT = ISTKGT(NXFIT,4)                                           
C CREATE THE FITTING POINTS.                                            
C                                                                       
      JXFIT = IXFIT                                                     
      I21030 = NT-1                                                     
      DO 1028 I = 1, I21030                                             
      IF( T(I).NE.T(I+1) )      GOTO 1031                               
      GOTO 1028                                                         
 1031 CONTINUE                                                          
C                                                                       
      DO 1033 J = 1, MQ                                                 
            WS(JXFIT) = DMAX1(T(I),DMIN1(0.5D0*((T(I)+T(I+1))+(T(I+1)-T(
     *I))*XQ(J)),T(I+1)))                                               
      JXFIT = JXFIT + (1)                                               
 1033 CONTINUE                                                          
 1034 CONTINUE                                                          
C                                                                       
 1028 CONTINUE                                                          
 1029 CONTINUE                                                          
      IY = ISTKGT(MD*NXFIT,4)                                           
      IW = ISTKGT(MD*NXFIT,4)                                           
C                                                                       
      CALL SETD(MD*NXFIT,1.0D0,WS(IW))                                  
C DEFAULT WEIGHTS.                                                      
C                                                                       
      CALL FW(WS(IXFIT),NXFIT,MD,WS(IY),WS(IW))                         
C                                                                       
      JXFIT = IW                                                        
C NOW ADJUST THE WEIGHTS.                                               
      I21038 = NT-1                                                     
      DO 1036 I = 1, I21038                                             
      IF( T(I).NE.T(I+1) )      GOTO 1039                               
      GOTO 1036                                                         
 1039 CONTINUE                                                          
C                                                                       
      DO 1041 IQ = 1, MQ                                                
      DO 1044 J = 1, MD                                                 
      IX1001 = JXFIT+(J-1)*NXFIT                                        
      WS(IX1001) = WS(IX1001) * (0.5D0*(T(I+1)-T(I))*WQ(IQ))            
      IX1005 = JXFIT+(J-1)*NXFIT                                        
      IF( WS(IX1005).GE.0.0D0 )      GOTO 1047                          
C/6S                                                                    
C     CALL SETERR(25HDL2SFQ - NEGATIVE WEIGHTS,25,10,1)                 
C/7S                                                                    
      CALL SETERR('DL2SFQ - NEGATIVE WEIGHTS',25,10,1)                  
C/                                                                      
      CALL LEAVE                                                        
      RETURN                                                            
 1047 CONTINUE                                                          
 1044 CONTINUE                                                          
 1045 CONTINUE                                                          
      JXFIT = JXFIT + (1)                                               
 1041 CONTINUE                                                          
 1042 CONTINUE                                                          
C                                                                       
 1036 CONTINUE                                                          
 1037 CONTINUE                                                          
      CALL DDL2SH(WS(IXFIT),WS(IY),NXFIT,MD,WS(IW),K,T,NT,A)            
C                                                                       
      IF( NERROR(NERR).EQ.0 )      GOTO 1049                            
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38HDL2SFQ - SINGULAR LEAST SQUARES MATRIX,38,11,
C    *1)                                                                
C/7S                                                                    
            CALL SETERR('DL2SFQ - SINGULAR LEAST SQUARES MATRIX',38,11, 
     *1)                                                                
C/                                                                      
C                                                                       
 1049 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DL2SF(X,Y,NXY,K,T,NT,A)                                
C                                                                       
C                                                                       
C TO FIT A B-SPLINE TO DISCRETE DATA.                                   
C                                                                       
C THE MNEMONIC IS -                                                     
C                                                                       
C   DOUBLE PRECISION DISCRETE L2 B-SPLINE FIT.                          
C                                                                       
C METHOD - LET                                                          
C                                                                       
C   E(F) = SUM(I = 1,...,NXY)                                           
C             ( (Y(I) - F) (X(I)) **2 )                                 
C                                                                       
C   THIS PROGRAM SOLVES THE PROBLEM                                     
C                                                                       
C         MINIMIZE (OVER ALL B-SPLINES F) E(F).                         
C                                                                       
C INPUT                                                                 
C                                                                       
C   X      - THE POINTS WHERE THE FITTING IS TO TAKE PLACE.             
C            THE ARRAY X MUST BE MONOTONE INCREASING.                   
C            ANY MULTIPLICITIES IN X WILL BE IGNORED.                   
C   Y      - Y(I) IS THE VALUE THE THE B-SPLINE                         
C            IS TO TAKE AT X(I), FOR I = 1,..,NXY.                      
C   NXY    - THE NUMBER OF POINTS IN X.                                 
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED.                              
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT                                                                
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE FIT.                     
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   (NT-K+4)*K + NXY                                                    
C                                                                       
C REAL WORDS +                                                          
C                                                                       
C   1                                                                   
C                                                                       
C INTEGER WORDS.                                                        
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - NXY.LT.1.                                                      
C    2 - K.LT.2.                                                        
C    3 - NT.LE.K.                                                       
C    4 - X IS NOT MONOTONE INCREASING.                                  
C    5 - NOT ENOUGH FITTING POINTS FOR A UNIQUE L2 FIT.                 
C    6 - X(1).LT.T(1).                                                  
C    7 - X(NXY).GT.T(NT).                                               
C    8 - MESH T IS NOT MONOTONE.                                        
C    9 - MULT(T(I)).GT.K.                                               
C   10 - SINGULAR LEAST SQUARES SYSTEM. (RECOVERABLE)                   
C                                                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      REAL WS(500)                                                      
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER NDX,I,IW,ISTKGT,NERROR,NERR                               
      INTEGER NXY,K,NT                                                  
      REAL X(NXY),Y(NXY),T(NT),A(1)                                     
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NXY.GE.1 )      GOTO 1000                                     
C/6S                                                                    
C     CALL SETERR(17H DL2SF - NXY.LT.1,17,1,2)                          
C/7S                                                                    
      CALL SETERR(' DL2SF - NXY.LT.1',17,1,2)                           
C/                                                                      
 1000 CONTINUE                                                          
      IF( K.GE.2 )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15H DL2SF - K.LT.2,15,2,2)                            
C/7S                                                                    
      CALL SETERR(' DL2SF - K.LT.2',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H DL2SF - NT.LE.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' DL2SF - NT.LE.K',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
C                                                                       
C COUNT THE NUMBER OF DISTINCT X S.                                     
C                                                                       
      NDX = 1                                                           
      I = 2                                                             
 1008 CONTINUE                                                          
      IF( I.GT.NXY )      GOTO 1007                                     
      IF( X(I).GE.X(I-1) )      GOTO 1009                               
C/6S                                                                    
C           CALL SETERR(37H DL2SF - X IS NOT MONOTONE INCREASING,37,4,2)
C/7S                                                                    
            CALL SETERR(' DL2SF - X IS NOT MONOTONE INCREASING',37,4,2) 
C/                                                                      
 1009 CONTINUE                                                          
C                                                                       
      IF( X(I).EQ.X(I-1) )      GOTO 1011                               
      NDX = NDX + (1)                                                   
 1011 CONTINUE                                                          
 1006 CONTINUE                                                          
      I = I + (1)                                                       
      GOTO 1008                                                         
 1007 CONTINUE                                                          
      IF( NDX.GE.NT-K )      GOTO 1013                                  
C/6S                                                                    
C           CALL SETERR(54H DL2SF - NOT ENOUGH FITTING POINTS FOR A UNIQ
C    *UE L2 FIT,54,5,2)                                                 
C/7S                                                                    
            CALL SETERR(' DL2SF - NOT ENOUGH FITTING POINTS FOR A UNIQUE
     * L2 FIT',54,5,2)                                                  
C/                                                                      
 1013 CONTINUE                                                          
C                                                                       
      IF( X(1).GE.T(1) )      GOTO 1015                                 
C/6S                                                                    
C     CALL SETERR(21H DL2SF - X(1).LT.T(1),21,6,2)                      
C/7S                                                                    
      CALL SETERR(' DL2SF - X(1).LT.T(1)',21,6,2)                       
C/                                                                      
 1015 CONTINUE                                                          
      IF( X(NXY).LE.T(NT) )      GOTO 1017                              
C/6S                                                                    
C     CALL SETERR(24H DL2SF - X(NXY).GT.T(NT),24,7,2)                   
C/7S                                                                    
      CALL SETERR(' DL2SF - X(NXY).GT.T(NT)',24,7,2)                    
C/                                                                      
 1017 CONTINUE                                                          
C                                                                       
C CHECK THE MESH T.                                                     
C                                                                       
      I21021 = NT-1                                                     
      DO 1019 I = 1, I21021                                             
      IF( T(I).LE.T(I+1) )      GOTO 1022                               
C/6S                                                                    
C     CALL SETERR(31H DL2SF - MESH T IS NOT MONOTONE,31,8,2)            
C/7S                                                                    
      CALL SETERR(' DL2SF - MESH T IS NOT MONOTONE',31,8,2)             
C/                                                                      
 1022 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1024                                    
      GOTO 1019                                                         
 1024 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1026                            
C/6S                                                                    
C     CALL SETERR(24H DL2SF - MULT(T(I)).GT.K,24,9,2)                   
C/7S                                                                    
      CALL SETERR(' DL2SF - MULT(T(I)).GT.K',24,9,2)                    
C/                                                                      
 1026 CONTINUE                                                          
C                                                                       
 1019 CONTINUE                                                          
 1020 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
      IW = ISTKGT(NXY,3)                                                
C CREATE THE WEIGHTS.                                                   
      CALL SETR(NXY,1.0E0,WS(IW))                                       
C                                                                       
C NOW SOLVE THE LEAST-SQUARES SYSTEM.                                   
C                                                                       
      CALL DL2SW(X,Y,NXY,WS(IW),K,T,NT,A)                               
C                                                                       
      IF( NERROR(NERR).EQ.0 )      GOTO 1028                            
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38H DL2SF - SINGULAR LEAST SQUARES SYSTEM,38,10,
C    *1)                                                                
C/7S                                                                    
            CALL SETERR(' DL2SF - SINGULAR LEAST SQUARES SYSTEM',38,10, 
     *1)                                                                
C/                                                                      
C                                                                       
 1028 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DL2SW(X,Y,NXY,W,K,T,NT,A)                              
C                                                                       
C                                                                       
C TO FIT A B-SPLINE TO DISCRETE DATA.                                   
C                                                                       
C THE MNEMONIC IS -                                                     
C                                                                       
C   DOUBLE PRECISION DISCRETE L2 B-SPLINE FIT, USING WEIGHTS.           
C                                                                       
C METHOD - LET                                                          
C                                                                       
C   E(F) = SUM(I = 1,...,NXY)                                           
C             ( (Y(I) - F) (X(I)) **2 * W(I) )                          
C                                                                       
C   THIS PROGRAM SOLVES THE PROBLEM                                     
C                                                                       
C         MINIMIZE (OVER ALL B-SPLINES F) E(F).                         
C                                                                       
C INPUT                                                                 
C                                                                       
C   X      - THE POINTS WHERE THE FITTING IS TO TAKE PLACE.             
C            THE ARRAY X MUST BE MONOTONE INCREASING.                   
C            ANY MULTIPLICITIES IN X WILL BE IGNORED.                   
C   Y      - Y(I) IS THE VALUE THE THE B-SPLINE                         
C            IS TO TAKE AT X(I), FOR I = 1,..,NXY.                      
C   NXY    - THE NUMBER OF POINTS IN X.                                 
C   W      - THE WEIGHT FOR THE VALUE OF Y(I) IS W(I),                  
C            FOR I = 1,...,NXY.                                         
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED.                              
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT                                                                
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE FIT.                     
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   (NT-K+4)*K                                                          
C                                                                       
C REAL WORDS +                                                          
C                                                                       
C   1                                                                   
C                                                                       
C INTEGER WORDS.                                                        
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - NXY.LT.1.                                                      
C    2 - K.LT.2.                                                        
C    3 - NT.LE.K.                                                       
C    4 - X IS NOT MONOTONE INCREASING.                                  
C    5 - NOT ENOUGH FITTING POINTS FOR A UNIQUE L2 FIT.                 
C    6 - X(1).LT.T(1).                                                  
C    7 - X(NXY).GT.T(NT).                                               
C    8 - MESH T IS NOT MONOTONE.                                        
C    9 - MULT(T(I)).GT.K.                                               
C   10 - W(I).LT.0.                                                     
C   11 - SINGULAR LEAST SQUARES SYSTEM. (RECOVERABLE)                   
C                                                                       
      INTEGER NDX,I,NERROR,NERR                                         
      INTEGER NXY,K,NT                                                  
      REAL X(NXY),Y(NXY),W(NXY),T(NT),A(1)                              
C                                                                       
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NXY.GE.1 )      GOTO 1000                                     
C/6S                                                                    
C     CALL SETERR(17H DL2SW - NXY.LT.1,17,1,2)                          
C/7S                                                                    
      CALL SETERR(' DL2SW - NXY.LT.1',17,1,2)                           
C/                                                                      
 1000 CONTINUE                                                          
      IF( K.GE.2 )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15H DL2SW - K.LT.2,15,2,2)                            
C/7S                                                                    
      CALL SETERR(' DL2SW - K.LT.2',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H DL2SW - NT.LE.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' DL2SW - NT.LE.K',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
C                                                                       
C COUNT THE NUMBER OF DISTINCT X S.                                     
C                                                                       
      NDX = 1                                                           
      I = 2                                                             
 1008 CONTINUE                                                          
      IF( I.GT.NXY )      GOTO 1007                                     
      IF( X(I).GE.X(I-1) )      GOTO 1009                               
C/6S                                                                    
C           CALL SETERR(37H DL2SW - X IS NOT MONOTONE INCREASING,37,4,2)
C/7S                                                                    
            CALL SETERR(' DL2SW - X IS NOT MONOTONE INCREASING',37,4,2) 
C/                                                                      
 1009 CONTINUE                                                          
C                                                                       
      IF( X(I).EQ.X(I-1) )      GOTO 1011                               
      NDX = NDX + (1)                                                   
 1011 CONTINUE                                                          
 1006 CONTINUE                                                          
      I = I + (1)                                                       
      GOTO 1008                                                         
 1007 CONTINUE                                                          
      IF( NDX.GE.NT-K )      GOTO 1013                                  
C/6S                                                                    
C           CALL SETERR(54H DL2SW - NOT ENOUGH FITTING POINTS FOR A UNIQ
C    *UE L2 FIT,54,5,2)                                                 
C/7S                                                                    
            CALL SETERR(' DL2SW - NOT ENOUGH FITTING POINTS FOR A UNIQUE
     * L2 FIT',54,5,2)                                                  
C/                                                                      
 1013 CONTINUE                                                          
C                                                                       
      IF( X(1).GE.T(1) )      GOTO 1015                                 
C/6S                                                                    
C     CALL SETERR(21H DL2SW - X(1).LT.T(1),21,6,2)                      
C/7S                                                                    
      CALL SETERR(' DL2SW - X(1).LT.T(1)',21,6,2)                       
C/                                                                      
 1015 CONTINUE                                                          
      IF( X(NXY).LE.T(NT) )      GOTO 1017                              
C/6S                                                                    
C     CALL SETERR(24H DL2SW - X(NXY).GT.T(NT),24,7,2)                   
C/7S                                                                    
      CALL SETERR(' DL2SW - X(NXY).GT.T(NT)',24,7,2)                    
C/                                                                      
 1017 CONTINUE                                                          
C                                                                       
C CHECK THE MESH T.                                                     
C                                                                       
      I21021 = NT-1                                                     
      DO 1019 I = 1, I21021                                             
      IF( T(I).LE.T(I+1) )      GOTO 1022                               
C/6S                                                                    
C     CALL SETERR(31H DL2SW - MESH T IS NOT MONOTONE,31,8,2)            
C/7S                                                                    
      CALL SETERR(' DL2SW - MESH T IS NOT MONOTONE',31,8,2)             
C/                                                                      
 1022 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1024                                    
      GOTO 1019                                                         
 1024 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1026                            
C/6S                                                                    
C     CALL SETERR(24H DL2SW - MULT(T(I)).GT.K,24,9,2)                   
C/7S                                                                    
      CALL SETERR(' DL2SW - MULT(T(I)).GT.K',24,9,2)                    
C/                                                                      
 1026 CONTINUE                                                          
C                                                                       
 1019 CONTINUE                                                          
 1020 CONTINUE                                                          
      DO 1028 I = 1, NXY                                                
C     CHECK THE WEIGHTS.                                                
      IF( W(I).GE.0.0E0 )      GOTO 1031                                
C/6S                                                                    
C     CALL SETERR(18H DL2SW - W(I).LT.0,18,10,2)                        
C/7S                                                                    
      CALL SETERR(' DL2SW - W(I).LT.0',18,10,2)                         
C/                                                                      
 1031 CONTINUE                                                          
C                                                                       
 1028 CONTINUE                                                          
 1029 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
C NOW SOLVE THE LEAST-SQUARES SYSTEM.                                   
C                                                                       
      CALL DL2SH(X,Y,NXY,1,W,K,T,NT,A)                                  
C                                                                       
      IF( NERROR(NERR).EQ.0 )      GOTO 1033                            
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38H DL2SW - SINGULAR LEAST SQUARES SYSTEM,38,11,
C    *1)                                                                
C/7S                                                                    
            CALL SETERR(' DL2SW - SINGULAR LEAST SQUARES SYSTEM',38,11, 
     *1)                                                                
C/                                                                      
C                                                                       
 1033 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DL2SH(X,Y,NXY,MD,W,K,T,NT,A)                           
C                                                                       
C                                                                       
C TO FIT A B-SPLINE TO DISCRETE DATA.                                   
C                                                                       
C THE MNEMONIC IS -                                                     
C                                                                       
C   DOUBLE PRECISION DISCRETE L2 B-SPLINE FIT, USING HERMITE DATA.      
C                                                                       
C METHOD - LET                                                          
C                                                                       
C   E(F) = SUM(J = 1,...,MD) SUM(I = 1,...,NXY)                         
C             ( (Y(I,J) - F-SUP-(J-1)) (X(I)) **2 * W(I,J) )            
C                                                                       
C   THIS PROGRAM SOLVES THE PROBLEM                                     
C                                                                       
C         MINIMIZE (OVER ALL B-SPLINES F) E(F).                         
C                                                                       
C INPUT                                                                 
C                                                                       
C   X      - THE POINTS WHERE THE FITTING IS TO TAKE PLACE.             
C            THE ARRAY X MUST BE MONOTONE INCREASING.                   
C            ANY MULTIPLICITIES IN X WILL BE IGNORED.                   
C   Y      - Y(I,J) IS THE VALUE THE (J-1)-ST DERIVATIVE OF THE B-      
C            IS TO TAKE AT X(I), FOR I = 1,..,NXY AND J = 1,...,MD      
C   NXY    - THE NUMBER OF POINTS IN X.                                 
C   MD     - THE NUMBER OF DERIVATIVES TO BE FITTED.                    
C   W      - THE WEIGHT FOR THE VALUE OF Y(I,J) IS W(I,J),              
C            FOR I = 1,...,NXY AND J = 1,...,MD.                        
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED.                              
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT                                                                
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE FIT.                     
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   (NT-K+MD)*K + MAX( 3*K , K*( MIN((K+1)/2,MD) + 1 ) )                
C                                                                       
C REAL WORDS +                                                          
C                                                                       
C   MD                                                                  
C                                                                       
C INTEGER WORDS.                                                        
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - NXY.LT.1.                                                      
C    2 - MD.LT.1.                                                       
C    3 - MD.GT.K.                                                       
C    4 - K.LT.2.                                                        
C    5 - NT.LE.K.                                                       
C    6 - X IS NOT MONOTONE INCREASING.                                  
C    7 - NOT ENOUGH FITTING POINTS FOR A UNIQUE L2 FIT.                 
C    8 - X(1).LT.T(1).                                                  
C    9 - X(NXY).GT.T(NT).                                               
C   10 - MESH T IS NOT MONOTONE.                                        
C   11 - MULT(T(I)).GT.K.                                               
C   12 - W(I,J).LT.0.                                                   
C   13 - SINGULAR LEAST SQUARES SYSTEM. (RECOVERABLE)                   
C                                                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      REAL WS(500)                                                      
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER NDX,I,J,IH,IBX,ISTKGT,NERROR,NERR                         
      INTEGER NXY,MD,K,NT                                               
      REAL X(NXY),Y(NXY,MD),W(NXY,MD),T(NT),A(1)                        
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NXY.GE.1 )      GOTO 1000                                     
C/6S                                                                    
C     CALL SETERR(17H DL2SH - NXY.LT.1,17,1,2)                          
C/7S                                                                    
      CALL SETERR(' DL2SH - NXY.LT.1',17,1,2)                           
C/                                                                      
 1000 CONTINUE                                                          
      IF( MD.GE.1 )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16H DL2SH - MD.LT.1,16,2,2)                           
C/7S                                                                    
      CALL SETERR(' DL2SH - MD.LT.1',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( MD.LE.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H DL2SH - MD.GT.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' DL2SH - MD.GT.K',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( K.GE.2 )      GOTO 1006                                       
C/6S                                                                    
C     CALL SETERR(15H DL2SH - K.LT.2,15,4,2)                            
C/7S                                                                    
      CALL SETERR(' DL2SH - K.LT.2',15,4,2)                             
C/                                                                      
 1006 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1008                                      
C/6S                                                                    
C     CALL SETERR(16H DL2SH - NT.LE.K,16,5,2)                           
C/7S                                                                    
      CALL SETERR(' DL2SH - NT.LE.K',16,5,2)                            
C/                                                                      
 1008 CONTINUE                                                          
C                                                                       
C COUNT THE NUMBER OF DISTINCT X S.                                     
C                                                                       
      NDX = 1                                                           
      I = 2                                                             
 1012 CONTINUE                                                          
      IF( I.GT.NXY )      GOTO 1011                                     
      IF( X(I).GE.X(I-1) )      GOTO 1013                               
C/6S                                                                    
C           CALL SETERR(37H DL2SH - X IS NOT MONOTONE INCREASING,37,6,2)
C/7S                                                                    
            CALL SETERR(' DL2SH - X IS NOT MONOTONE INCREASING',37,6,2) 
C/                                                                      
 1013 CONTINUE                                                          
C                                                                       
      IF( X(I).EQ.X(I-1) )      GOTO 1015                               
      NDX = NDX + (1)                                                   
 1015 CONTINUE                                                          
 1010 CONTINUE                                                          
      I = I + (1)                                                       
      GOTO 1012                                                         
 1011 CONTINUE                                                          
      IF( NDX*MD.GE.NT-K )      GOTO 1017                               
C/6S                                                                    
C           CALL SETERR(54H DL2SH - NOT ENOUGH FITTING POINTS FOR A UNIQ
C    *UE L2 FIT,54,7,2)                                                 
C/7S                                                                    
            CALL SETERR(' DL2SH - NOT ENOUGH FITTING POINTS FOR A UNIQUE
     * L2 FIT',54,7,2)                                                  
C/                                                                      
 1017 CONTINUE                                                          
C                                                                       
      IF( X(1).GE.T(1) )      GOTO 1019                                 
C/6S                                                                    
C     CALL SETERR(21H DL2SH - X(1).LT.T(1),21,8,2)                      
C/7S                                                                    
      CALL SETERR(' DL2SH - X(1).LT.T(1)',21,8,2)                       
C/                                                                      
 1019 CONTINUE                                                          
      IF( X(NXY).LE.T(NT) )      GOTO 1021                              
C/6S                                                                    
C     CALL SETERR(24H DL2SH - X(NXY).GT.T(NT),24,9,2)                   
C/7S                                                                    
      CALL SETERR(' DL2SH - X(NXY).GT.T(NT)',24,9,2)                    
C/                                                                      
 1021 CONTINUE                                                          
C                                                                       
C CHECK THE MESH T.                                                     
C                                                                       
      I21025 = NT-1                                                     
      DO 1023 I = 1, I21025                                             
      IF( T(I).LE.T(I+1) )      GOTO 1026                               
C/6S                                                                    
C     CALL SETERR(31H DL2SH - MESH T IS NOT MONOTONE,31,10,2)           
C/7S                                                                    
      CALL SETERR(' DL2SH - MESH T IS NOT MONOTONE',31,10,2)            
C/                                                                      
 1026 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1028                                    
      GOTO 1023                                                         
 1028 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1030                            
C/6S                                                                    
C     CALL SETERR(24H DL2SH - MULT(T(I)).GT.K,24,11,2)                  
C/7S                                                                    
      CALL SETERR(' DL2SH - MULT(T(I)).GT.K',24,11,2)                   
C/                                                                      
 1030 CONTINUE                                                          
C                                                                       
 1023 CONTINUE                                                          
 1024 CONTINUE                                                          
      DO 1032 I = 1, NXY                                                
C     CHECK THE WEIGHTS.                                                
      J = 1                                                             
 1037 CONTINUE                                                          
      IF( J.GT.MD )      GOTO 1036                                      
      IF( W(I,J).GE.0.0E0 )      GOTO 1038                              
C/6S                                                                    
C     CALL SETERR(20H DL2SH - W(I,J).LT.0,20,12,2)                      
C/7S                                                                    
      CALL SETERR(' DL2SH - W(I,J).LT.0',20,12,2)                       
C/                                                                      
 1038 CONTINUE                                                          
 1035 CONTINUE                                                          
      J = J + (1)                                                       
      GOTO 1037                                                         
 1036 CONTINUE                                                          
C                                                                       
 1032 CONTINUE                                                          
 1033 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
C NOW SOLVE THE LEAST-SQUARES SYSTEM.                                   
C                                                                       
      IH = ISTKGT((NT-K)*K,3)                                           
      IBX = ISTKGT(MD*K,3)                                              
C                                                                       
      CALL A6L2S4(X,Y,NXY,MD,W,K,T,NT,A,WS(IH),WS(IBX),NT-K)            
C                                                                       
      CALL BSPDS(WS(IH),NT-K,K,A,1)                                     
      IF( NERROR(NERR).EQ.0 )      GOTO 1040                            
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38H DL2SH - SINGULAR LEAST SQUARES SYSTEM,38,13,
C    *1)                                                                
C/7S                                                                    
            CALL SETERR(' DL2SH - SINGULAR LEAST SQUARES SYSTEM',38,13, 
     *1)                                                                
C/                                                                      
C                                                                       
 1040 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE A6L2S4(X,Y,NXY,MD,W,K,T,NT,B,H,BX,NTMK)                
C                                                                       
C                                                                       
      INTEGER IXL,IT,IX,I1,IDX1,J,I2                                    
      INTEGER MD,NXY,NT,K,NTMK                                          
            REAL X(NXY),Y(NXY,MD),W(NXY,MD),T(NT),H(NTMK,K),B(NTMK),BX(K
     *,MD)                                                              
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C                                                                       
      CALL SETR(K*NTMK,0.0E0,H)                                         
      CALL SETR(NTMK,0.0E0,B)                                           
C                                                                       
      IXL = 1                                                           
C                                                                       
      IT = 1                                                            
 1002 CONTINUE                                                          
      IF( IT.GE.NT )      GOTO 1001                                     
C     DO THE POINTS INTERVAL BY INTERVAL.                               
      IF( T(IT).NE.T(IT+1) )      GOTO 1003                             
      GOTO 1000                                                         
 1003 CONTINUE                                                          
C                                                                       
      IX = IXL                                                          
 1007 CONTINUE                                                          
      IF( IX.GT.NXY )      GOTO 1006                                    
      IF( X(IX).LE.T(IT+1) )      GOTO 1008                             
      IXL = IX                                                          
      GOTO 1006                                                         
 1008 CONTINUE                                                          
      IF( X(IX).NE.T(IT+1).OR.X(IX).GE.T(NT) )      GOTO 1010           
      IXL = IX                                                          
      GOTO 1006                                                         
 1010 CONTINUE                                                          
      IXL = IX+1                                                        
      IX1002 = MAX0(IX-1,1)                                             
      IF( X(IX).NE.X(IX1002).OR.IX.LE.1 )      GOTO 1012                
      GOTO 1005                                                         
C                                                                       
 1012 CONTINUE                                                          
      CALL BSPLD(K,T,NT,X(IX),1,IT,MD,BX)                               
C                                                                       
      DO 1014 J = 1, MD                                                 
      I1 = MAX0(IT+1-K,1)                                               
 1019 CONTINUE                                                          
      IF( I1.GT.MIN0(IT,NT-K) )      GOTO 1018                          
      IDX1 = I1-IT+K                                                    
      B(I1) = B(I1)+BX(IDX1,J)*Y(IX,J)*W(IX,J)                          
C                                                                       
      I2 = MAX0(K,IT)+1-I1                                              
 1022 CONTINUE                                                          
      IF( I2.GT.K )      GOTO 1021                                      
      IX1001 = I1-IT+I2                                                 
      H(I1,I2) = H(I1,I2)+BX(IDX1,J)*BX(IX1001,J)*W(IX,J)               
 1020 CONTINUE                                                          
      I2 = I2+1                                                         
      GOTO 1022                                                         
 1021 CONTINUE                                                          
 1017 CONTINUE                                                          
      I1 = I1+1                                                         
      GOTO 1019                                                         
 1018 CONTINUE                                                          
 1014 CONTINUE                                                          
 1015 CONTINUE                                                          
 1005 CONTINUE                                                          
      IX = IX + (1)                                                     
      GOTO 1007                                                         
 1006 CONTINUE                                                          
C                                                                       
 1000 CONTINUE                                                          
      IT = IT + (1)                                                     
      GOTO 1002                                                         
 1001 CONTINUE                                                          
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DDL2SF(X,Y,NXY,K,T,NT,A)                               
C                                                                       
C                                                                       
C TO FIT A B-SPLINE TO DISCRETE DATA.                                   
C                                                                       
C THE MNEMONIC IS -                                                     
C                                                                       
C   DOUBLE PRECISION DISCRETE L2 B-SPLINE FIT.                          
C                                                                       
C METHOD - LET                                                          
C                                                                       
C   E(F) = SUM(I = 1,...,NXY)                                           
C             ( (Y(I) - F) (X(I)) **2 )                                 
C                                                                       
C   THIS PROGRAM SOLVES THE PROBLEM                                     
C                                                                       
C         MINIMIZE (OVER ALL B-SPLINES F) E(F).                         
C                                                                       
C INPUT                                                                 
C                                                                       
C   X      - THE POINTS WHERE THE FITTING IS TO TAKE PLACE.             
C            THE ARRAY X MUST BE MONOTONE INCREASING.                   
C            ANY MULTIPLICITIES IN X WILL BE IGNORED.                   
C   Y      - Y(I) IS THE VALUE THE THE B-SPLINE                         
C            IS TO TAKE AT X(I), FOR I = 1,..,NXY.                      
C   NXY    - THE NUMBER OF POINTS IN X.                                 
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED.                              
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT                                                                
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE FIT.                     
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   (NT-K+4)*K + NXY                                                    
C                                                                       
C LONG REAL WORDS +                                                     
C                                                                       
C   1                                                                   
C                                                                       
C INTEGER WORDS.                                                        
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - NXY.LT.1.                                                      
C    2 - K.LT.2.                                                        
C    3 - NT.LE.K.                                                       
C    4 - X IS NOT MONOTONE INCREASING.                                  
C    5 - NOT ENOUGH FITTING POINTS FOR A UNIQUE L2 FIT.                 
C    6 - X(1).LT.T(1).                                                  
C    7 - X(NXY).GT.T(NT).                                               
C    8 - MESH T IS NOT MONOTONE.                                        
C    9 - MULT(T(I)).GT.K.                                               
C   10 - SINGULAR LEAST SQUARES SYSTEM. (RECOVERABLE)                   
C                                                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      DOUBLE PRECISION WS(500)                                          
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER NDX,I,IW,ISTKGT,NERROR,NERR                               
      INTEGER NXY,K,NT                                                  
      DOUBLE PRECISION X(NXY),Y(NXY),T(NT),A(1)                         
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NXY.GE.1 )      GOTO 1000                                     
C/6S                                                                    
C     CALL SETERR(17HDDL2SF - NXY.LT.1,17,1,2)                          
C/7S                                                                    
      CALL SETERR('DDL2SF - NXY.LT.1',17,1,2)                           
C/                                                                      
 1000 CONTINUE                                                          
      IF( K.GE.2 )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15HDDL2SF - K.LT.2,15,2,2)                            
C/7S                                                                    
      CALL SETERR('DDL2SF - K.LT.2',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HDDL2SF - NT.LE.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR('DDL2SF - NT.LE.K',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
C                                                                       
C COUNT THE NUMBER OF DISTINCT X S.                                     
C                                                                       
      NDX = 1                                                           
      I = 2                                                             
 1008 CONTINUE                                                          
      IF( I.GT.NXY )      GOTO 1007                                     
      IF( X(I).GE.X(I-1) )      GOTO 1009                               
C/6S                                                                    
C           CALL SETERR(37HDDL2SF - X IS NOT MONOTONE INCREASING,37,4,2)
C/7S                                                                    
            CALL SETERR('DDL2SF - X IS NOT MONOTONE INCREASING',37,4,2) 
C/                                                                      
 1009 CONTINUE                                                          
C                                                                       
      IF( X(I).EQ.X(I-1) )      GOTO 1011                               
      NDX = NDX + (1)                                                   
 1011 CONTINUE                                                          
 1006 CONTINUE                                                          
      I = I + (1)                                                       
      GOTO 1008                                                         
 1007 CONTINUE                                                          
      IF( NDX.GE.NT-K )      GOTO 1013                                  
C/6S                                                                    
C           CALL SETERR(54HDDL2SF - NOT ENOUGH FITTING POINTS FOR A UNIQ
C    *UE L2 FIT,54,5,2)                                                 
C/7S                                                                    
            CALL SETERR('DDL2SF - NOT ENOUGH FITTING POINTS FOR A UNIQUE
     * L2 FIT',54,5,2)                                                  
C/                                                                      
 1013 CONTINUE                                                          
C                                                                       
      IF( X(1).GE.T(1) )      GOTO 1015                                 
C/6S                                                                    
C     CALL SETERR(21HDDL2SF - X(1).LT.T(1),21,6,2)                      
C/7S                                                                    
      CALL SETERR('DDL2SF - X(1).LT.T(1)',21,6,2)                       
C/                                                                      
 1015 CONTINUE                                                          
      IF( X(NXY).LE.T(NT) )      GOTO 1017                              
C/6S                                                                    
C     CALL SETERR(24HDDL2SF - X(NXY).GT.T(NT),24,7,2)                   
C/7S                                                                    
      CALL SETERR('DDL2SF - X(NXY).GT.T(NT)',24,7,2)                    
C/                                                                      
 1017 CONTINUE                                                          
C                                                                       
C CHECK THE MESH T.                                                     
C                                                                       
      I21021 = NT-1                                                     
      DO 1019 I = 1, I21021                                             
      IF( T(I).LE.T(I+1) )      GOTO 1022                               
C/6S                                                                    
C     CALL SETERR(31HDDL2SF - MESH T IS NOT MONOTONE,31,8,2)            
C/7S                                                                    
      CALL SETERR('DDL2SF - MESH T IS NOT MONOTONE',31,8,2)             
C/                                                                      
 1022 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1024                                    
      GOTO 1019                                                         
 1024 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1026                            
C/6S                                                                    
C     CALL SETERR(24HDDL2SF - MULT(T(I)).GT.K,24,9,2)                   
C/7S                                                                    
      CALL SETERR('DDL2SF - MULT(T(I)).GT.K',24,9,2)                    
C/                                                                      
 1026 CONTINUE                                                          
C                                                                       
 1019 CONTINUE                                                          
 1020 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
      IW = ISTKGT(NXY,4)                                                
C CREATE THE WEIGHTS.                                                   
      CALL SETD(NXY,1.0D0,WS(IW))                                       
C                                                                       
C NOW SOLVE THE LEAST-SQUARES SYSTEM.                                   
C                                                                       
      CALL DDL2SW(X,Y,NXY,WS(IW),K,T,NT,A)                              
C                                                                       
      IF( NERROR(NERR).EQ.0 )      GOTO 1028                            
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38HDDL2SF - SINGULAR LEAST SQUARES SYSTEM,38,10,
C    *1)                                                                
C/7S                                                                    
            CALL SETERR('DDL2SF - SINGULAR LEAST SQUARES SYSTEM',38,10, 
     *1)                                                                
C/                                                                      
C                                                                       
 1028 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DDL2SW(X,Y,NXY,W,K,T,NT,A)                             
C                                                                       
C                                                                       
C TO FIT A B-SPLINE TO DISCRETE DATA.                                   
C                                                                       
C THE MNEMONIC IS -                                                     
C                                                                       
C   DOUBLE PRECISION DISCRETE L2 B-SPLINE FIT, USING WEIGHTS.           
C                                                                       
C METHOD - LET                                                          
C                                                                       
C   E(F) = SUM(I = 1,...,NXY)                                           
C             ( (Y(I) - F) (X(I)) **2 * W(I) )                          
C                                                                       
C   THIS PROGRAM SOLVES THE PROBLEM                                     
C                                                                       
C         MINIMIZE (OVER ALL B-SPLINES F) E(F).                         
C                                                                       
C INPUT                                                                 
C                                                                       
C   X      - THE POINTS WHERE THE FITTING IS TO TAKE PLACE.             
C            THE ARRAY X MUST BE MONOTONE INCREASING.                   
C            ANY MULTIPLICITIES IN X WILL BE IGNORED.                   
C   Y      - Y(I) IS THE VALUE THE THE B-SPLINE                         
C            IS TO TAKE AT X(I), FOR I = 1,..,NXY.                      
C   NXY    - THE NUMBER OF POINTS IN X.                                 
C   W      - THE WEIGHT FOR THE VALUE OF Y(I) IS W(I),                  
C            FOR I = 1,...,NXY.                                         
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED.                              
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT                                                                
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE FIT.                     
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   (NT-K+4)*K                                                          
C                                                                       
C LONG REAL WORDS +                                                     
C                                                                       
C   1                                                                   
C                                                                       
C INTEGER WORDS.                                                        
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - NXY.LT.1.                                                      
C    2 - K.LT.2.                                                        
C    3 - NT.LE.K.                                                       
C    4 - X IS NOT MONOTONE INCREASING.                                  
C    5 - NOT ENOUGH FITTING POINTS FOR A UNIQUE L2 FIT.                 
C    6 - X(1).LT.T(1).                                                  
C    7 - X(NXY).GT.T(NT).                                               
C    8 - MESH T IS NOT MONOTONE.                                        
C    9 - MULT(T(I)).GT.K.                                               
C   10 - W(I).LT.0.                                                     
C   11 - SINGULAR LEAST SQUARES SYSTEM. (RECOVERABLE)                   
C                                                                       
      INTEGER NDX,I,NERROR,NERR                                         
      INTEGER NXY,K,NT                                                  
      DOUBLE PRECISION X(NXY),Y(NXY),W(NXY),T(NT),A(1)                  
C                                                                       
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NXY.GE.1 )      GOTO 1000                                     
C/6S                                                                    
C     CALL SETERR(17HDDL2SW - NXY.LT.1,17,1,2)                          
C/7S                                                                    
      CALL SETERR('DDL2SW - NXY.LT.1',17,1,2)                           
C/                                                                      
 1000 CONTINUE                                                          
      IF( K.GE.2 )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15HDDL2SW - K.LT.2,15,2,2)                            
C/7S                                                                    
      CALL SETERR('DDL2SW - K.LT.2',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HDDL2SW - NT.LE.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR('DDL2SW - NT.LE.K',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
C                                                                       
C COUNT THE NUMBER OF DISTINCT X S.                                     
C                                                                       
      NDX = 1                                                           
      I = 2                                                             
 1008 CONTINUE                                                          
      IF( I.GT.NXY )      GOTO 1007                                     
      IF( X(I).GE.X(I-1) )      GOTO 1009                               
C/6S                                                                    
C           CALL SETERR(37HDDL2SW - X IS NOT MONOTONE INCREASING,37,4,2)
C/7S                                                                    
            CALL SETERR('DDL2SW - X IS NOT MONOTONE INCREASING',37,4,2) 
C/                                                                      
 1009 CONTINUE                                                          
C                                                                       
      IF( X(I).EQ.X(I-1) )      GOTO 1011                               
      NDX = NDX + (1)                                                   
 1011 CONTINUE                                                          
 1006 CONTINUE                                                          
      I = I + (1)                                                       
      GOTO 1008                                                         
 1007 CONTINUE                                                          
      IF( NDX.GE.NT-K )      GOTO 1013                                  
C/6S                                                                    
C           CALL SETERR(54HDDL2SW - NOT ENOUGH FITTING POINTS FOR A UNIQ
C    *UE L2 FIT,54,5,2)                                                 
C/7S                                                                    
            CALL SETERR('DDL2SW - NOT ENOUGH FITTING POINTS FOR A UNIQUE
     * L2 FIT',54,5,2)                                                  
C/                                                                      
 1013 CONTINUE                                                          
C                                                                       
      IF( X(1).GE.T(1) )      GOTO 1015                                 
C/6S                                                                    
C     CALL SETERR(21HDDL2SW - X(1).LT.T(1),21,6,2)                      
C/7S                                                                    
      CALL SETERR('DDL2SW - X(1).LT.T(1)',21,6,2)                       
C/                                                                      
 1015 CONTINUE                                                          
      IF( X(NXY).LE.T(NT) )      GOTO 1017                              
C/6S                                                                    
C     CALL SETERR(24HDDL2SW - X(NXY).GT.T(NT),24,7,2)                   
C/7S                                                                    
      CALL SETERR('DDL2SW - X(NXY).GT.T(NT)',24,7,2)                    
C/                                                                      
 1017 CONTINUE                                                          
C                                                                       
C CHECK THE MESH T.                                                     
C                                                                       
      I21021 = NT-1                                                     
      DO 1019 I = 1, I21021                                             
      IF( T(I).LE.T(I+1) )      GOTO 1022                               
C/6S                                                                    
C     CALL SETERR(31HDDL2SW - MESH T IS NOT MONOTONE,31,8,2)            
C/7S                                                                    
      CALL SETERR('DDL2SW - MESH T IS NOT MONOTONE',31,8,2)             
C/                                                                      
 1022 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1024                                    
      GOTO 1019                                                         
 1024 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1026                            
C/6S                                                                    
C     CALL SETERR(24HDDL2SW - MULT(T(I)).GT.K,24,9,2)                   
C/7S                                                                    
      CALL SETERR('DDL2SW - MULT(T(I)).GT.K',24,9,2)                    
C/                                                                      
 1026 CONTINUE                                                          
C                                                                       
 1019 CONTINUE                                                          
 1020 CONTINUE                                                          
      DO 1028 I = 1, NXY                                                
C     CHECK THE WEIGHTS.                                                
      IF( W(I).GE.0.0D0 )      GOTO 1031                                
C/6S                                                                    
C     CALL SETERR(18HDDL2SW - W(I).LT.0,18,10,2)                        
C/7S                                                                    
      CALL SETERR('DDL2SW - W(I).LT.0',18,10,2)                         
C/                                                                      
 1031 CONTINUE                                                          
C                                                                       
 1028 CONTINUE                                                          
 1029 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
C NOW SOLVE THE LEAST-SQUARES SYSTEM.                                   
C                                                                       
      CALL DDL2SH(X,Y,NXY,1,W,K,T,NT,A)                                 
C                                                                       
      IF( NERROR(NERR).EQ.0 )      GOTO 1033                            
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38HDDL2SW - SINGULAR LEAST SQUARES SYSTEM,38,11,
C    *1)                                                                
C/7S                                                                    
            CALL SETERR('DDL2SW - SINGULAR LEAST SQUARES SYSTEM',38,11, 
     *1)                                                                
C/                                                                      
C                                                                       
 1033 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DDL2SH(X,Y,NXY,MD,W,K,T,NT,A)                          
C                                                                       
C                                                                       
C TO FIT A B-SPLINE TO DISCRETE DATA.                                   
C                                                                       
C THE MNEMONIC IS -                                                     
C                                                                       
C   DOUBLE PRECISION DISCRETE L2 B-SPLINE FIT, USING HERMITE DATA.      
C                                                                       
C METHOD - LET                                                          
C                                                                       
C   E(F) = SUM(J = 1,...,MD) SUM(I = 1,...,NXY)                         
C             ( (Y(I,J) - F-SUP-(J-1)) (X(I)) **2 * W(I,J) )            
C                                                                       
C   THIS PROGRAM SOLVES THE PROBLEM                                     
C                                                                       
C         MINIMIZE (OVER ALL B-SPLINES F) E(F).                         
C                                                                       
C INPUT                                                                 
C                                                                       
C   X      - THE POINTS WHERE THE FITTING IS TO TAKE PLACE.             
C            THE ARRAY X MUST BE MONOTONE INCREASING.                   
C            ANY MULTIPLICITIES IN X WILL BE IGNORED.                   
C   Y      - Y(I,J) IS THE VALUE THE (J-1)-ST DERIVATIVE OF THE B-      
C            IS TO TAKE AT X(I), FOR I = 1,..,NXY AND J = 1,...,MD      
C   NXY    - THE NUMBER OF POINTS IN X.                                 
C   MD     - THE NUMBER OF DERIVATIVES TO BE FITTED.                    
C   W      - THE WEIGHT FOR THE VALUE OF Y(I,J) IS W(I,J),              
C            FOR I = 1,...,NXY AND J = 1,...,MD.                        
C   K      - THE ORDER OF THE B-SPLINE TO BE USED.                      
C   T      - THE B-SPLINE MESH TO BE USED.                              
C   NT     - THE NUMBER OF POINTS IN THE MESH T.                        
C                                                                       
C OUTPUT                                                                
C                                                                       
C   A      - THE COEFFICIENTS FOR THE B-SPLINE FIT.                     
C                                                                       
C SCRATCH SPACE ALLOCATED -                                             
C                                                                       
C   (NT-K+MD)*K + MAX( 3*K , K*( MIN((K+1)/2,MD) + 1 ) )                
C                                                                       
C LONG REAL WORDS +                                                     
C                                                                       
C   MD                                                                  
C                                                                       
C INTEGER WORDS.                                                        
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C    1 - NXY.LT.1.                                                      
C    2 - MD.LT.1.                                                       
C    3 - MD.GT.K.                                                       
C    4 - K.LT.2.                                                        
C    5 - NT.LE.K.                                                       
C    6 - X IS NOT MONOTONE INCREASING.                                  
C    7 - NOT ENOUGH FITTING POINTS FOR A UNIQUE L2 FIT.                 
C    8 - X(1).LT.T(1).                                                  
C    9 - X(NXY).GT.T(NT).                                               
C   10 - MESH T IS NOT MONOTONE.                                        
C   11 - MULT(T(I)).GT.K.                                               
C   12 - W(I,J).LT.0.                                                   
C   13 - SINGULAR LEAST SQUARES SYSTEM. (RECOVERABLE)                   
C                                                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      DOUBLE PRECISION WS(500)                                          
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER NDX,I,J,IH,IBX,ISTKGT,NERROR,NERR                         
      INTEGER NXY,MD,K,NT                                               
      DOUBLE PRECISION X(NXY),Y(NXY,MD),W(NXY,MD),T(NT),A(1)            
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C A(NT-K)                                                               
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NXY.GE.1 )      GOTO 1000                                     
C/6S                                                                    
C     CALL SETERR(17HDDL2SH - NXY.LT.1,17,1,2)                          
C/7S                                                                    
      CALL SETERR('DDL2SH - NXY.LT.1',17,1,2)                           
C/                                                                      
 1000 CONTINUE                                                          
      IF( MD.GE.1 )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16HDDL2SH - MD.LT.1,16,2,2)                           
C/7S                                                                    
      CALL SETERR('DDL2SH - MD.LT.1',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( MD.LE.K )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HDDL2SH - MD.GT.K,16,3,2)                           
C/7S                                                                    
      CALL SETERR('DDL2SH - MD.GT.K',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( K.GE.2 )      GOTO 1006                                       
C/6S                                                                    
C     CALL SETERR(15HDDL2SH - K.LT.2,15,4,2)                            
C/7S                                                                    
      CALL SETERR('DDL2SH - K.LT.2',15,4,2)                             
C/                                                                      
 1006 CONTINUE                                                          
      IF( NT.GT.K )      GOTO 1008                                      
C/6S                                                                    
C     CALL SETERR(16HDDL2SH - NT.LE.K,16,5,2)                           
C/7S                                                                    
      CALL SETERR('DDL2SH - NT.LE.K',16,5,2)                            
C/                                                                      
 1008 CONTINUE                                                          
C                                                                       
C COUNT THE NUMBER OF DISTINCT X S.                                     
C                                                                       
      NDX = 1                                                           
      I = 2                                                             
 1012 CONTINUE                                                          
      IF( I.GT.NXY )      GOTO 1011                                     
      IF( X(I).GE.X(I-1) )      GOTO 1013                               
C/6S                                                                    
C           CALL SETERR(37HDDL2SH - X IS NOT MONOTONE INCREASING,37,6,2)
C/7S                                                                    
            CALL SETERR('DDL2SH - X IS NOT MONOTONE INCREASING',37,6,2) 
C/                                                                      
 1013 CONTINUE                                                          
C                                                                       
      IF( X(I).EQ.X(I-1) )      GOTO 1015                               
      NDX = NDX + (1)                                                   
 1015 CONTINUE                                                          
 1010 CONTINUE                                                          
      I = I + (1)                                                       
      GOTO 1012                                                         
 1011 CONTINUE                                                          
      IF( NDX*MD.GE.NT-K )      GOTO 1017                               
C/6S                                                                    
C           CALL SETERR(54HDDL2SH - NOT ENOUGH FITTING POINTS FOR A UNIQ
C    *UE L2 FIT,54,7,2)                                                 
C/7S                                                                    
            CALL SETERR('DDL2SH - NOT ENOUGH FITTING POINTS FOR A UNIQUE
     * L2 FIT',54,7,2)                                                  
C/                                                                      
 1017 CONTINUE                                                          
C                                                                       
      IF( X(1).GE.T(1) )      GOTO 1019                                 
C/6S                                                                    
C     CALL SETERR(21HDDL2SH - X(1).LT.T(1),21,8,2)                      
C/7S                                                                    
      CALL SETERR('DDL2SH - X(1).LT.T(1)',21,8,2)                       
C/                                                                      
 1019 CONTINUE                                                          
      IF( X(NXY).LE.T(NT) )      GOTO 1021                              
C/6S                                                                    
C     CALL SETERR(24HDDL2SH - X(NXY).GT.T(NT),24,9,2)                   
C/7S                                                                    
      CALL SETERR('DDL2SH - X(NXY).GT.T(NT)',24,9,2)                    
C/                                                                      
 1021 CONTINUE                                                          
C                                                                       
C CHECK THE MESH T.                                                     
C                                                                       
      I21025 = NT-1                                                     
      DO 1023 I = 1, I21025                                             
      IF( T(I).LE.T(I+1) )      GOTO 1026                               
C/6S                                                                    
C     CALL SETERR(31HDDL2SH - MESH T IS NOT MONOTONE,31,10,2)           
C/7S                                                                    
      CALL SETERR('DDL2SH - MESH T IS NOT MONOTONE',31,10,2)            
C/                                                                      
 1026 CONTINUE                                                          
      IF( I+K.LE.NT )      GOTO 1028                                    
      GOTO 1023                                                         
 1028 CONTINUE                                                          
      IX1005 = I+K                                                      
      IF( T(IX1005).NE.T(I) )      GOTO 1030                            
C/6S                                                                    
C     CALL SETERR(24HDDL2SH - MULT(T(I)).GT.K,24,11,2)                  
C/7S                                                                    
      CALL SETERR('DDL2SH - MULT(T(I)).GT.K',24,11,2)                   
C/                                                                      
 1030 CONTINUE                                                          
C                                                                       
 1023 CONTINUE                                                          
 1024 CONTINUE                                                          
      DO 1032 I = 1, NXY                                                
C     CHECK THE WEIGHTS.                                                
      J = 1                                                             
 1037 CONTINUE                                                          
      IF( J.GT.MD )      GOTO 1036                                      
      IF( W(I,J).GE.0.0D0 )      GOTO 1038                              
C/6S                                                                    
C     CALL SETERR(20HDDL2SH - W(I,J).LT.0,20,12,2)                      
C/7S                                                                    
      CALL SETERR('DDL2SH - W(I,J).LT.0',20,12,2)                       
C/                                                                      
 1038 CONTINUE                                                          
 1035 CONTINUE                                                          
      J = J + (1)                                                       
      GOTO 1037                                                         
 1036 CONTINUE                                                          
C                                                                       
 1032 CONTINUE                                                          
 1033 CONTINUE                                                          
      CALL ENTER(1)                                                     
C                                                                       
C NOW SOLVE THE LEAST-SQUARES SYSTEM.                                   
C                                                                       
      IH = ISTKGT((NT-K)*K,4)                                           
      IBX = ISTKGT(MD*K,4)                                              
C                                                                       
      CALL D6L2S4(X,Y,NXY,MD,W,K,T,NT,A,WS(IH),WS(IBX),NT-K)            
C                                                                       
      CALL DBSPDS(WS(IH),NT-K,K,A,1)                                    
      IF( NERROR(NERR).EQ.0 )      GOTO 1040                            
      CALL ERROFF                                                       
C/6S                                                                    
C           CALL SETERR(38HDDL2SH - SINGULAR LEAST SQUARES SYSTEM,38,13,
C    *1)                                                                
C/7S                                                                    
            CALL SETERR('DDL2SH - SINGULAR LEAST SQUARES SYSTEM',38,13, 
     *1)                                                                
C/                                                                      
C                                                                       
 1040 CONTINUE                                                          
      CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE D6L2S4(X,Y,NXY,MD,W,K,T,NT,B,H,BX,NTMK)                
C                                                                       
C                                                                       
      INTEGER IXL,IT,IX,I1,IDX1,J,I2                                    
      INTEGER MD,NXY,NT,K,NTMK                                          
            DOUBLE PRECISION X(NXY),Y(NXY,MD),W(NXY,MD),T(NT),H(NTMK,K),
     *B(NTMK),BX(K,MD)                                                  
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C                                                                       
      CALL SETD(K*NTMK,0.0D0,H)                                         
      CALL SETD(NTMK,0.0D0,B)                                           
C                                                                       
      IXL = 1                                                           
C                                                                       
      IT = 1                                                            
 1002 CONTINUE                                                          
      IF( IT.GE.NT )      GOTO 1001                                     
C     DO THE POINTS INTERVAL BY INTERVAL.                               
      IF( T(IT).NE.T(IT+1) )      GOTO 1003                             
      GOTO 1000                                                         
 1003 CONTINUE                                                          
C                                                                       
      IX = IXL                                                          
 1007 CONTINUE                                                          
      IF( IX.GT.NXY )      GOTO 1006                                    
      IF( X(IX).LE.T(IT+1) )      GOTO 1008                             
      IXL = IX                                                          
      GOTO 1006                                                         
 1008 CONTINUE                                                          
      IF( X(IX).NE.T(IT+1).OR.X(IX).GE.T(NT) )      GOTO 1010           
      IXL = IX                                                          
      GOTO 1006                                                         
 1010 CONTINUE                                                          
      IXL = IX+1                                                        
      IX1002 = MAX0(IX-1,1)                                             
      IF( X(IX).NE.X(IX1002).OR.IX.LE.1 )      GOTO 1012                
      GOTO 1005                                                         
C                                                                       
 1012 CONTINUE                                                          
      CALL DBSPLD(K,T,NT,X(IX),1,IT,MD,BX)                              
C                                                                       
      DO 1014 J = 1, MD                                                 
      I1 = MAX0(IT+1-K,1)                                               
 1019 CONTINUE                                                          
      IF( I1.GT.MIN0(IT,NT-K) )      GOTO 1018                          
      IDX1 = I1-IT+K                                                    
      B(I1) = B(I1)+BX(IDX1,J)*Y(IX,J)*W(IX,J)                          
C                                                                       
      I2 = MAX0(K,IT)+1-I1                                              
 1022 CONTINUE                                                          
      IF( I2.GT.K )      GOTO 1021                                      
      IX1001 = I1-IT+I2                                                 
      H(I1,I2) = H(I1,I2)+BX(IDX1,J)*BX(IX1001,J)*W(IX,J)               
 1020 CONTINUE                                                          
      I2 = I2+1                                                         
      GOTO 1022                                                         
 1021 CONTINUE                                                          
 1017 CONTINUE                                                          
      I1 = I1+1                                                         
      GOTO 1019                                                         
 1018 CONTINUE                                                          
 1014 CONTINUE                                                          
 1015 CONTINUE                                                          
 1005 CONTINUE                                                          
      IX = IX + (1)                                                     
      GOTO 1007                                                         
 1006 CONTINUE                                                          
C                                                                       
 1000 CONTINUE                                                          
      IT = IT + (1)                                                     
      GOTO 1002                                                         
 1001 CONTINUE                                                          
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE BSPDS(D,N,M,B,NB)                                      
C                                                                       
C  TO SOLVE THE SYSTEM OF LINEAR ALGEBRAIC EQUATIONS A*X=B,             
C  WHERE A IS A BANDED, SYMMETRIC, POSITIVE-DEFINITE MATRIX,            
C  FOR NB RIGHT-HAND SIDES B.                                           
C                                                                       
C  METHOD - CHOLESKY DECOMPOSITION OF A.                                
C                                                                       
C  INPUT                                                                
C                                                                       
C    D  - D(I,J)=A(I,I+J-M), STORES THE LOWER TRIANGULAR PORTION OF A   
C         FOR I=1,...,N AND J=1,...,M.                                  
C    N  - THE ORDER OF THE MATRIX A.                                    
C    M  - THE NUMBER OF ENTRIES OF A ON OR BELOW THE DIAGONAL.          
C         M IS THE HALF BAND-WIDTH OF THE MATRIX.                       
C    B  - THE RIGHT-HAND SIDES.                                         
C    NB - THE NUMBER OF RIGHT-HAND SIDES.                               
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    D - THE LOWER TRIANGULAR CHOLESKY FACTOR OF A, STORED              
C        IN THE SAME FORM AS A WAS IN D.                                
C    B - THE SOLUTIONS X.                                               
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES                                                         
C                                                                       
C    1 - N.LT.1                                                         
C    2 - M.LT.1                                                         
C    3 - NB.LT.1                                                        
C    4 - A IS NOT POSITIVE-DEFINITE. (RECOVERABLE)                      
C                                                                       
      REAL D(N,M),B(N,NB)                                               
C                                                                       
      CALL ENTER(1)                                                     
C                                                                       
C ... CHECK THE INPUT FOR ERRORS.                                       
C                                                                       
C/6S                                                                    
C     IF (N.LT.1) CALL SETERR(15H BSPDS - N.LT.1,15,1,2)                
C     IF (M.LT.1) CALL SETERR(15H BSPDS - M.LT.1,15,2,2)                
C     IF (NB.LT.1) CALL SETERR(16H BSPDS - NB.LT.3,16,3,2)              
C/7S                                                                    
      IF (N.LT.1) CALL SETERR(' BSPDS - N.LT.1',15,1,2)                 
      IF (M.LT.1) CALL SETERR(' BSPDS - M.LT.1',15,2,2)                 
      IF (NB.LT.1) CALL SETERR(' BSPDS - NB.LT.3',16,3,2)               
C/                                                                      
C                                                                       
C ... GET THE CHOLESKY DECOMPOSITION OF A.                              
C                                                                       
      CALL BSPDD(D,N,M,D)                                               
C                                                                       
C ... TEST FOR A NON-POSITIVE-DEFINITE MATRIX.                          
C                                                                       
      IF (NERROR(NERR).NE.0) GO TO 20                                   
C                                                                       
C ... IF CHOLESKY CALL WORKED, SOLVE THE SYSTEMS.                       
C                                                                       
      DO 10 J=1,NB                                                      
 10      CALL BSPDB(D,N,M,B(1,J))                                       
      GO TO 30                                                          
C                                                                       
C ... HERE FOR A NON-POSITIVE-DEFINITE MATRIX.                          
C                                                                       
 20   CALL ERROFF                                                       
C/6S                                                                    
C     CALL SETERR(35H BSPDS - A IS NOT POSITIVE-DEFINITE,35,4,1)        
C/7S                                                                    
      CALL SETERR(' BSPDS - A IS NOT POSITIVE-DEFINITE',35,4,1)         
C/                                                                      
C                                                                       
 30   CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE BSPDB(G,N,M,B)                                         
C                                                                       
C  TO SOLVE (L*L-TRANSPOSE)*X=B, WHERE L IS                             
C  THE CHOLESKY FACTOR OF A BANDED, SYMMETRIC, POSITIVE-DEFINITE        
C  MATRIX AS DESCRIBED IN BSPDD.                                        
C                                                                       
C  INPUT                                                                
C                                                                       
C    G - G(I,J)=L(I,I+J-M) STORES THE LOWER TRIANGULAR PORTION OF L     
C        FOR I=1,...,N AND J=1,...,M.                                   
C    N - THE ORDER OF THE MATRIX L.                                     
C    M - THE NUMBER OF ENTRIES OF L ON OR BELOW THE DIAGONAL.           
C    B - THE RIGHT-HAND SIDE.                                           
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    B - THE SOLUTION X.                                                
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES                                                         
C                                                                       
C    1 - N.LT.1                                                         
C    2 - M.LT.1                                                         
C    3 - SINGULAR L.                                                    
C                                                                       
      REAL G(N,M),B(N)                                                  
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (N.LT.1) CALL SETERR(15H BSPDB - N.LT.1,15,1,2)                
C     IF (M.LT.1) CALL SETERR(15H BSPDB - M.LT.1,15,2,2)                
C/7S                                                                    
      IF (N.LT.1) CALL SETERR(' BSPDB - N.LT.1',15,1,2)                 
      IF (M.LT.1) CALL SETERR(' BSPDB - M.LT.1',15,2,2)                 
C/                                                                      
C                                                                       
      DO 10 I=1,N                                                       
C/6S                                                                    
C10   IF (G(I,M).LE.0.0E0)                                              
C    1  CALL SETERR(40H BSPDB - SINGULAR CHOLESKY DECOMPOSITION,40,3,2) 
C/7S                                                                    
 10   IF (G(I,M).LE.0.0E0)                                              
     1  CALL SETERR(' BSPDB - SINGULAR CHOLESKY DECOMPOSITION',40,3,2)  
C/                                                                      
C                                                                       
C ... FORWARD ELIMINATION.                                              
C                                                                       
      CALL BSPD1(G,N,M,B)                                               
C                                                                       
C ... BACK-SUBSTITUTION.                                                
C                                                                       
      CALL BSPD2(G,N,M,B)                                               
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE BSPDD(D,N,M,G)                                         
C                                                                       
C  TO OBTAIN THE CHOLESKY DECOMPOSITION, A=G*(G-TRANSPOSE), OF A        
C  BANDED, SYMMETRIC, POSITIVE-DEFINITE MATRIX A.                       
C                                                                       
C  INPUT                                                                
C                                                                       
C    D  - D(I,J)=A(I,I+J-M) STORES THE LOWER TRIANGULAR PORTION OF A    
C         FOR I=1,...,N AND J=1,...,M.                                  
C    N  - THE ORDER OF THE MATRIX A.                                    
C    M  - THE NUMBER OF ENTRIES OF A ON OR BELOW THE DIAGONAL.          
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    G  - G IS STORED IN THE SAME FORM AS A IS IN D. D=G IS OK.         
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES                                                         
C                                                                       
C    1 - N.LT.1                                                         
C    2 - M.LT.1                                                         
C    3 - A IS NOT POSITIVE-DEFINITE. (RECOVERABLE)                      
C                                                                       
      REAL D(N,M),G(N,M)                                                
C                                                                       
      REAL T                                                            
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (M.LT.1) CALL SETERR(15H BSPDD - M.LT.1,15,1,2)                
C     IF (N.LT.1) CALL SETERR(15H BSPDD - N.LT.1,15,2,2)                
C/7S                                                                    
      IF (M.LT.1) CALL SETERR(' BSPDD - M.LT.1',15,1,2)                 
      IF (N.LT.1) CALL SETERR(' BSPDD - N.LT.1',15,2,2)                 
C/                                                                      
C                                                                       
      MM1=M-1                                                           
      DO 50 J=1,N                                                       
         T=D(J,M)                                                       
         IF (M.EQ.1.OR.J.EQ.1) GO TO 20                                 
         KLO=MAX0(M+1-J,1)                                              
         DO 10 K=KLO,MM1                                                
 10         T=T-G(J,K)**2                                               
C                                                                       
 20      IF (T.LE.0.0E0) GO TO 60                                       
C                                                                       
         G(J,M)=SQRT(T)                                                 
         IF (J.EQ.N) GO TO 70                                           
         IF (M.EQ.1) GO TO 50                                           
         JP1=J+1                                                        
         ITOP=MIN0(MM1+J,N)                                             
         DO 40 I=JP1,ITOP                                               
            IDX=J+M-I                                                   
            T=D(I,IDX)                                                  
            K1=MAX0(I,M)-J+1                                            
            IF (K1.GE.M) GO TO 40                                       
            KDX=K1-I+J                                                  
            DO 30 K=K1,MM1                                              
               T=T-G(I,KDX)*G(J,K)                                      
 30            KDX=KDX+1                                                
 40         G(I,IDX)=T/G(J,M)                                           
 50      CONTINUE                                                       
      GO TO 70                                                          
C                                                                       
C ... HERE FOR A NON-POSITIVE-DEFINITE MATRIX.                          
C                                                                       
C/6S                                                                    
C60   CALL SETERR(35H BSPDD - A IS NOT POSITIVE-DEFINITE,35,3,1)        
C/7S                                                                    
 60   CALL SETERR(' BSPDD - A IS NOT POSITIVE-DEFINITE',35,3,1)         
C/                                                                      
C                                                                       
 70   RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE BSPD1(G,N,M,B)                                         
C                                                                       
C  TO SOLVE L*X=B, WHERE L IS                                           
C  THE CHOLESKY FACTOR OF A BANDED, SYMMETRIC, POSITIVE-DEFINITE        
C  MATRIX AS DESCRIBED IN BSPDD.                                        
C                                                                       
C  INPUT                                                                
C                                                                       
C    G - G(I,J)=L(I,I+J-M) STORES THE LOWER TRIANGULAR PORTION OF L     
C        FOR I=1,...,N AND J=1,...,M.                                   
C    N - THE ORDER OF THE MATRIX L.                                     
C    M - THE NUMBER OF ENTRIES OF L ON OR BELOW THE DIAGONAL.           
C    B - THE RIGHT-HAND SIDE.                                           
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    B - THE SOLUTION X.                                                
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES                                                         
C                                                                       
C    1 - N.LT.1                                                         
C    2 - M.LT.1                                                         
C    3 - SINGULAR L.                                                    
C                                                                       
      REAL G(N,M),B(N)                                                  
C                                                                       
      REAL T                                                            
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (N.LT.1) CALL SETERR(15H BSPD1 - N.LT.1,15,1,2)                
C     IF (M.LT.1) CALL SETERR(15H BSPD1 - M.LT.1,15,2,2)                
C/7S                                                                    
      IF (N.LT.1) CALL SETERR(' BSPD1 - N.LT.1',15,1,2)                 
      IF (M.LT.1) CALL SETERR(' BSPD1 - M.LT.1',15,2,2)                 
C/                                                                      
C                                                                       
      MM1=M-1                                                           
C                                                                       
C ... FORWARD ELIMINATION.                                              
C                                                                       
      IF (G(1,M).LE.0.0E0) GO TO 30                                     
C                                                                       
      B(1)=B(1)/G(1,M)                                                  
      IF (N.EQ.1) GO TO 40                                              
      DO 20 I=2,N                                                       
C                                                                       
         IF (G(I,M).LE.0.0E0) GO TO 30                                  
C                                                                       
         T=0.0E0                                                        
         IF (M.EQ.1) GO TO 20                                           
         JLO=MAX0(I-MM1,1)                                              
         JTOP=I-1                                                       
         JDX=JLO+M-I                                                    
         DO 10 J=JLO,JTOP                                               
            T=T+G(I,JDX)*B(J)                                           
 10         JDX=JDX+1                                                   
 20      B(I)=(B(I)-T)/G(I,M)                                           
      GO TO 40                                                          
C                                                                       
C ... HERE FOR A SINGULAR CHOLESKY DECOMPOSITION.                       
C                                                                       
C/6S                                                                    
C30   CALL SETERR(40H BSPD1 - SINGULAR CHOLESKY DECOMPOSITION,40,3,2)   
C/7S                                                                    
 30   CALL SETERR(' BSPD1 - SINGULAR CHOLESKY DECOMPOSITION',40,3,2)    
C/                                                                      
C                                                                       
 40   RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE BSPD2(G,N,M,B)                                         
C                                                                       
C  TO SOLVE (L-TRANSPOSE)*X=B, WHERE L IS                               
C  THE CHOLESKY FACTOR OF A BANDED, SYMMETRIC, POSITIVE-DEFINITE        
C  MATRIX AS DESCRIBED IN BSPDD.                                        
C                                                                       
C  INPUT                                                                
C                                                                       
C    G - G(I,J)=L(I,I+J-M) STORES THE LOWER TRIANGULAR PORTION OF L     
C        FOR I=1,...,N AND J=1,...,M.                                   
C    N - THE ORDER OF THE MATRIX L.                                     
C    M - THE NUMBER OF ENTRIES OF L ON OR BELOW THE DIAGONAL.           
C    B - THE RIGHT-HAND SIDE.                                           
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    B - THE SOLUTION X.                                                
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES                                                         
C                                                                       
C    1 - N.LT.1                                                         
C    2 - M.LT.1                                                         
C    3 - SINGULAR L.                                                    
C                                                                       
      REAL G(N,M),B(N)                                                  
C                                                                       
      REAL T                                                            
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (N.LT.1) CALL SETERR(15H BSPD2 - N.LT.1,15,1,2)                
C     IF (M.LT.1) CALL SETERR(15H BSPD2 - M.LT.1,15,2,2)                
C/7S                                                                    
      IF (N.LT.1) CALL SETERR(' BSPD2 - N.LT.1',15,1,2)                 
      IF (M.LT.1) CALL SETERR(' BSPD2 - M.LT.1',15,2,2)                 
C/                                                                      
C                                                                       
      MM1=M-1                                                           
C                                                                       
C ... BACK SUBSTITUTION.                                                
C                                                                       
      IF (G(N,M).LE.0.0E0) GO TO 40                                     
C                                                                       
      B(N)=B(N)/G(N,M)                                                  
      IF (N.EQ.1) GO TO 50                                              
      I=N                                                               
C                                                                       
C ... DECREASING LOOP ON I.                                             
C                                                                       
 10      I=I-1                                                          
         IF (G(I,M).LE.0.0E0) GO TO 40                                  
         T=0.0E0                                                        
         IF (M.EQ.1) GO TO 30                                           
         JLO=I+1                                                        
         JTOP=MIN0(I+MM1,N)                                             
         JDX=MM1                                                        
         DO 20 J=JLO,JTOP                                               
            T=T+G(J,JDX)*B(J)                                           
 20         JDX=JDX-1                                                   
 30      B(I)=(B(I)-T)/G(I,M)                                           
         IF (I.GT.1) GO TO 10                                           
      GO TO 50                                                          
C                                                                       
C ... HERE FOR A SINGULAR CHOLESKY DECOMPOSITION.                       
C                                                                       
C/6S                                                                    
C40   CALL SETERR(40H BSPD2 - SINGULAR CHOLESKY DECOMPOSITION,40,3,2)   
C/7S                                                                    
 40   CALL SETERR(' BSPD2 - SINGULAR CHOLESKY DECOMPOSITION',40,3,2)    
C/                                                                      
C                                                                       
 50   RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DBSPDS(D,N,M,B,NB)                                     
C                                                                       
C  TO SOLVE THE SYSTEM OF LINEAR ALGEBRAIC EQUATIONS A*X=B,             
C  WHERE A IS A BANDED, SYMMETRIC, POSITIVE-DEFINITE MATRIX,            
C  FOR NB RIGHT-HAND SIDES B.                                           
C                                                                       
C  METHOD - CHOLESKY DECOMPOSITION OF A.                                
C                                                                       
C  INPUT                                                                
C                                                                       
C    D  - D(I,J)=A(I,I+J-M), STORES THE LOWER TRIANGULAR PORTION OF A   
C         FOR I=1,...,N AND J=1,...,M.                                  
C    N  - THE ORDER OF THE MATRIX A.                                    
C    M  - THE NUMBER OF ENTRIES OF A ON OR BELOW THE DIAGONAL.          
C         M IS THE HALF BAND-WIDTH OF THE MATRIX.                       
C    B  - THE RIGHT-HAND SIDES.                                         
C    NB - THE NUMBER OF RIGHT-HAND SIDES.                               
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    D - THE LOWER TRIANGULAR CHOLESKY FACTOR OF A, STORED              
C        IN THE SAME FORM AS A WAS IN D.                                
C    B - THE SOLUTIONS X.                                               
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES                                                         
C                                                                       
C    1 - N.LT.1                                                         
C    2 - M.LT.1                                                         
C    3 - NB.LT.1                                                        
C    4 - A IS NOT POSITIVE-DEFINITE. (RECOVERABLE)                      
C                                                                       
      DOUBLE PRECISION D(N,M),B(N,NB)                                   
C                                                                       
      CALL ENTER(1)                                                     
C                                                                       
C ... CHECK THE INPUT FOR ERRORS.                                       
C                                                                       
C/6S                                                                    
C     IF (N.LT.1) CALL SETERR(15HDBSPDS - N.LT.1,15,1,2)                
C     IF (M.LT.1) CALL SETERR(15HDBSPDS - M.LT.1,15,2,2)                
C     IF (NB.LT.1) CALL SETERR(16HDBSPDS - NB.LT.3,16,3,2)              
C/7S                                                                    
      IF (N.LT.1) CALL SETERR('DBSPDS - N.LT.1',15,1,2)                 
      IF (M.LT.1) CALL SETERR('DBSPDS - M.LT.1',15,2,2)                 
      IF (NB.LT.1) CALL SETERR('DBSPDS - NB.LT.3',16,3,2)               
C/                                                                      
C                                                                       
C ... GET THE CHOLESKY DECOMPOSITION OF A.                              
C                                                                       
      CALL DBSPDD(D,N,M,D)                                              
C                                                                       
C ... TEST FOR A NON-POSITIVE-DEFINITE MATRIX.                          
C                                                                       
      IF (NERROR(NERR).NE.0) GO TO 20                                   
C                                                                       
C ... IF CHOLESKY CALL WORKED, SOLVE THE SYSTEMS.                       
C                                                                       
      DO 10 J=1,NB                                                      
 10      CALL DBSPDB(D,N,M,B(1,J))                                      
      GO TO 30                                                          
C                                                                       
C ... HERE FOR A NON-POSITIVE-DEFINITE MATRIX.                          
C                                                                       
 20   CALL ERROFF                                                       
C/6S                                                                    
C     CALL SETERR(35HDBSPDS - A IS NOT POSITIVE-DEFINITE,35,4,1)        
C/7S                                                                    
      CALL SETERR('DBSPDS - A IS NOT POSITIVE-DEFINITE',35,4,1)         
C/                                                                      
C                                                                       
 30   CALL LEAVE                                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DBSPDB(G,N,M,B)                                        
C                                                                       
C  TO SOLVE (L*L-TRANSPOSE)*X=B, WHERE L IS                             
C  THE CHOLESKY FACTOR OF A BANDED, SYMMETRIC, POSITIVE-DEFINITE        
C  MATRIX AS DESCRIBED IN DBSPDD.                                       
C                                                                       
C  INPUT                                                                
C                                                                       
C    G - G(I,J)=L(I,I+J-M) STORES THE LOWER TRIANGULAR PORTION OF L     
C        FOR I=1,...,N AND J=1,...,M.                                   
C    N - THE ORDER OF THE MATRIX L.                                     
C    M - THE NUMBER OF ENTRIES OF L ON OR BELOW THE DIAGONAL.           
C    B - THE RIGHT-HAND SIDE.                                           
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    B - THE SOLUTION X.                                                
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES                                                         
C                                                                       
C    1 - N.LT.1                                                         
C    2 - M.LT.1                                                         
C    3 - SINGULAR L.                                                    
C                                                                       
      DOUBLE PRECISION G(N,M),B(N)                                      
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (N.LT.1) CALL SETERR(15HDBSPDB - N.LT.1,15,1,2)                
C     IF (M.LT.1) CALL SETERR(15HDBSPDB - M.LT.1,15,2,2)                
C/7S                                                                    
      IF (N.LT.1) CALL SETERR('DBSPDB - N.LT.1',15,1,2)                 
      IF (M.LT.1) CALL SETERR('DBSPDB - M.LT.1',15,2,2)                 
C/                                                                      
C                                                                       
      DO 10 I=1,N                                                       
C/6S                                                                    
C10   IF (G(I,M).LE.0.0D0)                                              
C    1  CALL SETERR(40HDBSPDB - SINGULAR CHOLESKY DECOMPOSITION,40,3,2) 
C/7S                                                                    
 10   IF (G(I,M).LE.0.0D0)                                              
     1  CALL SETERR('DBSPDB - SINGULAR CHOLESKY DECOMPOSITION',40,3,2)  
C/                                                                      
C                                                                       
C ... FORWARD ELIMINATION.                                              
C                                                                       
      CALL DBSPD1(G,N,M,B)                                              
C                                                                       
C ... BACK-SUBSTITUTION.                                                
C                                                                       
      CALL DBSPD2(G,N,M,B)                                              
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DBSPDD(D,N,M,G)                                        
C                                                                       
C  TO OBTAIN THE CHOLESKY DECOMPOSITION, A=G*(G-TRANSPOSE), OF A        
C  BANDED, SYMMETRIC, POSITIVE-DEFINITE MATRIX A.                       
C                                                                       
C  INPUT                                                                
C                                                                       
C    D  - D(I,J)=A(I,I+J-M) STORES THE LOWER TRIANGULAR PORTION OF A    
C         FOR I=1,...,N AND J=1,...,M.                                  
C    N  - THE ORDER OF THE MATRIX A.                                    
C    M  - THE NUMBER OF ENTRIES OF A ON OR BELOW THE DIAGONAL.          
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    G  - G IS STORED IN THE SAME FORM AS A IS IN D. D=G IS OK.         
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES                                                         
C                                                                       
C    1 - N.LT.1                                                         
C    2 - M.LT.1                                                         
C    3 - A IS NOT POSITIVE-DEFINITE. (RECOVERABLE)                      
C                                                                       
      DOUBLE PRECISION D(N,M),G(N,M)                                    
C                                                                       
      DOUBLE PRECISION T,DSQRT                                          
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (M.LT.1) CALL SETERR(15HDBSPDD - M.LT.1,15,1,2)                
C     IF (N.LT.1) CALL SETERR(15HDBSPDD - N.LT.1,15,2,2)                
C/7S                                                                    
      IF (M.LT.1) CALL SETERR('DBSPDD - M.LT.1',15,1,2)                 
      IF (N.LT.1) CALL SETERR('DBSPDD - N.LT.1',15,2,2)                 
C/                                                                      
C                                                                       
      MM1=M-1                                                           
      DO 50 J=1,N                                                       
         T=D(J,M)                                                       
         IF (M.EQ.1.OR.J.EQ.1) GO TO 20                                 
         KLO=MAX0(M+1-J,1)                                              
         DO 10 K=KLO,MM1                                                
 10         T=T-G(J,K)**2                                               
C                                                                       
 20      IF (T.LE.0.0D0) GO TO 60                                       
C                                                                       
         G(J,M)=DSQRT(T)                                                
         IF (J.EQ.N) GO TO 70                                           
         IF (M.EQ.1) GO TO 50                                           
         JP1=J+1                                                        
         ITOP=MIN0(MM1+J,N)                                             
         DO 40 I=JP1,ITOP                                               
            IDX=J+M-I                                                   
            T=D(I,IDX)                                                  
            K1=MAX0(I,M)-J+1                                            
            IF (K1.GE.M) GO TO 40                                       
            KDX=K1-I+J                                                  
            DO 30 K=K1,MM1                                              
               T=T-G(I,KDX)*G(J,K)                                      
 30            KDX=KDX+1                                                
 40         G(I,IDX)=T/G(J,M)                                           
 50      CONTINUE                                                       
      GO TO 70                                                          
C                                                                       
C ... HERE FOR A NON-POSITIVE-DEFINITE MATRIX.                          
C                                                                       
C/6S                                                                    
C60   CALL SETERR(35HDBSPDD - A IS NOT POSITIVE-DEFINITE,35,3,1)        
C/7S                                                                    
 60   CALL SETERR('DBSPDD - A IS NOT POSITIVE-DEFINITE',35,3,1)         
C/                                                                      
C                                                                       
 70   RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DBSPD1(G,N,M,B)                                        
C                                                                       
C  TO SOLVE L*X=B, WHERE L IS                                           
C  THE CHOLESKY FACTOR OF A BANDED, SYMMETRIC, POSITIVE-DEFINITE        
C  MATRIX AS DESCRIBED IN DBSPDD.                                       
C                                                                       
C  INPUT                                                                
C                                                                       
C    G - G(I,J)=L(I,I+J-M) STORES THE LOWER TRIANGULAR PORTION OF L     
C        FOR I=1,...,N AND J=1,...,M.                                   
C    N - THE ORDER OF THE MATRIX L.                                     
C    M - THE NUMBER OF ENTRIES OF L ON OR BELOW THE DIAGONAL.           
C    B - THE RIGHT-HAND SIDE.                                           
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    B - THE SOLUTION X.                                                
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES                                                         
C                                                                       
C    1 - N.LT.1                                                         
C    2 - M.LT.1                                                         
C    3 - SINGULAR L.                                                    
C                                                                       
      DOUBLE PRECISION G(N,M),B(N)                                      
C                                                                       
      DOUBLE PRECISION T                                                
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (N.LT.1) CALL SETERR(15HDBSPD1 - N.LT.1,15,1,2)                
C     IF (M.LT.1) CALL SETERR(15HDBSPD1 - M.LT.1,15,2,2)                
C/7S                                                                    
      IF (N.LT.1) CALL SETERR('DBSPD1 - N.LT.1',15,1,2)                 
      IF (M.LT.1) CALL SETERR('DBSPD1 - M.LT.1',15,2,2)                 
C/                                                                      
C                                                                       
      MM1=M-1                                                           
C                                                                       
C ... FORWARD ELIMINATION.                                              
C                                                                       
      IF (G(1,M).LE.0.0D0) GO TO 30                                     
C                                                                       
      B(1)=B(1)/G(1,M)                                                  
      IF (N.EQ.1) GO TO 40                                              
      DO 20 I=2,N                                                       
C                                                                       
         IF (G(I,M).LE.0.0D0) GO TO 30                                  
C                                                                       
         T=0.0D0                                                        
         IF (M.EQ.1) GO TO 20                                           
         JLO=MAX0(I-MM1,1)                                              
         JTOP=I-1                                                       
         JDX=JLO+M-I                                                    
         DO 10 J=JLO,JTOP                                               
            T=T+G(I,JDX)*B(J)                                           
 10         JDX=JDX+1                                                   
 20      B(I)=(B(I)-T)/G(I,M)                                           
      GO TO 40                                                          
C                                                                       
C ... HERE FOR A SINGULAR CHOLESKY DECOMPOSITION.                       
C                                                                       
C/6S                                                                    
C30   CALL SETERR(40HDBSPD1 - SINGULAR CHOLESKY DECOMPOSITION,40,3,2)   
C/7S                                                                    
 30   CALL SETERR('DBSPD1 - SINGULAR CHOLESKY DECOMPOSITION',40,3,2)    
C/                                                                      
C                                                                       
 40   RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DBSPD2(G,N,M,B)                                        
C                                                                       
C  TO SOLVE (L-TRANSPOSE)*X=B, WHERE L IS                               
C  THE CHOLESKY FACTOR OF A BANDED, SYMMETRIC, POSITIVE-DEFINITE        
C  MATRIX AS DESCRIBED IN DBSPDD.                                       
C                                                                       
C  INPUT                                                                
C                                                                       
C    G - G(I,J)=L(I,I+J-M) STORES THE LOWER TRIANGULAR PORTION OF L     
C        FOR I=1,...,N AND J=1,...,M.                                   
C    N - THE ORDER OF THE MATRIX L.                                     
C    M - THE NUMBER OF ENTRIES OF L ON OR BELOW THE DIAGONAL.           
C    B - THE RIGHT-HAND SIDE.                                           
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    B - THE SOLUTION X.                                                
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES                                                         
C                                                                       
C    1 - N.LT.1                                                         
C    2 - M.LT.1                                                         
C    3 - SINGULAR L.                                                    
C                                                                       
      DOUBLE PRECISION G(N,M),B(N)                                      
C                                                                       
      DOUBLE PRECISION T                                                
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (N.LT.1) CALL SETERR(15HDBSPD2 - N.LT.1,15,1,2)                
C     IF (M.LT.1) CALL SETERR(15HDBSPD2 - M.LT.1,15,2,2)                
C/7S                                                                    
      IF (N.LT.1) CALL SETERR('DBSPD2 - N.LT.1',15,1,2)                 
      IF (M.LT.1) CALL SETERR('DBSPD2 - M.LT.1',15,2,2)                 
C/                                                                      
C                                                                       
      MM1=M-1                                                           
C                                                                       
C ... BACK SUBSTITUTION.                                                
C                                                                       
      IF (G(N,M).LE.0.0D0) GO TO 40                                     
C                                                                       
      B(N)=B(N)/G(N,M)                                                  
      IF (N.EQ.1) GO TO 50                                              
      I=N                                                               
C                                                                       
C ... DECREASING LOOP ON I.                                             
C                                                                       
 10      I=I-1                                                          
         IF (G(I,M).LE.0.0D0) GO TO 40                                  
         T=0.0D0                                                        
         IF (M.EQ.1) GO TO 30                                           
         JLO=I+1                                                        
         JTOP=MIN0(I+MM1,N)                                             
         JDX=MM1                                                        
         DO 20 J=JLO,JTOP                                               
            T=T+G(J,JDX)*B(J)                                           
 20         JDX=JDX-1                                                   
 30      B(I)=(B(I)-T)/G(I,M)                                           
         IF (I.GT.1) GO TO 10                                           
      GO TO 50                                                          
C                                                                       
C ... HERE FOR A SINGULAR CHOLESKY DECOMPOSITION.                       
C                                                                       
C/6S                                                                    
C40   CALL SETERR(40HDBSPD2 - SINGULAR CHOLESKY DECOMPOSITION,40,3,2)   
C/7S                                                                    
 40   CALL SETERR('DBSPD2 - SINGULAR CHOLESKY DECOMPOSITION',40,3,2)    
C/                                                                      
C                                                                       
 50   RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE SPLN1(K,T,N,A,                                         
     1                  X,NX,                                           
     2                  ID,NID,                                         
     3                  FX)                                             
C                                                                       
C  TO EVALUATE THE B-SPLINE AND ITS DERIVATIVES                         
C                                                                       
C            FX(IX,J)=F(ID(J))(X(IX))                                   
C                                                                       
C  FOR IX=1,...,NX AND J=1,...,NID, WHERE                               
C                                                                       
C        F(X)=SUM(I=1,...,N-K)(A(I)*B(I)(X)).                           
C                                                                       
C  IF MANY SMALL NX CALLS TO SPLN1 ARE ANTICIPATED, IT WOULD BE CHEAPER 
C  TO USE SPLN2, SINCE SPLN2 SAVES INTERMEDIATE RESULTS                 
C  FROM ONE CALL TO THE NEXT.                                           
C                                                                       
C  INPUT                                                                
C                                                                       
C    K   - THE ORDER OF THE B-SPLINES TO BE USED.                       
C          2.LE.K IS ASSUMED.                                           
C    T   - THE B-SPLINE MESH.                                           
C    N   - THE NUMBER OF POINTS IN THE MESH T.                          
C    A   - THE B-SPLINE COEFFICIENTS, N-K OF THEM.                      
C    X   - POINTS OF EVALUATION FOR THE B-SPLINE.                       
C          X MONOTONE INCREASING WOULD HELP, BUT IT IS NOT NECESSARY.   
C    NX  - THE NUMBER OF POINTS IN X.                                   
C    ID  - DERIVATIVES OF THE B-SPLINE DESIRED.                         
C          0.LE.ID(1).LT.ID(2).LT. ... .LT.ID(NID).LT.K IS ASSUMED.     
C    NID - THE NUMBER OF DERIVATIVES DESIRED, THE LENGTH OF ID.         
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    FX - THE VALUES OF F AND ITS DERIVATIVES.                          
C                                                                       
C  SCRATCH SPACE ALLOCATED - 3*K*(NID+1) REAL WORDS.                    
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - K.LT.2.                                                        
C    2 - N.LE.K.                                                        
C    3 - NX.LT.1.                                                       
C    4 - NID.LT.1.                                                      
C    5 - ID(1).LT.0.                                                    
C    6 - ID IS NOT STRICTLY INCREASING.                                 
C    7 - ID(NID).GE.K.                                                  
C    8 - T IS NOT MONOTONE INCREASING.                                  
C                                                                       
      REAL T(N),A(1),X(NX),FX(NX,NID)                                   
C     REAL A(N-K)                                                       
      INTEGER ID(NID)                                                   
C                                                                       
      LOGICAL A3PLNE                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      REAL WS(1)                                                        
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2)                                                       
C    1   CALL SETERR(15H SPLN1 - K.LT.2,15,1,2)                         
C     IF (N.LE.K)                                                       
C    1   CALL SETERR(15H SPLN1 - N.LE.K,15,2,2)                         
C     IF (NX.LT.1)                                                      
C    1   CALL SETERR(16H SPLN1 - NX.LT.1,16,3,2)                        
C     IF (NID.LT.1)                                                     
C    1   CALL SETERR(17H SPLN1 - NID.LT.1,17,4,2)                       
C     IF (ID(1).LT.0)                                                   
C    1   CALL SETERR(19H SPLN1 - ID(1).LT.0,19,5,2)                     
C/7S                                                                    
      IF (K.LT.2)                                                       
     1   CALL SETERR(' SPLN1 - K.LT.2',15,1,2)                          
      IF (N.LE.K)                                                       
     1   CALL SETERR(' SPLN1 - N.LE.K',15,2,2)                          
      IF (NX.LT.1)                                                      
     1   CALL SETERR(' SPLN1 - NX.LT.1',16,3,2)                         
      IF (NID.LT.1)                                                     
     1   CALL SETERR(' SPLN1 - NID.LT.1',17,4,2)                        
      IF (ID(1).LT.0)                                                   
     1   CALL SETERR(' SPLN1 - ID(1).LT.0',19,5,2)                      
C/                                                                      
      IF (NID.EQ.1) GO TO 20                                            
      DO 10 I=2,NID                                                     
C/6S                                                                    
C       IF (ID(I-1).GE.ID(I))                                           
C    1    CALL SETERR(38H SPLN1 - ID IS NOT STRICTLY INCREASING,38,6,2) 
C/7S                                                                    
        IF (ID(I-1).GE.ID(I))                                           
     1    CALL SETERR(' SPLN1 - ID IS NOT STRICTLY INCREASING',38,6,2)  
C/                                                                      
 10     CONTINUE                                                        
C/6S                                                                    
C20   IF (ID(NID).GE.K)                                                 
C    1    CALL SETERR(21H SPLN1 - ID(NID).GE.K,21,7,2)                  
C/7S                                                                    
 20   IF (ID(NID).GE.K)                                                 
     1    CALL SETERR(' SPLN1 - ID(NID).GE.K',21,7,2)                   
C/                                                                      
C                                                                       
C ... ALLOCATE SCRATCH SPACE.                                           
C                                                                       
      IADIFF=ISTKGT(3*K*(NID+1),3)                                      
C                                                                       
      ILEFT=(N+1)/2                                                     
      ILO=0                                                             
C/6S                                                                    
C     IF (.NOT.A3PLNE(K,T,N,A,X,NX,ID,NID,FX,3*K,WS(IADIFF),ILO,ILEFT,  
C    1                IADIFF+3*K*NID))                                  
C    2  CALL SETERR(37H SPLN1 - T IS NOT MONOTONE INCREASING,37,8,2)    
C/7S                                                                    
      IF (.NOT.A3PLNE(K,T,N,A,X,NX,ID,NID,FX,3*K,WS(IADIFF),ILO,ILEFT,  
     1                IADIFF+3*K*NID))                                  
     2  CALL SETERR(' SPLN1 - T IS NOT MONOTONE INCREASING',37,8,2)     
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE SPLN2(K,T,N,A,                                         
     1                  X,NX,                                           
     2                  ID,NID,                                         
     3                  FX,                                             
     4                  IDIM,ADIFF,ILO,ILEFT)                           
C                                                                       
C  TO EVALUATE THE B-SPLINE AND ITS DERIVATIVES                         
C                                                                       
C        FX(I,J) = F(ID(J))(X(I))                                       
C                                                                       
C  FOR I=1,...,NX AND J=1,...,NID WHERE                                 
C                                                                       
C      F(X) = SUM(I=1,...,N-K)(A(I)*B(I)(X)).                           
C                                                                       
C  INPUT                                                                
C                                                                       
C    K     - THE ORDER OF THE B-SPLINES TO BE USED.                     
C            2.LE.K IS ASSUMED.                                         
C    T     - THE B-SPLINE MESH.                                         
C    N     - THE NUMBER OF POINTS IN THE MESH T.                        
C    A     - THE B-SPLINE COEFFICIENTS, N-K OF THEM.                    
C    X     - POINTS OF EVALUATION FOR THE B-SPLINE.                     
C            X MONOTONE INCREASING WOULD HELP, BUT IT IS NOT NECESSARY. 
C    NX    - THE NUMBER OF POINTS IN X.                                 
C    ID    - DERIVATIVES OF THE B-SPLINE DESIRED.                       
C            0.LE.ID(1).LT.ID(2).LT. ... .LT.ID(NID).LT.K IS ASSUMED.   
C    NID   - THE NUMBER OF DERIVATIVES DESIRED, THE LENGTH OF ID.       
C    IDIM  - K.LE.IDIM IS ASSUMED. THE LARGER IDIM IS, THE FASTER SPLN2 
C            RUNS, SO LONG AS X IS MONOTONE INCREASING.                 
C            IDIM NEED NOT BE LARGER THAN N+K-2.                        
C    ADIFF - A REAL SCRATCH ARRAY OF LENGTH IDIM*NID.                   
C    ILO   - IF ILO.LE.0 THEN COMPUTATION STARTS FROM SCRATCH.          
C            IF ILO.GT.0 THEN THE VALUES OF K,T,N,A,ID,NID,IDIM,ILO AND 
C            ADIFF ARE ASSUMED TO BE UNCHANGED FROM THE LAST CALL.      
C    ILEFT - T(ILEFT).LE.X(1).LT.T(ILEFT+1) WOULD HELP, BUT IT IS NOT   
C            NECESSARY.                                                 
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    FX     - THE VALUES OF F AND ITS DERIVATIVES.                      
C    ADIFF  - SCRATCH VALUES ALTERED.                                   
C    ILO    - SCRATCH VALUE ALTERED.                                    
C    ILEFT  - THE INTERVAL INDICATOR FOR X(NX).                         
C                                                                       
C  SCRATCH SPACE ALLOCATED - 3*K REAL WORDS.                            
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - K.LT.2.                                                        
C    2 - N.LE.K.                                                        
C    3 - NX.LT.1.                                                       
C    4 - NID.LT.1.                                                      
C    5 - ID(1).LT.0.                                                    
C    6 - ID IS NOT STRICTLY INCREASING.                                 
C    7 - ID(NID).GE.K.                                                  
C    8 - IDIM.LT.K.                                                     
C    9 - T IS NOT MONOTONE INCREASING.                                  
C                                                                       
      REAL T(N),A(1),X(NX),FX(NX,NID),ADIFF(IDIM,NID)                   
C     REAL A(N-K)                                                       
      INTEGER ID(NID)                                                   
C                                                                       
      LOGICAL A3PLNE                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      REAL WS(1)                                                        
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2)                                                       
C    1   CALL SETERR(15H SPLN2 - K.LT.2,15,1,2)                         
C     IF (N.LE.K)                                                       
C    1   CALL SETERR(15H SPLN2 - N.LE.K,15,2,2)                         
C     IF (NX.LT.1)                                                      
C    1   CALL SETERR(16H SPLN2 - NX.LT.1,16,3,2)                        
C     IF (NID.LT.1)                                                     
C    1   CALL SETERR(17H SPLN2 - NID.LT.1,17,4,2)                       
C     IF (ID(1).LT.0)                                                   
C    1   CALL SETERR(19H SPLN2 - ID(1).LT.0,19,5,2)                     
C/7S                                                                    
      IF (K.LT.2)                                                       
     1   CALL SETERR(' SPLN2 - K.LT.2',15,1,2)                          
      IF (N.LE.K)                                                       
     1   CALL SETERR(' SPLN2 - N.LE.K',15,2,2)                          
      IF (NX.LT.1)                                                      
     1   CALL SETERR(' SPLN2 - NX.LT.1',16,3,2)                         
      IF (NID.LT.1)                                                     
     1   CALL SETERR(' SPLN2 - NID.LT.1',17,4,2)                        
      IF (ID(1).LT.0)                                                   
     1   CALL SETERR(' SPLN2 - ID(1).LT.0',19,5,2)                      
C/                                                                      
      IF (NID.EQ.1) GO TO 20                                            
      DO 10 I=2,NID                                                     
C/6S                                                                    
C       IF (ID(I-1).GE.ID(I))                                           
C    1    CALL SETERR(38H SPLN2 - ID IS NOT STRICTLY INCREASING,38,6,2) 
C/7S                                                                    
        IF (ID(I-1).GE.ID(I))                                           
     1    CALL SETERR(' SPLN2 - ID IS NOT STRICTLY INCREASING',38,6,2)  
C/                                                                      
 10     CONTINUE                                                        
C/6S                                                                    
C20   IF (ID(NID).GE.K)                                                 
C    1    CALL SETERR(21H SPLN2 - ID(NID).GE.K,21,7,2)                  
C     IF (IDIM.LT.K)                                                    
C    1   CALL SETERR(18H SPLN2 - IDIM.LT.K,18,8,2)                      
C/7S                                                                    
 20   IF (ID(NID).GE.K)                                                 
     1    CALL SETERR(' SPLN2 - ID(NID).GE.K',21,7,2)                   
      IF (IDIM.LT.K)                                                    
     1   CALL SETERR(' SPLN2 - IDIM.LT.K',18,8,2)                       
C/                                                                      
C                                                                       
C ... ALLOCATE SCRATCH SPACE.                                           
C                                                                       
      IDM=ISTKGT(3*K,3)                                                 
C                                                                       
C/6S                                                                    
C     IF (.NOT.A3PLNE(K,T,N,A,X,NX,ID,NID,FX,IDIM,ADIFF,ILO,ILEFT,IDM)) 
C    1   CALL SETERR(37H SPLN2 - T IS NOT MONOTONE INCREASING,37,9,2)   
C/7S                                                                    
      IF (.NOT.A3PLNE(K,T,N,A,X,NX,ID,NID,FX,IDIM,ADIFF,ILO,ILEFT,IDM)) 
     1   CALL SETERR(' SPLN2 - T IS NOT MONOTONE INCREASING',37,9,2)    
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE SPLND(K,T,N,A,                                         
     1                  X,NX,                                           
     2                  MD,                                             
     3                  FX)                                             
C                                                                       
C  TO EVALUATE THE B-SPLINE AND ITS DERIVATIVES                         
C                                                                       
C            FX(IX,J)=F(J-1)(X(IX))                                     
C                                                                       
C  FOR IX=1,...,NX AND J=1,...,MD, WHERE                                
C                                                                       
C        F(X)=SUM(I=1,...,N-K)(A(I)*B(I)(X)).                           
C                                                                       
C  IF MANY SMALL NX CALLS TO SPLND ARE ANTICIPATED, IT WOULD BE CHEAPER 
C  TO USE SPLN2, SINCE SPLN2 SAVES INTERMEDIATE RESULTS                 
C  FROM ONE CALL TO THE NEXT.                                           
C                                                                       
C  INPUT                                                                
C                                                                       
C    K      - THE ORDER OF THE B-SPLINES TO BE USED.                    
C             2.LE.K IS ASSUMED.                                        
C    T      - THE B-SPLINE MESH.                                        
C    N      - THE NUMBER OF POINTS IN THE MESH T.                       
C    A      - THE B-SPLINE COEFFICIENTS, N-K OF THEM.                   
C    X      - POINTS OF EVALUATION FOR THE B-SPLINE.                    
C             X MONOTONE INCREASING WOULD HELP, BUT IT IS NOT NECESSARY.
C    NX     - THE NUMBER OF POINTS IN X.                                
C    MD     - DERIVATIVES 0 , ... , MD-1 ARE DESIRED.                   
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    FX - THE VALUES OF F AND ITS DERIVATIVES.                          
C                                                                       
C  SCRATCH SPACE ALLOCATED - 3*K*(MD+1) REAL WORDS +                    
C                            MD INTEGER WORDS.                          
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - K.LT.2.                                                        
C    2 - N.LE.K.                                                        
C    3 - NX.LT.1.                                                       
C    4 - MD.LT.1.                                                       
C    5 - MD.GT.K.                                                       
C    6 - T IS NOT MONOTONE INCREASING.                                  
C                                                                       
      REAL T(N),A(1),X(NX),FX(NX,MD)                                    
C     REAL A(N-K).                                                      
C                                                                       
      LOGICAL A3PLNE                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      REAL WS(1)                                                        
      INTEGER IS(1000)                                                  
      EQUIVALENCE (DS(1),WS(1),IS(1))                                   
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2)                                                       
C    1   CALL SETERR(15H SPLND - K.LT.2,15,1,2)                         
C     IF (N.LE.K)                                                       
C    1   CALL SETERR(15H SPLND - N.LE.K,15,2,2)                         
C     IF (NX.LT.1)                                                      
C    1   CALL SETERR(16H SPLND - NX.LT.1,16,3,2)                        
C     IF (MD.LT.1)                                                      
C    1   CALL SETERR(16H SPLND - MD.LT.1,16,4,2)                        
C     IF (MD.GT.K)                                                      
C    1   CALL SETERR(16H SPLND - MD.GT.K,16,5,2)                        
C/7S                                                                    
      IF (K.LT.2)                                                       
     1   CALL SETERR(' SPLND - K.LT.2',15,1,2)                          
      IF (N.LE.K)                                                       
     1   CALL SETERR(' SPLND - N.LE.K',15,2,2)                          
      IF (NX.LT.1)                                                      
     1   CALL SETERR(' SPLND - NX.LT.1',16,3,2)                         
      IF (MD.LT.1)                                                      
     1   CALL SETERR(' SPLND - MD.LT.1',16,4,2)                         
      IF (MD.GT.K)                                                      
     1   CALL SETERR(' SPLND - MD.GT.K',16,5,2)                         
C/                                                                      
C                                                                       
C ... ALLOCATE SCRATCH SPACE.                                           
C                                                                       
      IADIFF=ISTKGT(3*K*(MD+1),3)                                       
      IID=ISTKGT(MD,2)                                                  
C                                                                       
      DO 10 I=1,MD                                                      
        IDX=IID+I-1                                                     
 10     IS(IDX)=I-1                                                     
C                                                                       
      ILEFT=(N+1)/2                                                     
      ILO=0                                                             
C/6S                                                                    
C     IF (.NOT.A3PLNE(K,T,N,A,X,NX,IS(IID),MD,FX,                       
C    1                3*K,WS(IADIFF),ILO,ILEFT,IADIFF+3*K*MD))          
C    2  CALL SETERR(37H SPLND - T IS NOT MONOTONE INCREASING,37,6,2)    
C/7S                                                                    
      IF (.NOT.A3PLNE(K,T,N,A,X,NX,IS(IID),MD,FX,                       
     1                3*K,WS(IADIFF),ILO,ILEFT,IADIFF+3*K*MD))          
     2  CALL SETERR(' SPLND - T IS NOT MONOTONE INCREASING',37,6,2)     
C/                                                                      
C                                                                       
      CALL ISTKRL(2)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE SPLNE(K,T,N,A,                                         
     1                  X,NX,                                           
     2                  FX)                                             
C                                                                       
C  TO EVALUATE THE B-SPLINE                                             
C                                                                       
C            FX(IX)=F(X(IX))                                            
C                                                                       
C  FOR IX=1,...,NX, WHERE                                               
C                                                                       
C        F(X)=SUM(I=1,...,N-K)(A(I)*B(I)(X)).                           
C                                                                       
C  IF MANY SMALL NX CALLS TO SPLNE ARE ANTICIPATED, IT WOULD BE CHEAPER 
C  TO USE SPLN2, SINCE SPLN2 SAVES INTERMEDIATE RESULTS                 
C  FROM ONE CALL TO THE NEXT.                                           
C                                                                       
C  INPUT                                                                
C                                                                       
C    K   - THE ORDER OF THE B-SPLINES TO BE USED.                       
C          2.LE.K IS ASSUMED.                                           
C    T   - THE B-SPLINE MESH.                                           
C    N   - THE NUMBER OF POINTS IN THE MESH T.                          
C    A   - THE B-SPLINE COEFFICIENTS, N-K OF THEM.                      
C    X   - POINTS OF EVALUATION FOR THE B-SPLINE.                       
C          X MONOTONE INCREASING WOULD HELP, BUT IT IS NOT NECESSARY.   
C    NX  - THE NUMBER OF POINTS IN X.                                   
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    FX - THE VALUES OF F.                                              
C                                                                       
C  SCRATCH SPACE ALLOCATED - 6*K REAL WORDS.                            
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - K.LT.2.                                                        
C    2 - N.LE.K.                                                        
C    3 - NX.LT.1.                                                       
C    4 - T IS NOT MONOTONE INCREASING.                                  
C                                                                       
      REAL T(N),A(1),X(NX),FX(NX)                                       
C     REAL A(N-K)                                                       
C                                                                       
      INTEGER ID(1)                                                     
      LOGICAL A3PLNE                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      REAL WS(1)                                                        
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
      DATA ID(1) /0/                                                    
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2)                                                       
C    1   CALL SETERR(15H SPLNE - K.LT.2,15,1,2)                         
C     IF (N.LE.K)                                                       
C    1   CALL SETERR(15H SPLNE - N.LE.K,15,2,2)                         
C     IF (NX.LT.1)                                                      
C    1   CALL SETERR(16H SPLNE - NX.LT.1,16,3,2)                        
C/7S                                                                    
      IF (K.LT.2)                                                       
     1   CALL SETERR(' SPLNE - K.LT.2',15,1,2)                          
      IF (N.LE.K)                                                       
     1   CALL SETERR(' SPLNE - N.LE.K',15,2,2)                          
      IF (NX.LT.1)                                                      
     1   CALL SETERR(' SPLNE - NX.LT.1',16,3,2)                         
C/                                                                      
C                                                                       
C ... ALLOCATE SCRATCH SPACE.                                           
C                                                                       
      IADIFF=ISTKGT(6*K,3)                                              
C                                                                       
      ILEFT=(N+1)/2                                                     
      ILO=0                                                             
C/6S                                                                    
C     IF (.NOT.A3PLNE(K,T,N,A,X,NX,ID,1,FX,3*K,WS(IADIFF),ILO,ILEFT,    
C    1                IADIFF+3*K))                                      
C    2  CALL SETERR(37H SPLNE - T IS NOT MONOTONE INCREASING,37,4,2)    
C/7S                                                                    
      IF (.NOT.A3PLNE(K,T,N,A,X,NX,ID,1,FX,3*K,WS(IADIFF),ILO,ILEFT,    
     1                IADIFF+3*K))                                      
     2  CALL SETERR(' SPLNE - T IS NOT MONOTONE INCREASING',37,4,2)     
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE BSPL1(K,T,N,                                           
     1                  X,NX,ILEFT,                                     
     2                  ID,NID,                                         
     3                  BX)                                             
C                                                                       
C  TO OBTAIN ALL NON-ZERO BASIS SPLINES AND THEIR DERIVATIVES,          
C                                                                       
C           BX(IX,I,J) = B(ILEFT+I-K) SUP (ID(J)) (X(IX))               
C                                                                       
C  FOR IX=1,...,NX, I=1,...,K AND J=1,...,NID.                          
C                                                                       
C  INPUT                                                                
C                                                                       
C    K     - THE ORDER OF THE B-SPLINES TO BE USED.                     
C            2.LE.K IS ASSUMED.                                         
C    T     - THE B-SPLINE MESH.                                         
C    N     - THE NUMBER OF POINTS IN THE MESH T.                        
C    X     - POINTS OF EVALUATION FOR THE B-SPLINE.                     
C    NX    - THE NUMBER OF POINTS IN X.                                 
C    ILEFT - ALL POINTS X(IX) ARE ASSUMED TO LIE IN THE SAME INTERVAL   
C            (T(ILEFT),T(ILEFT+1)).                                     
C    ID    - DERIVATIVES OF THE B-SPLINE DESIRED.                       
C            0.LE.ID(1).LT.ID(2).LT. ... .LT.ID(NID).LT.K IS ASSUMED.   
C    NID   - THE NUMBER OF DERIVATIVES DESIRED, THE LENGTH OF ID.       
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    BX - THE BASIS SPLINES AND THEIR DERIVATIVES.                      
C                                                                       
C  SCRATCH SPACE ALLOCATED -                                            
C                                                                       
C        MAX(3*K,K*(MIN((K+1)/2,ID(NID)+1)+1))                          
C                                                                       
C  REAL WORDS.                                                          
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C     1 - K.LT.2.                                                       
C     2 - N.LE.K.                                                       
C     3 - NX.LT.1.                                                      
C     4 - ILEFT.LT.1.                                                   
C     5 - ILEFT.GE.N.                                                   
C     6 - T(ILEFT)=T(ILEFT+1).                                          
C     7 - NID.LT.1.                                                     
C     8 - ID(1).LT.0.                                                   
C     9 - ID IS NOT MONOTONE INCREASING.                                
C    10 - ID(NID).GE.K.                                                 
C    11 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL.                     
C    12 - T IS NOT MONOTONE INCREASING.                                 
C                                                                       
      REAL T(N),X(NX),BX(NX,K,NID)                                      
      INTEGER ID(NID)                                                   
C                                                                       
      LOGICAL A3PLN8                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      REAL WS(1)                                                        
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2) CALL SETERR(15H BSPL1 - K.LT.2,15,1,2)                
C     IF (N.LE.K) CALL SETERR(15H BSPL1 - N.LE.K,15,2,2)                
C     IF (NX.LT.1) CALL SETERR(16H BSPL1 - NX.LT.1,16,3,2)              
C     IF (ILEFT.LT.1) CALL SETERR(19H BSPL1 - ILEFT.LT.1,19,4,2)        
C     IF (ILEFT.GE.N) CALL SETERR(19H BSPL1 - ILEFT.GE.N,19,5,2)        
C     IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
C    1  (28H BSPL1 - T(ILEFT)=T(ILEFT+1),28,6,2)                        
C     IF (NID.LT.1) CALL SETERR(17H BSPL1 - NID.LT.1,17,7,2)            
C     IF (ID(1).LT.0) CALL SETERR(19H BSPL1 - ID(1).LT.0,19,8,2)        
C/7S                                                                    
      IF (K.LT.2) CALL SETERR(' BSPL1 - K.LT.2',15,1,2)                 
      IF (N.LE.K) CALL SETERR(' BSPL1 - N.LE.K',15,2,2)                 
      IF (NX.LT.1) CALL SETERR(' BSPL1 - NX.LT.1',16,3,2)               
      IF (ILEFT.LT.1) CALL SETERR(' BSPL1 - ILEFT.LT.1',19,4,2)         
      IF (ILEFT.GE.N) CALL SETERR(' BSPL1 - ILEFT.GE.N',19,5,2)         
      IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
     1  (' BSPL1 - T(ILEFT)=T(ILEFT+1)',28,6,2)                         
      IF (NID.LT.1) CALL SETERR(' BSPL1 - NID.LT.1',17,7,2)             
      IF (ID(1).LT.0) CALL SETERR(' BSPL1 - ID(1).LT.0',19,8,2)         
C/                                                                      
      IF (NID.EQ.1) GO TO 20                                            
      DO 10 I=2,NID                                                     
C/6S                                                                    
C        IF (ID(I-1).GE.ID(I)) CALL SETERR                              
C    1       (38H BSPL1 - ID IS NOT MONOTONE INCREASING,38,9,2)         
C/7S                                                                    
         IF (ID(I-1).GE.ID(I)) CALL SETERR                              
     1       (' BSPL1 - ID IS NOT MONOTONE INCREASING',38,9,2)          
C/                                                                      
 10      CONTINUE                                                       
C/6S                                                                    
C20   IF (ID(NID).GE.K) CALL SETERR(21H BSPL1 - ID(NID).GE.K,21,10,2)   
C/7S                                                                    
 20   IF (ID(NID).GE.K) CALL SETERR(' BSPL1 - ID(NID).GE.K',21,10,2)    
C/                                                                      
C                                                                       
      DO 30 IX=1,NX                                                     
C/6S                                                                    
C       IF (T(ILEFT).GT.X(IX).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR       
C    1    (49H BSPL1 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL,49,11,2)
C       IF (X(IX).EQ.T(ILEFT+1).AND.T(ILEFT+1).LT.T(N)) CALL SETERR     
C    1    (49H BSPL1 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL,49,11,2)
C/7S                                                                    
        IF (T(ILEFT).GT.X(IX).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR       
     1    (' BSPL1 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL',49,11,2) 
        IF (X(IX).EQ.T(ILEFT+1).AND.T(ILEFT+1).LT.T(N)) CALL SETERR     
     1    (' BSPL1 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL',49,11,2) 
C/                                                                      
 30     CONTINUE                                                        
C                                                                       
C ... ALLOCATE SCRATCH SPACE.                                           
C                                                                       
      IFA=ISTKGT(MAX0(3*K,K*(MIN0((K+1)/2,ID(NID)+1)+1)),3)             
C                                                                       
C/6S                                                                    
C     IF (.NOT.A3PLN8(K,T,N,X,NX,ILEFT,ID,NID,BX,IFA))                  
C    1  CALL SETERR(37H BSPL1 - T IS NOT MONOTONE INCREASING,37,12,2)   
C/7S                                                                    
      IF (.NOT.A3PLN8(K,T,N,X,NX,ILEFT,ID,NID,BX,IFA))                  
     1  CALL SETERR(' BSPL1 - T IS NOT MONOTONE INCREASING',37,12,2)    
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE BSPLD(K,T,N,                                           
     1                  X,NX,ILEFT,                                     
     2                  MD,                                             
     3                  BX)                                             
C                                                                       
C  TO OBTAIN ALL NON-ZERO BASIS SPLINES AND THEIR DERIVATIVES,          
C                                                                       
C           BX(IX,I,J) = B(ILEFT+I-K) SUP (J-1) (X(IX)).                
C                                                                       
C  FOR IX=1,...,NX, I=1,...,K AND J=1,...,MD.                           
C                                                                       
C  INPUT                                                                
C                                                                       
C    K      - THE ORDER OF THE B-SPLINES TO BE USED.                    
C             2.LE.K IS ASSUMED.                                        
C    T      - THE B-SPLINE MESH.                                        
C    N      - THE NUMBER OF POINTS IN THE MESH T.                       
C    X      - POINTS OF EVALUATION FOR THE B-SPLINE.                    
C    NX     - THE NUMBER OF POINTS IN X.                                
C    ILEFT  - ALL POINTS X(IX) ARE ASSUMED TO LIE IN THE SAME INTERVAL  
C             (T(ILEFT),T(ILEFT+1)).                                    
C    MD     - DERIVATIVES 0 , ... , MD-1 ARE DESIRED.                   
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    BX - THE BASIS SPLINES AND THEIR DERIVATIVES.                      
C                                                                       
C  SCRATCH SPACE ALLOCATED -                                            
C                                                                       
C        MAX(3*K,K*(MIN((K+1)/2,MD)+1))                                 
C                                                                       
C  REAL WORDS + MD INTEGER WORDS.                                       
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C     1 - K.LT.2.                                                       
C     2 - N.LE.K.                                                       
C     3 - NX.LT.1.                                                      
C     4 - ILEFT.LT.1.                                                   
C     5 - ILEFT.GE.N.                                                   
C     6 - T(ILEFT)=T(ILEFT+1).                                          
C     7 - MD.LT.1.                                                      
C     8 - MD.GT.K.                                                      
C     9 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL.                     
C    10 - T IS NOT MONOTONE INCREASING.                                 
C                                                                       
      REAL T(N),X(NX),BX(NX,K,MD)                                       
C                                                                       
      LOGICAL A3PLN8                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      REAL WS(1)                                                        
      INTEGER IS(1000)                                                  
      EQUIVALENCE (DS(1),WS(1),IS(1))                                   
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2) CALL SETERR(15H BSPLD - K.LT.2,15,1,2)                
C     IF (N.LE.K) CALL SETERR(15H BSPLD - N.LE.K,15,2,2)                
C     IF (NX.LT.1) CALL SETERR(16H BSPLD - NX.LT.1,16,3,2)              
C     IF (ILEFT.LT.1) CALL SETERR(19H BSPLD - ILEFT.LT.1,19,4,2)        
C     IF (ILEFT.GE.N) CALL SETERR(19H BSPLD - ILEFT.GE.N,19,5,2)        
C     IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
C    1  (28H BSPLD - T(ILEFT)=T(ILEFT+1),28,6,2)                        
C     IF (MD.LT.1)                                                      
C    1   CALL SETERR(16H BSPLD - MD.LT.1,16,7,2)                        
C     IF (MD.GT.K)                                                      
C    1   CALL SETERR(16H BSPLD - MD.GT.K,16,8,2)                        
C/7S                                                                    
      IF (K.LT.2) CALL SETERR(' BSPLD - K.LT.2',15,1,2)                 
      IF (N.LE.K) CALL SETERR(' BSPLD - N.LE.K',15,2,2)                 
      IF (NX.LT.1) CALL SETERR(' BSPLD - NX.LT.1',16,3,2)               
      IF (ILEFT.LT.1) CALL SETERR(' BSPLD - ILEFT.LT.1',19,4,2)         
      IF (ILEFT.GE.N) CALL SETERR(' BSPLD - ILEFT.GE.N',19,5,2)         
      IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
     1  (' BSPLD - T(ILEFT)=T(ILEFT+1)',28,6,2)                         
      IF (MD.LT.1)                                                      
     1   CALL SETERR(' BSPLD - MD.LT.1',16,7,2)                         
      IF (MD.GT.K)                                                      
     1   CALL SETERR(' BSPLD - MD.GT.K',16,8,2)                         
C/                                                                      
C                                                                       
C ... ALLOCATE SCRATCH SPACE.                                           
C                                                                       
      IFA=ISTKGT(MAX0(3*K,K*(MIN0((K+1)/2,MD)+1)),3)                    
C                                                                       
      IID=ISTKGT(MD,2)                                                  
      DO 10 I=1,MD                                                      
        IDX=IID+I-1                                                     
 10     IS(IDX)=I-1                                                     
C                                                                       
      DO 20 IX=1,NX                                                     
C/6S                                                                    
C       IF (T(ILEFT).GT.X(IX).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR       
C    1    (49H BSPLD - ALL X ARE NOT IN THE SAME ILEFT INTERVAL,49,9,2) 
C       IF (X(IX).EQ.T(ILEFT+1).AND.T(ILEFT+1).LT.T(N)) CALL SETERR     
C    1    (49H BSPLD - ALL X ARE NOT IN THE SAME ILEFT INTERVAL,49,9,2) 
C/7S                                                                    
        IF (T(ILEFT).GT.X(IX).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR       
     1    (' BSPLD - ALL X ARE NOT IN THE SAME ILEFT INTERVAL',49,9,2)  
        IF (X(IX).EQ.T(ILEFT+1).AND.T(ILEFT+1).LT.T(N)) CALL SETERR     
     1    (' BSPLD - ALL X ARE NOT IN THE SAME ILEFT INTERVAL',49,9,2)  
C/                                                                      
 20     CONTINUE                                                        
C                                                                       
C/6S                                                                    
C     IF (.NOT.A3PLN8(K,T,N,X,NX,ILEFT,IS(IID),MD,BX,IFA))              
C    1  CALL SETERR(37H BSPLD - T IS NOT MONOTONE INCREASING,37,10,2)   
C/7S                                                                    
      IF (.NOT.A3PLN8(K,T,N,X,NX,ILEFT,IS(IID),MD,BX,IFA))              
     1  CALL SETERR(' BSPLD - T IS NOT MONOTONE INCREASING',37,10,2)    
C/                                                                      
C                                                                       
      CALL ISTKRL(2)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE BSPLI(K,T,N,                                           
     1                  X,NX,ILEFT,                                     
     2                  BIX)                                            
C                                                                       
C  TO OBTAIN THE INTEGRAL OF ALL NON-ZERO BASIS SPLINES,                
C                                                                       
C           BIX(IX,I) =                                                 
C           INTEGRAL ( T(1) TO X(IX) ) B(ILEFT+I-K) (ZETA) DZETA        
C                                                                       
C  FOR IX=1,...,NX, AND I=1,...,K.                                      
C                                                                       
C  INPUT                                                                
C                                                                       
C    K      - THE ORDER OF THE B-SPLINES TO BE USED.                    
C             2.LE.K IS ASSUMED.                                        
C    T      - THE B-SPLINE MESH.                                        
C    N      - THE NUMBER OF POINTS IN THE MESH T.                       
C    X      - POINTS OF EVALUATION FOR THE INTEGRALS OF THE B-SPLINES.  
C    NX     - THE NUMBER OF POINTS IN X.                                
C    ILEFT  - MUST HAVE T(ILEFT).LT.T(ILEFT+1) AND                      
C             T(ILEFT) .LE. X(IX) .LE. T(ILEFT+1), IX=1,...,NX.         
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    BIX - THE INTEGRALS OF THE BASIS SPLINES.                          
C                                                                       
C  SCRATCH SPACE ALLOCATED - 3*K REAL WORDS.                            
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C     1 - K.LT.2.                                                       
C     2 - N.LE.K.                                                       
C     3 - NX.LT.1.                                                      
C     4 - ILEFT.LT.1.                                                   
C     5 - ILEFT.GE.N.                                                   
C     6 - T(ILEFT)=T(ILEFT+1).                                          
C     7 - X(IX) NOT IN (T(ILEFT),T(ILEFT+1)).                           
C     8 - T IS NOT MONOTONE INCREASING.                                 
C                                                                       
      REAL T(N),X(NX),BIX(NX,K)                                         
C                                                                       
      LOGICAL A3PLNI                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      REAL WS(1)                                                        
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2) CALL SETERR(15H BSPLI - K.LT.2,15,1,2)                
C     IF (N.LE.K) CALL SETERR(15H BSPLI - N.LE.K,15,2,2)                
C     IF (NX.LT.1) CALL SETERR(16H BSPLI - NX.LT.1,16,3,2)              
C     IF (ILEFT.LT.1) CALL SETERR(19H BSPLI - ILEFT.LT.1,19,4,2)        
C     IF (ILEFT.GE.N) CALL SETERR(19H BSPLI - ILEFT.GE.N,19,5,2)        
C     IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
C    1  (28H BSPLI - T(ILEFT)=T(ILEFT+1),28,6,2)                        
C/7S                                                                    
      IF (K.LT.2) CALL SETERR(' BSPLI - K.LT.2',15,1,2)                 
      IF (N.LE.K) CALL SETERR(' BSPLI - N.LE.K',15,2,2)                 
      IF (NX.LT.1) CALL SETERR(' BSPLI - NX.LT.1',16,3,2)               
      IF (ILEFT.LT.1) CALL SETERR(' BSPLI - ILEFT.LT.1',19,4,2)         
      IF (ILEFT.GE.N) CALL SETERR(' BSPLI - ILEFT.GE.N',19,5,2)         
      IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
     1  (' BSPLI - T(ILEFT)=T(ILEFT+1)',28,6,2)                         
C/                                                                      
C                                                                       
      DO 10 IX=1,NX                                                     
C/6S                                                                    
C        IF (X(IX).LT.T(ILEFT).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR      
C    1      (42H SPLNI - X(IX) NOT IN T(ILEFT),T(ILEFT+1)),42,7,2)      
C/7S                                                                    
         IF (X(IX).LT.T(ILEFT).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR      
     1      (' SPLNI - X(IX) NOT IN T(ILEFT),T(ILEFT+1))',42,7,2)       
C/                                                                      
 10      CONTINUE                                                       
C                                                                       
      ICOL=ISTKGT(3*K,3)                                                
      IDM=ICOL+K                                                        
      IDP=IDM+K                                                         
C                                                                       
C/6S                                                                    
C     IF (.NOT.A3PLNI(K,T,N,                                            
C    1                X,NX,ILEFT,                                       
C    2                BIX,                                              
C    3                WS(ICOL),WS(IDM),WS(IDP)))                        
C    4   CALL SETERR                                                    
C    5      (37H BSPLI - T IS NOT MONOTONE INCREASING,37,8,2)           
C/7S                                                                    
      IF (.NOT.A3PLNI(K,T,N,                                            
     1                X,NX,ILEFT,                                       
     2                BIX,                                              
     3                WS(ICOL),WS(IDM),WS(IDP)))                        
     4   CALL SETERR                                                    
     5      (' BSPLI - T IS NOT MONOTONE INCREASING',37,8,2)            
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE BSPLN(K,T,N,                                           
     1                  X,NX,ILEFT,                                     
     2                  BX)                                             
C                                                                       
C  TO OBTAIN ALL NON-ZERO BASIS SPLINES,                                
C                                                                       
C           BX(IX,I) = B(ILEFT+I-K) (X(IX))                             
C                                                                       
C  FOR IX=1,...,NX, AND I=1,...,K.                                      
C                                                                       
C  INPUT                                                                
C                                                                       
C    K      - THE ORDER OF THE B-SPLINES TO BE USED.                    
C             2.LE.K IS ASSUMED.                                        
C    T      - THE B-SPLINE MESH.                                        
C    N      - THE NUMBER OF POINTS IN THE MESH T.                       
C    X      - POINTS OF EVALUATION FOR THE B-SPLINE.                    
C    NX     - THE NUMBER OF POINTS IN X.                                
C    ILEFT  - ALL POINTS X(IX) ARE ASSUMED TO LIE IN THE SAME INTERVAL  
C             (T(ILEFT),T(ILEFT+1)).                                    
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    BX - THE BASIS SPLINES.                                            
C                                                                       
C  SCRATCH SPACE ALLOCATED - 3*K REAL WORDS.                            
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C     1 - K.LT.2.                                                       
C     2 - N.LE.K.                                                       
C     3 - NX.LT.1.                                                      
C     4 - ILEFT.LT.1.                                                   
C     5 - ILEFT.GE.N.                                                   
C     6 - T(ILEFT)=T(ILEFT+1).                                          
C     7 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL.                     
C     8 - T IS NOT MONOTONE INCREASING.                                 
C                                                                       
      REAL T(N),X(NX),BX(NX,K)                                          
C                                                                       
      INTEGER ID(1)                                                     
      LOGICAL A3PLN8                                                    
C                                                                       
      DATA ID(1) /0/                                                    
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2) CALL SETERR(15H BSPLN - K.LT.2,15,1,2)                
C     IF (N.LE.K) CALL SETERR(15H BSPLN - N.LE.K,15,2,2)                
C     IF (NX.LT.1) CALL SETERR(16H BSPLN - NX.LT.1,16,3,2)              
C     IF (ILEFT.LT.1) CALL SETERR(19H BSPLN - ILEFT.LT.1,19,4,2)        
C     IF (ILEFT.GE.N) CALL SETERR(19H BSPLN - ILEFT.GE.N,19,5,2)        
C     IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
C    1  (28H BSPLN - T(ILEFT)=T(ILEFT+1),28,6,2)                        
C/7S                                                                    
      IF (K.LT.2) CALL SETERR(' BSPLN - K.LT.2',15,1,2)                 
      IF (N.LE.K) CALL SETERR(' BSPLN - N.LE.K',15,2,2)                 
      IF (NX.LT.1) CALL SETERR(' BSPLN - NX.LT.1',16,3,2)               
      IF (ILEFT.LT.1) CALL SETERR(' BSPLN - ILEFT.LT.1',19,4,2)         
      IF (ILEFT.GE.N) CALL SETERR(' BSPLN - ILEFT.GE.N',19,5,2)         
      IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
     1  (' BSPLN - T(ILEFT)=T(ILEFT+1)',28,6,2)                         
C/                                                                      
C                                                                       
      DO 10 IX=1,NX                                                     
C/6S                                                                    
C       IF (T(ILEFT).GT.X(IX).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR       
C    1    (49H BSPLN - ALL X ARE NOT IN THE SAME ILEFT INTERVAL,49,7,2) 
C       IF (X(IX).EQ.T(ILEFT+1).AND.T(ILEFT+1).LT.T(N)) CALL SETERR     
C    1    (49H BSPLN - ALL X ARE NOT IN THE SAME ILEFT INTERVAL,49,7,2) 
C/7S                                                                    
        IF (T(ILEFT).GT.X(IX).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR       
     1    (' BSPLN - ALL X ARE NOT IN THE SAME ILEFT INTERVAL',49,7,2)  
        IF (X(IX).EQ.T(ILEFT+1).AND.T(ILEFT+1).LT.T(N)) CALL SETERR     
     1    (' BSPLN - ALL X ARE NOT IN THE SAME ILEFT INTERVAL',49,7,2)  
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
      IFA=ISTKGT(3*K,3)                                                 
C                                                                       
C/6S                                                                    
C     IF (.NOT.A3PLN8(K,T,N,X,NX,ILEFT,ID,1,BX,IFA))                    
C    1  CALL SETERR(37H BSPLN - T IS NOT MONOTONE INCREASING,37,8,2)    
C/7S                                                                    
      IF (.NOT.A3PLN8(K,T,N,X,NX,ILEFT,ID,1,BX,IFA))                    
     1  CALL SETERR(' BSPLN - T IS NOT MONOTONE INCREASING',37,8,2)     
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      LOGICAL FUNCTION A3PLN8(K,T,N,X,NX,ILEFT,ID,NID,BX,IFA)           
C                                                                       
C  TO OBTAIN ALL NON-ZERO BASIS SPLINES AND THEIR DERIVATIVES,          
C                                                                       
C           BX(IX,I,J) = B(ILEFT+I-K) SUP (ID(J)) (X(IX))               
C                                                                       
C  FOR IX=1,...,NX, I=1,...,K AND J=1,...,NID.                          
C                                                                       
C  INPUT                                                                
C                                                                       
C    K     - THE ORDER OF THE B-SPLINES TO BE USED.                     
C            2.LE.K IS ASSUMED.                                         
C    T     - THE B-SPLINE MESH.                                         
C    N     - THE NUMBER OF POINTS IN THE MESH T.                        
C    X     - POINTS OF EVALUATION FOR THE B-SPLINE.                     
C    NX    - THE NUMBER OF POINTS IN X.                                 
C    ILEFT - ALL POINTS X(IX) ARE ASSUMED TO LIE IN THE SAME INTERVAL   
C            (T(ILEFT),T(ILEFT+1)).                                     
C    ID    - DERIVATIVES OF THE B-SPLINE DESIRED.                       
C            0.LE.ID(1).LT.ID(2).LT. ... .LT.ID(NID).LT.K IS ASSUMED.   
C    NID   - THE NUMBER OF DERIVATIVES DESIRED, THE LENGTH OF ID.       
C    IFA   - POINTER TO                                                 
C                                                                       
C                 MAX(3*K,K*(MIN((K+1)/2,ID(NID)+1)+1))                 
C                                                                       
C            WORKING STACK SCRATCH LOCATIONS.                           
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    BX     - THE BASIS SPLINES AND THEIR DERIVATIVES.                  
C    A3PLN8 - .TRUE. IF SUCCESSFUL.                                     
C             .FALSE. IF T IS NOT MONOTONE INCREASING.                  
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES - NONE.                                                 
C                                                                       
      REAL T(N),X(NX),BX(NX,K,NID)                                      
      INTEGER ID(NID)                                                   
C                                                                       
      LOGICAL A3PLNN,A3PLNB                                             
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      REAL WS(1)                                                        
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
      A3PLN8=.TRUE.                                                     
C                                                                       
      IDM=IFA+K                                                         
      IDP=IDM+K                                                         
C                                                                       
C ... LOAD BX(IX,I,J) WITH N(ILEFT+I+ID(J)-K,K-ID(J))(X(IX)).           
C                                                                       
      DO 30 IX=1,NX                                                     
C                                                                       
         JJ01=0                                                         
         J=NID                                                          
 10         KMD=K-ID(J)                                                 
C                                                                       
            IF (.NOT.A3PLNN(T,N,X(IX),ILEFT,KMD,WS(IFA),WS(IDM),WS(IDP),
     1                      JJ01)) GO TO 40                             
C                                                                       
            IDX=IFA                                                     
            DO 20 I=1,KMD                                               
               BX(IX,I,J)=WS(IDX)                                       
 20            IDX=IDX+1                                                
            J=J-1                                                       
            IF (J.GE.1) GO TO 10                                        
 30      CONTINUE                                                       
C                                                                       
      IF (ID(NID).EQ.0) GO TO 50                                        
C                                                                       
C ... NOW GET THE HIGHER ORDER DERIVATIVES.                             
C                                                                       
      IADIFF=IFA+K                                                      
C                                                                       
      IF (.NOT.A3PLNB(T,N,K,X,NX,ILEFT,ID,NID,BX,WS(IADIFF),WS(IFA)))   
     1  GO TO 40                                                        
C                                                                       
      GO TO 50                                                          
C                                                                       
 40   A3PLN8=.FALSE.                                                    
C                                                                       
 50   RETURN                                                            
C                                                                       
      END                                                               
      LOGICAL FUNCTION A3PLNE(K,T,N,A,X,NX,ID,NID,FX,IDIM,ADIFF,ILO,    
     1                        ILEFT,IDM)                                
C                                                                       
C  TO EVALUATE THE B-SPLINE AND ITS DERIVATIVES                         
C                                                                       
C        FX(I,J) = F(ID(J))(X(I))                                       
C                                                                       
C  FOR I=1,...,NX AND J=1,...,NID WHERE                                 
C                                                                       
C      F(X) = SUM(I=1,...,N-K)(A(I)*B(I)(X)).                           
C                                                                       
C  INPUT                                                                
C                                                                       
C    K     - THE ORDER OF THE B-SPLINES TO BE USED.                     
C            2.LE.K IS ASSUMED.                                         
C    T     - THE B-SPLINE MESH.                                         
C    N     - THE NUMBER OF POINTS IN THE MESH T.                        
C    A     - THE B-SPLINE COEFFICIENTS, N-K OF THEM.                    
C    X     - POINTS OF EVALUATION FOR THE B-SPLINE.                     
C            X MONOTONE INCREASING WOULD HELP, BUT IT IS NOT NECESSARY. 
C    NX    - THE NUMBER OF POINTS IN X.                                 
C    ID    - DERIVATIVES OF THE B-SPLINE DESIRED.                       
C            0.LE.ID(1).LT.ID(2).LT. ... .LT.ID(NID).LT.K IS ASSUMED.   
C    NID   - THE NUMBER OF DERIVATIVES DESIRED, THE LENGTH OF ID.       
C    IDIM  - K.LE.IDIM IS ASSUMED. THE LARGER IDIM IS, THE FASTER A3PLNE
C            RUNS, SO LONG AS X IS MONOTONE INCREASING.                 
C            IDIM NEED NOT BE LARGER THAN N+K-2.                        
C    ADIFF - A REAL SCRATCH ARRAY OF LENGTH IDIM*NID.                   
C    ILO   - IF ILO.LE.0 THEN COMPUTATION STARTS FROM SCRATCH.          
C            IF ILO.GT.0 THEN THE VALUES OF K,T,N,A,ID,NID,IDIM,ILO AND 
C            ADIFF ARE ASSUMED TO BE UNCHANGED FROM THE LAST CALL.      
C    ILEFT - T(ILEFT).LE.X(1).LT.T(ILEFT+1) WOULD HELP, BUT IT IS NOT   
C            NECESSARY.                                                 
C    IDM   - POINTER TO 3*K SCRATCH WORKING LOCATIONS.                  
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    FX     - THE VALUES OF F AND ITS DERIVATIVES.                      
C    ADIFF  - SCRATCH VALUES ALTERED.                                   
C    ILO    - SCRATCH VALUE ALTERED.                                    
C    ILEFT  - THE INTERVAL INDICATOR FOR X(NX).                         
C    A3PLNE - .TRUE. IF SUCCESSFUL.                                     
C             .FALSE. IF T IS NOT MONOTONE INCREASING.                  
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES - NONE.                                                 
C                                                                       
      REAL T(N),A(1),X(NX),FX(NX,NID),ADIFF(IDIM,NID)                   
C     REAL A(N-K)                                                       
      INTEGER ID(NID)                                                   
C                                                                       
      LOGICAL A3PLND,A3PLNV                                             
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      REAL WS(1)                                                        
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
      A3PLNE=.TRUE.                                                     
C                                                                       
      IDP=IDM+K                                                         
      ICOL=IDP+K                                                        
C                                                                       
      IDIML=MIN0(IDIM,N+K-1-ILEFT)                                      
C                                                                       
      IF (T(1).GE.T(N)) GO TO 50                                        
C                                                                       
      DO 40 I=1,NX                                                      
C                                                                       
         ILEFT=INTRVR(N,T,X(I))                                         
         IF (ILEFT.EQ.N) ILEFT=0                                        
         IF (ILEFT.EQ.0) GO TO 20                                       
C                                                                       
C ...... GET ADIFF, IF NECESSARY.                                       
C                                                                       
         IF (ILO.LE.ILEFT.AND.ILEFT.LE.IDIM+ILO-K.AND.ILO.GE.1) GO TO 10
C                                                                       
         ILO=ILEFT                                                      
         IDIML=MIN0(N+K-1-ILEFT,IDIM)                                   
C                                                                       
         IF (.NOT.A3PLND(K,T,N,A,ID,NID,ILO,IDIML,ADIFF)) GO TO 50      
C                                                                       
 10      IF (.NOT.A3PLNV(T,ADIFF,N,K,X(I),I,ILEFT,ID,NID,ILO,IDIML,FX,  
     1                   NX,WS(ICOL),WS(IDM),WS(IDP))) GO TO 50         
C                                                                       
         GO TO 40                                                       
C                                                                       
C ...... X(I) IS OUTSIDE (T(1),T(N)).                                   
C                                                                       
 20      DO 30 J=1,NID                                                  
 30         FX(I,J)=0.0E0                                               
C                                                                       
 40      CONTINUE                                                       
C                                                                       
      GO TO 60                                                          
C                                                                       
 50   A3PLNE=.FALSE.                                                    
C                                                                       
 60   RETURN                                                            
C                                                                       
      END                                                               
      LOGICAL FUNCTION A3PLNV(T,ADIFF,N,K,X,IX,ILEFT,ID,NID,ILO,IDIM,FX,
     1                        NX,COL,DM,DP)                             
C                                                                       
C  TO SET                                                               
C                                                                       
C  FX(IX,J) = F(ID(J))(X)  J=1,...,NID                                  
C                                                                       
C  WHERE F(X) = SUM(I=1,...,N-K)(A(I)*N(I,K))                           
C                                                                       
C  AND 0.LE.ID(1).LT. ... .LT.ID(NID).LT.K.                             
C                                                                       
C  (ADIFF)(ILO,IDIM) IS ASSUMED TO COME FROM A CALL TO A3PLND.          
C                                                                       
C  ILEFT IS ASSUMED TO COME FROM A CALL TO INTRV(N,T,X).                
C                                                                       
C  MUST HAVE ILEFT IN (ILO,IDIM+ILO-K).                                 
C                                                                       
C  A3PLNV=.TRUE. IS RETURNED IF SUCCESSFUL.                             
C  A3PLNV=.FALSE. IS RETURNED IF THE MESH T IS NOT MONOTONE INCREASING. 
C                                                                       
      REAL T(N),ADIFF(IDIM,NID),X,FX(NX,NID),COL(K),DM(K),              
     1                 DP(K)                                            
      INTEGER ID(NID)                                                   
C                                                                       
      LOGICAL A3PLNN                                                    
C                                                                       
      ILMIL=ILEFT-ILO                                                   
      JJ01=0                                                            
      J=NID                                                             
 10      KMID=K-ID(J)                                                   
         A3PLNV=A3PLNN(T,N,X,ILEFT,KMID,COL,DM,DP,JJ01)                 
         IF(.NOT.A3PLNV) GO TO 30                                       
         FX(IX,J)=0.0E0                                                 
         IDX=ILMIL                                                      
         DO 20 II=1,KMID                                                
            IDX=IDX+1                                                   
 20         FX(IX,J)=FX(IX,J)+ADIFF(IDX,J)*COL(II)                      
         J=J-1                                                          
         IF (J.GE.1) GO TO 10                                           
C                                                                       
 30   RETURN                                                            
C                                                                       
      END                                                               
      LOGICAL FUNCTION A3PLNB(T,N,K,X,NX,ILEFT,ID,NID,BX,ADIFF,F)       
C                                                                       
C  TO GET THE DERIVATIVES OF ALL BASIS SPLINES.                         
C                                                                       
C  A3PLNB=.TRUE. IS RETURNED IF SUCCESSFUL.                             
C  A3PLNB=.FALSE. IS RETURNED IF THE MESH T IS NOT MONOTONE INCREASING. 
C                                                                       
      REAL T(N),X(NX),BX(NX,K,NID),ADIFF(K,1),F(K)                      
C     REAL ADIFF(K,MIN((K+1)/2,ID(NID)+1))                              
      INTEGER ID(NID)                                                   
C                                                                       
      REAL FKMD,FKMDIF                                                  
C                                                                       
      A3PLNB=.TRUE.                                                     
C                                                                       
      ILMK=ILEFT-K                                                      
      KP1=K+1                                                           
      JMAX=MIN0(KP1/2,ID(NID)+1)                                        
C                                                                       
C ... ADIFF(I,J) IS THE COEFFICIENT VECTOR FOR THE I-TH SPLINES         
C ... JD-TH DERIVATIVE.                                                 
C                                                                       
      DO 20 I=1,K                                                       
         DO 10 J=1,JMAX                                                 
 10         ADIFF(I,J)=0.0E0                                            
 20      ADIFF(I,1)=1.0E0                                               
C                                                                       
      IDERIV=1                                                          
      JD=2                                                              
      IF (ID(1).NE.0) JD=1                                              
C                                                                       
C ...... LOOP ON JD, THE INDEX INTO ID(JD).                             
C                                                                       
 30      IF (JD.GT.NID) GO TO 170                                       
         ILMKPD=ILMK+IDERIV                                             
         KMID=K-IDERIV                                                  
         FKMD=FLOAT(KMID)                                               
         ILMD=ILEFT-IDERIV                                              
         IDP1=IDERIV+1                                                  
         MIND=MIN0(IDP1,KMID)                                           
C                                                                       
C ...... COMPUTE ALL ADIFF WITH SAME DENOMINATOR.                       
C                                                                       
         DO 100 JSMD=1,KMID                                             
            IF (JSMD.GT.IDERIV) GO TO 70                                
C                                                                       
C ......... JS INCREASING HERE.                                         
C                                                                       
            IDX1=MIN0(ILEFT+JSMD,N)                                     
            IDX2=MAX0(ILMKPD+JSMD,1)                                    
            FKMDIF=T(IDX1)-T(IDX2)                                      
C                                                                       
            IF (FKMDIF.LE.0.0E0) GO TO 160                              
C                                                                       
            FKMDIF=FKMD/FKMDIF                                          
            IF (JSMD.EQ.JMAX) GO TO 50                                  
            JSMDP1=JSMD+1                                               
            DO 40 I=JSMD,IDERIV                                         
 40            ADIFF(I,JSMD)=FKMDIF*(ADIFF(I,JSMDP1)-ADIFF(I,JSMD))     
            GO TO 70                                                    
 50         DO 60 I=JSMD,IDERIV                                         
 60            ADIFF(I,JSMD)=-FKMDIF*ADIFF(I,JSMD)                      
C                                                                       
C ......... JS DECREASING HERE.                                         
C                                                                       
 70         JS=KP1-JSMD                                                 
            JSP1=JS+1                                                   
            IDX1=MIN0(ILMD+JS,N)                                        
            IDX2=MAX0(ILMK+JS,1)                                        
            FKMDIF=T(IDX1)-T(IDX2)                                      
C                                                                       
            IF (FKMDIF.LE.0.0E0) GO TO 160                              
C                                                                       
            FKMDIF=FKMD/FKMDIF                                          
            I0=MAX0(IDP1,JS-IDERIV)                                     
            I1=JS-1                                                     
            IF (I0.GT.I1) GO TO 90                                      
            J=JSP1-I0                                                   
            DO 80 I=I0,I1                                               
               ADIFF(I,J)=FKMDIF*(ADIFF(I,J)-ADIFF(I,J-1))              
 80            J=J-1                                                    
 90         ADIFF(JS,1)=FKMDIF*ADIFF(JS,1)                              
 100        CONTINUE                                                    
         IF (IDERIV.NE.ID(JD)) GO TO 150                                
C                                                                       
C ...... EVALUATE THE ID(JD)-TH DERIVATIVE OF THE BASIS SPLINES.        
C                                                                       
         DO 140 IX=1,NX                                                 
            DO 120 I=1,K                                                
               JHI=MIN0(KP1-I,I,MIND)                                   
               IDX=MAX0(I-IDERIV,1)                                     
               F(I)=0.0E0                                               
               DO 110 J=1,JHI                                           
                  F(I)=F(I)+ADIFF(I,J)*BX(IX,IDX,JD)                    
 110              IDX=IDX+1                                             
 120           CONTINUE                                                 
            DO 130 I=1,K                                                
 130           BX(IX,I,JD)=F(I)                                         
 140        CONTINUE                                                    
         JD=JD+1                                                        
 150     IDERIV=IDP1                                                    
         GO TO 30                                                       
C                                                                       
 160  A3PLNB=.FALSE.                                                    
C                                                                       
 170  RETURN                                                            
C                                                                       
      END                                                               
      LOGICAL FUNCTION A3PLND(K,T,N,A,ID,NID,ILO,IDIM,ADIFF)            
C                                                                       
C  TO SET                                                               
C                                                                       
C  ADIFF(I,J) = A(ID(J))(ILO+I+ID(J)-K)                                 
C                                                                       
C  FOR I=1,...,IDIM-ID(J) AND J=1,...,NID.                              
C                                                                       
C  THE FOLLOWING ASSUMPTIONS ARE MADE                                   
C                                                                       
C  0.LE.ID(1).LT. ... .LT.ID(NID).LT.K                                  
C  1.LE.ILO.LT.N                                                        
C  K.LE.IDIM.LT.N+K-ILO                                                 
C  A(N-K) LONG                                                          
C                                                                       
C  A3PLND=.TRUE. IS RETURNED IF SUCCESSFUL.                             
C  A3PLND=.FALSE. IS RETURNED IF THE MESH T IS NOT MONOTONE INCREASING. 
C                                                                       
      REAL T(N),A(1),ADIFF(IDIM,NID)                                    
C     REAL A(N-K)                                                       
      INTEGER ID(NID)                                                   
C                                                                       
      REAL FKMD,DIFF                                                    
C                                                                       
      A3PLND=.TRUE.                                                     
C                                                                       
      NMK=N-K                                                           
      IDX=ILO-K                                                         
C                                                                       
C ... GET A(0)(I)                                                       
C                                                                       
      DO 20 I=1,IDIM                                                    
         IDX=IDX+1                                                      
         IF (IDX.LT.1.OR.IDX.GT.NMK) GO TO 10                           
         ADIFF(I,1)=A(IDX)                                              
         GO TO 20                                                       
 10      ADIFF(I,1)=0.0E0                                               
 20      CONTINUE                                                       
C                                                                       
C ... GET ADIFF(I,J)                                                    
C                                                                       
      IDERIV=0                                                          
      J=1                                                               
 30      JM=J                                                           
         IF (IDERIV.EQ.ID(J)) J=J+1                                     
         IF (J.GT.NID) GO TO 60                                         
         IDERIV=IDERIV+1                                                
         IDIMD=IDIM-IDERIV                                              
         KMD=K-IDERIV                                                   
         FKMD=FLOAT(KMD)                                                
         IPDMK=ILO-KMD                                                  
         DO 40 I=1,IDIMD                                                
            IDX1=MIN0(ILO+I,N)                                          
            IDX2=MAX0(IPDMK+I,1)                                        
            DIFF=T(IDX1)-T(IDX2)                                        
C                                                                       
            IF (DIFF.LT.0.0E0) GO TO 50                                 
C                                                                       
            IF (DIFF.GT.0.0E0)                                          
     1          ADIFF(I,J)=FKMD*(ADIFF(I+1,JM)-ADIFF(I,JM))/DIFF        
 40         CONTINUE                                                    
         GO TO 30                                                       
C                                                                       
 50   A3PLND=.FALSE.                                                    
C                                                                       
 60   RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DSPLN1(K,T,N,A,                                        
     1                  X,NX,                                           
     2                  ID,NID,                                         
     3                  FX)                                             
C                                                                       
C  TO EVALUATE THE B-SPLINE AND ITS DERIVATIVES                         
C                                                                       
C            FX(IX,J)=F(ID(J))(X(IX))                                   
C                                                                       
C  FOR IX=1,...,NX AND J=1,...,NID, WHERE                               
C                                                                       
C        F(X)=SUM(I=1,...,N-K)(A(I)*B(I)(X)).                           
C                                                                       
C  IF MANY SMALL NX CALLS TO DSPLN1 ARE ANTICIPATED, IT WOULD BE CHEAPER
C  TO USE DSPLN2, SINCE DSPLN2 SAVES INTERMEDIATE RESULTS               
C  FROM ONE CALL TO THE NEXT.                                           
C                                                                       
C  INPUT                                                                
C                                                                       
C    K   - THE ORDER OF THE B-SPLINES TO BE USED.                       
C          2.LE.K IS ASSUMED.                                           
C    T   - THE B-SPLINE MESH.                                           
C    N   - THE NUMBER OF POINTS IN THE MESH T.                          
C    A   - THE B-SPLINE COEFFICIENTS, N-K OF THEM.                      
C    X   - POINTS OF EVALUATION FOR THE B-SPLINE.                       
C          X MONOTONE INCREASING WOULD HELP, BUT IT IS NOT NECESSARY.   
C    NX  - THE NUMBER OF POINTS IN X.                                   
C    ID  - DERIVATIVES OF THE B-SPLINE DESIRED.                         
C          0.LE.ID(1).LT.ID(2).LT. ... .LT.ID(NID).LT.K IS ASSUMED.     
C    NID - THE NUMBER OF DERIVATIVES DESIRED, THE LENGTH OF ID.         
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    FX - THE VALUES OF F AND ITS DERIVATIVES.                          
C                                                                       
C  SCRATCH SPACE ALLOCATED - 3*K*(NID+1) DOUBLE PRECISION WORDS.        
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - K.LT.2.                                                        
C    2 - N.LE.K.                                                        
C    3 - NX.LT.1.                                                       
C    4 - NID.LT.1.                                                      
C    5 - ID(1).LT.0.                                                    
C    6 - ID IS NOT STRICTLY INCREASING.                                 
C    7 - ID(NID).GE.K.                                                  
C    8 - T IS NOT MONOTONE INCREASING.                                  
C                                                                       
      DOUBLE PRECISION T(N),A(1),X(NX),FX(NX,NID)                       
C     DOUBLE PRECISION A(N-K)                                           
      INTEGER ID(NID)                                                   
C                                                                       
      LOGICAL D3PLNE                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      DOUBLE PRECISION WS(1)                                            
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2)                                                       
C    1   CALL SETERR(15HDSPLN1 - K.LT.2,15,1,2)                         
C     IF (N.LE.K)                                                       
C    1   CALL SETERR(15HDSPLN1 - N.LE.K,15,2,2)                         
C     IF (NX.LT.1)                                                      
C    1   CALL SETERR(16HDSPLN1 - NX.LT.1,16,3,2)                        
C     IF (NID.LT.1)                                                     
C    1   CALL SETERR(17HDSPLN1 - NID.LT.1,17,4,2)                       
C     IF (ID(1).LT.0)                                                   
C    1   CALL SETERR(19HDSPLN1 - ID(1).LT.0,19,5,2)                     
C/7S                                                                    
      IF (K.LT.2)                                                       
     1   CALL SETERR('DSPLN1 - K.LT.2',15,1,2)                          
      IF (N.LE.K)                                                       
     1   CALL SETERR('DSPLN1 - N.LE.K',15,2,2)                          
      IF (NX.LT.1)                                                      
     1   CALL SETERR('DSPLN1 - NX.LT.1',16,3,2)                         
      IF (NID.LT.1)                                                     
     1   CALL SETERR('DSPLN1 - NID.LT.1',17,4,2)                        
      IF (ID(1).LT.0)                                                   
     1   CALL SETERR('DSPLN1 - ID(1).LT.0',19,5,2)                      
C/                                                                      
      IF (NID.EQ.1) GO TO 20                                            
      DO 10 I=2,NID                                                     
C/6S                                                                    
C       IF (ID(I-1).GE.ID(I))                                           
C    1    CALL SETERR(38HDSPLN1 - ID IS NOT STRICTLY INCREASING,38,6,2) 
C/7S                                                                    
        IF (ID(I-1).GE.ID(I))                                           
     1    CALL SETERR('DSPLN1 - ID IS NOT STRICTLY INCREASING',38,6,2)  
C/                                                                      
 10     CONTINUE                                                        
C/6S                                                                    
C20   IF (ID(NID).GE.K)                                                 
C    1    CALL SETERR(21HDSPLN1 - ID(NID).GE.K,21,7,2)                  
C/7S                                                                    
 20   IF (ID(NID).GE.K)                                                 
     1    CALL SETERR('DSPLN1 - ID(NID).GE.K',21,7,2)                   
C/                                                                      
C                                                                       
C ... ALLOCATE SCRATCH SPACE.                                           
C                                                                       
      IADIFF=ISTKGT(3*K*(NID+1),4)                                      
C                                                                       
      ILEFT=(N+1)/2                                                     
      ILO=0                                                             
C/6S                                                                    
C     IF (.NOT.D3PLNE(K,T,N,A,X,NX,ID,NID,FX,3*K,WS(IADIFF),ILO,ILEFT,  
C    1                IADIFF+3*K*NID))                                  
C    2  CALL SETERR(37HDSPLN1 - T IS NOT MONOTONE INCREASING,37,8,2)    
C/7S                                                                    
      IF (.NOT.D3PLNE(K,T,N,A,X,NX,ID,NID,FX,3*K,WS(IADIFF),ILO,ILEFT,  
     1                IADIFF+3*K*NID))                                  
     2  CALL SETERR('DSPLN1 - T IS NOT MONOTONE INCREASING',37,8,2)     
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DSPLN2(K,T,N,A,                                        
     1                  X,NX,                                           
     2                  ID,NID,                                         
     3                  FX,                                             
     4                  IDIM,ADIFF,ILO,ILEFT)                           
C                                                                       
C  TO EVALUATE THE B-SPLINE AND ITS DERIVATIVES                         
C                                                                       
C        FX(I,J) = F(ID(J))(X(I))                                       
C                                                                       
C  FOR I=1,...,NX AND J=1,...,NID WHERE                                 
C                                                                       
C      F(X) = SUM(I=1,...,N-K)(A(I)*B(I)(X)).                           
C                                                                       
C  INPUT                                                                
C                                                                       
C    K     - THE ORDER OF THE B-SPLINES TO BE USED.                     
C            2.LE.K IS ASSUMED.                                         
C    T     - THE B-SPLINE MESH.                                         
C    N     - THE NUMBER OF POINTS IN THE MESH T.                        
C    A     - THE B-SPLINE COEFFICIENTS, N-K OF THEM.                    
C    X     - POINTS OF EVALUATION FOR THE B-SPLINE.                     
C            X MONOTONE INCREASING WOULD HELP, BUT IT IS NOT NECESSARY. 
C    NX    - THE NUMBER OF POINTS IN X.                                 
C    ID    - DERIVATIVES OF THE B-SPLINE DESIRED.                       
C            0.LE.ID(1).LT.ID(2).LT. ... .LT.ID(NID).LT.K IS ASSUMED.   
C    NID   - THE NUMBER OF DERIVATIVES DESIRED, THE LENGTH OF ID.       
C    IDIM  - K.LE.IDIM IS ASSUMED. THE LARGER IDIM IS, THE FASTER DSPLN2
C            RUNS, SO LONG AS X IS MONOTONE INCREASING.                 
C            IDIM NEED NOT BE LARGER THAN N+K-2.                        
C    ADIFF - A DOUBLE PRECISION SCRATCH ARRAY OF LENGTH IDIM*NID.       
C    ILO   - IF ILO.LE.0 THEN COMPUTATION STARTS FROM SCRATCH.          
C            IF ILO.GT.0 THEN THE VALUES OF K,T,N,A,ID,NID,IDIM,ILO AND 
C            ADIFF ARE ASSUMED TO BE UNCHANGED FROM THE LAST CALL.      
C    ILEFT - T(ILEFT).LE.X(1).LT.T(ILEFT+1) WOULD HELP, BUT IT IS NOT   
C            NECESSARY.                                                 
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    FX     - THE VALUES OF F AND ITS DERIVATIVES.                      
C    ADIFF  - SCRATCH VALUES ALTERED.                                   
C    ILO    - SCRATCH VALUE ALTERED.                                    
C    ILEFT  - THE INTERVAL INDICATOR FOR X(NX).                         
C                                                                       
C  SCRATCH SPACE ALLOCATED - 3*K DOUBLE PRECISION WORDS.                
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - K.LT.2.                                                        
C    2 - N.LE.K.                                                        
C    3 - NX.LT.1.                                                       
C    4 - NID.LT.1.                                                      
C    5 - ID(1).LT.0.                                                    
C    6 - ID IS NOT STRICTLY INCREASING.                                 
C    7 - ID(NID).GE.K.                                                  
C    8 - IDIM.LT.K.                                                     
C    9 - T IS NOT MONOTONE INCREASING.                                  
C                                                                       
      DOUBLE PRECISION T(N),A(1),X(NX),FX(NX,NID),ADIFF(IDIM,NID)       
C     DOUBLE PRECISION A(N-K)                                           
      INTEGER ID(NID)                                                   
C                                                                       
      LOGICAL D3PLNE                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      DOUBLE PRECISION WS(1)                                            
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2)                                                       
C    1   CALL SETERR(15HDSPLN2 - K.LT.2,15,1,2)                         
C     IF (N.LE.K)                                                       
C    1   CALL SETERR(15HDSPLN2 - N.LE.K,15,2,2)                         
C     IF (NX.LT.1)                                                      
C    1   CALL SETERR(16HDSPLN2 - NX.LT.1,16,3,2)                        
C     IF (NID.LT.1)                                                     
C    1   CALL SETERR(17HDSPLN2 - NID.LT.1,17,4,2)                       
C     IF (ID(1).LT.0)                                                   
C    1   CALL SETERR(19HDSPLN2 - ID(1).LT.0,19,5,2)                     
C/7S                                                                    
      IF (K.LT.2)                                                       
     1   CALL SETERR('DSPLN2 - K.LT.2',15,1,2)                          
      IF (N.LE.K)                                                       
     1   CALL SETERR('DSPLN2 - N.LE.K',15,2,2)                          
      IF (NX.LT.1)                                                      
     1   CALL SETERR('DSPLN2 - NX.LT.1',16,3,2)                         
      IF (NID.LT.1)                                                     
     1   CALL SETERR('DSPLN2 - NID.LT.1',17,4,2)                        
      IF (ID(1).LT.0)                                                   
     1   CALL SETERR('DSPLN2 - ID(1).LT.0',19,5,2)                      
C/                                                                      
      IF (NID.EQ.1) GO TO 20                                            
      DO 10 I=2,NID                                                     
C/6S                                                                    
C       IF (ID(I-1).GE.ID(I))                                           
C    1    CALL SETERR(38HDSPLN2 - ID IS NOT STRICTLY INCREASING,38,6,2) 
C/7S                                                                    
        IF (ID(I-1).GE.ID(I))                                           
     1    CALL SETERR('DSPLN2 - ID IS NOT STRICTLY INCREASING',38,6,2)  
C/                                                                      
 10     CONTINUE                                                        
C/6S                                                                    
C20   IF (ID(NID).GE.K)                                                 
C    1    CALL SETERR(21HDSPLN2 - ID(NID).GE.K,21,7,2)                  
C     IF (IDIM.LT.K)                                                    
C    1   CALL SETERR(18HDSPLN2 - IDIM.LT.K,18,8,2)                      
C/7S                                                                    
 20   IF (ID(NID).GE.K)                                                 
     1    CALL SETERR('DSPLN2 - ID(NID).GE.K',21,7,2)                   
      IF (IDIM.LT.K)                                                    
     1   CALL SETERR('DSPLN2 - IDIM.LT.K',18,8,2)                       
C/                                                                      
C                                                                       
C ... ALLOCATE SCRATCH SPACE.                                           
C                                                                       
      IDM=ISTKGT(3*K,4)                                                 
C                                                                       
C/6S                                                                    
C     IF (.NOT.D3PLNE(K,T,N,A,X,NX,ID,NID,FX,IDIM,ADIFF,ILO,ILEFT,IDM)) 
C    1   CALL SETERR(37HDSPLN2 - T IS NOT MONOTONE INCREASING,37,9,2)   
C/7S                                                                    
      IF (.NOT.D3PLNE(K,T,N,A,X,NX,ID,NID,FX,IDIM,ADIFF,ILO,ILEFT,IDM)) 
     1   CALL SETERR('DSPLN2 - T IS NOT MONOTONE INCREASING',37,9,2)    
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DSPLND(K,T,N,A,                                        
     1                  X,NX,                                           
     2                  MD,                                             
     3                  FX)                                             
C                                                                       
C  TO EVALUATE THE B-SPLINE AND ITS DERIVATIVES                         
C                                                                       
C            FX(IX,J)=F(J-1)(X(IX))                                     
C                                                                       
C  FOR IX=1,...,NX AND J=1,...,MD, WHERE                                
C                                                                       
C        F(X)=SUM(I=1,...,N-K)(A(I)*B(I)(X)).                           
C                                                                       
C  IF MANY SMALL NX CALLS TO DSPLND ARE ANTICIPATED, IT WOULD BE CHEAPER
C  TO USE DSPLN2, SINCE DSPLN2 SAVES INTERMEDIATE RESULTS               
C  FROM ONE CALL TO THE NEXT.                                           
C                                                                       
C  INPUT                                                                
C                                                                       
C    K      - THE ORDER OF THE B-SPLINES TO BE USED.                    
C             2.LE.K IS ASSUMED.                                        
C    T      - THE B-SPLINE MESH.                                        
C    N      - THE NUMBER OF POINTS IN THE MESH T.                       
C    A      - THE B-SPLINE COEFFICIENTS, N-K OF THEM.                   
C    X      - POINTS OF EVALUATION FOR THE B-SPLINE.                    
C             X MONOTONE INCREASING WOULD HELP, BUT IT IS NOT NECESSARY.
C    NX     - THE NUMBER OF POINTS IN X.                                
C    MD     - DERIVATIVES 0 , ... , MD-1 ARE DESIRED.                   
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    FX - THE VALUES OF F AND ITS DERIVATIVES.                          
C                                                                       
C  SCRATCH SPACE ALLOCATED - 3*K*(MD+1) DOUBLE PRECISION WORDS +        
C                            MD INTEGER WORDS.                          
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - K.LT.2.                                                        
C    2 - N.LE.K.                                                        
C    3 - NX.LT.1.                                                       
C    4 - MD.LT.1.                                                       
C    5 - MD.GT.K.                                                       
C    6 - T IS NOT MONOTONE INCREASING.                                  
C                                                                       
      DOUBLE PRECISION T(N),A(1),X(NX),FX(NX,MD)                        
C     DOUBLE PRECISION A(N-K).                                          
C                                                                       
      LOGICAL D3PLNE                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      DOUBLE PRECISION WS(1)                                            
      INTEGER IS(1000)                                                  
      EQUIVALENCE (DS(1),WS(1),IS(1))                                   
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2)                                                       
C    1   CALL SETERR(15HDSPLND - K.LT.2,15,1,2)                         
C     IF (N.LE.K)                                                       
C    1   CALL SETERR(15HDSPLND - N.LE.K,15,2,2)                         
C     IF (NX.LT.1)                                                      
C    1   CALL SETERR(16HDSPLND - NX.LT.1,16,3,2)                        
C     IF (MD.LT.1)                                                      
C    1   CALL SETERR(16HDSPLND - MD.LT.1,16,4,2)                        
C     IF (MD.GT.K)                                                      
C    1   CALL SETERR(16HDSPLND - MD.GT.K,16,5,2)                        
C/7S                                                                    
      IF (K.LT.2)                                                       
     1   CALL SETERR('DSPLND - K.LT.2',15,1,2)                          
      IF (N.LE.K)                                                       
     1   CALL SETERR('DSPLND - N.LE.K',15,2,2)                          
      IF (NX.LT.1)                                                      
     1   CALL SETERR('DSPLND - NX.LT.1',16,3,2)                         
      IF (MD.LT.1)                                                      
     1   CALL SETERR('DSPLND - MD.LT.1',16,4,2)                         
      IF (MD.GT.K)                                                      
     1   CALL SETERR('DSPLND - MD.GT.K',16,5,2)                         
C/                                                                      
C                                                                       
C ... ALLOCATE SCRATCH SPACE.                                           
C                                                                       
      IADIFF=ISTKGT(3*K*(MD+1),4)                                       
      IID=ISTKGT(MD,2)                                                  
C                                                                       
      DO 10 I=1,MD                                                      
        IDX=IID+I-1                                                     
 10     IS(IDX)=I-1                                                     
C                                                                       
      ILEFT=(N+1)/2                                                     
      ILO=0                                                             
C/6S                                                                    
C     IF (.NOT.D3PLNE(K,T,N,A,X,NX,IS(IID),MD,FX,                       
C    1                3*K,WS(IADIFF),ILO,ILEFT,IADIFF+3*K*MD))          
C    2  CALL SETERR(37HDSPLND - T IS NOT MONOTONE INCREASING,37,6,2)    
C/7S                                                                    
      IF (.NOT.D3PLNE(K,T,N,A,X,NX,IS(IID),MD,FX,                       
     1                3*K,WS(IADIFF),ILO,ILEFT,IADIFF+3*K*MD))          
     2  CALL SETERR('DSPLND - T IS NOT MONOTONE INCREASING',37,6,2)     
C/                                                                      
C                                                                       
      CALL ISTKRL(2)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DSPLNE(K,T,N,A,                                        
     1                  X,NX,                                           
     2                  FX)                                             
C                                                                       
C  TO EVALUATE THE B-SPLINE                                             
C                                                                       
C            FX(IX)=F(X(IX))                                            
C                                                                       
C  FOR IX=1,...,NX, WHERE                                               
C                                                                       
C        F(X)=SUM(I=1,...,N-K)(A(I)*B(I)(X)).                           
C                                                                       
C  IF MANY SMALL NX CALLS TO DSPLNE ARE ANTICIPATED, IT WOULD BE CHEAPER
C  TO USE DSPLN2, SINCE DSPLN2 SAVES INTERMEDIATE RESULTS               
C  FROM ONE CALL TO THE NEXT.                                           
C                                                                       
C  INPUT                                                                
C                                                                       
C    K   - THE ORDER OF THE B-SPLINES TO BE USED.                       
C          2.LE.K IS ASSUMED.                                           
C    T   - THE B-SPLINE MESH.                                           
C    N   - THE NUMBER OF POINTS IN THE MESH T.                          
C    A   - THE B-SPLINE COEFFICIENTS, N-K OF THEM.                      
C    X   - POINTS OF EVALUATION FOR THE B-SPLINE.                       
C          X MONOTONE INCREASING WOULD HELP, BUT IT IS NOT NECESSARY.   
C    NX  - THE NUMBER OF POINTS IN X.                                   
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    FX - THE VALUES OF F.                                              
C                                                                       
C  SCRATCH SPACE ALLOCATED - 6*K DOUBLE PRECISION WORDS.                
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - K.LT.2.                                                        
C    2 - N.LE.K.                                                        
C    3 - NX.LT.1.                                                       
C    4 - T IS NOT MONOTONE INCREASING.                                  
C                                                                       
      DOUBLE PRECISION T(N),A(1),X(NX),FX(NX)                           
C     DOUBLE PRECISION A(N-K)                                           
C                                                                       
      INTEGER ID(1)                                                     
      LOGICAL D3PLNE                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      DOUBLE PRECISION WS(1)                                            
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
      DATA ID(1) /0/                                                    
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2)                                                       
C    1   CALL SETERR(15HDSPLNE - K.LT.2,15,1,2)                         
C     IF (N.LE.K)                                                       
C    1   CALL SETERR(15HDSPLNE - N.LE.K,15,2,2)                         
C     IF (NX.LT.1)                                                      
C    1   CALL SETERR(16HDSPLNE - NX.LT.1,16,3,2)                        
C/7S                                                                    
      IF (K.LT.2)                                                       
     1   CALL SETERR('DSPLNE - K.LT.2',15,1,2)                          
      IF (N.LE.K)                                                       
     1   CALL SETERR('DSPLNE - N.LE.K',15,2,2)                          
      IF (NX.LT.1)                                                      
     1   CALL SETERR('DSPLNE - NX.LT.1',16,3,2)                         
C/                                                                      
C                                                                       
C ... ALLOCATE SCRATCH SPACE.                                           
C                                                                       
      IADIFF=ISTKGT(6*K,4)                                              
C                                                                       
      ILEFT=(N+1)/2                                                     
      ILO=0                                                             
C/6S                                                                    
C     IF (.NOT.D3PLNE(K,T,N,A,X,NX,ID,1,FX,3*K,WS(IADIFF),ILO,ILEFT,    
C    1                IADIFF+3*K))                                      
C    2  CALL SETERR(37HDSPLNE - T IS NOT MONOTONE INCREASING,37,4,2)    
C/7S                                                                    
      IF (.NOT.D3PLNE(K,T,N,A,X,NX,ID,1,FX,3*K,WS(IADIFF),ILO,ILEFT,    
     1                IADIFF+3*K))                                      
     2  CALL SETERR('DSPLNE - T IS NOT MONOTONE INCREASING',37,4,2)     
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DBSPL1(K,T,N,                                          
     1                  X,NX,ILEFT,                                     
     2                  ID,NID,                                         
     3                  BX)                                             
C                                                                       
C  TO OBTAIN ALL NON-ZERO BASIS SPLINES AND THEIR DERIVATIVES,          
C                                                                       
C           BX(IX,I,J) = B(ILEFT+I-K) SUP (ID(J)) (X(IX))               
C                                                                       
C  FOR IX=1,...,NX, I=1,...,K AND J=1,...,NID.                          
C                                                                       
C  INPUT                                                                
C                                                                       
C    K     - THE ORDER OF THE B-SPLINES TO BE USED.                     
C            2.LE.K IS ASSUMED.                                         
C    T     - THE B-SPLINE MESH.                                         
C    N     - THE NUMBER OF POINTS IN THE MESH T.                        
C    X     - POINTS OF EVALUATION FOR THE B-SPLINE.                     
C    NX    - THE NUMBER OF POINTS IN X.                                 
C    ILEFT - ALL POINTS X(IX) ARE ASSUMED TO LIE IN THE SAME INTERVAL   
C            (T(ILEFT),T(ILEFT+1)).                                     
C    ID    - DERIVATIVES OF THE B-SPLINE DESIRED.                       
C            0.LE.ID(1).LT.ID(2).LT. ... .LT.ID(NID).LT.K IS ASSUMED.   
C    NID   - THE NUMBER OF DERIVATIVES DESIRED, THE LENGTH OF ID.       
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    BX - THE BASIS SPLINES AND THEIR DERIVATIVES.                      
C                                                                       
C  SCRATCH SPACE ALLOCATED -                                            
C                                                                       
C        MAX(3*K,K*(MIN((K+1)/2,ID(NID)+1)+1))                          
C                                                                       
C  DOUBLE PRECISION WORDS.                                              
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C     1 - K.LT.2.                                                       
C     2 - N.LE.K.                                                       
C     3 - NX.LT.1.                                                      
C     4 - ILEFT.LT.1.                                                   
C     5 - ILEFT.GE.N.                                                   
C     6 - T(ILEFT)=T(ILEFT+1).                                          
C     7 - NID.LT.1.                                                     
C     8 - ID(1).LT.0.                                                   
C     9 - ID IS NOT MONOTONE INCREASING.                                
C    10 - ID(NID).GE.K.                                                 
C    11 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL.                     
C    12 - T IS NOT MONOTONE INCREASING.                                 
C                                                                       
      DOUBLE PRECISION T(N),X(NX),BX(NX,K,NID)                          
      INTEGER ID(NID)                                                   
C                                                                       
      LOGICAL D3PLN8                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      DOUBLE PRECISION WS(1)                                            
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2) CALL SETERR(15HDBSPL1 - K.LT.2,15,1,2)                
C     IF (N.LE.K) CALL SETERR(15HDBSPL1 - N.LE.K,15,2,2)                
C     IF (NX.LT.1) CALL SETERR(16HDBSPL1 - NX.LT.1,16,3,2)              
C     IF (ILEFT.LT.1) CALL SETERR(19HDBSPL1 - ILEFT.LT.1,19,4,2)        
C     IF (ILEFT.GE.N) CALL SETERR(19HDBSPL1 - ILEFT.GE.N,19,5,2)        
C     IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
C    1  (28HDBSPL1 - T(ILEFT)=T(ILEFT+1),28,6,2)                        
C     IF (NID.LT.1) CALL SETERR(17HDBSPL1 - NID.LT.1,17,7,2)            
C     IF (ID(1).LT.0) CALL SETERR(19HDBSPL1 - ID(1).LT.0,19,8,2)        
C/7S                                                                    
      IF (K.LT.2) CALL SETERR('DBSPL1 - K.LT.2',15,1,2)                 
      IF (N.LE.K) CALL SETERR('DBSPL1 - N.LE.K',15,2,2)                 
      IF (NX.LT.1) CALL SETERR('DBSPL1 - NX.LT.1',16,3,2)               
      IF (ILEFT.LT.1) CALL SETERR('DBSPL1 - ILEFT.LT.1',19,4,2)         
      IF (ILEFT.GE.N) CALL SETERR('DBSPL1 - ILEFT.GE.N',19,5,2)         
      IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
     1  ('DBSPL1 - T(ILEFT)=T(ILEFT+1)',28,6,2)                         
      IF (NID.LT.1) CALL SETERR('DBSPL1 - NID.LT.1',17,7,2)             
      IF (ID(1).LT.0) CALL SETERR('DBSPL1 - ID(1).LT.0',19,8,2)         
C/                                                                      
      IF (NID.EQ.1) GO TO 20                                            
      DO 10 I=2,NID                                                     
C/6S                                                                    
C        IF (ID(I-1).GE.ID(I)) CALL SETERR                              
C    1       (38HDBSPL1 - ID IS NOT MONOTONE INCREASING,38,9,2)         
C/7S                                                                    
         IF (ID(I-1).GE.ID(I)) CALL SETERR                              
     1       ('DBSPL1 - ID IS NOT MONOTONE INCREASING',38,9,2)          
C/                                                                      
 10      CONTINUE                                                       
C/6S                                                                    
C20   IF (ID(NID).GE.K) CALL SETERR(21HDBSPL1 - ID(NID).GE.K,21,10,2)   
C/7S                                                                    
 20   IF (ID(NID).GE.K) CALL SETERR('DBSPL1 - ID(NID).GE.K',21,10,2)    
C/                                                                      
C                                                                       
      DO 30 IX=1,NX                                                     
C/6S                                                                    
C       IF (T(ILEFT).GT.X(IX).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR       
C    1    (49HDBSPL1 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL,49,11,2)
C       IF (X(IX).EQ.T(ILEFT+1).AND.T(ILEFT+1).LT.T(N)) CALL SETERR     
C    1    (49HDBSPL1 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL,49,11,2)
C/7S                                                                    
        IF (T(ILEFT).GT.X(IX).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR       
     1    ('DBSPL1 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL',49,11,2) 
        IF (X(IX).EQ.T(ILEFT+1).AND.T(ILEFT+1).LT.T(N)) CALL SETERR     
     1    ('DBSPL1 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL',49,11,2) 
C/                                                                      
 30     CONTINUE                                                        
C                                                                       
C ... ALLOCATE SCRATCH SPACE.                                           
C                                                                       
      IFA=ISTKGT(MAX0(3*K,K*(MIN0((K+1)/2,ID(NID)+1)+1)),4)             
C                                                                       
C/6S                                                                    
C     IF (.NOT.D3PLN8(K,T,N,X,NX,ILEFT,ID,NID,BX,IFA))                  
C    1  CALL SETERR(37HDBSPL1 - T IS NOT MONOTONE INCREASING,37,12,2)   
C/7S                                                                    
      IF (.NOT.D3PLN8(K,T,N,X,NX,ILEFT,ID,NID,BX,IFA))                  
     1  CALL SETERR('DBSPL1 - T IS NOT MONOTONE INCREASING',37,12,2)    
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DBSPLD(K,T,N,                                          
     1                  X,NX,ILEFT,                                     
     2                  MD,                                             
     3                  BX)                                             
C                                                                       
C  TO OBTAIN ALL NON-ZERO BASIS SPLINES AND THEIR DERIVATIVES,          
C                                                                       
C           BX(IX,I,J) = B(ILEFT+I-K) SUP (J-1) (X(IX)).                
C                                                                       
C  FOR IX=1,...,NX, I=1,...,K AND J=1,...,MD.                           
C                                                                       
C  INPUT                                                                
C                                                                       
C    K      - THE ORDER OF THE B-SPLINES TO BE USED.                    
C             2.LE.K IS ASSUMED.                                        
C    T      - THE B-SPLINE MESH.                                        
C    N      - THE NUMBER OF POINTS IN THE MESH T.                       
C    X      - POINTS OF EVALUATION FOR THE B-SPLINE.                    
C    NX     - THE NUMBER OF POINTS IN X.                                
C    ILEFT  - ALL POINTS X(IX) ARE ASSUMED TO LIE IN THE SAME INTERVAL  
C             (T(ILEFT),T(ILEFT+1)).                                    
C    MD     - DERIVATIVES 0 , ... , MD-1 ARE DESIRED.                   
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    BX - THE BASIS SPLINES AND THEIR DERIVATIVES.                      
C                                                                       
C  SCRATCH SPACE ALLOCATED -                                            
C                                                                       
C        MAX(3*K,K*(MIN((K+1)/2,MD)+1))                                 
C                                                                       
C  DOUBLE PRECISION WORDS + MD INTEGER WORDS.                           
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C     1 - K.LT.2.                                                       
C     2 - N.LE.K.                                                       
C     3 - NX.LT.1.                                                      
C     4 - ILEFT.LT.1.                                                   
C     5 - ILEFT.GE.N.                                                   
C     6 - T(ILEFT)=T(ILEFT+1).                                          
C     7 - MD.LT.1.                                                      
C     8 - MD.GT.K.                                                      
C     9 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL.                     
C    10 - T IS NOT MONOTONE INCREASING.                                 
C                                                                       
      DOUBLE PRECISION T(N),X(NX),BX(NX,K,MD)                           
C                                                                       
      LOGICAL D3PLN8                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      DOUBLE PRECISION WS(1)                                            
      INTEGER IS(1000)                                                  
      EQUIVALENCE (DS(1),WS(1),IS(1))                                   
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2) CALL SETERR(15HDBSPLD - K.LT.2,15,1,2)                
C     IF (N.LE.K) CALL SETERR(15HDBSPLD - N.LE.K,15,2,2)                
C     IF (NX.LT.1) CALL SETERR(16HDBSPLD - NX.LT.1,16,3,2)              
C     IF (ILEFT.LT.1) CALL SETERR(19HDBSPLD - ILEFT.LT.1,19,4,2)        
C     IF (ILEFT.GE.N) CALL SETERR(19HDBSPLD - ILEFT.GE.N,19,5,2)        
C     IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
C    1  (28HDBSPLD - T(ILEFT)=T(ILEFT+1),28,6,2)                        
C     IF (MD.LT.1)                                                      
C    1   CALL SETERR(16HDBSPLD - MD.LT.1,16,7,2)                        
C     IF (MD.GT.K)                                                      
C    1   CALL SETERR(16HDBSPLD - MD.GT.K,16,8,2)                        
C/7S                                                                    
      IF (K.LT.2) CALL SETERR('DBSPLD - K.LT.2',15,1,2)                 
      IF (N.LE.K) CALL SETERR('DBSPLD - N.LE.K',15,2,2)                 
      IF (NX.LT.1) CALL SETERR('DBSPLD - NX.LT.1',16,3,2)               
      IF (ILEFT.LT.1) CALL SETERR('DBSPLD - ILEFT.LT.1',19,4,2)         
      IF (ILEFT.GE.N) CALL SETERR('DBSPLD - ILEFT.GE.N',19,5,2)         
      IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
     1  ('DBSPLD - T(ILEFT)=T(ILEFT+1)',28,6,2)                         
      IF (MD.LT.1)                                                      
     1   CALL SETERR('DBSPLD - MD.LT.1',16,7,2)                         
      IF (MD.GT.K)                                                      
     1   CALL SETERR('DBSPLD - MD.GT.K',16,8,2)                         
C/                                                                      
C                                                                       
C ... ALLOCATE SCRATCH SPACE.                                           
C                                                                       
      IFA=ISTKGT(MAX0(3*K,K*(MIN0((K+1)/2,MD)+1)),4)                    
C                                                                       
      IID=ISTKGT(MD,2)                                                  
      DO 10 I=1,MD                                                      
        IDX=IID+I-1                                                     
 10     IS(IDX)=I-1                                                     
C                                                                       
      DO 20 IX=1,NX                                                     
C/6S                                                                    
C       IF (T(ILEFT).GT.X(IX).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR       
C    1    (49HDBSPLD - ALL X ARE NOT IN THE SAME ILEFT INTERVAL,49,9,2) 
C       IF (X(IX).EQ.T(ILEFT+1).AND.T(ILEFT+1).LT.T(N)) CALL SETERR     
C    1    (49HDBSPLD - ALL X ARE NOT IN THE SAME ILEFT INTERVAL,49,9,2) 
C/7S                                                                    
        IF (T(ILEFT).GT.X(IX).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR       
     1    ('DBSPLD - ALL X ARE NOT IN THE SAME ILEFT INTERVAL',49,9,2)  
        IF (X(IX).EQ.T(ILEFT+1).AND.T(ILEFT+1).LT.T(N)) CALL SETERR     
     1    ('DBSPLD - ALL X ARE NOT IN THE SAME ILEFT INTERVAL',49,9,2)  
C/                                                                      
 20     CONTINUE                                                        
C                                                                       
C/6S                                                                    
C     IF (.NOT.D3PLN8(K,T,N,X,NX,ILEFT,IS(IID),MD,BX,IFA))              
C    1  CALL SETERR(37HDBSPLD - T IS NOT MONOTONE INCREASING,37,10,2)   
C/7S                                                                    
      IF (.NOT.D3PLN8(K,T,N,X,NX,ILEFT,IS(IID),MD,BX,IFA))              
     1  CALL SETERR('DBSPLD - T IS NOT MONOTONE INCREASING',37,10,2)    
C/                                                                      
C                                                                       
      CALL ISTKRL(2)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DBSPLI(K,T,N,                                          
     1                  X,NX,ILEFT,                                     
     2                  BIX)                                            
C                                                                       
C  TO OBTAIN THE INTEGRAL OF ALL NON-ZERO BASIS SPLINES,                
C                                                                       
C           BIX(IX,I) =                                                 
C           INTEGRAL ( T(1) TO X(IX) ) B(ILEFT+I-K) (ZETA) DZETA        
C                                                                       
C  FOR IX=1,...,NX, AND I=1,...,K.                                      
C                                                                       
C  INPUT                                                                
C                                                                       
C    K      - THE ORDER OF THE B-SPLINES TO BE USED.                    
C             2.LE.K IS ASSUMED.                                        
C    T      - THE B-SPLINE MESH.                                        
C    N      - THE NUMBER OF POINTS IN THE MESH T.                       
C    X      - POINTS OF EVALUATION FOR THE INTEGRALS OF THE B-SPLINES.  
C    NX     - THE NUMBER OF POINTS IN X.                                
C    ILEFT  - MUST HAVE T(ILEFT).LT.T(ILEFT+1) AND                      
C             T(ILEFT) .LE. X(IX) .LE. T(ILEFT+1), IX=1,...,NX.         
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    BIX - THE INTEGRALS OF THE BASIS SPLINES.                          
C                                                                       
C  SCRATCH SPACE ALLOCATED - 3*K DOUBLE PRECISION WORDS.                
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C     1 - K.LT.2.                                                       
C     2 - N.LE.K.                                                       
C     3 - NX.LT.1.                                                      
C     4 - ILEFT.LT.1.                                                   
C     5 - ILEFT.GE.N.                                                   
C     6 - T(ILEFT)=T(ILEFT+1).                                          
C     7 - X(IX) NOT IN (T(ILEFT),T(ILEFT+1)).                           
C     8 - T IS NOT MONOTONE INCREASING.                                 
C                                                                       
      DOUBLE PRECISION T(N),X(NX),BIX(NX,K)                             
C                                                                       
      LOGICAL D3PLNI                                                    
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      DOUBLE PRECISION WS(1)                                            
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2) CALL SETERR(15HDBSPLI - K.LT.2,15,1,2)                
C     IF (N.LE.K) CALL SETERR(15HDBSPLI - N.LE.K,15,2,2)                
C     IF (NX.LT.1) CALL SETERR(16HDBSPLI - NX.LT.1,16,3,2)              
C     IF (ILEFT.LT.1) CALL SETERR(19HDBSPLI - ILEFT.LT.1,19,4,2)        
C     IF (ILEFT.GE.N) CALL SETERR(19HDBSPLI - ILEFT.GE.N,19,5,2)        
C     IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
C    1  (28HDBSPLI - T(ILEFT)=T(ILEFT+1),28,6,2)                        
C/7S                                                                    
      IF (K.LT.2) CALL SETERR('DBSPLI - K.LT.2',15,1,2)                 
      IF (N.LE.K) CALL SETERR('DBSPLI - N.LE.K',15,2,2)                 
      IF (NX.LT.1) CALL SETERR('DBSPLI - NX.LT.1',16,3,2)               
      IF (ILEFT.LT.1) CALL SETERR('DBSPLI - ILEFT.LT.1',19,4,2)         
      IF (ILEFT.GE.N) CALL SETERR('DBSPLI - ILEFT.GE.N',19,5,2)         
      IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
     1  ('DBSPLI - T(ILEFT)=T(ILEFT+1)',28,6,2)                         
C/                                                                      
C                                                                       
      DO 10 IX=1,NX                                                     
C/6S                                                                    
C        IF (X(IX).LT.T(ILEFT).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR      
C    1      (42HDSPLNI - X(IX) NOT IN T(ILEFT),T(ILEFT+1)),42,7,2)      
C/7S                                                                    
         IF (X(IX).LT.T(ILEFT).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR      
     1      ('DSPLNI - X(IX) NOT IN T(ILEFT),T(ILEFT+1))',42,7,2)       
C/                                                                      
 10      CONTINUE                                                       
C                                                                       
      ICOL=ISTKGT(3*K,4)                                                
      IDM=ICOL+K                                                        
      IDP=IDM+K                                                         
C                                                                       
C/6S                                                                    
C     IF (.NOT.D3PLNI(K,T,N,                                            
C    1                X,NX,ILEFT,                                       
C    2                BIX,                                              
C    3                WS(ICOL),WS(IDM),WS(IDP)))                        
C    4   CALL SETERR                                                    
C    5      (37HDBSPLI - T IS NOT MONOTONE INCREASING,37,8,2)           
C/7S                                                                    
      IF (.NOT.D3PLNI(K,T,N,                                            
     1                X,NX,ILEFT,                                       
     2                BIX,                                              
     3                WS(ICOL),WS(IDM),WS(IDP)))                        
     4   CALL SETERR                                                    
     5      ('DBSPLI - T IS NOT MONOTONE INCREASING',37,8,2)            
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DBSPLN(K,T,N,                                          
     1                  X,NX,ILEFT,                                     
     2                  BX)                                             
C                                                                       
C  TO OBTAIN ALL NON-ZERO BASIS SPLINES,                                
C                                                                       
C           BX(IX,I) = B(ILEFT+I-K) (X(IX))                             
C                                                                       
C  FOR IX=1,...,NX, AND I=1,...,K.                                      
C                                                                       
C  INPUT                                                                
C                                                                       
C    K      - THE ORDER OF THE B-SPLINES TO BE USED.                    
C             2.LE.K IS ASSUMED.                                        
C    T      - THE B-SPLINE MESH.                                        
C    N      - THE NUMBER OF POINTS IN THE MESH T.                       
C    X      - POINTS OF EVALUATION FOR THE B-SPLINE.                    
C    NX     - THE NUMBER OF POINTS IN X.                                
C    ILEFT  - ALL POINTS X(IX) ARE ASSUMED TO LIE IN THE SAME INTERVAL  
C             (T(ILEFT),T(ILEFT+1)).                                    
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    BX - THE BASIS SPLINES.                                            
C                                                                       
C  SCRATCH SPACE ALLOCATED - 3*K DOUBLE PRECISION WORDS.                
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C     1 - K.LT.2.                                                       
C     2 - N.LE.K.                                                       
C     3 - NX.LT.1.                                                      
C     4 - ILEFT.LT.1.                                                   
C     5 - ILEFT.GE.N.                                                   
C     6 - T(ILEFT)=T(ILEFT+1).                                          
C     7 - ALL X ARE NOT IN THE SAME ILEFT INTERVAL.                     
C     8 - T IS NOT MONOTONE INCREASING.                                 
C                                                                       
      DOUBLE PRECISION T(N),X(NX),BX(NX,K)                              
C                                                                       
      INTEGER ID(1)                                                     
      LOGICAL D3PLN8                                                    
C                                                                       
      DATA ID(1) /0/                                                    
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (K.LT.2) CALL SETERR(15HDBSPLN - K.LT.2,15,1,2)                
C     IF (N.LE.K) CALL SETERR(15HDBSPLN - N.LE.K,15,2,2)                
C     IF (NX.LT.1) CALL SETERR(16HDBSPLN - NX.LT.1,16,3,2)              
C     IF (ILEFT.LT.1) CALL SETERR(19HDBSPLN - ILEFT.LT.1,19,4,2)        
C     IF (ILEFT.GE.N) CALL SETERR(19HDBSPLN - ILEFT.GE.N,19,5,2)        
C     IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
C    1  (28HDBSPLN - T(ILEFT)=T(ILEFT+1),28,6,2)                        
C/7S                                                                    
      IF (K.LT.2) CALL SETERR('DBSPLN - K.LT.2',15,1,2)                 
      IF (N.LE.K) CALL SETERR('DBSPLN - N.LE.K',15,2,2)                 
      IF (NX.LT.1) CALL SETERR('DBSPLN - NX.LT.1',16,3,2)               
      IF (ILEFT.LT.1) CALL SETERR('DBSPLN - ILEFT.LT.1',19,4,2)         
      IF (ILEFT.GE.N) CALL SETERR('DBSPLN - ILEFT.GE.N',19,5,2)         
      IF (T(ILEFT).EQ.T(ILEFT+1)) CALL SETERR                           
     1  ('DBSPLN - T(ILEFT)=T(ILEFT+1)',28,6,2)                         
C/                                                                      
C                                                                       
      DO 10 IX=1,NX                                                     
C/6S                                                                    
C       IF (T(ILEFT).GT.X(IX).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR       
C    1    (49HDBSPLN - ALL X ARE NOT IN THE SAME ILEFT INTERVAL,49,7,2) 
C       IF (X(IX).EQ.T(ILEFT+1).AND.T(ILEFT+1).LT.T(N)) CALL SETERR     
C    1    (49HDBSPLN - ALL X ARE NOT IN THE SAME ILEFT INTERVAL,49,7,2) 
C/7S                                                                    
        IF (T(ILEFT).GT.X(IX).OR.X(IX).GT.T(ILEFT+1)) CALL SETERR       
     1    ('DBSPLN - ALL X ARE NOT IN THE SAME ILEFT INTERVAL',49,7,2)  
        IF (X(IX).EQ.T(ILEFT+1).AND.T(ILEFT+1).LT.T(N)) CALL SETERR     
     1    ('DBSPLN - ALL X ARE NOT IN THE SAME ILEFT INTERVAL',49,7,2)  
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
      IFA=ISTKGT(3*K,4)                                                 
C                                                                       
C/6S                                                                    
C     IF (.NOT.D3PLN8(K,T,N,X,NX,ILEFT,ID,1,BX,IFA))                    
C    1  CALL SETERR(37HDBSPLN - T IS NOT MONOTONE INCREASING,37,8,2)    
C/7S                                                                    
      IF (.NOT.D3PLN8(K,T,N,X,NX,ILEFT,ID,1,BX,IFA))                    
     1  CALL SETERR('DBSPLN - T IS NOT MONOTONE INCREASING',37,8,2)     
C/                                                                      
C                                                                       
      CALL ISTKRL(1)                                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      LOGICAL FUNCTION D3PLN8(K,T,N,X,NX,ILEFT,ID,NID,BX,IFA)           
C                                                                       
C  TO OBTAIN ALL NON-ZERO BASIS SPLINES AND THEIR DERIVATIVES,          
C                                                                       
C           BX(IX,I,J) = B(ILEFT+I-K) SUP (ID(J)) (X(IX))               
C                                                                       
C  FOR IX=1,...,NX, I=1,...,K AND J=1,...,NID.                          
C                                                                       
C  INPUT                                                                
C                                                                       
C    K     - THE ORDER OF THE B-SPLINES TO BE USED.                     
C            2.LE.K IS ASSUMED.                                         
C    T     - THE B-SPLINE MESH.                                         
C    N     - THE NUMBER OF POINTS IN THE MESH T.                        
C    X     - POINTS OF EVALUATION FOR THE B-SPLINE.                     
C    NX    - THE NUMBER OF POINTS IN X.                                 
C    ILEFT - ALL POINTS X(IX) ARE ASSUMED TO LIE IN THE SAME INTERVAL   
C            (T(ILEFT),T(ILEFT+1)).                                     
C    ID    - DERIVATIVES OF THE B-SPLINE DESIRED.                       
C            0.LE.ID(1).LT.ID(2).LT. ... .LT.ID(NID).LT.K IS ASSUMED.   
C    NID   - THE NUMBER OF DERIVATIVES DESIRED, THE LENGTH OF ID.       
C    IFA   - POINTER TO                                                 
C                                                                       
C                 MAX(3*K,K*(MIN((K+1)/2,ID(NID)+1)+1))                 
C                                                                       
C            WORKING STACK SCRATCH LOCATIONS.                           
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    BX     - THE BASIS SPLINES AND THEIR DERIVATIVES.                  
C    D3PLN8 - .TRUE. IF SUCCESSFUL.                                     
C             .FALSE. IF T IS NOT MONOTONE INCREASING.                  
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES - NONE.                                                 
C                                                                       
      DOUBLE PRECISION T(N),X(NX),BX(NX,K,NID)                          
      INTEGER ID(NID)                                                   
C                                                                       
      LOGICAL D3PLNN,D3PLNB                                             
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      DOUBLE PRECISION WS(1)                                            
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
      D3PLN8=.TRUE.                                                     
C                                                                       
      IDM=IFA+K                                                         
      IDP=IDM+K                                                         
C                                                                       
C ... LOAD BX(IX,I,J) WITH N(ILEFT+I+ID(J)-K,K-ID(J))(X(IX)).           
C                                                                       
      DO 30 IX=1,NX                                                     
C                                                                       
         JJ01=0                                                         
         J=NID                                                          
 10         KMD=K-ID(J)                                                 
C                                                                       
            IF (.NOT.D3PLNN(T,N,X(IX),ILEFT,KMD,WS(IFA),WS(IDM),WS(IDP),
     1                      JJ01)) GO TO 40                             
C                                                                       
            IDX=IFA                                                     
            DO 20 I=1,KMD                                               
               BX(IX,I,J)=WS(IDX)                                       
 20            IDX=IDX+1                                                
            J=J-1                                                       
            IF (J.GE.1) GO TO 10                                        
 30      CONTINUE                                                       
C                                                                       
      IF (ID(NID).EQ.0) GO TO 50                                        
C                                                                       
C ... NOW GET THE HIGHER ORDER DERIVATIVES.                             
C                                                                       
      IADIFF=IFA+K                                                      
C                                                                       
      IF (.NOT.D3PLNB(T,N,K,X,NX,ILEFT,ID,NID,BX,WS(IADIFF),WS(IFA)))   
     1  GO TO 40                                                        
C                                                                       
      GO TO 50                                                          
C                                                                       
 40   D3PLN8=.FALSE.                                                    
C                                                                       
 50   RETURN                                                            
C                                                                       
      END                                                               
      LOGICAL FUNCTION D3PLNE(K,T,N,A,X,NX,ID,NID,FX,IDIM,ADIFF,ILO,    
     1                        ILEFT,IDM)                                
C                                                                       
C  TO EVALUATE THE B-SPLINE AND ITS DERIVATIVES                         
C                                                                       
C        FX(I,J) = F(ID(J))(X(I))                                       
C                                                                       
C  FOR I=1,...,NX AND J=1,...,NID WHERE                                 
C                                                                       
C      F(X) = SUM(I=1,...,N-K)(A(I)*B(I)(X)).                           
C                                                                       
C  INPUT                                                                
C                                                                       
C    K     - THE ORDER OF THE B-SPLINES TO BE USED.                     
C            2.LE.K IS ASSUMED.                                         
C    T     - THE B-SPLINE MESH.                                         
C    N     - THE NUMBER OF POINTS IN THE MESH T.                        
C    A     - THE B-SPLINE COEFFICIENTS, N-K OF THEM.                    
C    X     - POINTS OF EVALUATION FOR THE B-SPLINE.                     
C            X MONOTONE INCREASING WOULD HELP, BUT IT IS NOT NECESSARY. 
C    NX    - THE NUMBER OF POINTS IN X.                                 
C    ID    - DERIVATIVES OF THE B-SPLINE DESIRED.                       
C            0.LE.ID(1).LT.ID(2).LT. ... .LT.ID(NID).LT.K IS ASSUMED.   
C    NID   - THE NUMBER OF DERIVATIVES DESIRED, THE LENGTH OF ID.       
C    IDIM  - K.LE.IDIM IS ASSUMED. THE LARGER IDIM IS, THE FASTER D3PLNE
C            RUNS, SO LONG AS X IS MONOTONE INCREASING.                 
C            IDIM NEED NOT BE LARGER THAN N+K-2.                        
C    ADIFF - A DOUBLE PRECISION SCRATCH ARRAY OF LENGTH IDIM*NID.       
C    ILO   - IF ILO.LE.0 THEN COMPUTATION STARTS FROM SCRATCH.          
C            IF ILO.GT.0 THEN THE VALUES OF K,T,N,A,ID,NID,IDIM,ILO AND 
C            ADIFF ARE ASSUMED TO BE UNCHANGED FROM THE LAST CALL.      
C    ILEFT - T(ILEFT).LE.X(1).LT.T(ILEFT+1) WOULD HELP, BUT IT IS NOT   
C            NECESSARY.                                                 
C    IDM   - POINTER TO 3*K SCRATCH WORKING LOCATIONS.                  
C                                                                       
C  OUTPUT                                                               
C                                                                       
C    FX     - THE VALUES OF F AND ITS DERIVATIVES.                      
C    ADIFF  - SCRATCH VALUES ALTERED.                                   
C    ILO    - SCRATCH VALUE ALTERED.                                    
C    ILEFT  - THE INTERVAL INDICATOR FOR X(NX).                         
C    D3PLNE - .TRUE. IF SUCCESSFUL.                                     
C             .FALSE. IF T IS NOT MONOTONE INCREASING.                  
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES - NONE.                                                 
C                                                                       
      DOUBLE PRECISION T(N),A(1),X(NX),FX(NX,NID),ADIFF(IDIM,NID)       
C     DOUBLE PRECISION A(N-K)                                           
      INTEGER ID(NID)                                                   
C                                                                       
      LOGICAL D3PLND,D3PLNV                                             
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      DOUBLE PRECISION WS(1)                                            
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
      D3PLNE=.TRUE.                                                     
C                                                                       
      IDP=IDM+K                                                         
      ICOL=IDP+K                                                        
C                                                                       
      IDIML=MIN0(IDIM,N+K-1-ILEFT)                                      
C                                                                       
      IF (T(1).GE.T(N)) GO TO 50                                        
C                                                                       
      DO 40 I=1,NX                                                      
C                                                                       
         ILEFT=INTRVD(N,T,X(I))                                         
         IF (ILEFT.EQ.N) ILEFT=0                                        
         IF (ILEFT.EQ.0) GO TO 20                                       
C                                                                       
C ...... GET ADIFF, IF NECESSARY.                                       
C                                                                       
         IF (ILO.LE.ILEFT.AND.ILEFT.LE.IDIM+ILO-K.AND.ILO.GE.1) GO TO 10
C                                                                       
         ILO=ILEFT                                                      
         IDIML=MIN0(N+K-1-ILEFT,IDIM)                                   
C                                                                       
         IF (.NOT.D3PLND(K,T,N,A,ID,NID,ILO,IDIML,ADIFF)) GO TO 50      
C                                                                       
 10      IF (.NOT.D3PLNV(T,ADIFF,N,K,X(I),I,ILEFT,ID,NID,ILO,IDIML,FX,  
     1                   NX,WS(ICOL),WS(IDM),WS(IDP))) GO TO 50         
C                                                                       
         GO TO 40                                                       
C                                                                       
C ...... X(I) IS OUTSIDE (T(1),T(N)).                                   
C                                                                       
 20      DO 30 J=1,NID                                                  
 30         FX(I,J)=0.0D0                                               
C                                                                       
 40      CONTINUE                                                       
C                                                                       
      GO TO 60                                                          
C                                                                       
 50   D3PLNE=.FALSE.                                                    
C                                                                       
 60   RETURN                                                            
C                                                                       
      END                                                               
      LOGICAL FUNCTION D3PLNV(T,ADIFF,N,K,X,IX,ILEFT,ID,NID,ILO,IDIM,FX,
     1                        NX,COL,DM,DP)                             
C                                                                       
C  TO SET                                                               
C                                                                       
C  FX(IX,J) = F(ID(J))(X)  J=1,...,NID                                  
C                                                                       
C  WHERE F(X) = SUM(I=1,...,N-K)(A(I)*N(I,K))                           
C                                                                       
C  AND 0.LE.ID(1).LT. ... .LT.ID(NID).LT.K.                             
C                                                                       
C  (ADIFF)(ILO,IDIM) IS ASSUMED TO COME FROM A CALL TO D3PLND.          
C                                                                       
C  ILEFT IS ASSUMED TO COME FROM A CALL TO INTRV(N,T,X).                
C                                                                       
C  MUST HAVE ILEFT IN (ILO,IDIM+ILO-K).                                 
C                                                                       
C  D3PLNV=.TRUE. IS RETURNED IF SUCCESSFUL.                             
C  D3PLNV=.FALSE. IS RETURNED IF THE MESH T IS NOT MONOTONE INCREASING. 
C                                                                       
      DOUBLE PRECISION T(N),ADIFF(IDIM,NID),X,FX(NX,NID),COL(K),DM(K),  
     1                 DP(K)                                            
      INTEGER ID(NID)                                                   
C                                                                       
      LOGICAL D3PLNN                                                    
C                                                                       
      ILMIL=ILEFT-ILO                                                   
      JJ01=0                                                            
      J=NID                                                             
 10      KMID=K-ID(J)                                                   
         D3PLNV=D3PLNN(T,N,X,ILEFT,KMID,COL,DM,DP,JJ01)                 
         IF(.NOT.D3PLNV) GO TO 30                                       
         FX(IX,J)=0.0D0                                                 
         IDX=ILMIL                                                      
         DO 20 II=1,KMID                                                
            IDX=IDX+1                                                   
 20         FX(IX,J)=FX(IX,J)+ADIFF(IDX,J)*COL(II)                      
         J=J-1                                                          
         IF (J.GE.1) GO TO 10                                           
C                                                                       
 30   RETURN                                                            
C                                                                       
      END                                                               
      LOGICAL FUNCTION D3PLNB(T,N,K,X,NX,ILEFT,ID,NID,BX,ADIFF,F)       
C                                                                       
C  TO GET THE DERIVATIVES OF ALL BASIS SPLINES.                         
C                                                                       
C  D3PLNB=.TRUE. IS RETURNED IF SUCCESSFUL.                             
C  D3PLNB=.FALSE. IS RETURNED IF THE MESH T IS NOT MONOTONE INCREASING. 
C                                                                       
      DOUBLE PRECISION T(N),X(NX),BX(NX,K,NID),ADIFF(K,1),F(K)          
C     DOUBLE PRECISION ADIFF(K,MIN((K+1)/2,ID(NID)+1))                  
      INTEGER ID(NID)                                                   
C                                                                       
      DOUBLE PRECISION FKMD,FKMDIF                                      
C                                                                       
      D3PLNB=.TRUE.                                                     
C                                                                       
      ILMK=ILEFT-K                                                      
      KP1=K+1                                                           
      JMAX=MIN0(KP1/2,ID(NID)+1)                                        
C                                                                       
C ... ADIFF(I,J) IS THE COEFFICIENT VECTOR FOR THE I-TH SPLINES         
C ... JD-TH DERIVATIVE.                                                 
C                                                                       
      DO 20 I=1,K                                                       
         DO 10 J=1,JMAX                                                 
 10         ADIFF(I,J)=0.0D0                                            
 20      ADIFF(I,1)=1.0D0                                               
C                                                                       
      IDERIV=1                                                          
      JD=2                                                              
      IF (ID(1).NE.0) JD=1                                              
C                                                                       
C ...... LOOP ON JD, THE INDEX INTO ID(JD).                             
C                                                                       
 30      IF (JD.GT.NID) GO TO 170                                       
         ILMKPD=ILMK+IDERIV                                             
         KMID=K-IDERIV                                                  
         FKMD=FLOAT(KMID)                                               
         ILMD=ILEFT-IDERIV                                              
         IDP1=IDERIV+1                                                  
         MIND=MIN0(IDP1,KMID)                                           
C                                                                       
C ...... COMPUTE ALL ADIFF WITH SAME DENOMINATOR.                       
C                                                                       
         DO 100 JSMD=1,KMID                                             
            IF (JSMD.GT.IDERIV) GO TO 70                                
C                                                                       
C ......... JS INCREASING HERE.                                         
C                                                                       
            IDX1=MIN0(ILEFT+JSMD,N)                                     
            IDX2=MAX0(ILMKPD+JSMD,1)                                    
            FKMDIF=T(IDX1)-T(IDX2)                                      
C                                                                       
            IF (FKMDIF.LE.0.0D0) GO TO 160                              
C                                                                       
            FKMDIF=FKMD/FKMDIF                                          
            IF (JSMD.EQ.JMAX) GO TO 50                                  
            JSMDP1=JSMD+1                                               
            DO 40 I=JSMD,IDERIV                                         
 40            ADIFF(I,JSMD)=FKMDIF*(ADIFF(I,JSMDP1)-ADIFF(I,JSMD))     
            GO TO 70                                                    
 50         DO 60 I=JSMD,IDERIV                                         
 60            ADIFF(I,JSMD)=-FKMDIF*ADIFF(I,JSMD)                      
C                                                                       
C ......... JS DECREASING HERE.                                         
C                                                                       
 70         JS=KP1-JSMD                                                 
            JSP1=JS+1                                                   
            IDX1=MIN0(ILMD+JS,N)                                        
            IDX2=MAX0(ILMK+JS,1)                                        
            FKMDIF=T(IDX1)-T(IDX2)                                      
C                                                                       
            IF (FKMDIF.LE.0.0D0) GO TO 160                              
C                                                                       
            FKMDIF=FKMD/FKMDIF                                          
            I0=MAX0(IDP1,JS-IDERIV)                                     
            I1=JS-1                                                     
            IF (I0.GT.I1) GO TO 90                                      
            J=JSP1-I0                                                   
            DO 80 I=I0,I1                                               
               ADIFF(I,J)=FKMDIF*(ADIFF(I,J)-ADIFF(I,J-1))              
 80            J=J-1                                                    
 90         ADIFF(JS,1)=FKMDIF*ADIFF(JS,1)                              
 100        CONTINUE                                                    
         IF (IDERIV.NE.ID(JD)) GO TO 150                                
C                                                                       
C ...... EVALUATE THE ID(JD)-TH DERIVATIVE OF THE BASIS SPLINES.        
C                                                                       
         DO 140 IX=1,NX                                                 
            DO 120 I=1,K                                                
               JHI=MIN0(KP1-I,I,MIND)                                   
               IDX=MAX0(I-IDERIV,1)                                     
               F(I)=0.0D0                                               
               DO 110 J=1,JHI                                           
                  F(I)=F(I)+ADIFF(I,J)*BX(IX,IDX,JD)                    
 110              IDX=IDX+1                                             
 120           CONTINUE                                                 
            DO 130 I=1,K                                                
 130           BX(IX,I,JD)=F(I)                                         
 140        CONTINUE                                                    
         JD=JD+1                                                        
 150     IDERIV=IDP1                                                    
         GO TO 30                                                       
C                                                                       
 160  D3PLNB=.FALSE.                                                    
C                                                                       
 170  RETURN                                                            
C                                                                       
      END                                                               
      LOGICAL FUNCTION D3PLND(K,T,N,A,ID,NID,ILO,IDIM,ADIFF)            
C                                                                       
C  TO SET                                                               
C                                                                       
C  ADIFF(I,J) = A(ID(J))(ILO+I+ID(J)-K)                                 
C                                                                       
C  FOR I=1,...,IDIM-ID(J) AND J=1,...,NID.                              
C                                                                       
C  THE FOLLOWING ASSUMPTIONS ARE MADE                                   
C                                                                       
C  0.LE.ID(1).LT. ... .LT.ID(NID).LT.K                                  
C  1.LE.ILO.LT.N                                                        
C  K.LE.IDIM.LT.N+K-ILO                                                 
C  A(N-K) LONG                                                          
C                                                                       
C  D3PLND=.TRUE. IS RETURNED IF SUCCESSFUL.                             
C  D3PLND=.FALSE. IS RETURNED IF THE MESH T IS NOT MONOTONE INCREASING. 
C                                                                       
      DOUBLE PRECISION T(N),A(1),ADIFF(IDIM,NID)                        
C     DOUBLE PRECISION A(N-K)                                           
      INTEGER ID(NID)                                                   
C                                                                       
      DOUBLE PRECISION FKMD,DIFF                                        
C                                                                       
      D3PLND=.TRUE.                                                     
C                                                                       
      NMK=N-K                                                           
      IDX=ILO-K                                                         
C                                                                       
C ... GET A(0)(I)                                                       
C                                                                       
      DO 20 I=1,IDIM                                                    
         IDX=IDX+1                                                      
         IF (IDX.LT.1.OR.IDX.GT.NMK) GO TO 10                           
         ADIFF(I,1)=A(IDX)                                              
         GO TO 20                                                       
 10      ADIFF(I,1)=0.0D0                                               
 20      CONTINUE                                                       
C                                                                       
C ... GET ADIFF(I,J)                                                    
C                                                                       
      IDERIV=0                                                          
      J=1                                                               
 30      JM=J                                                           
         IF (IDERIV.EQ.ID(J)) J=J+1                                     
         IF (J.GT.NID) GO TO 60                                         
         IDERIV=IDERIV+1                                                
         IDIMD=IDIM-IDERIV                                              
         KMD=K-IDERIV                                                   
         FKMD=FLOAT(KMD)                                                
         IPDMK=ILO-KMD                                                  
         DO 40 I=1,IDIMD                                                
            IDX1=MIN0(ILO+I,N)                                          
            IDX2=MAX0(IPDMK+I,1)                                        
            DIFF=T(IDX1)-T(IDX2)                                        
C                                                                       
            IF (DIFF.LT.0.0D0) GO TO 50                                 
C                                                                       
            IF (DIFF.GT.0.0D0)                                          
     1          ADIFF(I,J)=FKMD*(ADIFF(I+1,JM)-ADIFF(I,JM))/DIFF        
 40         CONTINUE                                                    
         GO TO 30                                                       
C                                                                       
 50   D3PLND=.FALSE.                                                    
C                                                                       
 60   RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IMMM(IMESH, NMESH, P, MP)                        
      INTEGER IMESH, NMESH, MP                                          
      REAL P                                                            
      COMMON /CSTAK/ DS                                                 
      DOUBLE PRECISION DS(500)                                          
      INTEGER IROLD, J, ISTKMD, ISTKST, IS(1000), CLEGTH                
      INTEGER I3MM                                                      
      REAL RS(1000), WS(500)                                            
      LOGICAL LS(1000)                                                  
      EQUIVALENCE (DS(1), WS(1), RS(1), IS(1), LS(1))                   
C TO MAKE P A MESH POINT OF MULTIPLICITY MP IN THE MESH INDICATED       
C BY THE STACK-POINTER IMESH.                                           
C THE MESH MUST BE AT THE TOP OF THE STACK, THAT IS,                    
C IT MUST BE THE MOST RECENT ALLOCATION.                                
C MNEMONIC - MESH MULTIPLICITY MODIFIER.                                
C INPUT -                                                               
C   IMESH - THE MESH IS STACK(IMESH), ..., STACK(IMESH+NMESH-1).        
C   NMESH - THE LENGTH OF THE MESH.                                     
C   P     - THE POINT TO BE MODIFIED.                                   
C   MP    - THE MULTIPLICITY P IS TO HAVE.                              
C OUTPUT -                                                              
C   NMESH - THE LENGTH OF THE MODIFIED MESH ON THE STACK.               
C ERROR STATES -                                                        
C   1 - NOTHING ON THE STACK                                            
C   2 - IMESH < 1                                                       
C   3 - NMESH < 0                                                       
C   4 - MP < 0                                                          
C   5 - TOP OF STACK NOT OF LENGTH NMESH                                
C   6 - THE MESH IS NOT AT THE TOP OF THE STACK                         
C   7 - MESH NOT MONOTONE INCREASING                                    
C CHECK THE INPUT FOR ERRORS.                                           
C/6S                                                                    
C     IF (ISTKST(1) .LT. 1) CALL SETERR(28HIMMM  - NOTHING ON THE STACK,
C    1   28, 1, 2)                                                      
C     IF (IMESH .LT. 1) CALL SETERR(20HIMMM  - IMESH .LT. 1, 20, 2, 2)  
C     IF (NMESH .LT. 0) CALL SETERR(20HIMMM  - NMESH .LT. 0, 20, 3, 2)  
C     IF (MP .LT. 0) CALL SETERR(17HIMMM  - MP .LT. 0, 17, 4, 2)        
C/7S                                                                    
      IF (ISTKST(1) .LT. 1) CALL SETERR('IMMM  - NOTHING ON THE STACK', 
     1   28, 1, 2)                                                      
      IF (IMESH .LT. 1) CALL SETERR('IMMM  - IMESH .LT. 1', 20, 2, 2)   
      IF (NMESH .LT. 0) CALL SETERR('IMMM  - NMESH .LT. 0', 20, 3, 2)   
      IF (MP .LT. 0) CALL SETERR('IMMM  - MP .LT. 0', 17, 4, 2)         
C/                                                                      
C THE CURRENT LENGTH OF THE STACK.                                      
      CLEGTH = ISTKST(2)                                                
      J = ISTKMD(NMESH)                                                 
C/6S                                                                    
C     IF (ISTKST(2) .NE. CLEGTH) CALL SETERR(                           
C    1   40HIMMM  - TOP OF STACK NOT OF LENGTH NMESH, 40, 5, 2)         
C     IF (J .NE. IMESH) CALL SETERR(                                    
C    1   47HIMMM  - THE MESH IS NOT AT THE TOP OF THE STACK, 47, 6, 2)  
C/7S                                                                    
      IF (ISTKST(2) .NE. CLEGTH) CALL SETERR(                           
     1   'IMMM  - TOP OF STACK NOT OF LENGTH NMESH', 40, 5, 2)          
      IF (J .NE. IMESH) CALL SETERR(                                    
     1   'IMMM  - THE MESH IS NOT AT THE TOP OF THE STACK', 47, 6, 2)   
C/                                                                      
      CALL ENTSRC(IROLD, 1)                                             
      NMESH = I3MM(IMESH, WS(IMESH), NMESH, P, MP)                      
      CALL RETSRC(IROLD)                                                
      IMMM = IMESH                                                      
      RETURN                                                            
      END                                                               
      INTEGER FUNCTION I3MM(IMESH, MESH, NMESH, P, MP)                  
      INTEGER NMESH                                                     
      INTEGER IMESH, MP                                                 
      REAL MESH(NMESH), P                                               
      INTEGER I, ISTKMD, IP, MPT                                        
      INTEGER TEMP                                                      
C MAKE SURE THE MESH IS MONOTONE INCREASING.                            
      I = 1                                                             
         GOTO  2                                                        
   1     I = I+1                                                        
   2     IF (I .GE. NMESH) GOTO  3                                      
C/6S                                                                    
C        IF (MESH(I) .GT. MESH(I+1)) CALL SETERR(                       
C    1      36HIMMM  - MESH NOT MONOTONE INCREASING, 36, 7, 2)          
C/7S                                                                    
         IF (MESH(I) .GT. MESH(I+1)) CALL SETERR(                       
     1      'IMMM  - MESH NOT MONOTONE INCREASING', 36, 7, 2)           
C/                                                                      
         GOTO  1                                                        
C FIND IP, THE INDEX IN MESH OF P. THE FOLLOWING RULES APPLY -          
C   IF ( P < MESH(1) ) { IP = 1 }                                       
C   ELSE IF ( P > MESH(NMESH) ) { IP = NMESH+1 }                        
C   ELSE IF ( MESH(I-1) < P < MESH(I) ) { IP = I }                      
C   ELSE { MESH(IP) = P }                                               
   3  IP = 1                                                            
         GOTO  5                                                        
   4     IP = IP+1                                                      
   5     IF (IP .GT. NMESH) GOTO  6                                     
         IF (P .EQ. MESH(IP)) GOTO  6                                   
         IF (P .LT. MESH(IP)) GOTO  6                                   
         GOTO  4                                                        
C GET MPT, THE INPUT MULTIPLICITY OF P IN MESH.                         
   6  MPT = 0                                                           
      I = IP                                                            
         GOTO  8                                                        
   7     I = I+1                                                        
   8     IF (I .GT. NMESH) GOTO  9                                      
         IF (MESH(I) .EQ. P) MPT = MPT+1                                
         GOTO  7                                                        
   9  IF (MP .LE. MPT) GOTO 10                                          
         IMESH = ISTKMD(NMESH+MP-MPT)                                   
         TEMP = IP+MP-MPT                                               
         CALL MOVEBR(NMESH+1-IP, MESH(IP), MESH(TEMP))                  
         CALL SETR(MP-MPT, P, MESH(IP))                                 
         GOTO  12                                                       
  10     IF (MP .GE. MPT) GOTO 11                                       
            TEMP = IP+MPT-MP                                            
            CALL MOVEFR(NMESH-IP+MP-MPT+1, MESH(TEMP), MESH(IP))        
            IMESH = ISTKMD(NMESH+MP-MPT)                                
  11  CONTINUE                                                          
  12  I3MM = NMESH+MP-MPT                                               
      RETURN                                                            
      END                                                               
      INTEGER FUNCTION IMMMD(IMESH, NMESH, P, MP)                       
      INTEGER IMESH, NMESH, MP                                          
      DOUBLE PRECISION P                                                
      COMMON /CSTAK/ DS                                                 
      DOUBLE PRECISION DS(500)                                          
      INTEGER IROLD, J, ISTKMD, ISTKST, IS(1000), CLEGTH                
      INTEGER I3MMD                                                     
      REAL RS(1000)                                                     
      LOGICAL LS(1000)                                                  
      DOUBLE PRECISION WS(500)                                          
      EQUIVALENCE (DS(1), WS(1), RS(1), IS(1), LS(1))                   
C TO MAKE P A MESH POINT OF MULTIPLICITY MP IN THE MESH INDICATED       
C BY THE STACK-POINTER IMESH.                                           
C THE MESH MUST BE AT THE TOP OF THE STACK, THAT IS,                    
C IT MUST BE THE MOST RECENT ALLOCATION.                                
C MNEMONIC - MESH MULTIPLICITY MODIFIER.                                
C INPUT -                                                               
C   IMESH - THE MESH IS STACK(IMESH), ..., STACK(IMESH+NMESH-1).        
C   NMESH - THE LENGTH OF THE MESH.                                     
C   P     - THE POINT TO BE MODIFIED.                                   
C   MP    - THE MULTIPLICITY P IS TO HAVE.                              
C OUTPUT -                                                              
C   NMESH - THE LENGTH OF THE MODIFIED MESH ON THE STACK.               
C ERROR STATES -                                                        
C   1 - NOTHING ON THE STACK                                            
C   2 - IMESH < 1                                                       
C   3 - NMESH < 0                                                       
C   4 - MP < 0                                                          
C   5 - TOP OF STACK NOT OF LENGTH NMESH                                
C   6 - THE MESH IS NOT AT THE TOP OF THE STACK                         
C   7 - MESH NOT MONOTONE INCREASING                                    
C CHECK THE INPUT FOR ERRORS.                                           
C/6S                                                                    
C     IF (ISTKST(1) .LT. 1) CALL SETERR(28HIMMMD - NOTHING ON THE STACK,
C    1   28, 1, 2)                                                      
C     IF (IMESH .LT. 1) CALL SETERR(20HIMMMD - IMESH .LT. 1, 20, 2, 2)  
C     IF (NMESH .LT. 0) CALL SETERR(20HIMMMD - NMESH .LT. 0, 20, 3, 2)  
C     IF (MP .LT. 0) CALL SETERR(17HIMMMD - MP .LT. 0, 17, 4, 2)        
C/7S                                                                    
      IF (ISTKST(1) .LT. 1) CALL SETERR('IMMMD - NOTHING ON THE STACK', 
     1   28, 1, 2)                                                      
      IF (IMESH .LT. 1) CALL SETERR('IMMMD - IMESH .LT. 1', 20, 2, 2)   
      IF (NMESH .LT. 0) CALL SETERR('IMMMD - NMESH .LT. 0', 20, 3, 2)   
      IF (MP .LT. 0) CALL SETERR('IMMMD - MP .LT. 0', 17, 4, 2)         
C/                                                                      
C THE CURRENT LENGTH OF THE STACK.                                      
      CLEGTH = ISTKST(2)                                                
      J = ISTKMD(NMESH)                                                 
C/6S                                                                    
C     IF (ISTKST(2) .NE. CLEGTH) CALL SETERR(                           
C    1   40HIMMMD - TOP OF STACK NOT OF LENGTH NMESH, 40, 5, 2)         
C     IF (J .NE. IMESH) CALL SETERR(                                    
C    1   47HIMMMD - THE MESH IS NOT AT THE TOP OF THE STACK, 47, 6, 2)  
C/7S                                                                    
      IF (ISTKST(2) .NE. CLEGTH) CALL SETERR(                           
     1   'IMMMD - TOP OF STACK NOT OF LENGTH NMESH', 40, 5, 2)          
      IF (J .NE. IMESH) CALL SETERR(                                    
     1   'IMMMD - THE MESH IS NOT AT THE TOP OF THE STACK', 47, 6, 2)   
C/                                                                      
      CALL ENTSRC(IROLD, 1)                                             
      NMESH = I3MMD(IMESH, WS(IMESH), NMESH, P, MP)                     
      CALL RETSRC(IROLD)                                                
      IMMMD = IMESH                                                     
      RETURN                                                            
      END                                                               
      INTEGER FUNCTION I3MMD(IMESH, MESH, NMESH, P, MP)                 
      INTEGER NMESH                                                     
      INTEGER IMESH, MP                                                 
      DOUBLE PRECISION MESH(NMESH), P                                   
      INTEGER I, ISTKMD, IP, MPT                                        
      INTEGER TEMP                                                      
C MAKE SURE THE MESH IS MONOTONE INCREASING.                            
      I = 1                                                             
         GOTO  2                                                        
   1     I = I+1                                                        
   2     IF (I .GE. NMESH) GOTO  3                                      
C/6S                                                                    
C        IF (MESH(I) .GT. MESH(I+1)) CALL SETERR(                       
C    1      36HIMMMD - MESH NOT MONOTONE INCREASING, 36, 7, 2)          
C/7S                                                                    
         IF (MESH(I) .GT. MESH(I+1)) CALL SETERR(                       
     1      'IMMMD - MESH NOT MONOTONE INCREASING', 36, 7, 2)           
C/                                                                      
         GOTO  1                                                        
C FIND IP, THE INDEX IN MESH OF P. THE FOLLOWING RULES APPLY -          
C   IF ( P < MESH(1) ) { IP = 1 }                                       
C   ELSE IF ( P > MESH(NMESH) ) { IP = NMESH+1 }                        
C   ELSE IF ( MESH(I-1) < P < MESH(I) ) { IP = I }                      
C   ELSE { MESH(IP) = P }                                               
   3  IP = 1                                                            
         GOTO  5                                                        
   4     IP = IP+1                                                      
   5     IF (IP .GT. NMESH) GOTO  6                                     
         IF (P .EQ. MESH(IP)) GOTO  6                                   
         IF (P .LT. MESH(IP)) GOTO  6                                   
         GOTO  4                                                        
C GET MPT, THE INPUT MULTIPLICITY OF P IN MESH.                         
   6  MPT = 0                                                           
      I = IP                                                            
         GOTO  8                                                        
   7     I = I+1                                                        
   8     IF (I .GT. NMESH) GOTO  9                                      
         IF (MESH(I) .EQ. P) MPT = MPT+1                                
         GOTO  7                                                        
   9  IF (MP .LE. MPT) GOTO 10                                          
         IMESH = ISTKMD(NMESH+MP-MPT)                                   
         TEMP = IP+MP-MPT                                               
         CALL MOVEBD(NMESH+1-IP, MESH(IP), MESH(TEMP))                  
         CALL SETD(MP-MPT, P, MESH(IP))                                 
         GOTO  12                                                       
  10     IF (MP .GE. MPT) GOTO 11                                       
            TEMP = IP+MPT-MP                                            
            CALL MOVEFD(NMESH-IP+MP-MPT+1, MESH(TEMP), MESH(IP))        
            IMESH = ISTKMD(NMESH+MP-MPT)                                
  11  CONTINUE                                                          
  12  I3MMD = NMESH+MP-MPT                                              
      RETURN                                                            
      END                                                               
      INTEGER FUNCTION IUMD(A,B,NAB)                                    
C                                                                       
C  TO SET UP THE MESH X(1),...,X(NAB) ON (A,B) WHICH INCLUDES THE       
C  POINTS A + (I-1)*((B-A)/(NAB-1)), I=1,...,NAB.                       
C                                                                       
C  INPUT -                                                              
C                                                                       
C    A   - LEFT HAND END POINT.                                         
C    B   - RIGHT HAND END POINT.                                        
C    NAB - NUMBER OF POINTS TO BE USED ON (A,B).                        
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    IUMD - THE POINTER TO THE MESH OF LENGTH NAB IN THE STACK.         
C                                                                       
C  SCRATCH SPACE ALLOCATED - NAB REAL LOCATIONS                         
C                            ARE LEFT ON THE STACK.                     
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - A=B.                                                           
C    2 - NAB.LT.2.                                                      
C                                                                       
      REAL A,B                                                          
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (A.EQ.B) CALL SETERR(11H IUMD - A=B,11,1,2)                    
C     IF (NAB.LT.2) CALL SETERR(16H IUMD - NAB.LT.2,16,2,2)             
C/7S                                                                    
      IF (A.EQ.B) CALL SETERR(' IUMD - A=B',11,1,2)                     
      IF (NAB.LT.2) CALL SETERR(' IUMD - NAB.LT.2',16,2,2)              
C/                                                                      
C                                                                       
      IUMD=IUMB(A,B,NAB,1,NX)                                           
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IUMB(A,B,NAB,K,NX)                               
C                                                                       
C  TO SET UP THE MESH X(1),...,X(NX) ON (A,B) WHICH INCLUDES THE        
C  POINTS A + (I-1)*((B-A)/(NAB-1)), I=1,...,NAB WITH MULTIPLICITIES    
C  K FOR I=1, 1 FOR 1.LT.I.LT.NAB AND K FOR I=NAB.                      
C                                                                       
C  INPUT -                                                              
C                                                                       
C    A   - LEFT HAND END POINT.                                         
C    B   - RIGHT HAND END POINT.                                        
C    NAB - NUMBER OF POINTS TO BE USED ON (A,B).                        
C    K   - THE B-SPLINE ORDER FOR THE MESH.                             
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    NX    - THE NUMBER OF MESH POINTS IN X,                            
C                                                                       
C               NX = 2*(K-1) + NAB.                                     
C                                                                       
C    IUMB - THE POINTER TO THE MESH OF LENGTH NX IN THE STACK.          
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX REAL LOCATIONS                          
C                            ARE LEFT ON THE STACK.                     
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - A=B.                                                           
C    2 - NAB.LT.2.                                                      
C    3 - K.LT.1.                                                        
C                                                                       
      REAL A,B                                                          
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (A.EQ.B) CALL SETERR(11H IUMB - A=B,11,1,2)                    
C     IF (NAB.LT.2) CALL SETERR(16H IUMB - NAB.LT.2,16,2,2)             
C     IF (K.LT.1) CALL SETERR(14H IUMB - K.LT.1,14,3,2)                 
C/7S                                                                    
      IF (A.EQ.B) CALL SETERR(' IUMB - A=B',11,1,2)                     
      IF (NAB.LT.2) CALL SETERR(' IUMB - NAB.LT.2',16,2,2)              
      IF (K.LT.1) CALL SETERR(' IUMB - K.LT.1',14,3,2)                  
C/                                                                      
C                                                                       
      IUMB=IUM1(A,B,NAB,K,1,K,NX)                                       
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IUM1(A,B,NAB,MA,MI,MB,NX)                        
C                                                                       
C  TO SET UP THE MESH X(1),...,X(NX) ON (A,B) WHICH INCLUDES THE        
C  POINTS A + (I-1)*((B-A)/(NAB-1)), I=1,...,NAB WITH MULTIPLICITIES    
C  MA FOR I=1, MI FOR 1.LT.I.LT.NAB AND MB FOR I=NAB.                   
C                                                                       
C  INPUT -                                                              
C                                                                       
C    A   - LEFT HAND END POINT.                                         
C    B   - RIGHT HAND END POINT.                                        
C    NAB - NUMBER OF POINTS TO BE USED ON (A,B).                        
C    MA  - THE MULTIPLICITY OF A IN X.                                  
C    MI  - THE MULTIPLICITY OF ALL INTERIOR POINTS OF X.                
C    MB  - THE MULTIPLICITY OF B IN X.                                  
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    NX    - THE NUMBER OF MESH POINTS IN X,                            
C                                                                       
C               NX = MA + MI*(NAB-2) + MB.                              
C                                                                       
C    IUM1 - THE POINTER TO THE MESH OF LENGTH NX IN THE STACK.          
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX REAL LOCATIONS                          
C                            ARE LEFT ON THE STACK.                     
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - A=B.                                                           
C    2 - NAB.LT.2.                                                      
C    3 - ONE OF (MA,MI,MB) IS NEGATIVE.                                 
C                                                                       
      REAL A,B                                                          
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      REAL WS(1)                                                        
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (A.EQ.B) CALL SETERR(11H IUM1 - A=B,11,1,2)                    
C     IF (NAB.LT.2) CALL SETERR(16H IUM1 - NAB.LT.2,16,2,2)             
C     IF (MA.LT.0.OR.MI.LT.0.OR.MB.LT.0) CALL SETERR                    
C    1   (37H IUM1 - ONE OF (MA,MI,MB) IS NEGATIVE,37,3,2)              
C/7S                                                                    
      IF (A.EQ.B) CALL SETERR(' IUM1 - A=B',11,1,2)                     
      IF (NAB.LT.2) CALL SETERR(' IUM1 - NAB.LT.2',16,2,2)              
      IF (MA.LT.0.OR.MI.LT.0.OR.MB.LT.0) CALL SETERR                    
     1   (' IUM1 - ONE OF (MA,MI,MB) IS NEGATIVE',37,3,2)               
C/                                                                      
C                                                                       
C ... ALLOCATE THE MESH.                                                
C                                                                       
      IUM1=ISTKGT(MA+MI*(NAB-2)+MB,3)                                   
C                                                                       
      CALL UM1(A,B,NAB,MA,MI,MB,WS(IUM1),NX)                            
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION ILUMD(XB,NXB,N,NX)                               
C                                                                       
C  TO ALLOCATE AND SET UP THE GRID X WHICH INCLUDES THE POINTS          
C                                                                       
C            XB(I)+(J-1)*((XB(I+1)-XB(I))/(N-1))                        
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,N.                                     
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    N   - THE NUMBER OF POINTS TO BE USED IN THE GRID                  
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - X(I)=WS(I+ILUMD-1) FOR I=1,...,NX.                            
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C            NX = 1 + SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(N-1).         
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX REAL WORDS ARE LEFT                     
C                            ON THE STACK.                              
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - XB IS NOT MONOTONE.                                            
C    3 - N.LT.2.                                                        
C                                                                       
      REAL XB(NXB)                                                      
      INTEGER N                                                         
C                                                                       
      REAL DIR                                                          
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(17H ILUMD - NXB.LT.2,17,1,2)            
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR(' ILUMD - NXB.LT.2',17,1,2)             
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0E0) CALL SETERR                                     
C    1  (27H ILUMD - XB IS NOT MONOTONE,27,2,2)                         
C/7S                                                                    
      IF (DIR.EQ.0.0E0) CALL SETERR                                     
     1  (' ILUMD - XB IS NOT MONOTONE',27,2,2)                          
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((DIR/ABS(DIR))*(XB(I+1)-XB(I)).LT.0.0E0) CALL SETERR        
C    1    (27H ILUMD - XB IS NOT MONOTONE,27,2,2)                       
C       IF (N.LT.2) CALL SETERR(15H ILUMD - N.LT.2,15,3,2)              
C/7S                                                                    
        IF ((DIR/ABS(DIR))*(XB(I+1)-XB(I)).LT.0.0E0) CALL SETERR        
     1    (' ILUMD - XB IS NOT MONOTONE',27,2,2)                        
        IF (N.LT.2) CALL SETERR(' ILUMD - N.LT.2',15,3,2)               
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
C ... MAKE THE MESH X.                                                  
C                                                                       
      ILUMD=ILUMB(XB,NXB,N,1,NX)                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION ILUMB(XB,NXB,N,K,NX)                             
C                                                                       
C  TO ALLOCATE AND SET UP THE GRID X WHICH INCLUDES THE POINTS          
C                                                                       
C            XB(I)+(J-1)*((XB(I+1)-XB(I))/(N-1))                        
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,N.                                     
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    N   - THE NUMBER OF POINTS TO BE USED IN THE GRID                  
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    K   - THE FIRST AND LAST POINTS OF THE MESH X WILL HAVE            
C          MULTIPLICITY K. THE INTERIOR POINTS WILL ALL HAVE            
C          MULTIPLICITY 1.                                              
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - X(I)=WS(I+ILUMB-1) FOR I=1,...,NX.                            
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = 2*K-1 + (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(N-1).     
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX REAL WORDS ARE LEFT                     
C                            ON THE STACK.                              
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - K.LT.1.                                                        
C    3 - XB IS NOT MONOTONE.                                            
C    4 - N.LT.2.                                                        
C                                                                       
      REAL XB(NXB)                                                      
      INTEGER N                                                         
C                                                                       
      REAL DIR                                                          
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(17H ILUMB - NXB.LT.2,17,1,2)            
C     IF (K.LT.1) CALL SETERR(15H ILUMB - K.LT.1,15,2,2)                
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR(' ILUMB - NXB.LT.2',17,1,2)             
      IF (K.LT.1) CALL SETERR(' ILUMB - K.LT.1',15,2,2)                 
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0E0) CALL SETERR                                     
C    1  (27H ILUMB - XB IS NOT MONOTONE,27,3,2)                         
C/7S                                                                    
      IF (DIR.EQ.0.0E0) CALL SETERR                                     
     1  (' ILUMB - XB IS NOT MONOTONE',27,3,2)                          
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((DIR/ABS(DIR))*(XB(I+1)-XB(I)).LT.0.0E0) CALL SETERR        
C    1    (27H ILUMB - XB IS NOT MONOTONE,27,3,2)                       
C       IF (N.LT.2) CALL SETERR(15H ILUMB - N.LT.2,15,4,2)              
C/7S                                                                    
        IF ((DIR/ABS(DIR))*(XB(I+1)-XB(I)).LT.0.0E0) CALL SETERR        
     1    (' ILUMB - XB IS NOT MONOTONE',27,3,2)                        
        IF (N.LT.2) CALL SETERR(' ILUMB - N.LT.2',15,4,2)               
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
C ... MAKE THE MESH X.                                                  
C                                                                       
      ILUMB=ILUM1(XB,NXB,N,K,1,K,NX)                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION ILUM1(XB,NXB,N,ML,MI,MR,NX)                      
C                                                                       
C  TO ALLOCATE AND SET UP THE GRID X WHICH INCLUDES THE POINTS          
C                                                                       
C            XB(I)+(J-1)*((XB(I+1)-XB(I))/(N-1))                        
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,N.                                     
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    N   - THE NUMBER OF POINTS TO BE USED IN THE GRID                  
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    ML  - THE MULTIPLICITY OF XB(1) IN X.                              
C    MI  - THE MULTIPLICITY OF ALL X POINTS STRICTLY                    
C          BETWEEN XB(1) AND XB(NXB).                                   
C    MR  - THE MULTIPLICITY OF XB(NXB) IN X.                            
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - X(I)=WS(I+ILUM1-1) FOR I=1,...,NX.                            
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = ML +                                                   
C                (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(N-1) -1)*MI +     
C                MR.                                                    
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX REAL WORDS ARE LEFT                     
C                            ON THE STACK.                              
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - ONE OF (ML,MI,MR) IS NEGATIVE.                                 
C    3 - XB IS NOT MONOTONE.                                            
C    4 - N.LT.2.                                                        
C                                                                       
      REAL XB(NXB)                                                      
      INTEGER N                                                         
C                                                                       
      REAL DIR                                                          
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      REAL WS(1)                                                        
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(17H ILUM1 - NXB.LT.2,17,1,2)            
C     IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
C    1  (38H ILUM1 - ONE OF (ML,MI,MR) IS NEGATIVE,38,2,2)              
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR(' ILUM1 - NXB.LT.2',17,1,2)             
      IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
     1  (' ILUM1 - ONE OF (ML,MI,MR) IS NEGATIVE',38,2,2)               
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0E0) CALL SETERR                                     
C    1  (27H ILUM1 - XB IS NOT MONOTONE,27,3,2)                         
C/7S                                                                    
      IF (DIR.EQ.0.0E0) CALL SETERR                                     
     1  (' ILUM1 - XB IS NOT MONOTONE',27,3,2)                          
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      NXI=ML+MR-MI                                                      
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((DIR/ABS(DIR))*(XB(I+1)-XB(I)).LT.0.0E0) CALL SETERR        
C    1    (27H ILUM1 - XB IS NOT MONOTONE,27,3,2)                       
C       IF (N.LT.2) CALL SETERR(15H ILUM1 - N.LT.2,15,4,2)              
C/7S                                                                    
        IF ((DIR/ABS(DIR))*(XB(I+1)-XB(I)).LT.0.0E0) CALL SETERR        
     1    (' ILUM1 - XB IS NOT MONOTONE',27,3,2)                        
        IF (N.LT.2) CALL SETERR(' ILUM1 - N.LT.2',15,4,2)               
C/                                                                      
        NXI=NXI+(N-1)*MI                                                
 10     CONTINUE                                                        
C                                                                       
C ... ALLOCATE SPACE FOR THE MESH X.                                    
C                                                                       
      ILUM1=ISTKGT(NXI,3)                                               
C                                                                       
      CALL LUM1(XB,NXB,N,ML,MI,MR,WS(ILUM1),NX)                         
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE LUMD(XB,NXB,N,X,NX)                                    
C                                                                       
C  TO SET UP THE GRID X WHICH INCLUDES THE POINTS                       
C                                                                       
C      XB(I)+(J-1)*((XB(I+1)-XB(I))/(N-1))                              
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,N.                                     
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    N   - THE NUMBER OF POINTS TO BE USED IN THE GRID                  
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE GRID X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = 1 + (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(N-1).         
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - XB IS NOT MONOTONE.                                            
C    3 - N.LT.2.                                                        
C                                                                       
      REAL XB(NXB),X(1)                                                 
C     REAL X(NX)                                                        
      INTEGER N                                                         
C                                                                       
      REAL DIR                                                          
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(16H LUMD - NXB.LT.2,16,1,2)             
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR(' LUMD - NXB.LT.2',16,1,2)              
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0E0) CALL SETERR                                     
C    1  (26H LUMD - XB IS NOT MONOTONE,26,2,2)                          
C/7S                                                                    
      IF (DIR.EQ.0.0E0) CALL SETERR                                     
     1  (' LUMD - XB IS NOT MONOTONE',26,2,2)                           
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((XB(I+1)-XB(I))*(DIR/ABS(DIR)).LT.0.0E0) CALL SETERR        
C    1    (26H LUMD - XB IS NOT MONOTONE,26,2,2)                        
C       IF (N.LT.2) CALL SETERR(14H LUMD - N.LT.2,14,3,2)               
C/7S                                                                    
        IF ((XB(I+1)-XB(I))*(DIR/ABS(DIR)).LT.0.0E0) CALL SETERR        
     1    (' LUMD - XB IS NOT MONOTONE',26,2,2)                         
        IF (N.LT.2) CALL SETERR(' LUMD - N.LT.2',14,3,2)                
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
      CALL LUMB(XB,NXB,N,1,X,NX)                                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE LUMB(XB,NXB,N,K,X,NX)                                  
C                                                                       
C  TO SET UP THE GRID X WHICH INCLUDES THE POINTS                       
C                                                                       
C      XB(I)+(J-1)*((XB(I+1)-XB(I))/(N-1))                              
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,N.                                     
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    N   - THE NUMBER OF POINTS TO BE USED IN THE GRID                  
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    K   - THE FIRST AND LAST POINTS IN THE MESH X WILL HAVE            
C          MULTIPLICITY K. THE INTERIOR POINTS WILL ALL HAVE            
C          MULTIPLICITY 1.                                              
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE GRID X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = 2*K-1 + (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(N-1).     
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - K.LT.1.                                                        
C    3 - XB IS NOT MONOTONE.                                            
C    4 - N.LT.2.                                                        
C                                                                       
      REAL XB(NXB),X(1)                                                 
C     REAL X(NX)                                                        
      INTEGER N                                                         
C                                                                       
      REAL DIR                                                          
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(16H LUMB - NXB.LT.2,16,1,2)             
C     IF (K.LT.1) CALL SETERR(14H LUMB - K.LT.1,14,2,2)                 
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR(' LUMB - NXB.LT.2',16,1,2)              
      IF (K.LT.1) CALL SETERR(' LUMB - K.LT.1',14,2,2)                  
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0E0) CALL SETERR                                     
C    1  (26H LUMB - XB IS NOT MONOTONE,26,3,2)                          
C/7S                                                                    
      IF (DIR.EQ.0.0E0) CALL SETERR                                     
     1  (' LUMB - XB IS NOT MONOTONE',26,3,2)                           
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((XB(I+1)-XB(I))*(DIR/ABS(DIR)).LT.0.0E0) CALL SETERR        
C    1    (26H LUMB - XB IS NOT MONOTONE,26,3,2)                        
C       IF (N.LT.2) CALL SETERR(14H LUMB - N.LT.2,14,4,2)               
C/7S                                                                    
        IF ((XB(I+1)-XB(I))*(DIR/ABS(DIR)).LT.0.0E0) CALL SETERR        
     1    (' LUMB - XB IS NOT MONOTONE',26,3,2)                         
        IF (N.LT.2) CALL SETERR(' LUMB - N.LT.2',14,4,2)                
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
      CALL LUM1(XB,NXB,N,K,1,K,X,NX)                                    
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE LUM1(XB,NXB,N,ML,MI,MR,X,NX)                           
C                                                                       
C  TO SET UP THE GRID X WHICH INCLUDES THE POINTS                       
C                                                                       
C      XB(I)+(J-1)*((XB(I+1)-XB(I))/(N-1))                              
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,N.                                     
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    N   - THE NUMBER OF POINTS TO BE USED IN THE GRID                  
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    ML  - THE MULTIPLICITY OF XB(1) IN X.                              
C    MI  - THE MULTIPLICITY OF ALL X POINTS STRICTLY                    
C          BETWEEN XB(1) AND XB(NXB).                                   
C    MR  - THE MULTIPLICITY OF XB(NXB) IN X.                            
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE GRID X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = ML +                                                   
C                (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(N-1) -1)*MI +     
C                MR.                                                    
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - ONE OF (ML,MI,MR) IS NEGATIVE.                                 
C    3 - XB IS NOT MONOTONE.                                            
C    4 - N.LT.2.                                                        
C                                                                       
      REAL XB(NXB),X(1)                                                 
C     REAL X(NX)                                                        
      INTEGER N                                                         
C                                                                       
      REAL DIR                                                          
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(16H LUM1 - NXB.LT.2,16,1,2)             
C     IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
C    1   (37H LUM1 - ONE OF (ML,MI,MR) IS NEGATIVE,37,2,2)              
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR(' LUM1 - NXB.LT.2',16,1,2)              
      IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
     1   (' LUM1 - ONE OF (ML,MI,MR) IS NEGATIVE',37,2,2)               
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0E0) CALL SETERR                                     
C    1  (26H LUM1 - XB IS NOT MONOTONE,26,3,2)                          
C/7S                                                                    
      IF (DIR.EQ.0.0E0) CALL SETERR                                     
     1  (' LUM1 - XB IS NOT MONOTONE',26,3,2)                           
C/                                                                      
C                                                                       
      MLT=ML                                                            
      MRT=0                                                             
      NXI=0                                                             
      NXBM1=NXB-1                                                       
C                                                                       
C ... SET THE MESH UP, INTERVAL BY INTERVAL.                            
C                                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((XB(I+1)-XB(I))*(DIR/ABS(DIR)).LT.0.0E0) CALL SETERR        
C    1    (26H LUM1 - XB IS NOT MONOTONE,26,3,2)                        
C       IF (N.LT.2) CALL SETERR(14H LUM1 - N.LT.2,14,4,2)               
C/7S                                                                    
        IF ((XB(I+1)-XB(I))*(DIR/ABS(DIR)).LT.0.0E0) CALL SETERR        
     1    (' LUM1 - XB IS NOT MONOTONE',26,3,2)                         
        IF (N.LT.2) CALL SETERR(' LUM1 - N.LT.2',14,4,2)                
C/                                                                      
C                                                                       
        IF (XB(I+1).EQ.XB(NXB)) MRT=MR                                  
        CALL UM1(XB(I),XB(I+1),N,MLT,MI,MRT,X(NXI+1),NXT)               
        MLT=MI                                                          
        NXI=NXI+NXT                                                     
 10     CONTINUE                                                        
C                                                                       
      NX=NXI                                                            
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IPUMD(XB,NXB,NA,NX)                              
C                                                                       
C  TO ALLOCATE AND SET UP THE GRID X WHICH INCLUDES THE POINTS          
C                                                                       
C            XB(I)+(J-1)*((XB(I+1)-XB(I))/(NA(I)-1))                    
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,NA(I).                                 
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    NA  - NA(I) GIVES THE NUMBER OF POINTS TO BE USED IN THE GRID      
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - X(I)=WS(I+IPUMD-1) FOR I=1,...,NX.                            
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C            NX = 1 + SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(NA(I)-1).     
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX REAL WORDS ARE LEFT                     
C                            ON THE STACK.                              
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - XB IS NOT MONOTONE.                                            
C    3 - NA(I).LT.2.                                                    
C                                                                       
      REAL XB(NXB)                                                      
      INTEGER NA(1)                                                     
C     INTEGER NA(NXB-1)                                                 
C                                                                       
      REAL DIR                                                          
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(17H IPUMD - NXB.LT.2,17,1,2)            
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR(' IPUMD - NXB.LT.2',17,1,2)             
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0E0) CALL SETERR                                     
C    1  (27H IPUMD - XB IS NOT MONOTONE,27,2,2)                         
C/7S                                                                    
      IF (DIR.EQ.0.0E0) CALL SETERR                                     
     1  (' IPUMD - XB IS NOT MONOTONE',27,2,2)                          
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((DIR/ABS(DIR))*(XB(I+1)-XB(I)).LT.0.0E0) CALL SETERR        
C    1    (27H IPUMD - XB IS NOT MONOTONE,27,2,2)                       
C       IF (NA(I).LT.2) CALL SETERR(19H IPUMD - NA(I).LT.2,19,3,2)      
C/7S                                                                    
        IF ((DIR/ABS(DIR))*(XB(I+1)-XB(I)).LT.0.0E0) CALL SETERR        
     1    (' IPUMD - XB IS NOT MONOTONE',27,2,2)                        
        IF (NA(I).LT.2) CALL SETERR(' IPUMD - NA(I).LT.2',19,3,2)       
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
C ... MAKE THE MESH X.                                                  
C                                                                       
      IPUMD=IPUMB(XB,NXB,NA,1,NX)                                       
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IPUMB(XB,NXB,NA,K,NX)                            
C                                                                       
C  TO ALLOCATE AND SET UP THE GRID X WHICH INCLUDES THE POINTS          
C                                                                       
C            XB(I)+(J-1)*((XB(I+1)-XB(I))/(NA(I)-1))                    
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,NA(I).                                 
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    NA  - NA(I) GIVES THE NUMBER OF POINTS TO BE USED IN THE GRID      
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    K   - THE FIRST AND LAST POINTS OF THE MESH X WILL HAVE            
C          MULTIPLICITY K. THE INTERIOR POINTS WILL ALL HAVE            
C          MULTIPLICITY 1.                                              
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - X(I)=WS(I+IPUMB-1) FOR I=1,...,NX.                            
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = 2*K-1 + (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(NA(I)-1). 
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX REAL WORDS ARE LEFT                     
C                            ON THE STACK.                              
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - K.LT.1.                                                        
C    3 - XB IS NOT MONOTONE.                                            
C    4 - NA(I).LT.2.                                                    
C                                                                       
      REAL XB(NXB)                                                      
      INTEGER NA(1)                                                     
C     INTEGER NA(NXB-1)                                                 
C                                                                       
      REAL DIR                                                          
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(17H IPUMB - NXB.LT.2,17,1,2)            
C     IF (K.LT.1) CALL SETERR(15H IPUMB - K.LT.1,15,2,2)                
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR(' IPUMB - NXB.LT.2',17,1,2)             
      IF (K.LT.1) CALL SETERR(' IPUMB - K.LT.1',15,2,2)                 
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0E0) CALL SETERR                                     
C    1  (27H IPUMB - XB IS NOT MONOTONE,27,3,2)                         
C/7S                                                                    
      IF (DIR.EQ.0.0E0) CALL SETERR                                     
     1  (' IPUMB - XB IS NOT MONOTONE',27,3,2)                          
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((DIR/ABS(DIR))*(XB(I+1)-XB(I)).LT.0.0E0) CALL SETERR        
C    1    (27H IPUMB - XB IS NOT MONOTONE,27,3,2)                       
C       IF (NA(I).LT.2) CALL SETERR(19H IPUMB - NA(I).LT.2,19,4,2)      
C/7S                                                                    
        IF ((DIR/ABS(DIR))*(XB(I+1)-XB(I)).LT.0.0E0) CALL SETERR        
     1    (' IPUMB - XB IS NOT MONOTONE',27,3,2)                        
        IF (NA(I).LT.2) CALL SETERR(' IPUMB - NA(I).LT.2',19,4,2)       
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
C ... MAKE THE MESH X.                                                  
C                                                                       
      IPUMB=IPUM1(XB,NXB,NA,K,1,K,NX)                                   
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IPUM1(XB,NXB,NA,ML,MI,MR,NX)                     
C                                                                       
C  TO ALLOCATE AND SET UP THE GRID X WHICH INCLUDES THE POINTS          
C                                                                       
C            XB(I)+(J-1)*((XB(I+1)-XB(I))/(NA(I)-1))                    
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,NA(I).                                 
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    NA  - NA(I) GIVES THE NUMBER OF POINTS TO BE USED IN THE GRID      
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    ML  - THE MULTIPLICITY OF XB(1) IN X.                              
C    MI  - THE MULTIPLICITY OF ALL X POINTS STRICTLY                    
C          BETWEEN XB(1) AND XB(NXB).                                   
C    MR  - THE MULTIPLICITY OF XB(NXB) IN X.                            
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - X(I)=WS(I+IPUM1-1) FOR I=1,...,NX.                            
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = ML +                                                   
C                (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(NA(I)-1) -1)*MI + 
C                MR.                                                    
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX REAL WORDS ARE LEFT                     
C                            ON THE STACK.                              
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - ONE OF (ML,MI,MR) IS NEGATIVE.                                 
C    3 - XB IS NOT MONOTONE.                                            
C    4 - NA(I).LT.2.                                                    
C                                                                       
      REAL XB(NXB)                                                      
      INTEGER NA(1)                                                     
C     INTEGER NA(NXB-1)                                                 
C                                                                       
      REAL DIR                                                          
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      REAL WS(1)                                                        
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(17H IPUM1 - NXB.LT.2,17,1,2)            
C     IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
C    1  (38H IPUM1 - ONE OF (ML,MI,MR) IS NEGATIVE,38,2,2)              
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR(' IPUM1 - NXB.LT.2',17,1,2)             
      IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
     1  (' IPUM1 - ONE OF (ML,MI,MR) IS NEGATIVE',38,2,2)               
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0E0) CALL SETERR                                     
C    1  (27H IPUM1 - XB IS NOT MONOTONE,27,3,2)                         
C/7S                                                                    
      IF (DIR.EQ.0.0E0) CALL SETERR                                     
     1  (' IPUM1 - XB IS NOT MONOTONE',27,3,2)                          
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      NXI=ML+MR-MI                                                      
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((DIR/ABS(DIR))*(XB(I+1)-XB(I)).LT.0.0E0) CALL SETERR        
C    1    (27H IPUM1 - XB IS NOT MONOTONE,27,3,2)                       
C       IF (NA(I).LT.2) CALL SETERR(19H IPUM1 - NA(I).LT.2,19,4,2)      
C/7S                                                                    
        IF ((DIR/ABS(DIR))*(XB(I+1)-XB(I)).LT.0.0E0) CALL SETERR        
     1    (' IPUM1 - XB IS NOT MONOTONE',27,3,2)                        
        IF (NA(I).LT.2) CALL SETERR(' IPUM1 - NA(I).LT.2',19,4,2)       
C/                                                                      
        NXI=NXI+(NA(I)-1)*MI                                            
 10     CONTINUE                                                        
C                                                                       
C ... ALLOCATE SPACE FOR THE MESH X.                                    
C                                                                       
      IPUM1=ISTKGT(NXI,3)                                               
C                                                                       
      CALL PUM1(XB,NXB,NA,ML,MI,MR,WS(IPUM1),NX)                        
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE PUMD(XB,NXB,NA,X,NX)                                   
C                                                                       
C  TO SET UP THE GRID X WHICH INCLUDES THE POINTS                       
C                                                                       
C      XB(I)+(J-1)*((XB(I+1)-XB(I))/(NA(I)-1))                          
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,NA(I).                                 
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    NA  - NA(I) GIVES THE NUMBER OF POINTS TO BE USED IN THE GRID      
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE GRID X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = 1 + (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(NA(I)-1).     
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - XB IS NOT MONOTONE.                                            
C    3 - NA(I).LT.2.                                                    
C                                                                       
      REAL XB(NXB),X(1)                                                 
C     REAL X(NX)                                                        
      INTEGER NA(1)                                                     
C     INTEGER NA(NXB-1)                                                 
C                                                                       
      REAL DIR                                                          
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(16H PUMD - NXB.LT.2,16,1,2)             
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR(' PUMD - NXB.LT.2',16,1,2)              
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0E0) CALL SETERR                                     
C    1  (26H PUMD - XB IS NOT MONOTONE,26,2,2)                          
C/7S                                                                    
      IF (DIR.EQ.0.0E0) CALL SETERR                                     
     1  (' PUMD - XB IS NOT MONOTONE',26,2,2)                           
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((XB(I+1)-XB(I))*(DIR/ABS(DIR)).LT.0.0E0) CALL SETERR        
C    1    (26H PUMD - XB IS NOT MONOTONE,26,2,2)                        
C       IF (NA(I).LT.2) CALL SETERR(18H PUMD - NA(I).LT.2,18,3,2)       
C/7S                                                                    
        IF ((XB(I+1)-XB(I))*(DIR/ABS(DIR)).LT.0.0E0) CALL SETERR        
     1    (' PUMD - XB IS NOT MONOTONE',26,2,2)                         
        IF (NA(I).LT.2) CALL SETERR(' PUMD - NA(I).LT.2',18,3,2)        
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
      CALL PUMB(XB,NXB,NA,1,X,NX)                                       
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE PUMB(XB,NXB,NA,K,X,NX)                                 
C                                                                       
C  TO SET UP THE GRID X WHICH INCLUDES THE POINTS                       
C                                                                       
C      XB(I)+(J-1)*((XB(I+1)-XB(I))/(NA(I)-1))                          
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,NA(I).                                 
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    NA  - NA(I) GIVES THE NUMBER OF POINTS TO BE USED IN THE GRID      
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    K   - THE FIRST AND LAST POINTS IN THE MESH X WILL HAVE            
C          MULTIPLICITY K. THE INTERIOR POINTS WILL ALL HAVE            
C          MULTIPLICITY 1.                                              
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE GRID X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = 2*K-1 + (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(NA(I)-1). 
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - K.LT.1.                                                        
C    3 - XB IS NOT MONOTONE.                                            
C    4 - NA(I).LT.2.                                                    
C                                                                       
      REAL XB(NXB),X(1)                                                 
C     REAL X(NX)                                                        
      INTEGER NA(1)                                                     
C     INTEGER NA(NXB-1)                                                 
C                                                                       
      REAL DIR                                                          
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(16H PUMB - NXB.LT.2,16,1,2)             
C     IF (K.LT.1) CALL SETERR(14H PUMB - K.LT.1,14,2,2)                 
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR(' PUMB - NXB.LT.2',16,1,2)              
      IF (K.LT.1) CALL SETERR(' PUMB - K.LT.1',14,2,2)                  
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0E0) CALL SETERR                                     
C    1  (26H PUMB - XB IS NOT MONOTONE,26,3,2)                          
C/7S                                                                    
      IF (DIR.EQ.0.0E0) CALL SETERR                                     
     1  (' PUMB - XB IS NOT MONOTONE',26,3,2)                           
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((XB(I+1)-XB(I))*(DIR/ABS(DIR)).LT.0.0E0) CALL SETERR        
C    1    (26H PUMB - XB IS NOT MONOTONE,26,3,2)                        
C       IF (NA(I).LT.2) CALL SETERR(18H PUMB - NA(I).LT.2,18,4,2)       
C/7S                                                                    
        IF ((XB(I+1)-XB(I))*(DIR/ABS(DIR)).LT.0.0E0) CALL SETERR        
     1    (' PUMB - XB IS NOT MONOTONE',26,3,2)                         
        IF (NA(I).LT.2) CALL SETERR(' PUMB - NA(I).LT.2',18,4,2)        
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
      CALL PUM1(XB,NXB,NA,K,1,K,X,NX)                                   
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE PUM1(XB,NXB,NA,ML,MI,MR,X,NX)                          
C                                                                       
C  TO SET UP THE GRID X WHICH INCLUDES THE POINTS                       
C                                                                       
C      XB(I)+(J-1)*((XB(I+1)-XB(I))/(NA(I)-1))                          
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,NA(I).                                 
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    NA  - NA(I) GIVES THE NUMBER OF POINTS TO BE USED IN THE GRID      
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    ML  - THE MULTIPLICITY OF XB(1) IN X.                              
C    MI  - THE MULTIPLICITY OF ALL X POINTS STRICTLY                    
C          BETWEEN XB(1) AND XB(NXB).                                   
C    MR  - THE MULTIPLICITY OF XB(NXB) IN X.                            
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE GRID X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = ML +                                                   
C                (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(NA(I)-1) -1)*MI + 
C                MR.                                                    
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - ONE OF (ML,MI,MR) IS NEGATIVE.                                 
C    3 - XB IS NOT MONOTONE.                                            
C    4 - NA(I).LT.2.                                                    
C                                                                       
      REAL XB(NXB),X(1)                                                 
C     REAL X(NX)                                                        
      INTEGER NA(1)                                                     
C     INTEGER NA(NXB-1)                                                 
C                                                                       
      REAL DIR                                                          
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(16H PUM1 - NXB.LT.2,16,1,2)             
C     IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
C    1   (37H PUM1 - ONE OF (ML,MI,MR) IS NEGATIVE,37,2,2)              
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR(' PUM1 - NXB.LT.2',16,1,2)              
      IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
     1   (' PUM1 - ONE OF (ML,MI,MR) IS NEGATIVE',37,2,2)               
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0E0) CALL SETERR                                     
C    1  (26H PUM1 - XB IS NOT MONOTONE,26,3,2)                          
C/7S                                                                    
      IF (DIR.EQ.0.0E0) CALL SETERR                                     
     1  (' PUM1 - XB IS NOT MONOTONE',26,3,2)                           
C/                                                                      
C                                                                       
      MLT=ML                                                            
      MRT=0                                                             
      NXI=0                                                             
      NXBM1=NXB-1                                                       
C                                                                       
C ... SET THE MESH UP, INTERVAL BY INTERVAL.                            
C                                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((XB(I+1)-XB(I))*(DIR/ABS(DIR)).LT.0.0E0) CALL SETERR        
C    1    (26H PUM1 - XB IS NOT MONOTONE,26,3,2)                        
C       IF (NA(I).LT.2) CALL SETERR(18H PUM1 - NA(I).LT.2,18,4,2)       
C/7S                                                                    
        IF ((XB(I+1)-XB(I))*(DIR/ABS(DIR)).LT.0.0E0) CALL SETERR        
     1    (' PUM1 - XB IS NOT MONOTONE',26,3,2)                         
        IF (NA(I).LT.2) CALL SETERR(' PUM1 - NA(I).LT.2',18,4,2)        
C/                                                                      
C                                                                       
        IF (XB(I+1).EQ.XB(NXB)) MRT=MR                                  
        CALL UM1(XB(I),XB(I+1),NA(I),MLT,MI,MRT,X(NXI+1),NXT)           
        MLT=MI                                                          
        NXI=NXI+NXT                                                     
 10     CONTINUE                                                        
C                                                                       
      NX=NXI                                                            
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE UMD(A,B,NAB,X)                                         
C                                                                       
C  TO SET UP THE MESH X(1),...,X(NAB) ON (A,B) WHICH INCLUDES THE       
C  POINTS A + (I-1)*((B-A)/(NAB-1)), I=1,...,NAB.                       
C                                                                       
C  INPUT -                                                              
C                                                                       
C    A   - LEFT HAND END POINT.                                         
C    B   - RIGHT HAND END POINT.                                        
C    NAB - NUMBER OF POINTS TO BE USED ON (A,B).                        
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE MESH X.                                                   
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - A=B.                                                           
C    2 - NAB.LT.2.                                                      
C                                                                       
      REAL A,B,X(NAB)                                                   
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (A.EQ.B) CALL SETERR(10H UMD - A=B,10,1,2)                     
C     IF (NAB.LT.2) CALL SETERR(15H UMD - NAB.LT.2,15,2,2)              
C/7S                                                                    
      IF (A.EQ.B) CALL SETERR(' UMD - A=B',10,1,2)                      
      IF (NAB.LT.2) CALL SETERR(' UMD - NAB.LT.2',15,2,2)               
C/                                                                      
C                                                                       
      CALL UMB(A,B,NAB,1,X,NX)                                          
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE UMB(A,B,NAB,K,X,NX)                                    
C                                                                       
C  TO SET UP THE MESH X(1),...,X(NX) ON (A,B) WHICH INCLUDES THE        
C  POINTS A + (I-1)*((B-A)/(NAB-1)), I=1,...,NAB WITH MULTIPLICITIES    
C  K FOR I=1, 1 FOR 1.LT.I.LT.NAB AND K FOR I=NAB.                      
C                                                                       
C  INPUT -                                                              
C                                                                       
C    A   - LEFT HAND END POINT.                                         
C    B   - RIGHT HAND END POINT.                                        
C    NAB - NUMBER OF POINTS TO BE USED ON (A,B).                        
C    K   - THE B-SPLINE ORDER FOR THE MESH.                             
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE MESH X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X,                               
C                                                                       
C            NX = 2*(K-1) + NAB.                                        
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - A=B.                                                           
C    2 - NAB.LT.2.                                                      
C    3 - K.LT.1.                                                        
C                                                                       
      REAL A,B,X(1)                                                     
C     REAL X(NX)                                                        
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (A.EQ.B) CALL SETERR(10H UMB - A=B,10,1,2)                     
C     IF (NAB.LT.2) CALL SETERR(15H UMB - NAB.LT.2,15,2,2)              
C     IF (K.LT.1) CALL SETERR(13H UMB - K.LT.1,13,3,2)                  
C/7S                                                                    
      IF (A.EQ.B) CALL SETERR(' UMB - A=B',10,1,2)                      
      IF (NAB.LT.2) CALL SETERR(' UMB - NAB.LT.2',15,2,2)               
      IF (K.LT.1) CALL SETERR(' UMB - K.LT.1',13,3,2)                   
C/                                                                      
C                                                                       
      CALL UM1(A,B,NAB,K,1,K,X,NX)                                      
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE UM1(A,B,NAB,MA,MI,MB,X,NX)                             
C                                                                       
C  TO SET UP THE MESH X(1),...,X(NX) ON (A,B) WHICH INCLUDES THE        
C  POINTS A + (I-1)*((B-A)/(NAB-1)), I=1,...,NAB WITH MULTIPLICITIES    
C  MA FOR I=1, MI FOR 1.LT.I.LT.NAB AND MB FOR I=NAB.                   
C                                                                       
C  INPUT -                                                              
C                                                                       
C    A   - LEFT HAND END POINT.                                         
C    B   - RIGHT HAND END POINT.                                        
C    NAB - NUMBER OF POINTS TO BE USED ON (A,B).                        
C    MA  - THE MULTIPLICITY OF A IN X.                                  
C    MI  - THE MULTIPLICITY OF ALL INTERIOR POINTS OF X.                
C    MB  - THE MULTIPLICITY OF B IN X.                                  
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE MESH X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X,                               
C                                                                       
C            NX = MA + MI*(NAB-2) + MB.                                 
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - A=B.                                                           
C    2 - NAB.LT.2.                                                      
C    3 - ONE OF (MA,MI,MB) IS NEGATIVE.                                 
C                                                                       
      REAL A,B,X(1)                                                     
C     REAL X(NX)                                                        
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (A.EQ.B) CALL SETERR(10H UM1 - A=B,10,1,2)                     
C     IF (NAB.LT.2) CALL SETERR(15H UM1 - NAB.LT.2,15,2,2)              
C     IF (MA.LT.0.OR.MI.LT.0.OR.MB.LT.0) CALL SETERR                    
C    1   (36H UM1 - ONE OF (MA,MI,MB) IS NEGATIVE,36,3,2)               
C/7S                                                                    
      IF (A.EQ.B) CALL SETERR(' UM1 - A=B',10,1,2)                      
      IF (NAB.LT.2) CALL SETERR(' UM1 - NAB.LT.2',15,2,2)               
      IF (MA.LT.0.OR.MI.LT.0.OR.MB.LT.0) CALL SETERR                    
     1   (' UM1 - ONE OF (MA,MI,MB) IS NEGATIVE',36,3,2)                
C/                                                                      
C                                                                       
      NXI=0                                                             
C                                                                       
C ... SET THE LEFT HAND END POINT.                                      
C                                                                       
      IF (MA.EQ.0) GO TO 20                                             
      DO 10 I=1,MA                                                      
         NXI=NXI+1                                                      
 10      X(NXI)=A                                                       
C                                                                       
C ... SET THE INTERIOR POINTS.                                          
C                                                                       
 20   IF (NAB.EQ.2.OR.MI.EQ.0) GO TO 40                                 
      NABM1=NAB-1                                                       
      DO 30 I=2,NABM1                                                   
         DO 30 J=1,MI                                                   
            NXI=NXI+1                                                   
 30         X(NXI)=A+FLOAT(I-1)*((B-A)/FLOAT(NAB-1))                    
C                                                                       
C ... SET THE RIGHT HAND END POINT.                                     
C                                                                       
 40   IF (MB.EQ.0) GO TO 60                                             
      DO 50 I=1,MB                                                      
         NXI=NXI+1                                                      
 50      X(NXI)=B                                                       
 60   NX=NXI                                                            
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IDUMD(A,B,NAB)                                   
C                                                                       
C  TO SET UP THE MESH X(1),...,X(NAB) ON (A,B) WHICH INCLUDES THE       
C  POINTS A + (I-1)*((B-A)/(NAB-1)), I=1,...,NAB.                       
C                                                                       
C  INPUT -                                                              
C                                                                       
C    A   - LEFT HAND END POINT.                                         
C    B   - RIGHT HAND END POINT.                                        
C    NAB - NUMBER OF POINTS TO BE USED ON (A,B).                        
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    IDUMD - THE POINTER TO THE MESH OF LENGTH NAB IN THE STACK.        
C                                                                       
C  SCRATCH SPACE ALLOCATED - NAB DOUBLE PRECISION LOCATIONS             
C                            ARE LEFT ON THE STACK.                     
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - A=B.                                                           
C    2 - NAB.LT.2.                                                      
C                                                                       
      DOUBLE PRECISION A,B                                              
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (A.EQ.B) CALL SETERR(11HIDUMD - A=B,11,1,2)                    
C     IF (NAB.LT.2) CALL SETERR(16HIDUMD - NAB.LT.2,16,2,2)             
C/7S                                                                    
      IF (A.EQ.B) CALL SETERR('IDUMD - A=B',11,1,2)                     
      IF (NAB.LT.2) CALL SETERR('IDUMD - NAB.LT.2',16,2,2)              
C/                                                                      
C                                                                       
      IDUMD=IDUMB(A,B,NAB,1,NX)                                         
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IDUMB(A,B,NAB,K,NX)                              
C                                                                       
C  TO SET UP THE MESH X(1),...,X(NX) ON (A,B) WHICH INCLUDES THE        
C  POINTS A + (I-1)*((B-A)/(NAB-1)), I=1,...,NAB WITH MULTIPLICITIES    
C  K FOR I=1, 1 FOR 1.LT.I.LT.NAB AND K FOR I=NAB.                      
C                                                                       
C  INPUT -                                                              
C                                                                       
C    A   - LEFT HAND END POINT.                                         
C    B   - RIGHT HAND END POINT.                                        
C    NAB - NUMBER OF POINTS TO BE USED ON (A,B).                        
C    K   - THE B-SPLINE ORDER FOR THE MESH.                             
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    NX    - THE NUMBER OF MESH POINTS IN X,                            
C                                                                       
C               NX = 2*(K-1) + NAB.                                     
C                                                                       
C    IDUMB - THE POINTER TO THE MESH OF LENGTH NX IN THE STACK.         
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX DOUBLE PRECISION LOCATIONS              
C                            ARE LEFT ON THE STACK.                     
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - A=B.                                                           
C    2 - NAB.LT.2.                                                      
C    3 - K.LT.1.                                                        
C                                                                       
      DOUBLE PRECISION A,B                                              
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (A.EQ.B) CALL SETERR(11HIDUMB - A=B,11,1,2)                    
C     IF (NAB.LT.2) CALL SETERR(16HIDUMB - NAB.LT.2,16,2,2)             
C     IF (K.LT.1) CALL SETERR(14HIDUMB - K.LT.1,14,3,2)                 
C/7S                                                                    
      IF (A.EQ.B) CALL SETERR('IDUMB - A=B',11,1,2)                     
      IF (NAB.LT.2) CALL SETERR('IDUMB - NAB.LT.2',16,2,2)              
      IF (K.LT.1) CALL SETERR('IDUMB - K.LT.1',14,3,2)                  
C/                                                                      
C                                                                       
      IDUMB=IDUM1(A,B,NAB,K,1,K,NX)                                     
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IDUM1(A,B,NAB,MA,MI,MB,NX)                       
C                                                                       
C  TO SET UP THE MESH X(1),...,X(NX) ON (A,B) WHICH INCLUDES THE        
C  POINTS A + (I-1)*((B-A)/(NAB-1)), I=1,...,NAB WITH MULTIPLICITIES    
C  MA FOR I=1, MI FOR 1.LT.I.LT.NAB AND MB FOR I=NAB.                   
C                                                                       
C  INPUT -                                                              
C                                                                       
C    A   - LEFT HAND END POINT.                                         
C    B   - RIGHT HAND END POINT.                                        
C    NAB - NUMBER OF POINTS TO BE USED ON (A,B).                        
C    MA  - THE MULTIPLICITY OF A IN X.                                  
C    MI  - THE MULTIPLICITY OF ALL INTERIOR POINTS OF X.                
C    MB  - THE MULTIPLICITY OF B IN X.                                  
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    NX    - THE NUMBER OF MESH POINTS IN X,                            
C                                                                       
C               NX = MA + MI*(NAB-2) + MB.                              
C                                                                       
C    IDUM1 - THE POINTER TO THE MESH OF LENGTH NX IN THE STACK.         
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX DOUBLE PRECISION LOCATIONS              
C                            ARE LEFT ON THE STACK.                     
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - A=B.                                                           
C    2 - NAB.LT.2.                                                      
C    3 - ONE OF (MA,MI,MB) IS NEGATIVE.                                 
C                                                                       
      DOUBLE PRECISION A,B                                              
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      DOUBLE PRECISION WS(1)                                            
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (A.EQ.B) CALL SETERR(11HIDUM1 - A=B,11,1,2)                    
C     IF (NAB.LT.2) CALL SETERR(16HIDUM1 - NAB.LT.2,16,2,2)             
C     IF (MA.LT.0.OR.MI.LT.0.OR.MB.LT.0) CALL SETERR                    
C    1   (37HIDUM1 - ONE OF (MA,MI,MB) IS NEGATIVE,37,3,2)              
C/7S                                                                    
      IF (A.EQ.B) CALL SETERR('IDUM1 - A=B',11,1,2)                     
      IF (NAB.LT.2) CALL SETERR('IDUM1 - NAB.LT.2',16,2,2)              
      IF (MA.LT.0.OR.MI.LT.0.OR.MB.LT.0) CALL SETERR                    
     1   ('IDUM1 - ONE OF (MA,MI,MB) IS NEGATIVE',37,3,2)               
C/                                                                      
C                                                                       
C ... ALLOCATE THE MESH.                                                
C                                                                       
      IDUM1=ISTKGT(MA+MI*(NAB-2)+MB,4)                                  
C                                                                       
      CALL DUM1(A,B,NAB,MA,MI,MB,WS(IDUM1),NX)                          
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IDLUMD(XB,NXB,N,NX)                              
C                                                                       
C  TO ALLOCATE AND SET UP THE GRID X WHICH INCLUDES THE POINTS          
C                                                                       
C            XB(I)+(J-1)*((XB(I+1)-XB(I))/(N-1))                        
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,N.                                     
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    N   - THE NUMBER OF POINTS TO BE USED IN THE GRID                  
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - X(I)=WS(I+IDLUMD-1) FOR I=1,...,NX.                           
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C            NX = 1 + SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(N-1).         
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX DOUBLE PRECISION WORDS ARE LEFT         
C                            ON THE STACK.                              
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - XB IS NOT MONOTONE.                                            
C    3 - N.LT.2.                                                        
C                                                                       
      DOUBLE PRECISION XB(NXB)                                          
      INTEGER N                                                         
C                                                                       
      DOUBLE PRECISION DIR                                              
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(17HIDLUMD - NXB.LT.2,17,1,2)            
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR('IDLUMD - NXB.LT.2',17,1,2)             
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0D0) CALL SETERR                                     
C    1  (27HIDLUMD - XB IS NOT MONOTONE,27,2,2)                         
C/7S                                                                    
      IF (DIR.EQ.0.0D0) CALL SETERR                                     
     1  ('IDLUMD - XB IS NOT MONOTONE',27,2,2)                          
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((DIR/DABS(DIR))*(XB(I+1)-XB(I)).LT.0.0D0) CALL SETERR       
C    1    (27HIDLUMD - XB IS NOT MONOTONE,27,2,2)                       
C       IF (N.LT.2) CALL SETERR(15HIDLUMD - N.LT.2,15,3,2)              
C/7S                                                                    
        IF ((DIR/DABS(DIR))*(XB(I+1)-XB(I)).LT.0.0D0) CALL SETERR       
     1    ('IDLUMD - XB IS NOT MONOTONE',27,2,2)                        
        IF (N.LT.2) CALL SETERR('IDLUMD - N.LT.2',15,3,2)               
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
C ... MAKE THE MESH X.                                                  
C                                                                       
      IDLUMD=IDLUMB(XB,NXB,N,1,NX)                                      
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IDLUMB(XB,NXB,N,K,NX)                            
C                                                                       
C  TO ALLOCATE AND SET UP THE GRID X WHICH INCLUDES THE POINTS          
C                                                                       
C            XB(I)+(J-1)*((XB(I+1)-XB(I))/(N-1))                        
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,N.                                     
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    N   - THE NUMBER OF POINTS TO BE USED IN THE GRID                  
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    K   - THE FIRST AND LAST POINTS OF THE MESH X WILL HAVE            
C          MULTIPLICITY K. THE INTERIOR POINTS WILL ALL HAVE            
C          MULTIPLICITY 1.                                              
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - X(I)=WS(I+IDLUMB-1) FOR I=1,...,NX.                           
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = 2*K-1 + (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(N-1).     
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX DOUBLE PRECISION WORDS ARE LEFT         
C                            ON THE STACK.                              
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - K.LT.1.                                                        
C    3 - XB IS NOT MONOTONE.                                            
C    4 - N.LT.2.                                                        
C                                                                       
      DOUBLE PRECISION XB(NXB)                                          
      INTEGER N                                                         
C                                                                       
      DOUBLE PRECISION DIR                                              
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(17HIDLUMB - NXB.LT.2,17,1,2)            
C     IF (K.LT.1) CALL SETERR(15HIDLUMB - K.LT.1,15,2,2)                
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR('IDLUMB - NXB.LT.2',17,1,2)             
      IF (K.LT.1) CALL SETERR('IDLUMB - K.LT.1',15,2,2)                 
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0D0) CALL SETERR                                     
C    1  (27HIDLUMB - XB IS NOT MONOTONE,27,3,2)                         
C/7S                                                                    
      IF (DIR.EQ.0.0D0) CALL SETERR                                     
     1  ('IDLUMB - XB IS NOT MONOTONE',27,3,2)                          
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((DIR/DABS(DIR))*(XB(I+1)-XB(I)).LT.0.0D0) CALL SETERR       
C    1    (27HIDLUMB - XB IS NOT MONOTONE,27,3,2)                       
C       IF (N.LT.2) CALL SETERR(15HIDLUMB - N.LT.2,15,4,2)              
C/7S                                                                    
        IF ((DIR/DABS(DIR))*(XB(I+1)-XB(I)).LT.0.0D0) CALL SETERR       
     1    ('IDLUMB - XB IS NOT MONOTONE',27,3,2)                        
        IF (N.LT.2) CALL SETERR('IDLUMB - N.LT.2',15,4,2)               
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
C ... MAKE THE MESH X.                                                  
C                                                                       
      IDLUMB=IDLUM1(XB,NXB,N,K,1,K,NX)                                  
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IDLUM1(XB,NXB,N,ML,MI,MR,NX)                     
C                                                                       
C  TO ALLOCATE AND SET UP THE GRID X WHICH INCLUDES THE POINTS          
C                                                                       
C            XB(I)+(J-1)*((XB(I+1)-XB(I))/(N-1))                        
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,N.                                     
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    N   - THE NUMBER OF POINTS TO BE USED IN THE GRID                  
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    ML  - THE MULTIPLICITY OF XB(1) IN X.                              
C    MI  - THE MULTIPLICITY OF ALL X POINTS STRICTLY                    
C          BETWEEN XB(1) AND XB(NXB).                                   
C    MR  - THE MULTIPLICITY OF XB(NXB) IN X.                            
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - X(I)=WS(I+IDLUM1-1) FOR I=1,...,NX.                           
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = ML +                                                   
C                (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(N-1) -1)*MI +     
C                MR.                                                    
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX DOUBLE PRECISION WORDS ARE LEFT         
C                            ON THE STACK.                              
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - ONE OF (ML,MI,MR) IS NEGATIVE.                                 
C    3 - XB IS NOT MONOTONE.                                            
C    4 - N.LT.2.                                                        
C                                                                       
      DOUBLE PRECISION XB(NXB)                                          
      INTEGER N                                                         
C                                                                       
      DOUBLE PRECISION DIR                                              
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      DOUBLE PRECISION WS(1)                                            
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(17HIDLUM1 - NXB.LT.2,17,1,2)            
C     IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
C    1  (38HIDLUM1 - ONE OF (ML,MI,MR) IS NEGATIVE,38,2,2)              
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR('IDLUM1 - NXB.LT.2',17,1,2)             
      IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
     1  ('IDLUM1 - ONE OF (ML,MI,MR) IS NEGATIVE',38,2,2)               
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0D0) CALL SETERR                                     
C    1  (27HIDLUM1 - XB IS NOT MONOTONE,27,3,2)                         
C/7S                                                                    
      IF (DIR.EQ.0.0D0) CALL SETERR                                     
     1  ('IDLUM1 - XB IS NOT MONOTONE',27,3,2)                          
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      NXI=ML+MR-MI                                                      
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((DIR/DABS(DIR))*(XB(I+1)-XB(I)).LT.0.0D0) CALL SETERR       
C    1    (27HIDLUM1 - XB IS NOT MONOTONE,27,3,2)                       
C       IF (N.LT.2) CALL SETERR(15HIDLUM1 - N.LT.2,15,4,2)              
C/7S                                                                    
        IF ((DIR/DABS(DIR))*(XB(I+1)-XB(I)).LT.0.0D0) CALL SETERR       
     1    ('IDLUM1 - XB IS NOT MONOTONE',27,3,2)                        
        IF (N.LT.2) CALL SETERR('IDLUM1 - N.LT.2',15,4,2)               
C/                                                                      
        NXI=NXI+(N-1)*MI                                                
 10     CONTINUE                                                        
C                                                                       
C ... ALLOCATE SPACE FOR THE MESH X.                                    
C                                                                       
      IDLUM1=ISTKGT(NXI,4)                                              
C                                                                       
      CALL DLUM1(XB,NXB,N,ML,MI,MR,WS(IDLUM1),NX)                       
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DLUMD(XB,NXB,N,X,NX)                                   
C                                                                       
C  TO SET UP THE GRID X WHICH INCLUDES THE POINTS                       
C                                                                       
C      XB(I)+(J-1)*((XB(I+1)-XB(I))/(N-1))                              
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,N.                                     
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    N   - THE NUMBER OF POINTS TO BE USED IN THE GRID                  
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE GRID X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = 1 + (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(N-1).         
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - XB IS NOT MONOTONE.                                            
C    3 - N.LT.2.                                                        
C                                                                       
      DOUBLE PRECISION XB(NXB),X(1)                                     
C     DOUBLE PRECISION X(NX)                                            
      INTEGER N                                                         
C                                                                       
      DOUBLE PRECISION DIR                                              
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(16HDLUMD - NXB.LT.2,16,1,2)             
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR('DLUMD - NXB.LT.2',16,1,2)              
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0D0) CALL SETERR                                     
C    1  (26HDLUMD - XB IS NOT MONOTONE,26,2,2)                          
C/7S                                                                    
      IF (DIR.EQ.0.0D0) CALL SETERR                                     
     1  ('DLUMD - XB IS NOT MONOTONE',26,2,2)                           
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((XB(I+1)-XB(I))*(DIR/DABS(DIR)).LT.0.0D0) CALL SETERR       
C    1    (26HDLUMD - XB IS NOT MONOTONE,26,2,2)                        
C       IF (N.LT.2) CALL SETERR(14HDLUMD - N.LT.2,14,3,2)               
C/7S                                                                    
        IF ((XB(I+1)-XB(I))*(DIR/DABS(DIR)).LT.0.0D0) CALL SETERR       
     1    ('DLUMD - XB IS NOT MONOTONE',26,2,2)                         
        IF (N.LT.2) CALL SETERR('DLUMD - N.LT.2',14,3,2)                
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
      CALL DLUMB(XB,NXB,N,1,X,NX)                                       
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DLUMB(XB,NXB,N,K,X,NX)                                 
C                                                                       
C  TO SET UP THE GRID X WHICH INCLUDES THE POINTS                       
C                                                                       
C      XB(I)+(J-1)*((XB(I+1)-XB(I))/(N-1))                              
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,N.                                     
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    N   - THE NUMBER OF POINTS TO BE USED IN THE GRID                  
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    K   - THE FIRST AND LAST POINTS IN THE MESH X WILL HAVE            
C          MULTIPLICITY K. THE INTERIOR POINTS WILL ALL HAVE            
C          MULTIPLICITY 1.                                              
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE GRID X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = 2*K-1 + (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(N-1).     
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - K.LT.1.                                                        
C    3 - XB IS NOT MONOTONE.                                            
C    4 - N.LT.2.                                                        
C                                                                       
      DOUBLE PRECISION XB(NXB),X(1)                                     
C     DOUBLE PRECISION X(NX)                                            
      INTEGER N                                                         
C                                                                       
      DOUBLE PRECISION DIR                                              
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(16HDLUMB - NXB.LT.2,16,1,2)             
C     IF (K.LT.1) CALL SETERR(14HDLUMB - K.LT.1,14,2,2)                 
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR('DLUMB - NXB.LT.2',16,1,2)              
      IF (K.LT.1) CALL SETERR('DLUMB - K.LT.1',14,2,2)                  
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0D0) CALL SETERR                                     
C    1  (26HDLUMB - XB IS NOT MONOTONE,26,3,2)                          
C/7S                                                                    
      IF (DIR.EQ.0.0D0) CALL SETERR                                     
     1  ('DLUMB - XB IS NOT MONOTONE',26,3,2)                           
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((XB(I+1)-XB(I))*(DIR/DABS(DIR)).LT.0.0D0) CALL SETERR       
C    1    (26HDLUMB - XB IS NOT MONOTONE,26,3,2)                        
C       IF (N.LT.2) CALL SETERR(14HDLUMB - N.LT.2,14,4,2)               
C/7S                                                                    
        IF ((XB(I+1)-XB(I))*(DIR/DABS(DIR)).LT.0.0D0) CALL SETERR       
     1    ('DLUMB - XB IS NOT MONOTONE',26,3,2)                         
        IF (N.LT.2) CALL SETERR('DLUMB - N.LT.2',14,4,2)                
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
      CALL DLUM1(XB,NXB,N,K,1,K,X,NX)                                   
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DLUM1(XB,NXB,N,ML,MI,MR,X,NX)                          
C                                                                       
C  TO SET UP THE GRID X WHICH INCLUDES THE POINTS                       
C                                                                       
C      XB(I)+(J-1)*((XB(I+1)-XB(I))/(N-1))                              
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,N.                                     
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    N   - THE NUMBER OF POINTS TO BE USED IN THE GRID                  
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    ML  - THE MULTIPLICITY OF XB(1) IN X.                              
C    MI  - THE MULTIPLICITY OF ALL X POINTS STRICTLY                    
C          BETWEEN XB(1) AND XB(NXB).                                   
C    MR  - THE MULTIPLICITY OF XB(NXB) IN X.                            
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE GRID X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = ML +                                                   
C                (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(N-1) -1)*MI +     
C                MR.                                                    
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - ONE OF (ML,MI,MR) IS NEGATIVE.                                 
C    3 - XB IS NOT MONOTONE.                                            
C    4 - N.LT.2.                                                        
C                                                                       
      DOUBLE PRECISION XB(NXB),X(1)                                     
C     DOUBLE PRECISION X(NX)                                            
      INTEGER N                                                         
C                                                                       
      DOUBLE PRECISION DIR                                              
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(16HDLUM1 - NXB.LT.2,16,1,2)             
C     IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
C    1   (37HDLUM1 - ONE OF (ML,MI,MR) IS NEGATIVE,37,2,2)              
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR('DLUM1 - NXB.LT.2',16,1,2)              
      IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
     1   ('DLUM1 - ONE OF (ML,MI,MR) IS NEGATIVE',37,2,2)               
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0D0) CALL SETERR                                     
C    1  (26HDLUM1 - XB IS NOT MONOTONE,26,3,2)                          
C/7S                                                                    
      IF (DIR.EQ.0.0D0) CALL SETERR                                     
     1  ('DLUM1 - XB IS NOT MONOTONE',26,3,2)                           
C/                                                                      
C                                                                       
      MLT=ML                                                            
      MRT=0                                                             
      NXI=0                                                             
      NXBM1=NXB-1                                                       
C                                                                       
C ... SET THE MESH UP, INTERVAL BY INTERVAL.                            
C                                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((XB(I+1)-XB(I))*(DIR/DABS(DIR)).LT.0.0D0) CALL SETERR       
C    1    (26HDLUM1 - XB IS NOT MONOTONE,26,3,2)                        
C       IF (N.LT.2) CALL SETERR(14HDLUM1 - N.LT.2,14,4,2)               
C/7S                                                                    
        IF ((XB(I+1)-XB(I))*(DIR/DABS(DIR)).LT.0.0D0) CALL SETERR       
     1    ('DLUM1 - XB IS NOT MONOTONE',26,3,2)                         
        IF (N.LT.2) CALL SETERR('DLUM1 - N.LT.2',14,4,2)                
C/                                                                      
C                                                                       
        IF (XB(I+1).EQ.XB(NXB)) MRT=MR                                  
        CALL DUM1(XB(I),XB(I+1),N,MLT,MI,MRT,X(NXI+1),NXT)              
        MLT=MI                                                          
        NXI=NXI+NXT                                                     
 10     CONTINUE                                                        
C                                                                       
      NX=NXI                                                            
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IDPUMD(XB,NXB,NA,NX)                             
C                                                                       
C  TO ALLOCATE AND SET UP THE GRID X WHICH INCLUDES THE POINTS          
C                                                                       
C            XB(I)+(J-1)*((XB(I+1)-XB(I))/(NA(I)-1))                    
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,NA(I).                                 
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    NA  - NA(I) GIVES THE NUMBER OF POINTS TO BE USED IN THE GRID      
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - X(I)=WS(I+IDPUMD-1) FOR I=1,...,NX.                           
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C            NX = 1 + SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(NA(I)-1).     
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX DOUBLE PRECISION WORDS ARE LEFT         
C                            ON THE STACK.                              
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - XB IS NOT MONOTONE.                                            
C    3 - NA(I).LT.2.                                                    
C                                                                       
      DOUBLE PRECISION XB(NXB)                                          
      INTEGER NA(1)                                                     
C     INTEGER NA(NXB-1)                                                 
C                                                                       
      DOUBLE PRECISION DIR                                              
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(17HIDPUMD - NXB.LT.2,17,1,2)            
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR('IDPUMD - NXB.LT.2',17,1,2)             
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0D0) CALL SETERR                                     
C    1  (27HIDPUMD - XB IS NOT MONOTONE,27,2,2)                         
C/7S                                                                    
      IF (DIR.EQ.0.0D0) CALL SETERR                                     
     1  ('IDPUMD - XB IS NOT MONOTONE',27,2,2)                          
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((DIR/DABS(DIR))*(XB(I+1)-XB(I)).LT.0.0D0) CALL SETERR       
C    1    (27HIDPUMD - XB IS NOT MONOTONE,27,2,2)                       
C       IF (NA(I).LT.2) CALL SETERR(19HIDPUMD - NA(I).LT.2,19,3,2)      
C/7S                                                                    
        IF ((DIR/DABS(DIR))*(XB(I+1)-XB(I)).LT.0.0D0) CALL SETERR       
     1    ('IDPUMD - XB IS NOT MONOTONE',27,2,2)                        
        IF (NA(I).LT.2) CALL SETERR('IDPUMD - NA(I).LT.2',19,3,2)       
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
C ... MAKE THE MESH X.                                                  
C                                                                       
      IDPUMD=IDPUMB(XB,NXB,NA,1,NX)                                     
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IDPUMB(XB,NXB,NA,K,NX)                           
C                                                                       
C  TO ALLOCATE AND SET UP THE GRID X WHICH INCLUDES THE POINTS          
C                                                                       
C            XB(I)+(J-1)*((XB(I+1)-XB(I))/(NA(I)-1))                    
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,NA(I).                                 
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    NA  - NA(I) GIVES THE NUMBER OF POINTS TO BE USED IN THE GRID      
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    K   - THE FIRST AND LAST POINTS OF THE MESH X WILL HAVE            
C          MULTIPLICITY K. THE INTERIOR POINTS WILL ALL HAVE            
C          MULTIPLICITY 1.                                              
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - X(I)=WS(I+IDPUMB-1) FOR I=1,...,NX.                           
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = 2*K-1 + (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(NA(I)-1). 
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX DOUBLE PRECISION WORDS ARE LEFT         
C                            ON THE STACK.                              
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - K.LT.1.                                                        
C    3 - XB IS NOT MONOTONE.                                            
C    4 - NA(I).LT.2.                                                    
C                                                                       
      DOUBLE PRECISION XB(NXB)                                          
      INTEGER NA(1)                                                     
C     INTEGER NA(NXB-1)                                                 
C                                                                       
      DOUBLE PRECISION DIR                                              
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(17HIDPUMB - NXB.LT.2,17,1,2)            
C     IF (K.LT.1) CALL SETERR(15HIDPUMB - K.LT.1,15,2,2)                
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR('IDPUMB - NXB.LT.2',17,1,2)             
      IF (K.LT.1) CALL SETERR('IDPUMB - K.LT.1',15,2,2)                 
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0D0) CALL SETERR                                     
C    1  (27HIDPUMB - XB IS NOT MONOTONE,27,3,2)                         
C/7S                                                                    
      IF (DIR.EQ.0.0D0) CALL SETERR                                     
     1  ('IDPUMB - XB IS NOT MONOTONE',27,3,2)                          
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((DIR/DABS(DIR))*(XB(I+1)-XB(I)).LT.0.0D0) CALL SETERR       
C    1    (27HIDPUMB - XB IS NOT MONOTONE,27,3,2)                       
C       IF (NA(I).LT.2) CALL SETERR(19HIDPUMB - NA(I).LT.2,19,4,2)      
C/7S                                                                    
        IF ((DIR/DABS(DIR))*(XB(I+1)-XB(I)).LT.0.0D0) CALL SETERR       
     1    ('IDPUMB - XB IS NOT MONOTONE',27,3,2)                        
        IF (NA(I).LT.2) CALL SETERR('IDPUMB - NA(I).LT.2',19,4,2)       
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
C ... MAKE THE MESH X.                                                  
C                                                                       
      IDPUMB=IDPUM1(XB,NXB,NA,K,1,K,NX)                                 
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IDPUM1(XB,NXB,NA,ML,MI,MR,NX)                    
C                                                                       
C  TO ALLOCATE AND SET UP THE GRID X WHICH INCLUDES THE POINTS          
C                                                                       
C            XB(I)+(J-1)*((XB(I+1)-XB(I))/(NA(I)-1))                    
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,NA(I).                                 
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    NA  - NA(I) GIVES THE NUMBER OF POINTS TO BE USED IN THE GRID      
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    ML  - THE MULTIPLICITY OF XB(1) IN X.                              
C    MI  - THE MULTIPLICITY OF ALL X POINTS STRICTLY                    
C          BETWEEN XB(1) AND XB(NXB).                                   
C    MR  - THE MULTIPLICITY OF XB(NXB) IN X.                            
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - X(I)=WS(I+IDPUM1-1) FOR I=1,...,NX.                           
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = ML +                                                   
C                (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(NA(I)-1) -1)*MI + 
C                MR.                                                    
C                                                                       
C  SCRATCH SPACE ALLOCATED - NX DOUBLE PRECISION WORDS ARE LEFT         
C                            ON THE STACK.                              
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - ONE OF (ML,MI,MR) IS NEGATIVE.                                 
C    3 - XB IS NOT MONOTONE.                                            
C    4 - NA(I).LT.2.                                                    
C                                                                       
      DOUBLE PRECISION XB(NXB)                                          
      INTEGER NA(1)                                                     
C     INTEGER NA(NXB-1)                                                 
C                                                                       
      DOUBLE PRECISION DIR                                              
C                                                                       
      COMMON /CSTAK/DS                                                  
      DOUBLE PRECISION DS(500)                                          
      DOUBLE PRECISION WS(1)                                            
      EQUIVALENCE (DS(1),WS(1))                                         
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(17HIDPUM1 - NXB.LT.2,17,1,2)            
C     IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
C    1  (38HIDPUM1 - ONE OF (ML,MI,MR) IS NEGATIVE,38,2,2)              
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR('IDPUM1 - NXB.LT.2',17,1,2)             
      IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
     1  ('IDPUM1 - ONE OF (ML,MI,MR) IS NEGATIVE',38,2,2)               
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0D0) CALL SETERR                                     
C    1  (27HIDPUM1 - XB IS NOT MONOTONE,27,3,2)                         
C/7S                                                                    
      IF (DIR.EQ.0.0D0) CALL SETERR                                     
     1  ('IDPUM1 - XB IS NOT MONOTONE',27,3,2)                          
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      NXI=ML+MR-MI                                                      
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((DIR/DABS(DIR))*(XB(I+1)-XB(I)).LT.0.0D0) CALL SETERR       
C    1    (27HIDPUM1 - XB IS NOT MONOTONE,27,3,2)                       
C       IF (NA(I).LT.2) CALL SETERR(19HIDPUM1 - NA(I).LT.2,19,4,2)      
C/7S                                                                    
        IF ((DIR/DABS(DIR))*(XB(I+1)-XB(I)).LT.0.0D0) CALL SETERR       
     1    ('IDPUM1 - XB IS NOT MONOTONE',27,3,2)                        
        IF (NA(I).LT.2) CALL SETERR('IDPUM1 - NA(I).LT.2',19,4,2)       
C/                                                                      
        NXI=NXI+(NA(I)-1)*MI                                            
 10     CONTINUE                                                        
C                                                                       
C ... ALLOCATE SPACE FOR THE MESH X.                                    
C                                                                       
      IDPUM1=ISTKGT(NXI,4)                                              
C                                                                       
      CALL DPUM1(XB,NXB,NA,ML,MI,MR,WS(IDPUM1),NX)                      
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DPUMD(XB,NXB,NA,X,NX)                                  
C                                                                       
C  TO SET UP THE GRID X WHICH INCLUDES THE POINTS                       
C                                                                       
C      XB(I)+(J-1)*((XB(I+1)-XB(I))/(NA(I)-1))                          
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,NA(I).                                 
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    NA  - NA(I) GIVES THE NUMBER OF POINTS TO BE USED IN THE GRID      
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE GRID X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = 1 + (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(NA(I)-1).     
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - XB IS NOT MONOTONE.                                            
C    3 - NA(I).LT.2.                                                    
C                                                                       
      DOUBLE PRECISION XB(NXB),X(1)                                     
C     DOUBLE PRECISION X(NX)                                            
      INTEGER NA(1)                                                     
C     INTEGER NA(NXB-1)                                                 
C                                                                       
      DOUBLE PRECISION DIR                                              
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(16HDPUMD - NXB.LT.2,16,1,2)             
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR('DPUMD - NXB.LT.2',16,1,2)              
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0D0) CALL SETERR                                     
C    1  (26HDPUMD - XB IS NOT MONOTONE,26,2,2)                          
C/7S                                                                    
      IF (DIR.EQ.0.0D0) CALL SETERR                                     
     1  ('DPUMD - XB IS NOT MONOTONE',26,2,2)                           
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((XB(I+1)-XB(I))*(DIR/DABS(DIR)).LT.0.0D0) CALL SETERR       
C    1    (26HDPUMD - XB IS NOT MONOTONE,26,2,2)                        
C       IF (NA(I).LT.2) CALL SETERR(18HDPUMD - NA(I).LT.2,18,3,2)       
C/7S                                                                    
        IF ((XB(I+1)-XB(I))*(DIR/DABS(DIR)).LT.0.0D0) CALL SETERR       
     1    ('DPUMD - XB IS NOT MONOTONE',26,2,2)                         
        IF (NA(I).LT.2) CALL SETERR('DPUMD - NA(I).LT.2',18,3,2)        
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
      CALL DPUMB(XB,NXB,NA,1,X,NX)                                      
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DPUMB(XB,NXB,NA,K,X,NX)                                
C                                                                       
C  TO SET UP THE GRID X WHICH INCLUDES THE POINTS                       
C                                                                       
C      XB(I)+(J-1)*((XB(I+1)-XB(I))/(NA(I)-1))                          
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,NA(I).                                 
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    NA  - NA(I) GIVES THE NUMBER OF POINTS TO BE USED IN THE GRID      
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    K   - THE FIRST AND LAST POINTS IN THE MESH X WILL HAVE            
C          MULTIPLICITY K. THE INTERIOR POINTS WILL ALL HAVE            
C          MULTIPLICITY 1.                                              
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE GRID X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = 2*K-1 + (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(NA(I)-1). 
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - K.LT.1.                                                        
C    3 - XB IS NOT MONOTONE.                                            
C    4 - NA(I).LT.2.                                                    
C                                                                       
      DOUBLE PRECISION XB(NXB),X(1)                                     
C     DOUBLE PRECISION X(NX)                                            
      INTEGER NA(1)                                                     
C     INTEGER NA(NXB-1)                                                 
C                                                                       
      DOUBLE PRECISION DIR                                              
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(16HDPUMB - NXB.LT.2,16,1,2)             
C     IF (K.LT.1) CALL SETERR(14HDPUMB - K.LT.1,14,2,2)                 
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR('DPUMB - NXB.LT.2',16,1,2)              
      IF (K.LT.1) CALL SETERR('DPUMB - K.LT.1',14,2,2)                  
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0D0) CALL SETERR                                     
C    1  (26HDPUMB - XB IS NOT MONOTONE,26,3,2)                          
C/7S                                                                    
      IF (DIR.EQ.0.0D0) CALL SETERR                                     
     1  ('DPUMB - XB IS NOT MONOTONE',26,3,2)                           
C/                                                                      
C                                                                       
      NXBM1=NXB-1                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((XB(I+1)-XB(I))*(DIR/DABS(DIR)).LT.0.0D0) CALL SETERR       
C    1    (26HDPUMB - XB IS NOT MONOTONE,26,3,2)                        
C       IF (NA(I).LT.2) CALL SETERR(18HDPUMB - NA(I).LT.2,18,4,2)       
C/7S                                                                    
        IF ((XB(I+1)-XB(I))*(DIR/DABS(DIR)).LT.0.0D0) CALL SETERR       
     1    ('DPUMB - XB IS NOT MONOTONE',26,3,2)                         
        IF (NA(I).LT.2) CALL SETERR('DPUMB - NA(I).LT.2',18,4,2)        
C/                                                                      
 10     CONTINUE                                                        
C                                                                       
      CALL DPUM1(XB,NXB,NA,K,1,K,X,NX)                                  
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DPUM1(XB,NXB,NA,ML,MI,MR,X,NX)                         
C                                                                       
C  TO SET UP THE GRID X WHICH INCLUDES THE POINTS                       
C                                                                       
C      XB(I)+(J-1)*((XB(I+1)-XB(I))/(NA(I)-1))                          
C                                                                       
C  FOR I=1,...,NXB-1 AND J=1,...,NA(I).                                 
C                                                                       
C  INPUT -                                                              
C                                                                       
C    XB  - THE BASIC POINTS FOR DEFINING THE GRID X.                    
C          XB MUST BE EITHER MONOTONE INCREASING OR MONOTONE DECREASING.
C          ANY MULTIPLICITIES IN XB ARE IGNORED.                        
C    NXB - THE NUMBER OF POINTS IN XB.                                  
C    NA  - NA(I) GIVES THE NUMBER OF POINTS TO BE USED IN THE GRID      
C          X FROM XB(I) TO XB(I+1), FOR I=1,...,NXB-1.                  
C    ML  - THE MULTIPLICITY OF XB(1) IN X.                              
C    MI  - THE MULTIPLICITY OF ALL X POINTS STRICTLY                    
C          BETWEEN XB(1) AND XB(NXB).                                   
C    MR  - THE MULTIPLICITY OF XB(NXB) IN X.                            
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE GRID X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X.                               
C                                                                       
C           NX = ML +                                                   
C                (SUM(I=1,...,NXB-1,XB(I).NE.XB(I+1))(NA(I)-1) -1)*MI + 
C                MR.                                                    
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - NXB.LT.2.                                                      
C    2 - ONE OF (ML,MI,MR) IS NEGATIVE.                                 
C    3 - XB IS NOT MONOTONE.                                            
C    4 - NA(I).LT.2.                                                    
C                                                                       
      DOUBLE PRECISION XB(NXB),X(1)                                     
C     DOUBLE PRECISION X(NX)                                            
      INTEGER NA(1)                                                     
C     INTEGER NA(NXB-1)                                                 
C                                                                       
      DOUBLE PRECISION DIR                                              
C                                                                       
C/6S                                                                    
C     IF (NXB.LT.2) CALL SETERR(16HDPUM1 - NXB.LT.2,16,1,2)             
C     IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
C    1   (37HDPUM1 - ONE OF (ML,MI,MR) IS NEGATIVE,37,2,2)              
C/7S                                                                    
      IF (NXB.LT.2) CALL SETERR('DPUM1 - NXB.LT.2',16,1,2)              
      IF (ML.LT.0.OR.MI.LT.0.OR.MR.LT.0) CALL SETERR                    
     1   ('DPUM1 - ONE OF (ML,MI,MR) IS NEGATIVE',37,2,2)               
C/                                                                      
C                                                                       
      DIR=XB(NXB)-XB(1)                                                 
C/6S                                                                    
C     IF (DIR.EQ.0.0D0) CALL SETERR                                     
C    1  (26HDPUM1 - XB IS NOT MONOTONE,26,3,2)                          
C/7S                                                                    
      IF (DIR.EQ.0.0D0) CALL SETERR                                     
     1  ('DPUM1 - XB IS NOT MONOTONE',26,3,2)                           
C/                                                                      
C                                                                       
      MLT=ML                                                            
      MRT=0                                                             
      NXI=0                                                             
      NXBM1=NXB-1                                                       
C                                                                       
C ... SET THE MESH UP, INTERVAL BY INTERVAL.                            
C                                                                       
      DO 10 I=1,NXBM1                                                   
        IF (XB(I).EQ.XB(I+1)) GO TO 10                                  
C/6S                                                                    
C       IF ((XB(I+1)-XB(I))*(DIR/DABS(DIR)).LT.0.0D0) CALL SETERR       
C    1    (26HDPUM1 - XB IS NOT MONOTONE,26,3,2)                        
C       IF (NA(I).LT.2) CALL SETERR(18HDPUM1 - NA(I).LT.2,18,4,2)       
C/7S                                                                    
        IF ((XB(I+1)-XB(I))*(DIR/DABS(DIR)).LT.0.0D0) CALL SETERR       
     1    ('DPUM1 - XB IS NOT MONOTONE',26,3,2)                         
        IF (NA(I).LT.2) CALL SETERR('DPUM1 - NA(I).LT.2',18,4,2)        
C/                                                                      
C                                                                       
        IF (XB(I+1).EQ.XB(NXB)) MRT=MR                                  
        CALL DUM1(XB(I),XB(I+1),NA(I),MLT,MI,MRT,X(NXI+1),NXT)          
        MLT=MI                                                          
        NXI=NXI+NXT                                                     
 10     CONTINUE                                                        
C                                                                       
      NX=NXI                                                            
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DUMD(A,B,NAB,X)                                        
C                                                                       
C  TO SET UP THE MESH X(1),...,X(NAB) ON (A,B) WHICH INCLUDES THE       
C  POINTS A + (I-1)*((B-A)/(NAB-1)), I=1,...,NAB.                       
C                                                                       
C  INPUT -                                                              
C                                                                       
C    A   - LEFT HAND END POINT.                                         
C    B   - RIGHT HAND END POINT.                                        
C    NAB - NUMBER OF POINTS TO BE USED ON (A,B).                        
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE MESH X.                                                   
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - A=B.                                                           
C    2 - NAB.LT.2.                                                      
C                                                                       
      DOUBLE PRECISION A,B,X(NAB)                                       
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (A.EQ.B) CALL SETERR(10HDUMD - A=B,10,1,2)                     
C     IF (NAB.LT.2) CALL SETERR(15HDUMD - NAB.LT.2,15,2,2)              
C/7S                                                                    
      IF (A.EQ.B) CALL SETERR('DUMD - A=B',10,1,2)                      
      IF (NAB.LT.2) CALL SETERR('DUMD - NAB.LT.2',15,2,2)               
C/                                                                      
C                                                                       
      CALL DUMB(A,B,NAB,1,X,NX)                                         
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DUMB(A,B,NAB,K,X,NX)                                   
C                                                                       
C  TO SET UP THE MESH X(1),...,X(NX) ON (A,B) WHICH INCLUDES THE        
C  POINTS A + (I-1)*((B-A)/(NAB-1)), I=1,...,NAB WITH MULTIPLICITIES    
C  K FOR I=1, 1 FOR 1.LT.I.LT.NAB AND K FOR I=NAB.                      
C                                                                       
C  INPUT -                                                              
C                                                                       
C    A   - LEFT HAND END POINT.                                         
C    B   - RIGHT HAND END POINT.                                        
C    NAB - NUMBER OF POINTS TO BE USED ON (A,B).                        
C    K   - THE B-SPLINE ORDER FOR THE MESH.                             
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE MESH X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X,                               
C                                                                       
C            NX = 2*(K-1) + NAB.                                        
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - A=B.                                                           
C    2 - NAB.LT.2.                                                      
C    3 - K.LT.1.                                                        
C                                                                       
      DOUBLE PRECISION A,B,X(1)                                         
C     DOUBLE PRECISION X(NX)                                            
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (A.EQ.B) CALL SETERR(10HDUMB - A=B,10,1,2)                     
C     IF (NAB.LT.2) CALL SETERR(15HDUMB - NAB.LT.2,15,2,2)              
C     IF (K.LT.1) CALL SETERR(13HDUMB - K.LT.1,13,3,2)                  
C/7S                                                                    
      IF (A.EQ.B) CALL SETERR('DUMB - A=B',10,1,2)                      
      IF (NAB.LT.2) CALL SETERR('DUMB - NAB.LT.2',15,2,2)               
      IF (K.LT.1) CALL SETERR('DUMB - K.LT.1',13,3,2)                   
C/                                                                      
C                                                                       
      CALL DUM1(A,B,NAB,K,1,K,X,NX)                                     
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DUM1(A,B,NAB,MA,MI,MB,X,NX)                            
C                                                                       
C  TO SET UP THE MESH X(1),...,X(NX) ON (A,B) WHICH INCLUDES THE        
C  POINTS A + (I-1)*((B-A)/(NAB-1)), I=1,...,NAB WITH MULTIPLICITIES    
C  MA FOR I=1, MI FOR 1.LT.I.LT.NAB AND MB FOR I=NAB.                   
C                                                                       
C  INPUT -                                                              
C                                                                       
C    A   - LEFT HAND END POINT.                                         
C    B   - RIGHT HAND END POINT.                                        
C    NAB - NUMBER OF POINTS TO BE USED ON (A,B).                        
C    MA  - THE MULTIPLICITY OF A IN X.                                  
C    MI  - THE MULTIPLICITY OF ALL INTERIOR POINTS OF X.                
C    MB  - THE MULTIPLICITY OF B IN X.                                  
C                                                                       
C  OUTPUT -                                                             
C                                                                       
C    X  - THE MESH X.                                                   
C    NX - THE NUMBER OF MESH POINTS IN X,                               
C                                                                       
C            NX = MA + MI*(NAB-2) + MB.                                 
C                                                                       
C  SCRATCH SPACE ALLOCATED - NONE.                                      
C                                                                       
C  ERROR STATES -                                                       
C                                                                       
C    1 - A=B.                                                           
C    2 - NAB.LT.2.                                                      
C    3 - ONE OF (MA,MI,MB) IS NEGATIVE.                                 
C                                                                       
      DOUBLE PRECISION A,B,X(1)                                         
C     DOUBLE PRECISION X(NX)                                            
C                                                                       
C ... CHECK THE INPUT.                                                  
C                                                                       
C/6S                                                                    
C     IF (A.EQ.B) CALL SETERR(10HDUM1 - A=B,10,1,2)                     
C     IF (NAB.LT.2) CALL SETERR(15HDUM1 - NAB.LT.2,15,2,2)              
C     IF (MA.LT.0.OR.MI.LT.0.OR.MB.LT.0) CALL SETERR                    
C    1   (36HDUM1 - ONE OF (MA,MI,MB) IS NEGATIVE,36,3,2)               
C/7S                                                                    
      IF (A.EQ.B) CALL SETERR('DUM1 - A=B',10,1,2)                      
      IF (NAB.LT.2) CALL SETERR('DUM1 - NAB.LT.2',15,2,2)               
      IF (MA.LT.0.OR.MI.LT.0.OR.MB.LT.0) CALL SETERR                    
     1   ('DUM1 - ONE OF (MA,MI,MB) IS NEGATIVE',36,3,2)                
C/                                                                      
C                                                                       
      NXI=0                                                             
C                                                                       
C ... SET THE LEFT HAND END POINT.                                      
C                                                                       
      IF (MA.EQ.0) GO TO 20                                             
      DO 10 I=1,MA                                                      
         NXI=NXI+1                                                      
 10      X(NXI)=A                                                       
C                                                                       
C ... SET THE INTERIOR POINTS.                                          
C                                                                       
 20   IF (NAB.EQ.2.OR.MI.EQ.0) GO TO 40                                 
      NABM1=NAB-1                                                       
      DO 30 I=2,NABM1                                                   
         DO 30 J=1,MI                                                   
            NXI=NXI+1                                                   
 30         X(NXI)=A+FLOAT(I-1)*((B-A)/FLOAT(NAB-1))                    
C                                                                       
C ... SET THE RIGHT HAND END POINT.                                     
C                                                                       
 40   IF (MB.EQ.0) GO TO 60                                             
      DO 50 I=1,MB                                                      
         NXI=NXI+1                                                      
 50      X(NXI)=B                                                       
 60   NX=NXI                                                            
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IMNPD(X,NX,N,NT)                                 
C                                                                       
C                                                                       
C TO CREATE A MESH FROM AN ARRAY OF FITTING POINTS.                     
C                                                                       
C METHOD - USE AT AT LEAST N FITTING POINTS X IN ALL MESH INTERVAL      
C                                                                       
C MNEMONIC - INTEGER POINTER TO THE DOUBLE PRECISION MESH               
C            USING N POINTS PER INTERVAL, DISTINCT POINTS.              
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    N  - THE NUMBER OF FITTING POINTS TO USE PER MESH INTERVAL.        
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    NT     - THE NUMBER OF POINTS IN THE MESH.                         
C                                                                       
C             IF ( NDX .GE. 2*N-1 )                                     
C                                                                       
C               NT = 3 + (NDX-2*N+1)/(N-1)                              
C                                                                       
C             OTHERWISE                                                 
C                                                                       
C               NT = 2                                                  
C                                                                       
C             WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE AR      
C    IMNPD - THE POINTER TO THE REAL MESH IN THE STACK.                 
C             THE MESH POINTS ARE TAKEN FROM THE ARRAY X.               
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - N .LT. 2                                                        
C   3 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   4 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED, AND LEFT ON THE STACK,                             
C                                                                       
C          NT                                                           
C                                                                       
C REAL LOCATIONS.                                                       
C                                                                       
      INTEGER NDX,I,IMNPB                                               
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      REAL WS(500)                                                      
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER NX,N,NT                                                   
      REAL X(NX)                                                        
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NX.GE.2 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(16H IMNPD - NX.LT.2,16,1,2)                           
C/7S                                                                    
      CALL SETERR(' IMNPD - NX.LT.2',16,1,2)                            
C/                                                                      
 1000 CONTINUE                                                          
      IF( N.GE.2 )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15H IMNPD - N.LT.2,15,2,2)                            
C/7S                                                                    
      CALL SETERR(' IMNPD - N.LT.2',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
C                                                                       
      NDX = 1                                                           
C GET THE NUMBER OF DISTINCT POINTS IN X.                               
      DO 1004 I = 2, NX                                                 
      IF( X(I).GE.X(I-1) )      GOTO 1007                               
C/6S                                                                    
C           CALL SETERR(37H IMNPD - X IS NOT MONOTONE INCREASING,37,3,2)
C/7S                                                                    
            CALL SETERR(' IMNPD - X IS NOT MONOTONE INCREASING',37,3,2) 
C/                                                                      
 1007 CONTINUE                                                          
      IF( X(I).LE.X(I-1) )      GOTO 1009                               
      NDX = NDX+1                                                       
 1009 CONTINUE                                                          
 1004 CONTINUE                                                          
 1005 CONTINUE                                                          
      IF( NDX.NE.1 )      GOTO 1011                                     
C/6S                                                                    
C           CALL SETERR(38H IMNPD - ONLY ONE POINT IN THE ARRAY X,38,4,2
C    *)                                                                 
C/7S                                                                    
            CALL SETERR(' IMNPD - ONLY ONE POINT IN THE ARRAY X',38,4,2 
     *)                                                                 
C/                                                                      
 1011 CONTINUE                                                          
C                                                                       
      IMNPD = IMNPB(X,NX,N,1,NT)                                        
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IMNPB(X,NX,N,K,NT)                               
C                                                                       
C                                                                       
C TO CREATE A B-SPLINE MESH FROM AN ARRAY OF FITTING POINTS.            
C                                                                       
C METHOD - USE AT AT LEAST N FITTING POINTS X IN ALL MESH INTERVAL      
C                                                                       
C MNEMONIC - INTEGER POINTER TO THE DOUBLE PRECISION MESH               
C            USING N POINTS PER INTERVAL, FOR A B-SPLINE.               
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    N  - THE NUMBER OF FITTING POINTS TO USE PER MESH INTERVAL.        
C         N=2 GIVES A MESH SUITABLE FOR INTERPOLATION OF FUNCTION       
C         VALUES AT THE X(I), I=1,...,NX.                               
C         THE LARGER N IS, THE SMOOTHER THE FIT WILL BE.                
C    K  - THE ORDER FOR THE B-SPLINE MESH,                              
C         THE MULTIPLICITY FOR THE FIRST AND LAST MESH POINTS.          
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    NT     - THE NUMBER OF POINTS IN THE MESH.                         
C                                                                       
C             IF ( NDX .GE. MAX(2*N,N*(K+1-NDX)+2*NDX-K)-1 )            
C                                                                       
C               NT = 2*K + 1 +(NDX-MAX(2*N,N*(K+1-NDX)+2*NDX-K)+1)      
C                                                                       
C             OTHERWISE                                                 
C                                                                       
C               NT = 2*K                                                
C                                                                       
C             WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE AR      
C    IMNPB - THE POINTER TO THE REAL MESH IN THE STACK.                 
C             THE MESH POINTS ARE TAKEN FROM THE ARRAY X.               
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - N .LT. 2                                                        
C   3 - K .LT. 1.                                                       
C   4 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   5 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED, AND LEFT ON THE STACK,                             
C                                                                       
C          NT                                                           
C                                                                       
C REAL LOCATIONS                                                        
C                                                                       
      INTEGER NX                                                        
      INTEGER N, K, NT                                                  
      REAL X(NX)                                                        
      COMMON /CSTAK/ DS                                                 
      DOUBLE PRECISION DS(500)                                          
      INTEGER IS(1000), NL, NR, IMNP1, I, NDX                           
      INTEGER MAX0                                                      
      REAL RS(1000), WS(500)                                            
      LOGICAL LS(1000)                                                  
      EQUIVALENCE (DS(1), WS(1), RS(1), IS(1), LS(1))                   
C/6S                                                                    
C     IF (NX .LT. 2) CALL SETERR(16HIDMNPB - NX.LT.2, 16, 1, 2)         
C     IF (N .LT. 2) CALL SETERR(15HIDMNPB - N.LT.2, 15, 2, 2)           
C     IF (K .LT. 1) CALL SETERR(15HIDMNPB - K.LT.1, 15, 3, 2)           
C/7S                                                                    
      IF (NX .LT. 2) CALL SETERR('IDMNPB - NX.LT.2', 16, 1, 2)          
      IF (N .LT. 2) CALL SETERR('IDMNPB - N.LT.2', 15, 2, 2)            
      IF (K .LT. 1) CALL SETERR('IDMNPB - K.LT.1', 15, 3, 2)            
C/                                                                      
      NDX = 1                                                           
      DO  1 I = 2, NX                                                   
C/6S                                                                    
C        IF (X(I) .LT. X(I-1)) CALL SETERR(                             
C    1      37HIDMNPB - X IS NOT MONOTONE INCREASING, 37, 4, 2)         
C/7S                                                                    
         IF (X(I) .LT. X(I-1)) CALL SETERR(                             
     1      'IDMNPB - X IS NOT MONOTONE INCREASING', 37, 4, 2)          
C/                                                                      
         IF (X(I) .GT. X(I-1)) NDX = NDX+1                              
   1     CONTINUE                                                       
C/6S                                                                    
C     IF (NDX .EQ. 1) CALL SETERR(                                      
C    1   38HIDMNPB - ONLY ONE POINT IN THE ARRAY X, 38, 5, 2)           
C/7S                                                                    
      IF (NDX .EQ. 1) CALL SETERR(                                      
     1   'IDMNPB - ONLY ONE POINT IN THE ARRAY X', 38, 5, 2)            
C/                                                                      
      IF (N .LE. 2 .OR. NDX .LT. 2*K+3) GOTO 2                          
         NL = N                                                         
         NR = N                                                         
         GOTO  3                                                        
   2     NL = (N*(K+1-NDX)+2*NDX-K)/2                                   
         NR = N*(K+1-NDX)+2*NDX-K-NL                                    
         NL = MAX0(NL, N)                                               
         NR = MAX0(NR, N)                                               
   3  IMNPB = IMNP1(X, NX, NL, N, NR, K, NT)                            
      RETURN                                                            
      END                                                               
      INTEGER FUNCTION IMNP1(X,NX,NL,NI,NR,K,NT)                        
C                                                                       
C                                                                       
C TO CREATE A B-SPLINE MESH FROM AN ARRAY OF FITTING POINTS.            
C                                                                       
C METHOD - USE AT AT LEAST NL FITTING POINTS X IN THE FIRST MESH        
C          INTERVAL, NI FITTING POINTS IN THE INTERIOR INTERVALS,       
C          AND AT LEAST NR FITTING POINTS X IN THE LAST                 
C          MESH INTERVAL.                                               
C                                                                       
C MNEMONIC - INTEGER POINTER TO THE DOUBLE PRECISION MESH               
C            USING N POINTS PER INTERVAL, FOR A B-SPLINE, LEVEL 1.      
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    NL - THE NUMBER OF FITTING POINTS TO BE USED IN THE FIRST          
C         MESH INTERVAL. MUST HAVE NL .GE. 2.                           
C         NL = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    NI - THE NUMBER OF FITTING POINTS TO BE USED PER INTERIOR          
C         MESH INTERVAL. MUST HAVE NI .GE. 2.                           
C         NI = K IS A GOOD CHOICE, ALTHOUGH NI = 2 IS OK.               
C    NR - THE NUMBER OF FITTING POINTS TO BE USED IN THE LAST           
C         MESH INTERVAL. MUST HAVE NR .GE. 2.                           
C         NR = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    K  - THE ORDER FOR THE B-SPLINE MESH,                              
C         THE MULTIPLICITY FOR THE FIRST AND LAST MESH POINTS.          
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    NT     - THE NUMBER OF POINTS IN THE MESH.                         
C                                                                       
C             IF ( NDX .GE. NL+NR-1 )                                   
C                                                                       
C               NT = 2*K + 1 +(NDX-NL-NR+1)/(NI-1)                      
C                                                                       
C             OTHERWISE                                                 
C                                                                       
C               NT = 2*K                                                
C                                                                       
C             WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE AR      
C    IMNP1 - THE POINTER TO THE REAL MESH IN THE STACK.                 
C             THE MESH POINTS ARE TAKEN FROM THE ARRAY X.               
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - NL .LT. 2.                                                      
C   3 - NI .LT. 2.                                                      
C   4 - NR .LT. 2.                                                      
C   5 - K .LT. 1.                                                       
C   6 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   7 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED, AND LEFT ON THE STACK,                             
C                                                                       
C          NT                                                           
C                                                                       
C REAL LOCATIONS.                                                       
C                                                                       
      INTEGER NDX,I,IMNP2                                               
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      REAL WS(500)                                                      
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER NX,NL,NI,NR,K,NT                                          
      REAL X(NX)                                                        
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NX.GE.2 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(16H IMNP1 - NX.LT.2,16,1,2)                           
C/7S                                                                    
      CALL SETERR(' IMNP1 - NX.LT.2',16,1,2)                            
C/                                                                      
 1000 CONTINUE                                                          
      IF( NL.GE.2 )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16H IMNP1 - NL.LT.2,16,2,2)                           
C/7S                                                                    
      CALL SETERR(' IMNP1 - NL.LT.2',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( NI.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H IMNP1 - NI.LT.2,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' IMNP1 - NI.LT.2',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( NR.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(16H IMNP1 - NR.LT.2,16,4,2)                           
C/7S                                                                    
      CALL SETERR(' IMNP1 - NR.LT.2',16,4,2)                            
C/                                                                      
 1006 CONTINUE                                                          
      IF( K.GE.1 )      GOTO 1008                                       
C/6S                                                                    
C     CALL SETERR(15H IMNP1 - K.LT.1,15,5,2)                            
C/7S                                                                    
      CALL SETERR(' IMNP1 - K.LT.1',15,5,2)                             
C/                                                                      
 1008 CONTINUE                                                          
C                                                                       
      NDX = 1                                                           
C GET THE NUMBER OF DISTINCT POINTS IN X.                               
      DO 1010 I = 2, NX                                                 
      IF( X(I).GE.X(I-1) )      GOTO 1013                               
C/6S                                                                    
C           CALL SETERR(37H IMNP1 - X IS NOT MONOTONE INCREASING,37,6,2)
C/7S                                                                    
            CALL SETERR(' IMNP1 - X IS NOT MONOTONE INCREASING',37,6,2) 
C/                                                                      
 1013 CONTINUE                                                          
      IF( X(I).LE.X(I-1) )      GOTO 1015                               
      NDX = NDX+1                                                       
 1015 CONTINUE                                                          
 1010 CONTINUE                                                          
 1011 CONTINUE                                                          
      IF( NDX.NE.1 )      GOTO 1017                                     
C/6S                                                                    
C           CALL SETERR(38H IMNP1 - ONLY ONE POINT IN THE ARRAY X,38,7,2
C    *)                                                                 
C/7S                                                                    
            CALL SETERR(' IMNP1 - ONLY ONE POINT IN THE ARRAY X',38,7,2 
     *)                                                                 
C/                                                                      
 1017 CONTINUE                                                          
C                                                                       
      IMNP1 = IMNP2(X,NX,NL,NI,NR,K,1,K,NT)                             
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IMNP2(X,NX,NL,NI,NR,ML,MI,MR,NT)                 
C                                                                       
C                                                                       
C TO CREATE A B-SPLINE MESH FROM AN ARRAY OF FITTING POINTS.            
C                                                                       
C METHOD - USE AT AT LEAST NL FITTING POINTS X IN THE FIRST MESH        
C          INTERVAL, NI FITTING POINTS IN THE INTERIOR INTERVALS,       
C          AND AT LEAST NR FITTING POINTS X IN THE LAST                 
C          MESH INTERVAL.                                               
C                                                                       
C MNEMONIC - INTEGER POINTER TO THE DOUBLE PRECISION MESH               
C            USING N POINTS PER INTERVAL, FOR A B-SPLINE, LEVEL 2.      
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    NL - THE NUMBER OF FITTING POINTS TO BE USED IN THE FIRST          
C         MESH INTERVAL. MUST HAVE NL .GE. 2.                           
C         NL = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    NI - THE NUMBER OF FITTING POINTS TO BE USED PER INTERIOR          
C         MESH INTERVAL. MUST HAVE NI .GE. 2.                           
C         NI = K IS A GOOD CHOICE, ALTHOUGH NI = 2 IS OK.               
C    NR - THE NUMBER OF FITTING POINTS TO BE USED IN THE LAST           
C         MESH INTERVAL. MUST HAVE NR .GE. 2.                           
C         NR = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    ML - THE MULTIPLICITY OF THE LEFT-HAND MESH POINT, X(1).           
C    MI - THE MULTIPLICITY OF THE INTERIOR MESH POINTS.                 
C    MR - THE MULTIPLICITY OF THE RIGHT-HAND MESH POINT, X(NX).         
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    NT     - THE NUMBER OF POINTS IN THE MESH.                         
C                                                                       
C             IF ( NDX .GE. NL+NR-1 )                                   
C                                                                       
C               NT = ML + ( 1 +(NDX-NL-NR+1)/(NI-1) )*MI + MR           
C                                                                       
C             OTHERWISE                                                 
C                                                                       
C               NT = ML + MR                                            
C                                                                       
C             WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE AR      
C    IMNP2 - THE POINTER TO THE REAL MESH IN THE STACK.                 
C             THE MESH POINTS ARE TAKEN FROM THE ARRAY X.               
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - NL .LT. 2                                                       
C   3 - NI .LT. 2.                                                      
C   4 - NR .LT. 2.                                                      
C   5 - ML .LT. 1.                                                      
C   6 - MI .LT. 1                                                       
C   7 - MR .LT. 1.                                                      
C   8 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   9 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED, AND LEFT ON THE STACK,                             
C                                                                       
C          NT                                                           
C                                                                       
C REAL LOCATIONS.                                                       
C                                                                       
      INTEGER NDX,I,ISTKGT,IPOINT                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      REAL WS(500)                                                      
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER NX,NL,NI,NR,ML,MI,MR,NT                                   
      REAL X(NX)                                                        
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NX.GE.2 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(16H IMNP2 - NX.LT.2,16,1,2)                           
C/7S                                                                    
      CALL SETERR(' IMNP2 - NX.LT.2',16,1,2)                            
C/                                                                      
 1000 CONTINUE                                                          
      IF( NL.GE.2 )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16H IMNP2 - NL.LT.2,16,2,2)                           
C/7S                                                                    
      CALL SETERR(' IMNP2 - NL.LT.2',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( NI.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16H IMNP2 - NI.LT.2,16,3,2)                           
C/7S                                                                    
      CALL SETERR(' IMNP2 - NI.LT.2',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( NR.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(16H IMNP2 - NR.LT.2,16,4,2)                           
C/7S                                                                    
      CALL SETERR(' IMNP2 - NR.LT.2',16,4,2)                            
C/                                                                      
 1006 CONTINUE                                                          
      IF( ML.GE.1 )      GOTO 1008                                      
C/6S                                                                    
C     CALL SETERR(16H IMNP2 - ML.LT.1,16,5,2)                           
C/7S                                                                    
      CALL SETERR(' IMNP2 - ML.LT.1',16,5,2)                            
C/                                                                      
 1008 CONTINUE                                                          
      IF( MI.GE.1 )      GOTO 1010                                      
C/6S                                                                    
C     CALL SETERR(16H IMNP2 - MI.LT.1,16,6,2)                           
C/7S                                                                    
      CALL SETERR(' IMNP2 - MI.LT.1',16,6,2)                            
C/                                                                      
 1010 CONTINUE                                                          
      IF( MR.GE.1 )      GOTO 1012                                      
C/6S                                                                    
C     CALL SETERR(16H IMNP2 - MR.LT.1,16,7,2)                           
C/7S                                                                    
      CALL SETERR(' IMNP2 - MR.LT.1',16,7,2)                            
C/                                                                      
 1012 CONTINUE                                                          
C                                                                       
      NDX = 1                                                           
C GET THE NUMBER OF DISTINCT POINTS IN X.                               
      DO 1014 I = 2, NX                                                 
      IF( X(I).GE.X(I-1) )      GOTO 1017                               
C/6S                                                                    
C           CALL SETERR(37H IMNP2 - X IS NOT MONOTONE INCREASING,37,8,2)
C/7S                                                                    
            CALL SETERR(' IMNP2 - X IS NOT MONOTONE INCREASING',37,8,2) 
C/                                                                      
 1017 CONTINUE                                                          
      IF( X(I).LE.X(I-1) )      GOTO 1019                               
      NDX = NDX+1                                                       
 1019 CONTINUE                                                          
 1014 CONTINUE                                                          
 1015 CONTINUE                                                          
      IF( NDX.NE.1 )      GOTO 1021                                     
C/6S                                                                    
C           CALL SETERR(38H IMNP2 - ONLY ONE POINT IN THE ARRAY X,38,9,2
C    *)                                                                 
C/7S                                                                    
            CALL SETERR(' IMNP2 - ONLY ONE POINT IN THE ARRAY X',38,9,2 
     *)                                                                 
C/                                                                      
 1021 CONTINUE                                                          
C                                                                       
      IF( NL+NR-1.LE.NDX )      GOTO 1023                               
      NT = ML+MR                                                        
      GOTO 1024                                                         
 1023 CONTINUE                                                          
      NT = ML+(1+(NDX-NL-NR+1)/(NI-1))*MI+MR                            
C                                                                       
 1024 CONTINUE                                                          
      IPOINT = ISTKGT(NT,3)                                             
C ALLOCATE THE MESH.                                                    
C                                                                       
      CALL MNP2(X,NX,NL,NI,NR,ML,MI,MR,WS(IPOINT),NT)                   
C                                                                       
      IMNP2 = IPOINT                                                    
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE MNPD(X,NX,N,T,NT)                                      
C                                                                       
C                                                                       
C TO CREATE A MESH FROM AN ARRAY OF FITTING POINTS.                     
C                                                                       
C METHOD - USE AT AT LEAST N FITTING POINTS X IN EACH MESH INTERVA      
C                                                                       
C MNEMONIC - DOUBLE PRECISION MESH GENERATOR                            
C            USING N POINTS PER INTERVAL, DISTINCT POINTS.              
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    N  - THE NUMBER OF POINTS X TO BE USED IN EACH MESH INTERVAL.      
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    T   - THE MESH OF POINTS TAKEN FROM THE ARRAY X.                   
C    NT  - THE NUMBER OF POINTS IN THE MESH.                            
C                                                                       
C          IF ( NDX .GE. 2*N-1 )                                        
C                                                                       
C            NT = 3 + (NDX-2*N+1)/(N-1)                                 
C                                                                       
C          OTHERWISE                                                    
C                                                                       
C            NT = 2                                                     
C                                                                       
C          WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE ARRAY      
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - N .LT. 2                                                        
C   3 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   4 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED - NONE.                                             
C                                                                       
      INTEGER NDX,I                                                     
      INTEGER NX,N,NT                                                   
      REAL X(NX),T(1)                                                   
C                                                                       
C                                                                       
C                                                                       
C T(NT).                                                                
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NX.GE.2 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(15H MNPD - NX.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR(' MNPD - NX.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N.GE.2 )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(14H MNPD - N.LT.2,14,2,2)                             
C/7S                                                                    
      CALL SETERR(' MNPD - N.LT.2',14,2,2)                              
C/                                                                      
 1002 CONTINUE                                                          
C                                                                       
      NDX = 1                                                           
C GET THE NUMBER OF DISTINCT POINTS IN X.                               
      DO 1004 I = 2, NX                                                 
      IF( X(I).GE.X(I-1) )      GOTO 1007                               
C/6S                                                                    
C     CALL SETERR(36H MNPD - X IS NOT MONOTONE INCREASING,36,3,2)       
C/7S                                                                    
      CALL SETERR(' MNPD - X IS NOT MONOTONE INCREASING',36,3,2)        
C/                                                                      
 1007 CONTINUE                                                          
      IF( X(I).LE.X(I-1) )      GOTO 1009                               
      NDX = NDX+1                                                       
 1009 CONTINUE                                                          
 1004 CONTINUE                                                          
 1005 CONTINUE                                                          
      IF( NDX.NE.1 )      GOTO 1011                                     
C/6S                                                                    
C           CALL SETERR(37H MNPD - ONLY ONE POINT IN THE ARRAY X,37,4,2)
C/7S                                                                    
            CALL SETERR(' MNPD - ONLY ONE POINT IN THE ARRAY X',37,4,2) 
C/                                                                      
 1011 CONTINUE                                                          
C                                                                       
      CALL MNPB(X,NX,N,1,T,NT)                                          
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE MNPB(X,NX,N,K,T,NT)                                    
C                                                                       
C                                                                       
C TO CREATE A B-SPLINE MESH FROM AN ARRAY OF FITTING POINTS.            
C                                                                       
C METHOD - USE AT AT LEAST N FITTING POINTS X IN EACH MESH INTERVA      
C                                                                       
C MNEMONIC - DOUBLE PRECISION MESH GENERATOR                            
C            USING N POINTS PER INTERVAL, FOR A B-SPLINE.               
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    N  - THE NUMBER OF POINTS X TO BE USED IN EACH MESH INTERVAL.      
C         N=2 GIVES A MESH SUITABLE FOR INTERPOLATION OF FUNCTION       
C         VALUES AT THE X(I), I=1,...,NX.                               
C         THE LARGER N IS, THE SMOOTHER THE FIT WILL BE.                
C    K  - THE ORDER OF THE B-SPLINE MESH,                               
C         THE MULTIPLICITY FOR THE FIRST AND LAST MESH POINTS.          
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    T   - THE MESH OF POINTS TAKEN FROM THE ARRAY X.                   
C    NT  - THE NUMBER OF POINTS IN THE MESH.                            
C                                                                       
C          IF ( NDX .GE. MAX(2*N,N*(K+1-NDX)+2*NDX-K)-1 )               
C                                                                       
C            NT = 2*K + 1 +(NDX-MAX(2*N,N*(K+1-NDX)+2*NDX-K)+1)/(N      
C                                                                       
C          OTHERWISE                                                    
C                                                                       
C            NT = 2*K                                                   
C                                                                       
C          WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE ARRAY      
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - N .LT. 2                                                        
C   3 - K .LT. 1.                                                       
C   4 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   5 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED - NONE.                                             
C                                                                       
      INTEGER NX                                                        
      INTEGER N, K, NT                                                  
      REAL X(NX), T(1)                                                  
      INTEGER NL, NR, I, NDX, MAX0                                      
C/6S                                                                    
C     IF (NX .LT. 2) CALL SETERR(15HDMNPB - NX.LT.2, 15, 1, 2)          
C     IF (N .LT. 2) CALL SETERR(14HDMNPB - N.LT.2, 14, 2, 2)            
C     IF (K .LT. 1) CALL SETERR(14HDMNPB - K.LT.1, 14, 3, 2)            
C/7S                                                                    
      IF (NX .LT. 2) CALL SETERR('DMNPB - NX.LT.2', 15, 1, 2)           
      IF (N .LT. 2) CALL SETERR('DMNPB - N.LT.2', 14, 2, 2)             
      IF (K .LT. 1) CALL SETERR('DMNPB - K.LT.1', 14, 3, 2)             
C/                                                                      
      NDX = 1                                                           
      DO  1 I = 2, NX                                                   
C/6S                                                                    
C        IF (X(I) .LT. X(I-1)) CALL SETERR(                             
C    1      36HDMNPB - X IS NOT MONOTONE INCREASING, 36, 4, 2)          
C/7S                                                                    
         IF (X(I) .LT. X(I-1)) CALL SETERR(                             
     1      'DMNPB - X IS NOT MONOTONE INCREASING', 36, 4, 2)           
C/                                                                      
         IF (X(I) .GT. X(I-1)) NDX = NDX+1                              
   1     CONTINUE                                                       
C/6S                                                                    
C     IF (NDX .EQ. 1) CALL SETERR(                                      
C    1   37HDMNPB - ONLY ONE POINT IN THE ARRAY X, 37, 5, 2)            
C/7S                                                                    
      IF (NDX .EQ. 1) CALL SETERR(                                      
     1   'DMNPB - ONLY ONE POINT IN THE ARRAY X', 37, 5, 2)             
C/                                                                      
      IF (N .LE. 2 .OR. NDX .LT. 2*K+3) GOTO 2                          
         NL = N                                                         
         NR = N                                                         
         GOTO  3                                                        
   2     NL = (N*(K+1-NDX)+2*NDX-K)/2                                   
         NR = N*(K+1-NDX)+2*NDX-K-NL                                    
         NL = MAX0(NL, N)                                               
         NR = MAX0(NR, N)                                               
   3  CALL MNP1(X, NX, NL, N, NR, K, T, NT)                             
      RETURN                                                            
      END                                                               
      SUBROUTINE MNP1(X,NX,NL,NI,NR,K,T,NT)                             
C                                                                       
C                                                                       
C TO CREATE A B-SPLINE MESH FROM AN ARRAY OF FITTING POINTS.            
C                                                                       
C METHOD - USE AT AT LEAST NL FITTING POINTS X IN THE FIRST MESH        
C          INTERVAL, NI FITTING POINTS IN THE INTERIOR INTERVALS,       
C          AND AT LEAST NR FITTING POINTS X IN THE LAST                 
C          MESH INTERVAL.                                               
C                                                                       
C MNEMONIC - DOUBLE PRECISION MESH GENERATOR                            
C            USING N POINTS PER INTERVAL, FOR A B-SPLINE, LEVEL 1.      
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    NL - THE NUMBER OF FITTING POINTS TO BE USED IN THE FIRST          
C         MESH INTERVAL. MUST HAVE NL .GE. 2.                           
C         NL = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    NI - THE NUMBER OF FITTING POINTS TO BE USED PER INTERIOR          
C         MESH INTERVAL. MUST HAVE NI .GE. 2.                           
C         NI = K IS A GOOD CHOICE, ALTHOUGH NI = 2 IS OK.               
C    NR - THE NUMBER OF FITTING POINTS TO BE USED IN THE LAST           
C         MESH INTERVAL. MUST HAVE NR .GE. 2.                           
C         NR = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    K  - THE ORDER OF THE B-SPLINE MESH,                               
C         THE MULTIPLICITY FOR THE FIRST AND LAST MESH POINTS.          
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    T   - THE MESH OF POINTS TAKEN FROM THE ARRAY X.                   
C    NT  - THE NUMBER OF POINTS IN THE MESH.                            
C                                                                       
C          IF ( NDX .GE. NL+NR-1 )                                      
C                                                                       
C            NT = 2*K + 1 + (NDX-NL-NR+1)/(NI-1)                        
C                                                                       
C          OTHERWISE                                                    
C                                                                       
C            NT = 2*K                                                   
C                                                                       
C          WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE ARRAY      
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - NL .LT. 2                                                       
C   3 - NI .LT. 2.                                                      
C   4 - NR .LT. 2.                                                      
C   5 - K .LT. 1.                                                       
C   6 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   7 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED - NONE.                                             
C                                                                       
      INTEGER NDX,I                                                     
      INTEGER NX,NL,NI,NR,K,NT                                          
      REAL X(NX),T(1)                                                   
C                                                                       
C                                                                       
C                                                                       
C T(NT).                                                                
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NX.GE.2 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(15H MNP1 - NX.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR(' MNP1 - NX.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( NL.GE.2 )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(15H MNP1 - NL.LT.2,15,2,2)                            
C/7S                                                                    
      CALL SETERR(' MNP1 - NL.LT.2',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NI.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(15H MNP1 - NI.LT.2,15,3,2)                            
C/7S                                                                    
      CALL SETERR(' MNP1 - NI.LT.2',15,3,2)                             
C/                                                                      
 1004 CONTINUE                                                          
      IF( NR.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(15H MNP1 - NR.LT.2,15,4,2)                            
C/7S                                                                    
      CALL SETERR(' MNP1 - NR.LT.2',15,4,2)                             
C/                                                                      
 1006 CONTINUE                                                          
      IF( K.GE.1 )      GOTO 1008                                       
C/6S                                                                    
C     CALL SETERR(14H MNP1 - K.LT.1,14,5,2)                             
C/7S                                                                    
      CALL SETERR(' MNP1 - K.LT.1',14,5,2)                              
C/                                                                      
 1008 CONTINUE                                                          
C                                                                       
      NDX = 1                                                           
C GET THE NUMBER OF DISTINCT POINTS IN X.                               
      DO 1010 I = 2, NX                                                 
      IF( X(I).GE.X(I-1) )      GOTO 1013                               
C/6S                                                                    
C     CALL SETERR(36H MNP1 - X IS NOT MONOTONE INCREASING,36,6,2)       
C/7S                                                                    
      CALL SETERR(' MNP1 - X IS NOT MONOTONE INCREASING',36,6,2)        
C/                                                                      
 1013 CONTINUE                                                          
      IF( X(I).LE.X(I-1) )      GOTO 1015                               
      NDX = NDX+1                                                       
 1015 CONTINUE                                                          
 1010 CONTINUE                                                          
 1011 CONTINUE                                                          
      IF( NDX.NE.1 )      GOTO 1017                                     
C/6S                                                                    
C           CALL SETERR(37H MNP1 - ONLY ONE POINT IN THE ARRAY X,37,7,2)
C/7S                                                                    
            CALL SETERR(' MNP1 - ONLY ONE POINT IN THE ARRAY X',37,7,2) 
C/                                                                      
 1017 CONTINUE                                                          
C                                                                       
      CALL MNP2(X,NX,NL,NI,NR,K,1,K,T,NT)                               
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE MNP2(X,NX,NL,NI,NR,ML,MI,MR,T,NT)                      
C                                                                       
C                                                                       
C TO CREATE A B-SPLINE MESH FROM AN ARRAY OF FITTING POINTS.            
C                                                                       
C METHOD - USE AT AT LEAST NL FITTING POINTS X IN THE FIRST MESH        
C          INTERVAL, NI FITTING POINTS IN THE INTERIOR INTERVALS,       
C          AND AT LEAST NR FITTING POINTS X IN THE LAST                 
C          MESH INTERVAL.                                               
C                                                                       
C MNEMONIC - DOUBLE PRECISION MESH GENERATOR                            
C            USING N POINTS PER INTERVAL, FOR A B-SPLINE, LEVEL 2.      
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    NL - THE NUMBER OF FITTING POINTS TO BE USED IN THE FIRST          
C         MESH INTERVAL. MUST HAVE NL .GE. 2.                           
C         NL = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    NI - THE NUMBER OF FITTING POINTS TO BE USED PER INTERIOR          
C         MESH INTERVAL. MUST HAVE NI .GE. 2.                           
C         NI = K IS A GOOD CHOICE, ALTHOUGH NI = 2 IS OK.               
C    NR - THE NUMBER OF FITTING POINTS TO BE USED IN THE LAST           
C         MESH INTERVAL. MUST HAVE NR .GE. 2.                           
C         NR = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    ML - THE MULTIPLICITY OF THE LEFT-HAND MESH POINT, X(1).           
C    MI - THE MULTIPLICITY OF THE INTERIOR MESH POINTS.                 
C    MR - THE MULTIPLICITY OF THE RIGHT-HAND MESH POINT, X(NX).         
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    T   - THE MESH OF POINTS TAKEN FROM THE ARRAY X.                   
C    NT  - THE NUMBER OF POINTS IN THE MESH.                            
C                                                                       
C          IF ( NDX .GE. NL+NR-1 )                                      
C                                                                       
C            NT = ML + ( 1 + (NDX-NL-NR+1)/(NI-1) )*MI + MR             
C                                                                       
C          OTHERWISE                                                    
C                                                                       
C            NT = ML + MR                                               
C                                                                       
C          WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE ARRAY      
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - NL .LT. 2                                                       
C   3 - NI .LT. 2.                                                      
C   4 - NR .LT. 2.                                                      
C   5 - ML .LT. 1.                                                      
C   6 - MI .LT. 1                                                       
C   7 - MR .LT. 1.                                                      
C   8 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   9 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED - NONE.                                             
C                                                                       
      INTEGER NDX,I,NDT,IDXT,NDXI,IX,MULT,NIL,NII,NIR                   
      INTEGER NX,NL,NI,NR,ML,MI,MR,NT                                   
      REAL X(NX),T(1)                                                   
C                                                                       
C                                                                       
C                                                                       
C T(NT).                                                                
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NX.GE.2 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(15H MNP2 - NX.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR(' MNP2 - NX.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( NL.GE.2 )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(15H MNP2 - NL.LT.2,15,2,2)                            
C/7S                                                                    
      CALL SETERR(' MNP2 - NL.LT.2',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NI.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(15H MNP2 - NI.LT.2,15,3,2)                            
C/7S                                                                    
      CALL SETERR(' MNP2 - NI.LT.2',15,3,2)                             
C/                                                                      
 1004 CONTINUE                                                          
      IF( NR.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(15H MNP2 - NR.LT.2,15,4,2)                            
C/7S                                                                    
      CALL SETERR(' MNP2 - NR.LT.2',15,4,2)                             
C/                                                                      
 1006 CONTINUE                                                          
      IF( ML.GE.1 )      GOTO 1008                                      
C/6S                                                                    
C     CALL SETERR(15H MNP2 - ML.LT.1,15,5,2)                            
C/7S                                                                    
      CALL SETERR(' MNP2 - ML.LT.1',15,5,2)                             
C/                                                                      
 1008 CONTINUE                                                          
      IF( MI.GE.1 )      GOTO 1010                                      
C/6S                                                                    
C     CALL SETERR(15H MNP2 - MI.LT.1,15,6,2)                            
C/7S                                                                    
      CALL SETERR(' MNP2 - MI.LT.1',15,6,2)                             
C/                                                                      
 1010 CONTINUE                                                          
      IF( MR.GE.1 )      GOTO 1012                                      
C/6S                                                                    
C     CALL SETERR(15H MNP2 - MR.LT.1,15,7,2)                            
C/7S                                                                    
      CALL SETERR(' MNP2 - MR.LT.1',15,7,2)                             
C/                                                                      
 1012 CONTINUE                                                          
C                                                                       
      NDX = 1                                                           
C GET THE NUMBER OF DISTINCT POINTS IN X.                               
      DO 1014 I = 2, NX                                                 
      IF( X(I).GE.X(I-1) )      GOTO 1017                               
C/6S                                                                    
C     CALL SETERR(36H MNP2 - X IS NOT MONOTONE INCREASING,36,8,2)       
C/7S                                                                    
      CALL SETERR(' MNP2 - X IS NOT MONOTONE INCREASING',36,8,2)        
C/                                                                      
 1017 CONTINUE                                                          
      IF( X(I).LE.X(I-1) )      GOTO 1019                               
      NDX = NDX+1                                                       
 1019 CONTINUE                                                          
 1014 CONTINUE                                                          
 1015 CONTINUE                                                          
      IF( NDX.NE.1 )      GOTO 1021                                     
C/6S                                                                    
C           CALL SETERR(37H MNP2 - ONLY ONE POINT IN THE ARRAY X,37,9,2)
C/7S                                                                    
            CALL SETERR(' MNP2 - ONLY ONE POINT IN THE ARRAY X',37,9,2) 
C/                                                                      
 1021 CONTINUE                                                          
C                                                                       
      IF( NL+NR-1.LE.NDX )      GOTO 1023                               
C     THE MESH IS (X(1),X(NX)).                                         
      NT = ML+MR                                                        
      CALL SETR(ML,X(1),T)                                              
      CALL SETR(MR,X(NX),T(ML+1))                                       
      RETURN                                                            
C                                                                       
C HAVE A FULL MESH.                                                     
C                                                                       
 1023 CONTINUE                                                          
      NDT = 3+(NDX-NL-NR+1)/(NI-1)                                      
C NDT = NUMBER OF DISTINCT MESH PTS.                                    
      NIL = (NDX-NL-NR-(NDT-3)*(NI-1)+1)/2                              
      NIR = NDX-NL-NR+1-(NDT-3)*(NI-1)-NIL                              
      NIL = NL+NIL                                                      
      NIR = NR+NIR                                                      
      NT = ML+(NDT-2)*MI+MR                                             
C                                                                       
      CALL SETR(ML,X(1),T)                                              
      IDXT = ML+1                                                       
      NDXI = 0                                                          
      NII = NIL-1                                                       
      IX = 2                                                            
 1027 CONTINUE                                                          
      IF( IX.GT.NX )      GOTO 1026                                     
C     MAKE THE MESH.                                                    
      IF( X(IX-1).NE.X(IX) )      GOTO 1028                             
      GOTO 1025                                                         
 1028 CONTINUE                                                          
      NDXI = NDXI+1                                                     
 1029 CONTINUE                                                          
      IF( NDXI.GE.NII )      GOTO 1030                                  
      GOTO 1025                                                         
 1030 CONTINUE                                                          
C                                                                       
      IF( X(IX).GE.X(NX) )      GOTO 1032                               
      MULT = MI                                                         
      GOTO 1033                                                         
 1032 CONTINUE                                                          
      MULT = MR                                                         
 1033 CONTINUE                                                          
      CALL SETR(MULT,X(IX),T(IDXT))                                     
      IDXT = IDXT+MULT                                                  
      NDXI = 0                                                          
      IF( IDXT.NE.NT-MR+1 )      GOTO 1034                              
      NII = NIR-1                                                       
      GOTO 1035                                                         
 1034 CONTINUE                                                          
      NII = NI-1                                                        
 1035 CONTINUE                                                          
C                                                                       
 1025 CONTINUE                                                          
      IX = IX+1                                                         
      GOTO 1027                                                         
 1026 CONTINUE                                                          
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IDMNPD(X,NX,N,NT)                                
C                                                                       
C                                                                       
C TO CREATE A MESH FROM AN ARRAY OF FITTING POINTS.                     
C                                                                       
C METHOD - USE AT AT LEAST N FITTING POINTS X IN ALL MESH INTERVAL      
C                                                                       
C MNEMONIC - INTEGER POINTER TO THE DOUBLE PRECISION MESH               
C            USING N POINTS PER INTERVAL, DISTINCT POINTS.              
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    N  - THE NUMBER OF FITTING POINTS TO USE PER MESH INTERVAL.        
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    NT     - THE NUMBER OF POINTS IN THE MESH.                         
C                                                                       
C             IF ( NDX .GE. 2*N-1 )                                     
C                                                                       
C               NT = 3 + (NDX-2*N+1)/(N-1)                              
C                                                                       
C             OTHERWISE                                                 
C                                                                       
C               NT = 2                                                  
C                                                                       
C             WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE AR      
C    IDMNPD - THE POINTER TO THE LONG REAL MESH IN THE STACK.           
C             THE MESH POINTS ARE TAKEN FROM THE ARRAY X.               
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - N .LT. 2                                                        
C   3 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   4 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED, AND LEFT ON THE STACK,                             
C                                                                       
C          NT                                                           
C                                                                       
C LONG REAL LOCATIONS.                                                  
C                                                                       
      INTEGER NDX,I,IDMNPB                                              
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      DOUBLE PRECISION WS(500)                                          
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER NX,N,NT                                                   
      DOUBLE PRECISION X(NX)                                            
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NX.GE.2 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(16HIDMNPD - NX.LT.2,16,1,2)                           
C/7S                                                                    
      CALL SETERR('IDMNPD - NX.LT.2',16,1,2)                            
C/                                                                      
 1000 CONTINUE                                                          
      IF( N.GE.2 )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(15HIDMNPD - N.LT.2,15,2,2)                            
C/7S                                                                    
      CALL SETERR('IDMNPD - N.LT.2',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
C                                                                       
      NDX = 1                                                           
C GET THE NUMBER OF DISTINCT POINTS IN X.                               
      DO 1004 I = 2, NX                                                 
      IF( X(I).GE.X(I-1) )      GOTO 1007                               
C/6S                                                                    
C           CALL SETERR(37HIDMNPD - X IS NOT MONOTONE INCREASING,37,3,2)
C/7S                                                                    
            CALL SETERR('IDMNPD - X IS NOT MONOTONE INCREASING',37,3,2) 
C/                                                                      
 1007 CONTINUE                                                          
      IF( X(I).LE.X(I-1) )      GOTO 1009                               
      NDX = NDX+1                                                       
 1009 CONTINUE                                                          
 1004 CONTINUE                                                          
 1005 CONTINUE                                                          
      IF( NDX.NE.1 )      GOTO 1011                                     
C/6S                                                                    
C           CALL SETERR(38HIDMNPD - ONLY ONE POINT IN THE ARRAY X,38,4,2
C    *)                                                                 
C/7S                                                                    
            CALL SETERR('IDMNPD - ONLY ONE POINT IN THE ARRAY X',38,4,2 
     *)                                                                 
C/                                                                      
 1011 CONTINUE                                                          
C                                                                       
      IDMNPD = IDMNPB(X,NX,N,1,NT)                                      
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IDMNPB(X,NX,N,K,NT)                              
C                                                                       
C                                                                       
C TO CREATE A B-SPLINE MESH FROM AN ARRAY OF FITTING POINTS.            
C                                                                       
C METHOD - USE AT AT LEAST N FITTING POINTS X IN ALL MESH INTERVAL      
C                                                                       
C MNEMONIC - INTEGER POINTER TO THE DOUBLE PRECISION MESH               
C            USING N POINTS PER INTERVAL, FOR A B-SPLINE.               
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    N  - THE NUMBER OF FITTING POINTS TO USE PER MESH INTERVAL.        
C         N=2 GIVES A MESH SUITABLE FOR INTERPOLATION OF FUNCTION       
C         VALUES AT THE X(I), I=1,...,NX.                               
C         THE LARGER N IS, THE SMOOTHER THE FIT WILL BE.                
C    K  - THE ORDER FOR THE B-SPLINE MESH,                              
C         THE MULTIPLICITY FOR THE FIRST AND LAST MESH POINTS.          
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    NT     - THE NUMBER OF POINTS IN THE MESH.                         
C                                                                       
C             IF ( NDX .GE. MAX(2*N,N*(K+1-NDX)+2*NDX-K)-1 )            
C                                                                       
C               NT = 2*K + 1 +(NDX-MAX(2*N,N*(K+1-NDX)+2*NDX-K)+1)      
C                                                                       
C             OTHERWISE                                                 
C                                                                       
C               NT = 2*K                                                
C                                                                       
C             WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE AR      
C    IDMNPB - THE POINTER TO THE LONG REAL MESH IN THE STACK.           
C             THE MESH POINTS ARE TAKEN FROM THE ARRAY X.               
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - N .LT. 2                                                        
C   3 - K .LT. 1.                                                       
C   4 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   5 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED, AND LEFT ON THE STACK,                             
C                                                                       
C          NT                                                           
C                                                                       
C LONG REAL LOCATIONS                                                   
C                                                                       
      INTEGER NX                                                        
      INTEGER N, K, NT                                                  
      DOUBLE PRECISION X(NX)                                            
      COMMON /CSTAK/ DS                                                 
      DOUBLE PRECISION DS(500)                                          
      INTEGER IS(1000), NL, NR, I, NDX, MAX0                            
      INTEGER IDMNP1                                                    
      REAL RS(1000)                                                     
      LOGICAL LS(1000)                                                  
      DOUBLE PRECISION WS(500)                                          
      EQUIVALENCE (DS(1), WS(1), RS(1), IS(1), LS(1))                   
C/6S                                                                    
C     IF (NX .LT. 2) CALL SETERR(16HIDMNPB - NX.LT.2, 16, 1, 2)         
C     IF (N .LT. 2) CALL SETERR(15HIDMNPB - N.LT.2, 15, 2, 2)           
C     IF (K .LT. 1) CALL SETERR(15HIDMNPB - K.LT.1, 15, 3, 2)           
C/7S                                                                    
      IF (NX .LT. 2) CALL SETERR('IDMNPB - NX.LT.2', 16, 1, 2)          
      IF (N .LT. 2) CALL SETERR('IDMNPB - N.LT.2', 15, 2, 2)            
      IF (K .LT. 1) CALL SETERR('IDMNPB - K.LT.1', 15, 3, 2)            
C/                                                                      
      NDX = 1                                                           
      DO  1 I = 2, NX                                                   
C/6S                                                                    
C        IF (X(I) .LT. X(I-1)) CALL SETERR(                             
C    1      37HIDMNPB - X IS NOT MONOTONE INCREASING, 37, 4, 2)         
C/7S                                                                    
         IF (X(I) .LT. X(I-1)) CALL SETERR(                             
     1      'IDMNPB - X IS NOT MONOTONE INCREASING', 37, 4, 2)          
C/                                                                      
         IF (X(I) .GT. X(I-1)) NDX = NDX+1                              
   1     CONTINUE                                                       
C/6S                                                                    
C     IF (NDX .EQ. 1) CALL SETERR(                                      
C    1   38HIDMNPB - ONLY ONE POINT IN THE ARRAY X, 38, 5, 2)           
C/7S                                                                    
      IF (NDX .EQ. 1) CALL SETERR(                                      
     1   'IDMNPB - ONLY ONE POINT IN THE ARRAY X', 38, 5, 2)            
C/                                                                      
      IF (N .LE. 2 .OR. NDX .LT. 2*K+3) GOTO 2                          
         NL = N                                                         
         NR = N                                                         
         GOTO  3                                                        
   2     NL = (N*(K+1-NDX)+2*NDX-K)/2                                   
         NR = N*(K+1-NDX)+2*NDX-K-NL                                    
         NL = MAX0(NL, N)                                               
         NR = MAX0(NR, N)                                               
   3  IDMNPB = IDMNP1(X, NX, NL, N, NR, K, NT)                          
      RETURN                                                            
      END                                                               
      INTEGER FUNCTION IDMNP1(X,NX,NL,NI,NR,K,NT)                       
C                                                                       
C                                                                       
C TO CREATE A B-SPLINE MESH FROM AN ARRAY OF FITTING POINTS.            
C                                                                       
C METHOD - USE AT AT LEAST NL FITTING POINTS X IN THE FIRST MESH        
C          INTERVAL, NI FITTING POINTS IN THE INTERIOR INTERVALS,       
C          AND AT LEAST NR FITTING POINTS X IN THE LAST                 
C          MESH INTERVAL.                                               
C                                                                       
C MNEMONIC - INTEGER POINTER TO THE DOUBLE PRECISION MESH               
C            USING N POINTS PER INTERVAL, FOR A B-SPLINE, LEVEL 1.      
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    NL - THE NUMBER OF FITTING POINTS TO BE USED IN THE FIRST          
C         MESH INTERVAL. MUST HAVE NL .GE. 2.                           
C         NL = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    NI - THE NUMBER OF FITTING POINTS TO BE USED PER INTERIOR          
C         MESH INTERVAL. MUST HAVE NI .GE. 2.                           
C         NI = K IS A GOOD CHOICE, ALTHOUGH NI = 2 IS OK.               
C    NR - THE NUMBER OF FITTING POINTS TO BE USED IN THE LAST           
C         MESH INTERVAL. MUST HAVE NR .GE. 2.                           
C         NR = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    K  - THE ORDER FOR THE B-SPLINE MESH,                              
C         THE MULTIPLICITY FOR THE FIRST AND LAST MESH POINTS.          
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    NT     - THE NUMBER OF POINTS IN THE MESH.                         
C                                                                       
C             IF ( NDX .GE. NL+NR-1 )                                   
C                                                                       
C               NT = 2*K + 1 +(NDX-NL-NR+1)/(NI-1)                      
C                                                                       
C             OTHERWISE                                                 
C                                                                       
C               NT = 2*K                                                
C                                                                       
C             WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE AR      
C    IDMNP1 - THE POINTER TO THE LONG REAL MESH IN THE STACK.           
C             THE MESH POINTS ARE TAKEN FROM THE ARRAY X.               
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - NL .LT. 2.                                                      
C   3 - NI .LT. 2.                                                      
C   4 - NR .LT. 2.                                                      
C   5 - K .LT. 1.                                                       
C   6 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   7 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED, AND LEFT ON THE STACK,                             
C                                                                       
C          NT                                                           
C                                                                       
C LONG REAL LOCATIONS.                                                  
C                                                                       
      INTEGER NDX,I,IDMNP2                                              
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      DOUBLE PRECISION WS(500)                                          
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER NX,NL,NI,NR,K,NT                                          
      DOUBLE PRECISION X(NX)                                            
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NX.GE.2 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(16HIDMNP1 - NX.LT.2,16,1,2)                           
C/7S                                                                    
      CALL SETERR('IDMNP1 - NX.LT.2',16,1,2)                            
C/                                                                      
 1000 CONTINUE                                                          
      IF( NL.GE.2 )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16HIDMNP1 - NL.LT.2,16,2,2)                           
C/7S                                                                    
      CALL SETERR('IDMNP1 - NL.LT.2',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( NI.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HIDMNP1 - NI.LT.2,16,3,2)                           
C/7S                                                                    
      CALL SETERR('IDMNP1 - NI.LT.2',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( NR.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(16HIDMNP1 - NR.LT.2,16,4,2)                           
C/7S                                                                    
      CALL SETERR('IDMNP1 - NR.LT.2',16,4,2)                            
C/                                                                      
 1006 CONTINUE                                                          
      IF( K.GE.1 )      GOTO 1008                                       
C/6S                                                                    
C     CALL SETERR(15HIDMNP1 - K.LT.1,15,5,2)                            
C/7S                                                                    
      CALL SETERR('IDMNP1 - K.LT.1',15,5,2)                             
C/                                                                      
 1008 CONTINUE                                                          
C                                                                       
      NDX = 1                                                           
C GET THE NUMBER OF DISTINCT POINTS IN X.                               
      DO 1010 I = 2, NX                                                 
      IF( X(I).GE.X(I-1) )      GOTO 1013                               
C/6S                                                                    
C           CALL SETERR(37HIDMNP1 - X IS NOT MONOTONE INCREASING,37,6,2)
C/7S                                                                    
            CALL SETERR('IDMNP1 - X IS NOT MONOTONE INCREASING',37,6,2) 
C/                                                                      
 1013 CONTINUE                                                          
      IF( X(I).LE.X(I-1) )      GOTO 1015                               
      NDX = NDX+1                                                       
 1015 CONTINUE                                                          
 1010 CONTINUE                                                          
 1011 CONTINUE                                                          
      IF( NDX.NE.1 )      GOTO 1017                                     
C/6S                                                                    
C           CALL SETERR(38HIDMNP1 - ONLY ONE POINT IN THE ARRAY X,38,7,2
C    *)                                                                 
C/7S                                                                    
            CALL SETERR('IDMNP1 - ONLY ONE POINT IN THE ARRAY X',38,7,2 
     *)                                                                 
C/                                                                      
 1017 CONTINUE                                                          
C                                                                       
      IDMNP1 = IDMNP2(X,NX,NL,NI,NR,K,1,K,NT)                           
      RETURN                                                            
C                                                                       
      END                                                               
      INTEGER FUNCTION IDMNP2(X,NX,NL,NI,NR,ML,MI,MR,NT)                
C                                                                       
C                                                                       
C TO CREATE A B-SPLINE MESH FROM AN ARRAY OF FITTING POINTS.            
C                                                                       
C METHOD - USE AT AT LEAST NL FITTING POINTS X IN THE FIRST MESH        
C          INTERVAL, NI FITTING POINTS IN THE INTERIOR INTERVALS,       
C          AND AT LEAST NR FITTING POINTS X IN THE LAST                 
C          MESH INTERVAL.                                               
C                                                                       
C MNEMONIC - INTEGER POINTER TO THE DOUBLE PRECISION MESH               
C            USING N POINTS PER INTERVAL, FOR A B-SPLINE, LEVEL 2.      
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    NL - THE NUMBER OF FITTING POINTS TO BE USED IN THE FIRST          
C         MESH INTERVAL. MUST HAVE NL .GE. 2.                           
C         NL = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    NI - THE NUMBER OF FITTING POINTS TO BE USED PER INTERIOR          
C         MESH INTERVAL. MUST HAVE NI .GE. 2.                           
C         NI = K IS A GOOD CHOICE, ALTHOUGH NI = 2 IS OK.               
C    NR - THE NUMBER OF FITTING POINTS TO BE USED IN THE LAST           
C         MESH INTERVAL. MUST HAVE NR .GE. 2.                           
C         NR = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    ML - THE MULTIPLICITY OF THE LEFT-HAND MESH POINT, X(1).           
C    MI - THE MULTIPLICITY OF THE INTERIOR MESH POINTS.                 
C    MR - THE MULTIPLICITY OF THE RIGHT-HAND MESH POINT, X(NX).         
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    NT     - THE NUMBER OF POINTS IN THE MESH.                         
C                                                                       
C             IF ( NDX .GE. NL+NR-1 )                                   
C                                                                       
C               NT = ML + ( 1 +(NDX-NL-NR+1)/(NI-1) )*MI + MR           
C                                                                       
C             OTHERWISE                                                 
C                                                                       
C               NT = ML + MR                                            
C                                                                       
C             WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE AR      
C    IDMNP2 - THE POINTER TO THE LONG REAL MESH IN THE STACK.           
C             THE MESH POINTS ARE TAKEN FROM THE ARRAY X.               
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - NL .LT. 2                                                       
C   3 - NI .LT. 2.                                                      
C   4 - NR .LT. 2.                                                      
C   5 - ML .LT. 1.                                                      
C   6 - MI .LT. 1                                                       
C   7 - MR .LT. 1.                                                      
C   8 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   9 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED, AND LEFT ON THE STACK,                             
C                                                                       
C          NT                                                           
C                                                                       
C LONG REAL LOCATIONS.                                                  
C                                                                       
      INTEGER NDX,I,ISTKGT,IPOINT                                       
      LOGICAL LS(1000)                                                  
      INTEGER IS(1000)                                                  
      REAL RS(1000)                                                     
      DOUBLE PRECISION WS(500)                                          
      DOUBLE PRECISION DS(500)                                          
      COMMON /CSTAK/DS                                                  
      INTEGER NX,NL,NI,NR,ML,MI,MR,NT                                   
      DOUBLE PRECISION X(NX)                                            
C                                                                       
      EQUIVALENCE ( DS(1),WS(1),RS(1),IS(1),LS(1) )                     
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NX.GE.2 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(16HIDMNP2 - NX.LT.2,16,1,2)                           
C/7S                                                                    
      CALL SETERR('IDMNP2 - NX.LT.2',16,1,2)                            
C/                                                                      
 1000 CONTINUE                                                          
      IF( NL.GE.2 )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(16HIDMNP2 - NL.LT.2,16,2,2)                           
C/7S                                                                    
      CALL SETERR('IDMNP2 - NL.LT.2',16,2,2)                            
C/                                                                      
 1002 CONTINUE                                                          
      IF( NI.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(16HIDMNP2 - NI.LT.2,16,3,2)                           
C/7S                                                                    
      CALL SETERR('IDMNP2 - NI.LT.2',16,3,2)                            
C/                                                                      
 1004 CONTINUE                                                          
      IF( NR.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(16HIDMNP2 - NR.LT.2,16,4,2)                           
C/7S                                                                    
      CALL SETERR('IDMNP2 - NR.LT.2',16,4,2)                            
C/                                                                      
 1006 CONTINUE                                                          
      IF( ML.GE.1 )      GOTO 1008                                      
C/6S                                                                    
C     CALL SETERR(16HIDMNP2 - ML.LT.1,16,5,2)                           
C/7S                                                                    
      CALL SETERR('IDMNP2 - ML.LT.1',16,5,2)                            
C/                                                                      
 1008 CONTINUE                                                          
      IF( MI.GE.1 )      GOTO 1010                                      
C/6S                                                                    
C     CALL SETERR(16HIDMNP2 - MI.LT.1,16,6,2)                           
C/7S                                                                    
      CALL SETERR('IDMNP2 - MI.LT.1',16,6,2)                            
C/                                                                      
 1010 CONTINUE                                                          
      IF( MR.GE.1 )      GOTO 1012                                      
C/6S                                                                    
C     CALL SETERR(16HIDMNP2 - MR.LT.1,16,7,2)                           
C/7S                                                                    
      CALL SETERR('IDMNP2 - MR.LT.1',16,7,2)                            
C/                                                                      
 1012 CONTINUE                                                          
C                                                                       
      NDX = 1                                                           
C GET THE NUMBER OF DISTINCT POINTS IN X.                               
      DO 1014 I = 2, NX                                                 
      IF( X(I).GE.X(I-1) )      GOTO 1017                               
C/6S                                                                    
C           CALL SETERR(37HIDMNP2 - X IS NOT MONOTONE INCREASING,37,8,2)
C/7S                                                                    
            CALL SETERR('IDMNP2 - X IS NOT MONOTONE INCREASING',37,8,2) 
C/                                                                      
 1017 CONTINUE                                                          
      IF( X(I).LE.X(I-1) )      GOTO 1019                               
      NDX = NDX+1                                                       
 1019 CONTINUE                                                          
 1014 CONTINUE                                                          
 1015 CONTINUE                                                          
      IF( NDX.NE.1 )      GOTO 1021                                     
C/6S                                                                    
C           CALL SETERR(38HIDMNP2 - ONLY ONE POINT IN THE ARRAY X,38,9,2
C    *)                                                                 
C/7S                                                                    
            CALL SETERR('IDMNP2 - ONLY ONE POINT IN THE ARRAY X',38,9,2 
     *)                                                                 
C/                                                                      
 1021 CONTINUE                                                          
C                                                                       
      IF( NL+NR-1.LE.NDX )      GOTO 1023                               
      NT = ML+MR                                                        
      GOTO 1024                                                         
 1023 CONTINUE                                                          
      NT = ML+(1+(NDX-NL-NR+1)/(NI-1))*MI+MR                            
C                                                                       
 1024 CONTINUE                                                          
      IPOINT = ISTKGT(NT,4)                                             
C ALLOCATE THE MESH.                                                    
C                                                                       
      CALL DMNP2(X,NX,NL,NI,NR,ML,MI,MR,WS(IPOINT),NT)                  
C                                                                       
      IDMNP2 = IPOINT                                                   
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DMNPD(X,NX,N,T,NT)                                     
C                                                                       
C                                                                       
C TO CREATE A MESH FROM AN ARRAY OF FITTING POINTS.                     
C                                                                       
C METHOD - USE AT AT LEAST N FITTING POINTS X IN EACH MESH INTERVA      
C                                                                       
C MNEMONIC - DOUBLE PRECISION MESH GENERATOR                            
C            USING N POINTS PER INTERVAL, DISTINCT POINTS.              
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    N  - THE NUMBER OF POINTS X TO BE USED IN EACH MESH INTERVAL.      
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    T   - THE MESH OF POINTS TAKEN FROM THE ARRAY X.                   
C    NT  - THE NUMBER OF POINTS IN THE MESH.                            
C                                                                       
C          IF ( NDX .GE. 2*N-1 )                                        
C                                                                       
C            NT = 3 + (NDX-2*N+1)/(N-1)                                 
C                                                                       
C          OTHERWISE                                                    
C                                                                       
C            NT = 2                                                     
C                                                                       
C          WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE ARRAY      
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - N .LT. 2                                                        
C   3 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   4 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED - NONE.                                             
C                                                                       
      INTEGER NDX,I                                                     
      INTEGER NX,N,NT                                                   
      DOUBLE PRECISION X(NX),T(1)                                       
C                                                                       
C                                                                       
C                                                                       
C T(NT).                                                                
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NX.GE.2 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(15HDMNPD - NX.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR('DMNPD - NX.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( N.GE.2 )      GOTO 1002                                       
C/6S                                                                    
C     CALL SETERR(14HDMNPD - N.LT.2,14,2,2)                             
C/7S                                                                    
      CALL SETERR('DMNPD - N.LT.2',14,2,2)                              
C/                                                                      
 1002 CONTINUE                                                          
C                                                                       
      NDX = 1                                                           
C GET THE NUMBER OF DISTINCT POINTS IN X.                               
      DO 1004 I = 2, NX                                                 
      IF( X(I).GE.X(I-1) )      GOTO 1007                               
C/6S                                                                    
C     CALL SETERR(36HDMNPD - X IS NOT MONOTONE INCREASING,36,3,2)       
C/7S                                                                    
      CALL SETERR('DMNPD - X IS NOT MONOTONE INCREASING',36,3,2)        
C/                                                                      
 1007 CONTINUE                                                          
      IF( X(I).LE.X(I-1) )      GOTO 1009                               
      NDX = NDX+1                                                       
 1009 CONTINUE                                                          
 1004 CONTINUE                                                          
 1005 CONTINUE                                                          
      IF( NDX.NE.1 )      GOTO 1011                                     
C/6S                                                                    
C           CALL SETERR(37HDMNPD - ONLY ONE POINT IN THE ARRAY X,37,4,2)
C/7S                                                                    
            CALL SETERR('DMNPD - ONLY ONE POINT IN THE ARRAY X',37,4,2) 
C/                                                                      
 1011 CONTINUE                                                          
C                                                                       
      CALL DMNPB(X,NX,N,1,T,NT)                                         
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DMNPB(X,NX,N,K,T,NT)                                   
C                                                                       
C                                                                       
C TO CREATE A B-SPLINE MESH FROM AN ARRAY OF FITTING POINTS.            
C                                                                       
C METHOD - USE AT AT LEAST N FITTING POINTS X IN EACH MESH INTERVA      
C                                                                       
C MNEMONIC - DOUBLE PRECISION MESH GENERATOR                            
C            USING N POINTS PER INTERVAL, FOR A B-SPLINE.               
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    N  - THE NUMBER OF POINTS X TO BE USED IN EACH MESH INTERVAL.      
C         N=2 GIVES A MESH SUITABLE FOR INTERPOLATION OF FUNCTION       
C         VALUES AT THE X(I), I=1,...,NX.                               
C         THE LARGER N IS, THE SMOOTHER THE FIT WILL BE.                
C    K  - THE ORDER OF THE B-SPLINE MESH,                               
C         THE MULTIPLICITY FOR THE FIRST AND LAST MESH POINTS.          
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    T   - THE MESH OF POINTS TAKEN FROM THE ARRAY X.                   
C    NT  - THE NUMBER OF POINTS IN THE MESH.                            
C                                                                       
C          IF ( NDX .GE. MAX(2*N,N*(K+1-NDX)+2*NDX-K)-1 )               
C                                                                       
C            NT = 2*K + 1 +(NDX-MAX(2*N,N*(K+1-NDX)+2*NDX-K)+1)/(N      
C                                                                       
C          OTHERWISE                                                    
C                                                                       
C            NT = 2*K                                                   
C                                                                       
C          WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE ARRAY      
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - N .LT. 2                                                        
C   3 - K .LT. 1.                                                       
C   4 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   5 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED - NONE.                                             
C                                                                       
      INTEGER NX                                                        
      INTEGER N, K, NT                                                  
      DOUBLE PRECISION X(NX), T(1)                                      
      INTEGER NL, NR, I, NDX, MAX0                                      
C/6S                                                                    
C     IF (NX .LT. 2) CALL SETERR(15HDMNPB - NX.LT.2, 15, 1, 2)          
C     IF (N .LT. 2) CALL SETERR(14HDMNPB - N.LT.2, 14, 2, 2)            
C     IF (K .LT. 1) CALL SETERR(14HDMNPB - K.LT.1, 14, 3, 2)            
C/7S                                                                    
      IF (NX .LT. 2) CALL SETERR('DMNPB - NX.LT.2', 15, 1, 2)           
      IF (N .LT. 2) CALL SETERR('DMNPB - N.LT.2', 14, 2, 2)             
      IF (K .LT. 1) CALL SETERR('DMNPB - K.LT.1', 14, 3, 2)             
C/                                                                      
      NDX = 1                                                           
      DO  1 I = 2, NX                                                   
C/6S                                                                    
C        IF (X(I) .LT. X(I-1)) CALL SETERR(                             
C    1      36HDMNPB - X IS NOT MONOTONE INCREASING, 36, 4, 2)          
C/7S                                                                    
         IF (X(I) .LT. X(I-1)) CALL SETERR(                             
     1      'DMNPB - X IS NOT MONOTONE INCREASING', 36, 4, 2)           
C/                                                                      
         IF (X(I) .GT. X(I-1)) NDX = NDX+1                              
   1     CONTINUE                                                       
C/6S                                                                    
C     IF (NDX .EQ. 1) CALL SETERR(                                      
C    1   37HDMNPB - ONLY ONE POINT IN THE ARRAY X, 37, 5, 2)            
C/7S                                                                    
      IF (NDX .EQ. 1) CALL SETERR(                                      
     1   'DMNPB - ONLY ONE POINT IN THE ARRAY X', 37, 5, 2)             
C/                                                                      
      IF (N .LE. 2 .OR. NDX .LT. 2*K+3) GOTO 2                          
         NL = N                                                         
         NR = N                                                         
         GOTO  3                                                        
   2     NL = (N*(K+1-NDX)+2*NDX-K)/2                                   
         NR = N*(K+1-NDX)+2*NDX-K-NL                                    
         NL = MAX0(NL, N)                                               
         NR = MAX0(NR, N)                                               
   3  CALL DMNP1(X, NX, NL, N, NR, K, T, NT)                            
      RETURN                                                            
      END                                                               
      SUBROUTINE DMNP1(X,NX,NL,NI,NR,K,T,NT)                            
C                                                                       
C                                                                       
C TO CREATE A B-SPLINE MESH FROM AN ARRAY OF FITTING POINTS.            
C                                                                       
C METHOD - USE AT AT LEAST NL FITTING POINTS X IN THE FIRST MESH        
C          INTERVAL, NI FITTING POINTS IN THE INTERIOR INTERVALS,       
C          AND AT LEAST NR FITTING POINTS X IN THE LAST                 
C          MESH INTERVAL.                                               
C                                                                       
C MNEMONIC - DOUBLE PRECISION MESH GENERATOR                            
C            USING N POINTS PER INTERVAL, FOR A B-SPLINE, LEVEL 1.      
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    NL - THE NUMBER OF FITTING POINTS TO BE USED IN THE FIRST          
C         MESH INTERVAL. MUST HAVE NL .GE. 2.                           
C         NL = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    NI - THE NUMBER OF FITTING POINTS TO BE USED PER INTERIOR          
C         MESH INTERVAL. MUST HAVE NI .GE. 2.                           
C         NI = K IS A GOOD CHOICE, ALTHOUGH NI = 2 IS OK.               
C    NR - THE NUMBER OF FITTING POINTS TO BE USED IN THE LAST           
C         MESH INTERVAL. MUST HAVE NR .GE. 2.                           
C         NR = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    K  - THE ORDER OF THE B-SPLINE MESH,                               
C         THE MULTIPLICITY FOR THE FIRST AND LAST MESH POINTS.          
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    T   - THE MESH OF POINTS TAKEN FROM THE ARRAY X.                   
C    NT  - THE NUMBER OF POINTS IN THE MESH.                            
C                                                                       
C          IF ( NDX .GE. NL+NR-1 )                                      
C                                                                       
C            NT = 2*K + 1 + (NDX-NL-NR+1)/(NI-1)                        
C                                                                       
C          OTHERWISE                                                    
C                                                                       
C            NT = 2*K                                                   
C                                                                       
C          WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE ARRAY      
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - NL .LT. 2                                                       
C   3 - NI .LT. 2.                                                      
C   4 - NR .LT. 2.                                                      
C   5 - K .LT. 1.                                                       
C   6 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   7 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED - NONE.                                             
C                                                                       
      INTEGER NDX,I                                                     
      INTEGER NX,NL,NI,NR,K,NT                                          
      DOUBLE PRECISION X(NX),T(1)                                       
C                                                                       
C                                                                       
C                                                                       
C T(NT).                                                                
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NX.GE.2 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(15HDMNP1 - NX.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR('DMNP1 - NX.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( NL.GE.2 )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(15HDMNP1 - NL.LT.2,15,2,2)                            
C/7S                                                                    
      CALL SETERR('DMNP1 - NL.LT.2',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NI.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(15HDMNP1 - NI.LT.2,15,3,2)                            
C/7S                                                                    
      CALL SETERR('DMNP1 - NI.LT.2',15,3,2)                             
C/                                                                      
 1004 CONTINUE                                                          
      IF( NR.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(15HDMNP1 - NR.LT.2,15,4,2)                            
C/7S                                                                    
      CALL SETERR('DMNP1 - NR.LT.2',15,4,2)                             
C/                                                                      
 1006 CONTINUE                                                          
      IF( K.GE.1 )      GOTO 1008                                       
C/6S                                                                    
C     CALL SETERR(14HDMNP1 - K.LT.1,14,5,2)                             
C/7S                                                                    
      CALL SETERR('DMNP1 - K.LT.1',14,5,2)                              
C/                                                                      
 1008 CONTINUE                                                          
C                                                                       
      NDX = 1                                                           
C GET THE NUMBER OF DISTINCT POINTS IN X.                               
      DO 1010 I = 2, NX                                                 
      IF( X(I).GE.X(I-1) )      GOTO 1013                               
C/6S                                                                    
C     CALL SETERR(36HDMNP1 - X IS NOT MONOTONE INCREASING,36,6,2)       
C/7S                                                                    
      CALL SETERR('DMNP1 - X IS NOT MONOTONE INCREASING',36,6,2)        
C/                                                                      
 1013 CONTINUE                                                          
      IF( X(I).LE.X(I-1) )      GOTO 1015                               
      NDX = NDX+1                                                       
 1015 CONTINUE                                                          
 1010 CONTINUE                                                          
 1011 CONTINUE                                                          
      IF( NDX.NE.1 )      GOTO 1017                                     
C/6S                                                                    
C           CALL SETERR(37HDMNP1 - ONLY ONE POINT IN THE ARRAY X,37,7,2)
C/7S                                                                    
            CALL SETERR('DMNP1 - ONLY ONE POINT IN THE ARRAY X',37,7,2) 
C/                                                                      
 1017 CONTINUE                                                          
C                                                                       
      CALL DMNP2(X,NX,NL,NI,NR,K,1,K,T,NT)                              
C                                                                       
      RETURN                                                            
C                                                                       
      END                                                               
      SUBROUTINE DMNP2(X,NX,NL,NI,NR,ML,MI,MR,T,NT)                     
C                                                                       
C                                                                       
C TO CREATE A B-SPLINE MESH FROM AN ARRAY OF FITTING POINTS.            
C                                                                       
C METHOD - USE AT AT LEAST NL FITTING POINTS X IN THE FIRST MESH        
C          INTERVAL, NI FITTING POINTS IN THE INTERIOR INTERVALS,       
C          AND AT LEAST NR FITTING POINTS X IN THE LAST                 
C          MESH INTERVAL.                                               
C                                                                       
C MNEMONIC - DOUBLE PRECISION MESH GENERATOR                            
C            USING N POINTS PER INTERVAL, FOR A B-SPLINE, LEVEL 2.      
C                                                                       
C INPUT -                                                               
C                                                                       
C    X  - THE MONOTONE INCREASING ARRAY OF FITTING POINTS.              
C         ANY MULTIPLICITIES IN X WILL BE IGNORED.                      
C    NX - THE NUMBER OF POINTS IN THE ARRAY X.                          
C    NL - THE NUMBER OF FITTING POINTS TO BE USED IN THE FIRST          
C         MESH INTERVAL. MUST HAVE NL .GE. 2.                           
C         NL = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    NI - THE NUMBER OF FITTING POINTS TO BE USED PER INTERIOR          
C         MESH INTERVAL. MUST HAVE NI .GE. 2.                           
C         NI = K IS A GOOD CHOICE, ALTHOUGH NI = 2 IS OK.               
C    NR - THE NUMBER OF FITTING POINTS TO BE USED IN THE LAST           
C         MESH INTERVAL. MUST HAVE NR .GE. 2.                           
C         NR = MAX(2*NI,NI*(K+1-NDX)+2*NDX-K)/2 IS A GOOD CHOICE.       
C    ML - THE MULTIPLICITY OF THE LEFT-HAND MESH POINT, X(1).           
C    MI - THE MULTIPLICITY OF THE INTERIOR MESH POINTS.                 
C    MR - THE MULTIPLICITY OF THE RIGHT-HAND MESH POINT, X(NX).         
C                                                                       
C OUTPUT -                                                              
C                                                                       
C    T   - THE MESH OF POINTS TAKEN FROM THE ARRAY X.                   
C    NT  - THE NUMBER OF POINTS IN THE MESH.                            
C                                                                       
C          IF ( NDX .GE. NL+NR-1 )                                      
C                                                                       
C            NT = ML + ( 1 + (NDX-NL-NR+1)/(NI-1) )*MI + MR             
C                                                                       
C          OTHERWISE                                                    
C                                                                       
C            NT = ML + MR                                               
C                                                                       
C          WHERE NDX IS THE NUMBER OF DISTINCT POINTS IN THE ARRAY      
C                                                                       
C ERROR STATES -                                                        
C                                                                       
C   1 - NX .LT. 2.                                                      
C   2 - NL .LT. 2                                                       
C   3 - NI .LT. 2.                                                      
C   4 - NR .LT. 2.                                                      
C   5 - ML .LT. 1.                                                      
C   6 - MI .LT. 1                                                       
C   7 - MR .LT. 1.                                                      
C   8 - THE ARRAY X IS NOT MONOTONE INCREASING.                         
C   9 - THE NUMBER OF DISTINCT POINTS IN THE ARRAY X IS ONE.            
C                                                                       
C STORAGE ALLOCATED - NONE.                                             
C                                                                       
      INTEGER NDX,I,NDT,IDXT,NDXI,IX,MULT,NIL,NII,NIR                   
      INTEGER NX,NL,NI,NR,ML,MI,MR,NT                                   
      DOUBLE PRECISION X(NX),T(1)                                       
C                                                                       
C                                                                       
C                                                                       
C T(NT).                                                                
C                                                                       
C                                                                       
C CHECK THE INPUT FOR ERRORS.                                           
C                                                                       
      IF( NX.GE.2 )      GOTO 1000                                      
C/6S                                                                    
C     CALL SETERR(15HDMNP2 - NX.LT.2,15,1,2)                            
C/7S                                                                    
      CALL SETERR('DMNP2 - NX.LT.2',15,1,2)                             
C/                                                                      
 1000 CONTINUE                                                          
      IF( NL.GE.2 )      GOTO 1002                                      
C/6S                                                                    
C     CALL SETERR(15HDMNP2 - NL.LT.2,15,2,2)                            
C/7S                                                                    
      CALL SETERR('DMNP2 - NL.LT.2',15,2,2)                             
C/                                                                      
 1002 CONTINUE                                                          
      IF( NI.GE.2 )      GOTO 1004                                      
C/6S                                                                    
C     CALL SETERR(15HDMNP2 - NI.LT.2,15,3,2)                            
C/7S                                                                    
      CALL SETERR('DMNP2 - NI.LT.2',15,3,2)                             
C/                                                                      
 1004 CONTINUE                                                          
      IF( NR.GE.2 )      GOTO 1006                                      
C/6S                                                                    
C     CALL SETERR(15HDMNP2 - NR.LT.2,15,4,2)                            
C/7S                                                                    
      CALL SETERR('DMNP2 - NR.LT.2',15,4,2)                             
C/                                                                      
 1006 CONTINUE                                                          
      IF( ML.GE.1 )      GOTO 1008                                      
C/6S                                                                    
C     CALL SETERR(15HDMNP2 - ML.LT.1,15,5,2)                            
C/7S                                                                    
      CALL SETERR('DMNP2 - ML.LT.1',15,5,2)                             
C/                                                                      
 1008 CONTINUE                                                          
      IF( MI.GE.1 )      GOTO 1010                                      
C/6S                                                                    
C     CALL SETERR(15HDMNP2 - MI.LT.1,15,6,2)                            
C/7S                                                                    
      CALL SETERR('DMNP2 - MI.LT.1',15,6,2)                             
C/                                                                      
 1010 CONTINUE                                                          
      IF( MR.GE.1 )      GOTO 1012                                      
C/6S                                                                    
C     CALL SETERR(15HDMNP2 - MR.LT.1,15,7,2)                            
C/7S                                                                    
      CALL SETERR('DMNP2 - MR.LT.1',15,7,2)                             
C/                                                                      
 1012 CONTINUE                                                          
C                                                                       
      NDX = 1                                                           
C GET THE NUMBER OF DISTINCT POINTS IN X.                               
      DO 1014 I = 2, NX                                                 
      IF( X(I).GE.X(I-1) )      GOTO 1017                               
C/6S                                                                    
C     CALL SETERR(36HDMNP2 - X IS NOT MONOTONE INCREASING,36,8,2)       
C/7S                                                                    
      CALL SETERR('DMNP2 - X IS NOT MONOTONE INCREASING',36,8,2)        
C/                                                                      
 1017 CONTINUE                                                          
      IF( X(I).LE.X(I-1) )      GOTO 1019                               
      NDX = NDX+1                                                       
 1019 CONTINUE                                                          
 1014 CONTINUE                                                          
 1015 CONTINUE                                                          
      IF( NDX.NE.1 )      GOTO 1021                                     
C/6S                                                                    
C           CALL SETERR(37HDMNP2 - ONLY ONE POINT IN THE ARRAY X,37,9,2)
C/7S                                                                    
            CALL SETERR('DMNP2 - ONLY ONE POINT IN THE ARRAY X',37,9,2) 
C/                                                                      
 1021 CONTINUE                                                          
C                                                                       
      IF( NL+NR-1.LE.NDX )      GOTO 1023                               
C     THE MESH IS (X(1),X(NX)).                                         
      NT = ML+MR                                                        
      CALL SETD(ML,X(1),T)                                              
      CALL SETD(MR,X(NX),T(ML+1))                                       
      RETURN                                                            
C                                                                       
C HAVE A FULL MESH.                                                     
C                                                                       
 1023 CONTINUE                                                          
      NDT = 3+(NDX-NL-NR+1)/(NI-1)                                      
C NDT = NUMBER OF DISTINCT MESH PTS.                                    
      NIL = (NDX-NL-NR-(NDT-3)*(NI-1)+1)/2                              
      NIR = NDX-NL-NR+1-(NDT-3)*(NI-1)-NIL                              
      NIL = NL+NIL                                                      
      NIR = NR+NIR                                                      
      NT = ML+(NDT-2)*MI+MR                                             
C                                                                       
      CALL SETD(ML,X(1),T)                                              
      IDXT = ML+1                                                       
      NDXI = 0                                                          
      NII = NIL-1                                                       
      IX = 2                                                            
 1027 CONTINUE                                                          
      IF( IX.GT.NX )      GOTO 1026                                     
C     MAKE THE MESH.                                                    
      IF( X(IX-1).NE.X(IX) )      GOTO 1028                             
      GOTO 1025                                                         
 1028 CONTINUE                                                          
      NDXI = NDXI+1                                                     
 1029 CONTINUE                                                          
      IF( NDXI.GE.NII )      GOTO 1030                                  
      GOTO 1025                                                         
 1030 CONTINUE                                                          
C                                                                       
      IF( X(IX).GE.X(NX) )      GOTO 1032                               
      MULT = MI                                                         
      GOTO 1033                                                         
 1032 CONTINUE                                                          
      MULT = MR                                                         
 1033 CONTINUE                                                          
      CALL SETD(MULT,X(IX),T(IDXT))                                     
      IDXT = IDXT+MULT                                                  
      NDXI = 0                                                          
      IF( IDXT.NE.NT-MR+1 )      GOTO 1034                              
      NII = NIR-1                                                       
      GOTO 1035                                                         
 1034 CONTINUE                                                          
      NII = NI-1                                                        
 1035 CONTINUE                                                          
C                                                                       
 1025 CONTINUE                                                          
      IX = IX+1                                                         
      GOTO 1027                                                         
 1026 CONTINUE                                                          
      RETURN                                                            
C                                                                       
      END                                                               
C****END OF ROUTINES FOR FIRST PART OF PORT 3 APPROXIMATION CHAPTER*****
