/*  File      : /home/pss060/sls/flechsig/phase/src/phase/phasegraf.c */
/*  Date      : <28 Oct 99 10:06:00 flechsig>  */
/*  Time-stamp: <24 Mar 04 14:47:26 flechsig>  */
/*  Author    : Flechsig Uwe OVGA/203a 4535, flechsig@psi.ch */

#include <stdio.h>  
#include <stdlib.h>                                                       
#include <string.h>   
#include <math.h>
#include <Xm/Text.h>    
#include <Xm/ToggleB.h>   
#include <Mrm/MrmAppl.h>  
#include <X11/Xlib.h>      
#include <X11/Xutil.h>
#ifdef VMS 
  #include <DXm/DECspecific.h>   
  #include <descrip.h>                      /* for FORTRAN- String */     
#endif
#include "cutils.h"
#include "phase_struct.h"
#include "fg3pck.h"  
#include "mirrorpck.h"  
#include "geometrypck.h"   
#include "phase.h"   
#include "rtrace.h" 
 

void InitGrafBox(struct PHASEset *PHASE, GRDATSTRUCTTYPE *gr)   
/*  Aufruf: kGraphicCommand, kCGrDefaults 	*/
/* 3.5.96 					*/
/* last mod. Uwe 5.7.96 			*/
{
    int i;
    char TextField[4][20];
    XmString label;                         

    label= XmStringCreateLocalized(PHASE->plotpsname);    
    sprintf(TextField[0], "%-8.3G", gr->zmi);    
    sprintf(TextField[1], "%-8.3G", gr->zma);    
    sprintf(TextField[2], "%-8.3G", gr->ymi);    
    sprintf(TextField[3], "%-8.3G", gr->yma);    
    	        
    for (i= 0; i< 4; i++)
        set_something(widget_array[kCGrT1+ i], XmNvalue, TextField[i]); 
  
/*    XmToggleButtonSetState(widget_array[kCGrPSFile], 
                           gr->psfile == 1, FALSE); 
*/
    set_something(widget_array[kCGrPSFileButton], XmNlabelString, label);   
    XmStringFree(label); 
}

int GetGrafBox(struct PHASEset *PHASE, GRDATSTRUCTTYPE *gr, int resultstatus)  
     /****************************************************************/
     /* wertet die grafbox aus					     */
     /* 20.5.96,                                     		     */
     /* Aufruf: kCGrOK                                               */
     /* last modification 25.2.97				     */
     /* return: -1 error (kein file) sonst 0     		     */
     /* der resultstatus geht mit ein */
{
  char *text, fname[MaxPathLength], *fn= NULL;
  XmString label; 
  FILE *f;  
  double x[3]; 
  int fehler;
  Widget w;   /* *w geaender 12.2.97 */
  /*
  printf("getgrafbox called\n");
  */
/* togglebuttons und psname und titel --------------------------*/
  gr->psfile= 
    (XmToggleButtonGetState(widget_array[kCGrPSFile]) == TRUE) ? 1 : 0; 
  get_something(widget_array[kCGrPSFileButton], XmNlabelString, &label);  
  if (!XmStringGetLtoR(label, XmFONTLIST_DEFAULT_TAG, &fn)) 
    return; 
  XmStringFree(label);  
  strcpy(PHASE->plotpsname, fn); 
  XtFree(fn);
  text= XmTextGetString(widget_array[kCGrT5]); strcpy(gr->titel, text); 
  get_something(widget_array[kCGrOptMenu], XmNmenuHistory, &w);  
  get_something(w, XmNlabelString, &label);  
  if (!XmStringGetLtoR(label, XmFONTLIST_DEFAULT_TAG, &fn))
    return; 
  XmStringFree(label);
				/* Plotstyle- Menue */
  if (strcmp(fn, "SCATer plot") == 0) gr->plotstyle= 0; else 
    if (strcmp(fn, "footprint") == 0)   gr->plotstyle= 17; else 
      if (strcmp(fn, "divergency") == 0)  gr->plotstyle= 18; else   
	if (strcmp(fn, "resolution") == 0)   gr->plotstyle= 19; else 
/*  <<============== Einrueckung =========== */
    if (strcmp(fn, "phase(y,z)") == 0) gr->plotstyle= 20; else 
      if (strcmp(fn, "time(y,z)") == 0) gr->plotstyle= 21; else   
	if (strcmp(fn, "time (histogr)") == 0) gr->plotstyle= 22; else 
	  if (strcmp(fn, "horizontal profile") == 0) gr->plotstyle= 15; else 
	    if (strcmp(fn, "vertical profile") == 0)   gr->plotstyle= 16; else 
	      if (strcmp(fn, "BOX plot") == 0)     gr->plotstyle= 1; else 
		if (strcmp(fn, "ARRow plot") == 0) gr->plotstyle= 2; else      
		  if (strcmp(fn, "CHAR plot") == 0) gr->plotstyle= 3; else 
		    if (strcmp(fn, "TEXT plot") == 0) gr->plotstyle= 4; else  
		      if (strcmp(fn, "CONTour plot") == 0) gr->plotstyle= 5; 
		      else 
			if (strcmp(fn, "COLour plot") == 0) gr->plotstyle= 6; 
			else      
			  if (strcmp(fn, "LEGO plot") == 0) gr->plotstyle= 7; 
			  else 
			    if (strcmp(fn, "LEGO1 plot") == 0) 
			      gr->plotstyle= 8; else 
			      if (strcmp(fn, "LEGO2 plot") == 0) 
				gr->plotstyle= 9; else 
				if (strcmp(fn, "SURFace plot") == 0) 
				  gr->plotstyle= 10; else 
				  if (strcmp(fn, "SURF1 plot") == 0) 
				    gr->plotstyle= 11; else 
				    if (strcmp(fn, "SURF2 plot") == 0) 
				      gr->plotstyle= 12; else 
				      if (strcmp(fn, "SURF3 plot") == 0) 
					gr->plotstyle= 13; else 
					if (strcmp(fn, "SURF4 plot") == 0) 
					  gr->plotstyle= 14;  
  printf("GetGrafBox: plotstyle: %s --> %d\n", fn, gr->plotstyle);  
  XtFree(fn); 
  /*-- plotsyle menue ausgewertet ------------------------------------*/

/* plot inhalt menue auswerten 					*/
  get_something(widget_array[kCGrOptMenu1], XmNmenuHistory, &w);  
  get_something(w, XmNlabelString, &label);  
  if (!XmStringGetLtoR(label, XmFONTLIST_DEFAULT_TAG, &fn)) 
    return; 
  XmStringFree(label);   
  if (strcmp(fn, "Result") == 0) gr->status= 0; else 
    if (strcmp(fn, "Source") == 0) gr->status= (PLsource | PLrttype); else 
      if (strcmp(fn, "Data from file") == 0) gr->status= PLdatfromfile; else
	if (strcmp(fn, "fd1phmax") == 0) 
	  gr->status= PLfd1phmax | PLphspacetype; else
	  if (strcmp(fn, "inumb") == 0) gr->status= PLinumb | PLphspacetype; 
	  else 
	    if (strcmp(fn, "Stokes P. S1") == 0) 
	      gr->status= PLS1 | PLphspacetype; else
		if (strcmp(fn, "Stokes P. S2") == 0) 
		  gr->status= PLS2 | PLphspacetype; else
		    if (strcmp(fn, "Stokes P. S3") == 0) 
		      gr->status= PLS3 | PLphspacetype; else
			if (strcmp(fn, "Ey real") == 0) 
			  gr->status= PLEyreal | PLphspacetype; else
			    if (strcmp(fn, "Ez real") == 0) 
			      gr->status= PLEzreal | PLphspacetype; else
				if (strcmp(fn, "Ey imag.") == 0) 
				  gr->status= PLEyimag | PLphspacetype; else
				    if (strcmp(fn, "Ez imag.") == 0) 
				      gr->status= PLEzimag | PLphspacetype; 
  /* <<============== Einrueckung =========== */
   else
     if (strcmp(fn, "simp real") == 0) 
       gr->status= PLsimpre | PLphspacetype; else
	 if (strcmp(fn, "simp imag.") == 0) 
	   gr->status= PLsimpim | PLphspacetype; else
	     if (strcmp(fn, "sint real") == 0) 
	       gr->status= PLsintre | PLphspacetype; else
		 if (strcmp(fn, "sint imag.") == 0) 
		   gr->status= PLsintim | PLphspacetype; else
		     if (strcmp(fn, "simp ampl.") == 0) 
		       gr->status= PLsimpam | PLphspacetype; else
			 if (strcmp(fn, "simp phase") == 0) 
			   gr->status= PLsimpph | PLphspacetype; else
			     if (strcmp(fn, "d12") == 0) 
			       gr->status= PLd12 | PLphspacetype;

   printf("GetGrafBox: Data: %s --> 0X%X\n", fn, gr->status);     
   XtFree(fn); 
/* 
 * der status wurde soeben initialisiert 
 */

   fehler= 0;
   if ((gr->status & PLdatfromfile) == PLdatfromfile)
   {
      fehler= getgrfiletype(PHASE->imageraysname); 
      if (fehler == 0)   
      {  
         gr->status |= PLrttype; 
         printf("GetGrafBox: filetype: Ray\n");   
      }
      if (fehler > 0) 
      {
         gr->status |= PLphspacetype;  
         printf("GetGrafBox: filetype: Phase Space density\n");   
      }
   }      /* end dat from file */
   
   if (gr->status == 0) /* result ps oder ray */
       gr->status= resultstatus;
   
   if (fehler != -1)
   {
     text= XmTextGetString(widget_array[kCGrT1]); 
     sscanf(text, "%lf", &gr->zmi);   
     text= XmTextGetString(widget_array[kCGrT2]);
     sscanf(text, "%lf", &gr->zma); 
     text= XmTextGetString(widget_array[kCGrT3]); 
     sscanf(text, "%lf", &gr->ymi);    
     text= XmTextGetString(widget_array[kCGrT4]); 
     sscanf(text, "%lf", &gr->yma);   
   }
   printf("GetGrafBox: ymi: %f %f %f %f\n", 
	  gr->ymi, gr->yma, gr->zmi, gr->zma);
   XtFree(text);    
   return fehler;
}

/************************************************************************/ 
void *SetGrDatStruct(char *fname, struct BeamlineType *bl,
                     GRDATSTRUCTTYPE *gr) 
/************************************************************************/ 
/* bei InitDataSets 							*/
/* 3.5.96 								*/
/* last mod Uwe 9.8.96 							*/
/* gibt einen void * auf das ergebnis zurueck 				*/
/************************************************************************/ 
{
    FILE *f;
    double x[4];   
    char *fst, *fn; 
    int ftype, fend, dummy1, dummy2, i, fehler; 
    struct RayType *rp;  
    double *rp0; 
    void *vo;
#ifdef DEBUGALL
    printf("SetGrDatStruct called\n");
#endif
    if (gr->status == 0)            /* bei initdatasets */
    {
#ifdef DEBUG
       printf("SetGrDatStruct: init\n");
#endif
       strcpy(gr->titel, "PHASE- graphic output"); 
       gr->status= gr->zeilen= 0; 
       gr->ymi= gr->yma= gr->zmi= gr->zma= gr->dymi= 
       gr->dyma= gr->dzmi= gr->dzma= gr->tmi= gr->tma= 0.0;    
    }  
   
    if ((gr->status & PLdatfromfile) == PLdatfromfile) 
    {
      printf("SetGrDatStruct: take data from file %s\n", fname);
      if ((gr->status & PLphspacetype) == 0) 
      {
        /* printf("setgrdatstruct: call ReadRayFile\n");   */
	   ReadRayFile(fname, &gr->zeilen, &bl->RESULT);  
           vo= bl->RESULT.RESUnion.Rays;  
      } else 
      {
          printf("SetGrDatStruct: read phase space file \n");
          /* phase space mode */
          ReadpsFile(fname, &bl->RESULT);  
          vo= &bl->RESULT.RESUnion.PSD;  
      } /* end ps */
    }   /*  end dat from file */

/* der Status in Result ist gesetzt, die daten im Speicher der ergebnispointer
   wird gesetzt */

    else /* dat from memory */
    {
      fehler= 1;
      if ((gr->status & PLrttype) == PLrttype) 
      {
        if (((bl->beamlineOK & sourceOK) == sourceOK) && 
           ((gr->status & PLsource) == PLsource))  
        {
           printf("SetGrDatStruct: plot source\n");
           vo= bl->RTSource.SourceRays;  
           gr->zeilen= bl->RTSource.raynumber;  
   	   fehler= 0;
        } else 
          if ((bl->beamlineOK & resultOK) == resultOK)  
          {
             printf("SetGrDatStruct: plot result (rt)\n");
             vo= bl->RESULT.RESUnion.Rays;  
             gr->zeilen= bl->RESULT.points;  
             fehler= 0;
          }    
      } /* end rttype */
             
      if (((bl->beamlineOK & resultOK) == resultOK) && 
          ((gr->status & PLphspacetype) == PLphspacetype))
      {
          printf("SetGrDatStruct: plot result (phasesp)\n");
          vo= &bl->RESULT.RESUnion.PSD;  
          gr->zeilen= bl->RESULT.points;  
          fehler= 0;
      }           
      if (fehler == 1) gr->status= 0; 
      
                  /* end rtrace */
#ifdef DEBUG      
      printf("SetGrDatStruct GRDS: %f %f %f %f\nrays: %d\n", gr->ymi,gr->yma,
                                    gr->zmi,gr->zma, gr->zeilen);
#endif
    }
    return vo;
}  /* SetGrDatStruct end */

void AutoScale(struct RayType *rp, GRDATSTRUCTTYPE *gr, 
	       struct BeamlineType *bl)  
/* Autoscale der grdatstruct an hand der daten 	*/   
/* Uwe 29.7.96 					*/   
/* */ 
{
   int i, zahl;
   
   printf("AutoScale: called\n");    
   zahl= gr->zeilen;
/*   printf("AutoScale called %d\n",zahl); */  
   if (zahl > 0)
   {
       gr->ymi=  gr->yma=  rp->y; 
       gr->zmi=  gr->zma=  rp->z; 
       gr->dymi= gr->dyma= rp->dy; 
       gr->dzmi= gr->dzma= rp->dz;
       gr->tmi = gr->tma=  rp->phi;
   
       for (i= 0; i< zahl; i++, rp++)
       {
         gr->ymi  = min(rp->y,gr->ymi); 
    /*   printf("AutoScale called2 %d\n", i);   */
         gr->yma  = max(rp->y,gr->yma);    
         gr->zmi  = min(rp->z,gr->zmi); 
         gr->zma  = max(rp->z,gr->zma); 
         gr->dymi = min(rp->dy,gr->dymi); 
         gr->dyma = max(rp->dy,gr->dyma);    
         gr->dzmi = min(rp->dz,gr->dzmi); 
         gr->dzma = max(rp->dz,gr->dzma);
	 gr->tmi  = min(rp->phi, gr->tmi) * 
	   bl->BLOptions.lambda/ (2 * PI * LIGHT_VELO); 
         gr->tma =  max(rp->phi, gr->tma) * 
	   bl->BLOptions.lambda/ (2 * PI * LIGHT_VELO);
       }
   }
    /* fuers auge */
   /*  printf("call Beauty\n"); */
   Beauty(&gr->ymi,  &gr->yma);
   Beauty(&gr->zmi,  &gr->zma);
   Beauty(&gr->dymi, &gr->dyma);
   Beauty(&gr->dzmi, &gr->dzma);
   Beauty(&gr->tmi,  &gr->tma);
} /* end scale */

void AutoScalePS(struct PSDType *ps, GRDATSTRUCTTYPE *gr)  
/* Autoscale der grdatstruct an hand der daten 	*/   
/* Uwe 29.7.96 					*/   
/* last modifyed Uwe 9.8.96 			*/   
{
   int i;
   
   printf("AutoScalePS called iy: %d iz: %d\n", ps->iy, ps->iz);    

   gr->ymi=  gr->yma=  *ps->y; 
   gr->zmi=  gr->zma=  *ps->z; 

   for (i= 0; i< ps->iy; i++)
   {
      gr->ymi = min(ps->y[i], gr->ymi); 
      gr->yma = max(ps->y[i], gr->yma); 
   }   
   for (i= 0; i< ps->iz; i++)
   {
      gr->zmi = min(ps->z[i], gr->zmi); 
      gr->zma = max(ps->z[i], gr->zma); 
   }   
   printf("  AutoscalePS: %f < y < %f, %f < z < %f\n", gr->ymi, gr->yma, 
                          gr->zmi, gr->zma);
} /* end scaleps */

void Beauty(double *mi, double *ma) 
/* setzt den min, max in Abh. von dx 	*/
/* Uwe 29.7.96 				*/
/* last mod Uwe 29.7.96 		*/
{
   double delta;

   delta= fabs(*ma- *mi);

   if (delta > 1e-6)
   {
      *mi-= 0.05 * delta;   
      *ma+= 0.05 * delta;     
   } else 
   {
      *mi= -1.05 * fabs(*mi);   
      *ma=  1.05 * fabs(*ma);  
   }
} /* end Beauty */

/****************************************************************/  
int getgrfiletype(char *fname)  
/****************************************************************/   
/* return: 	-1: error no outputfile found, unknown type 	*/
/*		 0: RT type					*/
/*	     sonst: PS type					*/
/* last mofifyed: 29.7.96               			*/
/****************************************************************/  
{
    FILE *f;
    int rcode, tmp;
    
    rcode= -1;                            	/* error */
    if ((f= fopen(fname, "r")) == NULL) 
         fprintf(stderr, "File %s not found!\n", fname);  
    else                                  	/* file found */
    {
      fscanf(f,"%d %d\n", &tmp, &rcode); 
      fclose(f);     
      if(rcode > 0)      xprintf("PS filetype\n");  
      else 
        if (rcode == 0)  xprintf("RT filetype\n");    
	else             
        {
          xprintf("Unknown filetype, set errorcode\n");    
          rcode= -1;
        }
    }
    return rcode;
}   /* end getgrfiletype */

void inithplotc(int i)
{
   hlimit(&i);
   i= 1; hplint(&i);
}
   
void hplotdisplay(struct BeamlineType *bl, GRDATSTRUCTTYPE *gr, 
                  struct PHASEset *ph, struct RayType *rp) 
/* c- fortran interface 				*/
/* last mod. 9.7.96 					*/
/* keine globalen variablen mehr 			*/
/* Interface wird beim rtrace genutzt                   */

{
#ifdef VMS
    FString fstitle, fsmetaname;

    CreateFString(&fstitle, gr->titel);    
    CreateFString(&fsmetaname,  ph->plotpsname); 
    hplotdisplayf(gr, rp, &bl->deltalambdafactor,
		  &bl->BLOptions.lambda, &fstitle, &fsmetaname);   
#else   
    hplotdisplayf(gr, rp, &bl->deltalambdafactor, &bl->BLOptions.lambda,
		  gr->titel, ph->plotpsname, 
		  strlen(gr->titel), strlen(ph->plotpsname)); 
#endif 
}  /* end  hplotdisplay */

void hplotpsdc(struct BeamlineType *bl, GRDATSTRUCTTYPE *gr, 
	       struct PHASEset *ph, struct PSDType *pd, double *plotdata) 
     /* 24.2.97 plotdata hinzugefuegt */
     /* c- fortran interface 				*/
     /* last mod. 26.2.97 				*/
     /* keine globalen variablen mehr 			*/
     /* fuer phsptrafo */
{
#ifdef VMS
  FString fstitle, fsmetaname;

  printf("hplotpsdc called\n");
  CreateFString(&fstitle, gr->titel);    
  CreateFString(&fsmetaname,  ph->plotpsname);    /* psd sind die daten */
  hplotpsdf(&fstitle, &fsmetaname, gr, 
	    pd->y, pd->z, plotdata, &pd->iy, &pd->iz);   
#else 
  printf("hplotpsdc called\n");
  hplotpsdf(gr->titel, ph->plotpsname, gr, pd->y, pd->z, plotdata, &pd->iy, 
	    &pd->iz, strlen(gr->titel), strlen(ph->plotpsname)); 
#endif
}  /* end  hplotpsd */

void hplotpssimc(struct BeamlineType *bl, GRDATSTRUCTTYPE *gr, 
	       struct PHASEset *ph, double *plotdata) 
     /* 27.2.97 simpson ausdrucke                       */
     /* c- fortran interface 				*/
     /* last mod. 11.2.00 				*/
   
{
#ifdef VMS
  static FString fstitle, fsmetaname;

  printf("hplotpssimc called\n");
  CreateFString(&fstitle, gr->titel);    
  CreateFString(&fsmetaname,  ph->plotpsname);    /* psd sind die daten */
  hplotpssimf(&fstitle, &fsmetaname, &gr->psfile, 
	      &bl->BLOptions.xi.ymin, &bl->BLOptions.xi.ymax,
	      &bl->BLOptions.xi.ianzy0,
	      &bl->BLOptions.xi.zmin, &bl->BLOptions.xi.zmax,
	      &bl->BLOptions.xi.ianzz0,
	      plotdata); 
#else
  printf("hplotpssimc called\n");
  hplotpssimf(gr->titel, ph->plotpsname, &gr->psfile, 
	      &bl->BLOptions.xi.ymin, &bl->BLOptions.xi.ymax,
	      &bl->BLOptions.xi.ianzy0,
	      &bl->BLOptions.xi.zmin, &bl->BLOptions.xi.zmax,
	      &bl->BLOptions.xi.ianzz0,
	      plotdata, 
	      strlen(gr->titel),strlen(ph->plotpsname)); 
#endif     
}  /* end  hplotpssimc */

void ReadRayFile(char *name, int *zahl, struct RESULTType *Re)   
/* wird von SetGrDatSruct gerufen 				*/
/* Parameter: filename, number of rays, vektor mit rays         */
/* last mod. Uwe 8.8.96 					*/ 
{
    FILE *f;
    int i, rz;
    double *dp;
    struct RayType *Rp;
    
    printf("  ReadRayFile called \n"); 
    if ((f= fopen(name, "r")) == NULL)
    {
       fprintf(stderr, "error: open file %s\n", name); exit(-1);   
    } else
    {  					/* 12.3.96 filesystemAenderung */
       FreeResultMem(Re);  
       fscanf(f, "%d %d\n", &rz, &i);
       if ((Re->RESUnion.Rays= (struct RayType *)
            malloc(rz* sizeof(struct RayType))) == NULL)
       {    fprintf(stderr, "realloc error in ReadRayFile\n"); exit(-1); }  

       Re->typ= PLrttype; 
       Rp= Re->RESUnion.Rays;

       for (i= 0; i< rz; i++)
       {
           fscanf(f, "%lf %lf %lf %lf %lf\n", 
		&Rp[i].y, &Rp[i].z, &Rp[i].dy, &Rp[i].dz, &Rp[i].phi);   
       /*    printf("%lf %lf %lf %lf\n", 
		Rp[i].y, Rp[i].z, Rp[i].dy, Rp[i].dz);    */
       }
       fclose(f);
       *zahl= rz;
       Re->points= rz;
       printf("read %d rays from file %s --> done\n", i, name);  

    }
}  /* end ReadRayFile */

void ReadpsFile(char *name, struct RESULTType *Re)   
/* wird von SetGrDatSruct gerufen 				*/
/* Parameter: filename, number of rays, vektor mit rays         */
/* last mod. Uwe 8.8.96 					*/ 
{
    FILE *f;
    int i, j;
    struct PSDType *p;
    
    printf("  ReadpsFile called: %s \n", name); 
    p= &Re->RESUnion.PSD;

    if ((f= fopen(name, "r")) == NULL)
    {
       fprintf(stderr, "error: open file %s\n", name); exit(-1);   
    } else
    {  					/* 12.3.96 filesystemAenderung */
       FreeResultMem(Re);  
       fscanf(f, "%d %d\n", &p->iz, &p->iy);

       if ((p->y= (double *) malloc(p->iy* sizeof(double))) == NULL)
       {  fprintf(stderr, "malloc error\n"); exit(-1);    }   
       if ((p->z= (double *) malloc(p->iz* sizeof(double))) == NULL)
       {  fprintf(stderr, "malloc error\n"); exit(-1);    }   
       if ((p->psd= (double *)          
            malloc(p->iy* p->iz* sizeof(double))) == NULL)
       {  fprintf(stderr, "malloc error\n"); exit(-1);    }   

       printf("memory reserved\n");
       Re->typ= PLphspacetype;  
  
       for (i= 0; i< p->iy; i++) 
         for (j= 0; j< p->iz; j++) 
       /* psd ist fortran format */
           fscanf(f, "%lf %lf %lf\n", &p->z[j], &p->y[i], 
                                      &p->psd[i+ j* p->iy]); 

       fclose(f);
    }
}  /* end ReadpsFile */

/* end phasegraf.c */
