/*   File      : /afs/psi.ch/user/f/flechsig/phase/src/phase/activate_proc.c */
/*   Date      : <10 Feb 04 16:32:30 flechsig>  */
/*   Time-stamp: <21 Jun 12 13:40:18 flechsig>  */
/*   Author    : Uwe Flechsig, flechsig@psi.ch */

/*   $Source$  */
/*   $Date$ */
/*   $Revision$  */
/*   $Author$  */


/* 23.11.98 SIS, SIM undulator eingefuegt UF */     
                                      
#ifdef HAVE_CONFIG_H
  #include <config.h>
#endif 

#include <stdio.h> 
#include <string.h>  
#include <Xm/Text.h>  
#include <Xm/List.h>       
#include <Mrm/MrmAppl.h>  
#include <X11/Xlib.h>      
#include <X11/Xutil.h> 
#include "cutils.h"     
#include "phase_struct.h"
/*#include "fg3pck.h" */


#include "phase.h" 
#include "phaseX.h"      
#include "rtrace.h"    

extern const char *global_rundir;


void activate_proc(w, tag, reason)
     Widget		w;
     int			*tag;
     XmAnyCallbackStruct *reason;           
{
  int		widget_num = *tag; 	 /* Convert tag to widget number. */
  int		i, value, *itemlist[10]; /* for del gluebox */
  XmString	topic;    
  char 	command[MaxPathLength], buffer[MaxPathLength], header[MaxPathLength];
  extern GRDATSTRUCTTYPE grdatstruct; 
  struct BeamlineType *bl;
  struct PSDType *PSDp;
  struct PSImageType *psip;  
  struct FileSourceType    *fp;
  void *vo;
  time_t    time1, time2;

#ifdef DEBUG
  printf("activate_proc: widget_num %d\n", widget_num); 
  printf("activate_proc: Beamline.localalloc %d\n", Beamline.localalloc); 
#endif   

  switch (widget_num) {

     /*******************   global ****************************************/

  case kNyi:                                       /* Not yet impl. Box */
    FetchWidget(kNyi, "nyi");        
    XtManageChild(widget_array[kNyi]);      
    break;                                  

  case k_create_options:
    create_color();
    break;

    /*******************    File Pdme    **********************************/

            
  case kFPrint:                                    /* File Menu */
    FetchWidget(kFPFBox, "FPrintFileBox"); 
    XtManageChild(widget_array[kFPFBox]);   
    break;  

  case kFLoadButton:                                    /* Load File */
    ActivateFileSelection(widget_num, "*.phase");   
    break;  
    
  case kFPFOK:
    create_print();
    XtUnmanageChild(widget_array[kFPFBox]);  
    break;
  
  case kFPFAdd:                         /* Add Button  */
    ActivateFileSelection(widget_num, "p*.p*");   
    break;

  case kFPFDel:                        /* delete Matrix from List */
    value= XmListGetSelectedPos(widget_array[kFPFList], itemlist, &i);
    if (value == True)  	 {   
      XmListDeletePos(widget_array[kFPFList], **itemlist);   
      XtFree((char *)(*itemlist));      }    
    break;   
  
  case kFPFCancel:
    XtUnmanageChild(widget_array[kFPFBox]);  
    break; 
  
  case kFFile:                                     /* File File */
    FetchWidget(kFFileBox, "FFileBox"); 
#ifdef global
    InitFileBox(&PHASESet); 
#else
    InitFileBox(&Beamline.filenames);
#endif


    XtManageChild(widget_array[kFFileBox]);   
    break;   
            
  case kFFileBoxOK:
#ifdef global
    UpdateFilenames(&PHASESet); /* copy filenames from widgets into phaseset */
/* fprintf(STDERR, "!!! length restriction 80 in filenames source4 and source6 !!!\n"); */
    strncpy(Beamline.src.so4.fsource4a, PHASESet.so4_fsource4a, 80);
    strncpy(Beamline.src.so4.fsource4b, PHASESet.so4_fsource4b, 80);
    strncpy(Beamline.src.so4.fsource4c, PHASESet.so4_fsource4c, 80);
    strncpy(Beamline.src.so4.fsource4d, PHASESet.so4_fsource4d, 80);
    strncpy(Beamline.src.so6.fsource6,  PHASESet.so6_fsource6,  80);
    PutPHASE(&PHASESet, MainPickName);
#else
    UpdateFilenames(&Beamline.filenames); /* copy filenames from widgets into phaseset */

    /* fprintf(STDERR, "!!! length restriction 80 in filenames source4 and source6 !!!\n"); */
    strncpy(Beamline.src.so4.fsource4a, Beamline.filenames.so4_fsource4a, 80);
    strncpy(Beamline.src.so4.fsource4b, Beamline.filenames.so4_fsource4b, 80);
    strncpy(Beamline.src.so4.fsource4c, Beamline.filenames.so4_fsource4c, 80);
    strncpy(Beamline.src.so4.fsource4d, Beamline.filenames.so4_fsource4d, 80);
    strncpy(Beamline.src.so6.fsource6,  Beamline.filenames.so6_fsource6,  80);

    PutPHASE(&Beamline.filenames, MainPickName);
#endif
 
    if (Beamline.RTSource.QuellTyp == 'F') 
      {
	fp= (struct FileSourceType *)Beamline.RTSource.Quellep;
#ifdef global
	strncpy(fp->filename, PHASESet.sourceraysname, MaxPathLength);
#else
	strncpy(fp->filename, Beamline.filenames.sourceraysname, MaxPathLength);
#endif
      }
#ifdef global
    WriteBLFile(PHASESet.beamlinename, &Beamline);   
#else
    WriteBLFile(Beamline.filenames.beamlinename, &Beamline);
#endif    
    if ((widget_array[kCCOptiDialog] != NULL) &&
	XtIsRealized(widget_array[kCCOptiDialog]))
#ifdef global
      InitOptiBox(PHASESet.optipckname, &Beamline); 
#else
    InitOptiBox(Beamline.filenames.optipckname, &Beamline); 
#endif
    XtUnmanageChild(widget_array[kFFileBox]); 
    break; 
 
  case kFFileBoxCancel:
    XtUnmanageChild(widget_array[kFFileBox]);    
    break;   

  case kFFileBoxExpand:
#ifdef global
    ExpandFileNames(&PHASESet, ""); 
#else
    ExpandFileNames(&Beamline.filenames, ""); 
#endif 
    break;   

  case kFFileButton1:
    ActivateFileSelection(widget_num, "*.omx");   
    break;

  case kFFileButton2:
    ActivateFileSelection(widget_num, "*.map");   
    break;

  case kFFileButton3:
    ActivateFileSelection(widget_num, "*.inp");   
    break;

  case kFFileButton4:
    ActivateFileSelection(widget_num, "*.out");   
    break;

  case kFFileButton5:
    ActivateFileSelection(widget_num, "*.plt");   
    break;

  case kFFileButton6:
    ActivateFileSelection(widget_num, "*.datg");   
    break;

  case kFFileButton7:  
    ActivateFileSelection(widget_num, "*.date");   
    break;

  case kFFileButton8:
    ActivateFileSelection(widget_num, "*.pcks");  
    break;

  case kFFileButton9:
    ActivateFileSelection(widget_num, "*.pckg");  
    break;

  case kFFileButton10: 
    ActivateFileSelection(widget_num, "*.pcke");  
    break;  

  case kFFileButton11: 
    ActivateFileSelection(widget_num, "*.brig");  
    break; 
 
  case kFFileButton12: 
    ActivateFileSelection(widget_num, "p*.pcl");  
    break;    

  case kFFileButton13: 
    ActivateFileSelection(widget_num, "*.pcko");  
    break;

 case kFFileButton14:
 case kFFileButton15:
 case kFFileButton16:
 case kFFileButton17:
 case kFFileButton18:
    ActivateFileSelection(widget_num, "*.*");  
    break;
   
    
  case kFSaveAsButton: 
    ActivateFileSelection(widget_num, "*.phase");  
    break;       

    /*************************** Edit Pdme *******************************/    
  case kESourceMenuButton:
    FetchWidget(kESourceBox, "ESourceBox");  
    InitSourceType(&Beamline, widget_num);
    AllocRTSource(&Beamline);
    InitSourceBox(&Fg3ActDat, &Beamline);  
    XtManageChild(widget_array[kESourceBox]);        
    break;
  case kESRayTraceButton:                        /* Edit- Source- Pdme */
  case kESDipolSourceButton:
  case kESPointSourceButton:
  case kESRingSourceButton:
  case kESUndulatorSourceButton:
  case kESundulatorSourceButton:
  case kESUndulatorSISButton:
  case kESUndulatorSIMButton:
  case kESUndulatorButton:
  case kESPhaseSpaceButton:
  case kESFileButton: 
  case kESPhaseSpaceImageButton:
    /* case kESSR1Button:  */                                        
  case kESSR2Button:  
    /*  FetchWidget(kESourceBox, "ESourceBox");    */ 
    InitSourceType(&Beamline, widget_num);
    AllocRTSource(&Beamline);
    initdatset(&Fg3ActDat, &Beamline); 
    InitSourceBox(&Fg3ActDat, &Beamline);       
    XtManageChild(widget_array[kESourceBox]);        
    break;
   
  case kEParameterButton:
    FetchWidget(kEParameterBox, "EParameterBox");
    /*  printf("PBox opend\n"); i=getchar(); */
    InitParameterBox(&Beamline, NULL);  
    XtManageChild(widget_array[kEParameterBox]);    
    break;  

  case kEParameterInitButton:
    printf("Initialize parameters with fg34.par from J. Bahrdt\n"); 
    if (fexists("fg34.par") == 1)
      {
	/* Sourcefilenames mit ueberbuegeln */
	i= 80; 
	memset(&Beamline.src.so4.fsource4a, 0, i);
	memset(&Beamline.src.so4.fsource4b, 0, i);
	memset(&Beamline.src.so4.fsource4c, 0, i);
	memset(&Beamline.src.so4.fsource4d, 0, i);
	memset(&Beamline.src.so6.fsource6,  0, i);
	readfg34_par(&Beamline.src, &Beamline.BLOptions.apr,
		     &Beamline.BLOptions.ifl, &Beamline.BLOptions.xi,
		     &Beamline.BLOptions.epsilon); 
#ifdef global
	strncpy(PHASESet.so4_fsource4a, Beamline.src.so4.fsource4a, 80);
        strncpy(PHASESet.so4_fsource4b, Beamline.src.so4.fsource4b, 80);
        strncpy(PHASESet.so4_fsource4c, Beamline.src.so4.fsource4c, 80);
	strncpy(PHASESet.so4_fsource4d, Beamline.src.so4.fsource4d, 80);
	strncpy(PHASESet.so6_fsource6,  Beamline.src.so6.fsource6,  80);
	        
	PutPHASE(&PHASESet, MainPickName);  
#else
	strncpy(Beamline.filenames.so4_fsource4a, Beamline.src.so4.fsource4a, 80);
        strncpy(Beamline.filenames.so4_fsource4b, Beamline.src.so4.fsource4b, 80);
        strncpy(Beamline.filenames.so4_fsource4c, Beamline.src.so4.fsource4c, 80);
	strncpy(Beamline.filenames.so4_fsource4d, Beamline.src.so4.fsource4d, 80);
	strncpy(Beamline.filenames.so6_fsource6,  Beamline.src.so6.fsource6,  80);
	        
	PutPHASE(&Beamline.filenames, MainPickName);  

#endif

	Beamline.beamlineOK= 0;
	printf("---> OK\n");
      } else
	printf("fg34.par -- not found\n");
    break;  

  case kEOptiButton:
    FetchWidget(kCCOptiDialog, "CCOptiDialog");  
#ifdef global
    InitOptiBox(PHASESet.optipckname, &Beamline);   
#else
    InitOptiBox(Beamline.filenames.optipckname, &Beamline);
#endif


    XtManageChild(widget_array[kCCOptiDialog]); 
    break;   

  case kEBLButton:
    FetchWidget(kEBLDialog, "EBLDialog"); 
#ifdef global 
    ReadBLFile(PHASESet.beamlinename, &Beamline); 
#else
    ReadBLFile(Beamline.filenames.beamlinename, &Beamline); 
#endif
    if ((widget_array[kESourceBox] != NULL) && 
	XtIsRealized(widget_array[kESourceBox])) 
      {  
	InitSourceType(&Beamline, kESDefaults);
        AllocRTSource(&Beamline);
	InitSourceBox(&Fg3ActDat, &Beamline); 
      }
#ifdef global 
    InitBLBox(PHASESet.beamlinename, &Beamline);   
#else
    InitBLBox(Beamline.filenames.beamlinename, &Beamline); 
#endif
    XtManageChild(widget_array[kEBLDialog]); 
    break;   

  case kEOETM:
  case kEOEPM:
  case kEOEPG:
  case kEOEPElliG:
  case kEOEPGV:
  case kEOETG:
  case kEOEVLSG:     
  case kEOEElli:     
  case kEOEPElli: 
  case kEOESlit:
  case kEOEDrift:
  case kEOEGeneral:
  case kEOECone: 
    /*    printf("activate_proc: OEBox PDM: widget_num: %d\n", widget_num);*/
    SetOElementBoxSensitivity(widget_num);
    
    /* last modification: 17 Jun 97 08:49:57 flechsig */
    /* 
    FetchWidget(kEOElement, "EOElementBox");  
    InitOElementBox(&MActDat, &GActDat, widget_num);       
    XtManageChild(widget_array[kEOElement]);
    */ 
    break;

  case kEGeometry: 
    /*    FetchWidget(kEGeometry, "EGeometryBox");  
    InitGeometryBox(&GActDat);   
    XtManageChild(widget_array[kEGeometry]); */
    /* initialisiert die Quellen bei PS */
      start_watch();

      if ((Beamline.src.isrctype == 2) || 
	  (Beamline.src.isrctype == 3) ||
	  (Beamline.src.isrctype == 4) ||
	  (Beamline.src.isrctype == 6))
	{
#ifdef OLD_PO_SOURCE
	  src_ini(&Beamline.src); 
#else
	  source4c_ini(&Beamline);
#endif
          Beamline.beamlineOK |= pstsourceOK;
#ifdef DEBUG
	  printf("activate_proc: called src_ini(&Beamline.src)\n");
#endif
	}
      else
	printf("activate_proc: source type %d not supported!\n", 
	       Beamline.src.isrctype);
      stop_watch();
    break;
      
  case kEGT3Button:                                   /* geometry Box */
    printf("call SetTheta\n");
    SetTheta(&Beamline.ElementList[Beamline.position- 1].GDat);     
    break; 

  case kESOK:                                    /* Source Box */ 
    XtUnmanageChild(widget_array[kESourceBox]);
  case kESApply:
    start_watch(); 
    GetSource(&Beamline); 
    Beamline.beamlineOK &= (~resultOK); 
    if (Beamline.RTSource.QuellTyp == 'I')
      {
	Beamline.beamlineOK |= pstimageOK;
        Beamline.beamlineOK &= (~sourceOK); 
      } 
    else 
      {
	Beamline.beamlineOK &= (~pstimageOK);
        Beamline.beamlineOK |= sourceOK; 
      } 

    stop_watch(); 
    break;  

  case kESDefaults:
    Beamline.RTSource.QuellTyp_old--;
    initdatset(&Fg3ActDat, &Beamline); 
    InitSourceBox(&Fg3ActDat, &Beamline);      
    break; 

  case kESCancel: 
    XtUnmanageChild(widget_array[kESourceBox]);
    break;     

  case kEOEAB2: 
  case kEOEAB4:                                   /* OElement Box */
    SetRadius(widget_num);     
    xprintf("calculate radius\n");   
    break; 

   case kPreAB: 
   case kSucAB:                                   /* OElement Box */
    CopyLength(widget_num);     
    xprintf("copy contents\n");   
    break; 

   case kEOEOK:                                    /* OElement Box */ 
    XtUnmanageChild(widget_array[kEOElementBox]);
  case kEOEApply:                                 /* 26.6.96 */ 
    bl= &Beamline;   
    if ((bl->position <= bl->elementzahl) && (bl->position != 0)) 
      {
#ifdef global
	bl->ElementList[bl->position- 1].MDat.Art= 
	i= GetOElement(&PHASESet,	/*  */
		    &bl->ElementList[(bl->position)- 1].MDat,
		    &bl->ElementList[(bl->position)- 1].GDat);  
#else
	bl->ElementList[bl->position- 1].MDat.Art= 
	i= GetOElement(&Beamline.filenames,	/*  */
		    &bl->ElementList[(bl->position)- 1].MDat,
		    &bl->ElementList[(bl->position)- 1].GDat);
#endif

	printf("activate_proc: returned etype= %d\n" ,i);
	if (i == kEOEGeneral)
	  ReadCoefficientFile((double *)&bl->ElementList[(bl->position)- 1].mir, 
			      bl->ElementList[(bl->position)- 1].elementname);
      	DefMirrorC(&bl->ElementList[(bl->position)- 1].MDat, 
		   &bl->ElementList[(bl->position)- 1].mir, i, 
		   bl->ElementList[(bl->position)- 1].GDat.theta0,
		   bl->BLOptions.REDUCE_maps, bl->BLOptions.WithAlign, (bl->position- 1)); 
	/*mputpickfile(&bl->ElementList[(bl->position)- 1].MDat, 
	  PHASESet.elementpckname);*/
	DefGeometryC(&bl->ElementList[(bl->position)- 1].GDat, 
		     &bl->ElementList[(bl->position)- 1].geo); 
	/*gputpickfile(&bl->ElementList[(bl->position)- 1].GDat, 
	  PHASESet.geometrypckname);  */ 
	SetDeltaLambda(bl, &bl->ElementList[(bl->position)- 1]);   
                             
	bl->ElementList[(bl->position)- 1].ElementOK |= elementOK;
	bl->ElementList[(bl->position)- 1].ElementOK &= (~mapOK);  
	bl->beamlineOK &= (~mapOK); /* ausschalten */    
      }
    else 
      fprintf(stderr, "activate_proc: no beamline element selected\n");
    UpdateMainList();  
    break;  

  case kEOEDefaults: 
    InitOElementBox(&MDefDat, &GDefDat, widget_num); 
    break; 

  case kEOECancel: 
    XtUnmanageChild(widget_array[kEOElementBox]);
    break;  
        
  case kEGOK:                                    /* Geometry Box */ 
    XtUnmanageChild(widget_array[kEGeometryBox]);    
  case kEGApply: 
    start_watch(); 
    bl= &Beamline;
    if ((bl->position <= bl->elementzahl) && (bl->position != 0)) 
      {
	printf("update geometry\n");
#ifdef global
	GetGeometry(&PHASESet, 
		    &bl->ElementList[(bl->position)- 1].GDat);
#else
	GetGeometry(&Beamline.filenames, 
		    &bl->ElementList[(bl->position)- 1].GDat);
#endif
	DefGeometryC(&bl->ElementList[(bl->position)- 1].GDat, 
		     &bl->ElementList[(bl->position)- 1].geo);  
	/*	gputpickfile(&bl->ElementList[(bl->position)- 1].GDat, 
	  PHASESet.geometrypckname); */
	SetDeltaLambda(bl, &bl->ElementList[(bl->position)- 1]);  
	/*	bl->ElementList[(bl->position)- 1].ElementOK |= geometryOK; */
	bl->ElementList[(bl->position)- 1].ElementOK |= elementOK; 
	bl->ElementList[(bl->position)- 1].ElementOK &= (~mapOK);  
	bl->beamlineOK &= (~mapOK); /* ausschalten */    
      }
    else  
      fprintf(stderr, "activate_proc: no beamline element selected\n");
    UpdateMainList(); 
    stop_watch();  
    break;  

  case kEGDefaults: 
    InitGeometryBox(&GDefDat);    
    break; 

  case kEGCancel: 
    XtUnmanageChild(widget_array[kEGeometryBox]);
    break; 
 
    /* blbox */
  case kEBLNameButton:
    ActivateFileSelection(widget_num, "*.phase"); 
    break;
  case kEBLAdd:
    ActivateFileSelection(widget_num, "*.date"); 
    break;    
  case kEBLDel:                        /* delete Matrix from List */
    DelBLElement(&Beamline);
    break;   

  case kEBLCancel:    
    XtUnmanageChild(widget_array[kEBLDialog]); 
    break; 
  case kEBLOK:    
    XtUnmanageChild(widget_array[kEBLDialog]); 
  case kEBLApply:    
    /* get...*/
    start_watch(); 
    time(&time1);
#ifdef global
    GetBLBox(PHASESet.beamlinename, &Beamline);
    WriteBLFile(PHASESet.beamlinename, &Beamline); 
#else
    GetBLBox(Beamline.filenames.beamlinename, &Beamline);
    WriteBLFile(Beamline.filenames.beamlinename, &Beamline);
#endif
    BuildBeamline(&Beamline);
    stop_watch(); 
    time(&time2);
    printf("time: %d\n",time2-time1);
    break; 
  case kEBLAddOK:
 /* modification: 23 Oct 97 08:30:55 flechsig */
 /* modification: 13 Mar 98 08:19:55 flechsig */
    bl= &Beamline; 
    if ((bl->position <= bl->elementzahl) && (bl->position != 0)) 
      {
	GetSlope(&bl->ElementList[(bl->position)- 1]);  
	printf("aperture and slope in dataset\n");
	/* speichern der daten */
#ifdef global
	ExpandFileNames(&PHASESet, 
			&bl->ElementList[(bl->position)- 1].elementname);
	/*	mputpickfile(&bl->ElementList[(bl->position)- 1].MDat, 
		     PHASESet.elementpckname); 
	gputpickfile(&bl->ElementList[(bl->position)- 1].GDat,
	PHASESet.geometrypckname);*/
	WriteBLFile(PHASESet.beamlinename, bl); 
#else
	ExpandFileNames(&Beamline.filenames, 
			&bl->ElementList[(bl->position)- 1].elementname);
	/*	mputpickfile(&bl->ElementList[(bl->position)- 1].MDat, 
		     PHASESet.elementpckname); 
	gputpickfile(&bl->ElementList[(bl->position)- 1].GDat,
	PHASESet.geometrypckname);*/
	WriteBLFile(Beamline.filenames.beamlinename, bl); 
#endif
      }
    else 
      fprintf(stderr, "activate_proc: no beamline element selected\n");
    break;           

    /******************** Commands  Pdme ************************************/

  case kCProductMatrixButton:         /*Multiplikation der Matrix */
    start_watch();  
    FetchWidget(kCCGlueBox,"CCGlueBox");  
    XtManageChild(widget_array[kCCGlueBox]);    
    stop_watch(); 
    break;

  case kCCGOK:                          /* start matrix multiplication */
    start_watch();                        /* Commands Glue Box ok*/
    MultiplyMatrix(); 
    XtUnmanageChild(widget_array[kCCGlueBox]);  
    stop_watch();  
    break;   

  case kCCGResultButton:                /* Product Matrix Button (GBox)*/ 
  case kCCGAdd:                         /* Add Button (GBox) */
    ActivateFileSelection(widget_num, "*.omx");   
    break;  
 
  case kCCGDel:                        /* delete Matrix from List (GBox)*/
    value= XmListGetSelectedPos(widget_array[kCCGList], itemlist, &i);
    if (value == True)  	 {   
      XmListDeletePos(widget_array[kCCGList], **itemlist);   
      XtFree((char *)(*itemlist));      }    
    break;    

  case kCCGCancel:
    XtUnmanageChild(widget_array[kCCGlueBox]);
    break;                                    /* Glue Box end */
        
  case kCMatrixReadButton:                   /* read Matrix from file */
    start_watch();     
              
    bl= &Beamline; 
#ifdef global
    printf("activate_proc: read matrix from file: %s\n", 
	   PHASESet.matrixname); 

    readmatrixfile(PHASESet.matrixname, bl->M_StoI, 
		   &Beamline.BLOptions.ifl.iord, strlen(PHASESet.matrixname));
#else
    printf("activate_proc: read matrix from file: %s\n", 
	   Beamline.filenames.matrixname); 

    readmatrixfile(Beamline.filenames.matrixname, bl->M_StoI, 
		   &Beamline.BLOptions.ifl.iord, strlen(Beamline.filenames.matrixname));

#endif
    printf("activate_proc: read matrix ende, hardcoded: iord= %d\n", 
	   Beamline.BLOptions.ifl.iord);    
    extractmap(bl->M_StoI, 
	       bl->ypc1, bl->zpc1, bl->dypc, bl->dzpc, 
	       &Beamline.BLOptions.ifl.iord); 
    bl->beamlineOK |= mapOK; 
    stop_watch(); 
    break;      

  case kCCRayTraceButton:                          /*  Ray Trace */  
    start_watch(); 
    time(&time1);
    Beamline.BLOptions.CalcMod= 1;
    Fg3ActDat.imodus= 1; Fg3ActDat.itrans= 0;
    if (CheckBLOK(Beamline.beamlineOK, 
		  (sourceOK | mapOK), "act_pr: ") > 0)
      {
	ReAllocResult(&Beamline, PLrttype, Beamline.RTSource.raynumber, 0);
	RayTracec(&Beamline); 
        printf("ray trace-> done\n");
      }     
    UpdateMainList();  
    stop_watch();   
    time(&time2);
    printf("time: %d\n", time2-time1);
    break;  
 
  case kCCPTButton:                              /*  Phase Trafo */  
    start_watch();   
    Beamline.BLOptions.CalcMod= 3;
#ifdef DEBUG
    printf("activate_proc: call PST\n");
#endif
    if (CheckBLOK(Beamline.beamlineOK, 
		  (pstsourceOK | mapOK | pstimageOK), "act_pr: ") > 0)
      {
	psip = (struct PSImageType *)Beamline.RTSource.Quellep;
	ReAllocResult(&Beamline, PLphspacetype, psip->iy, psip->iz);
	PST(&Beamline);
      }
    
    UpdateMainList();
    stop_watch();    
    break;   

  case kCCMPTButton:                              /*  Phase Trafo */  
    if (CheckBLOK(Beamline.beamlineOK, 
		  (pstsourceOK | mapOK | pstimageOK), "act_pr: ") > 0)
      {
	psip = (struct PSImageType *)Beamline.RTSource.Quellep;
	ReAllocResult(&Beamline, PLphspacetype, psip->iy, psip->iz);
	MPST(&Beamline);
      } 
    break;   
     
  case kCCSR1Button:                          /*  footprint */  
    start_watch();
    if (CheckBLOK(Beamline.beamlineOK, 
		  (sourceOK | mapOK), "act_pr: ") > 0)
      {
	ReAllocResult(&Beamline, PLrttype, Beamline.RTSource.raynumber, 0);
	Footprint(&Beamline, Beamline.position);
      }
    stop_watch();    
    break; 
  
  case kCCSR2Button:                          /*  full Ray Trace */  
    start_watch(); 
    time(&time1);
    Beamline.BLOptions.CalcMod= 2;

    if (CheckBLOK(Beamline.beamlineOK, 
		  (sourceOK | mapOK), "act_pr: ") > 0)
      {
	printf("activate_proc: full ray trace\n");   
	ReAllocResult(&Beamline, PLrttype, Beamline.RTSource.raynumber, 0);
	RayTraceFull(&Beamline); 
	printf("full ray trace-> done\n");    
	Beamline.beamlineOK |= resultOK;
      }
    stop_watch();  
    time(&time2);
    printf("time: %d\n",time2-time1);
    break;   
        
  case kCCOptiButton: 	                /*  Opti*/  
#ifdef global
    snprintf(command, MaxPathLength,
	    "phaseopti %s", PHASESet.optipckname);
#else
    snprintf(command, MaxPathLength,
	    "phaseopti %s", Beamline.filenames.optipckname);
#endif
    system(command); 
    break;  
 
  case kCCExtractButton: 	                /*  Extr*/ 
#ifdef global
snprintf(command, MaxPathLength,
	    "phaseextract %s", PHASESet.optipckname);
#else 
    snprintf(command, MaxPathLength,
	    "phaseextract %s", Beamline.filenames.optipckname);
#endif
    system(command); 
    break;   

  case kCOptiResultButton: 
    ActivateFileSelection(widget_num, "*.dat");  
    break;

  case kCOptiMinuitButton: 
    ActivateFileSelection(widget_num, "*.inp");  
    break;

  case kCOptiAdd:
    ActivateFileSelection(widget_num, "*.date");  
    break;   

  case kCOptiDel:                 /* delete Matrix from List*/
    value= 
      XmListGetSelectedPos(widget_array[kCOptiList], itemlist, &i);
    if (value == True)
      {   
	XmListDeletePos(widget_array[kCOptiList], **itemlist);   
	XtFree((char *)(*itemlist));  
	topic = XmStringCreateLocalized("select items ");   
	set_something(widget_array[kCOptiSelectedLabel], 
		      XmNlabelString, topic); 
      }    
    break;       
  
  case kCOptiDel1:                 /* delete  from List*/
    value= 
      XmListGetSelectedPos(widget_array[kCOptiList2], itemlist, &i);
    if ((value == True) && (**itemlist > 2))
      {   
	XmListDeletePos(widget_array[kCOptiList2], **itemlist);   
	XtFree((char *)(*itemlist)); 
      }    
    break;       

  case kCOptiOK:                       /* optibox */
#ifdef global
    GetOptiBox(&PHASESet);  
#else
    GetOptiBox(&Beamline.filenames);
#endif
  case kCOptiCancel:    
    XtUnmanageChild(widget_array[kCCOptiDialog]); 
    break;
                     
  case kCOptiT1:
  case kCOptiAddOK: 
    /* printf("aktivated\n");   */
    InitOptiList2(-1, NULL);        /*replace */
    break;
   
  case kCOptiAdd1: 
    printf("aktivated\n");	
    InitOptiList2(-2, NULL);        /*Add  */
    break;   

  case kCWriteMapButton: 
    bl= &Beamline;  
    if (CheckBLOK(bl->beamlineOK, mapOK, "act_pr: ") > 0)
      {
	if ((bl->position <= bl->elementzahl) && (bl->position != 0))
	  {
	    printf("write map of element %d to file\n", bl->position); 
#ifdef global 
            snprintf(header, MaxPathLength, "beamline: %s, map of element %d, iord: %d", 
		    PHASESet.beamlinename, bl->position, bl->BLOptions.ifl.iord);
#ifdef SEVEN_ORDER
	    snprintf(buffer, MaxPathLength, "%s-%d_7", PHASESet.mapname, bl->position);
#else
	    snprintf(buffer, MaxPathLength, "%s-%d", PHASESet.mapname, bl->position);
#endif

#else
	    snprintf(header, MaxPathLength, "beamline: %s, map of element %d, iord: %d", 
		    Beamline.filenames.beamlinename, bl->position, bl->BLOptions.ifl.iord);
#ifdef SEVEN_ORDER
	    snprintf(buffer, MaxPathLength, "%s-%d_7", Beamline.filenames.mapname, bl->position);
#else
	    snprintf(buffer, MaxPathLength, "%s-%d", Beamline.filenames.mapname, bl->position);
#endif


#endif

	    /* casting 15.12.99 ist noch nicht OK */
	    writemapc(buffer, header, bl->BLOptions.ifl.iord, 
		      (double *)(bl->ElementList[bl->position- 1].ypc1), 
		      (double *) bl->ElementList[bl->position- 1].zpc1, 
		      (double *) bl->ElementList[bl->position- 1].dypc, 
		      (double *) bl->ElementList[bl->position- 1].dzpc,
		      (double *) bl->ElementList[bl->position- 1].wc, 
		      (double *) bl->ElementList[bl->position- 1].xlc, 
		      (double *) bl->ElementList[bl->position- 1].xlm.xlen1c, 
		      (double *) bl->ElementList[bl->position- 1].xlm.xlen2c);
	  } 
	else
	  {
	    printf("write map of beamline to file\n");
#ifdef global
	    snprintf(header, MaxPathLength, "beamline: %s, map of beamline, iord: %d", 
		    PHASESet.beamlinename, bl->BLOptions.ifl.iord);
#ifdef SEVEN_ORDER
	    snprintf(buffer, MaxPathLength, "%s-0_7", PHASESet.mapname);
#else	    
	    snprintf(buffer, MaxPathLength, "%s-0", PHASESet.mapname);
#endif

#else

	    snprintf(header, MaxPathLength, "beamline: %s, map of beamline, iord: %d", 
		    Beamline.filenames.beamlinename, bl->BLOptions.ifl.iord);
#ifdef SEVEN_ORDER
	    snprintf(buffer, MaxPathLength, "%s-0_7", Beamline.filenames.mapname);
#else	    
	    snprintf(buffer, MaxPathLength, "%s-0", Beamline.filenames.mapname);
#endif




#endif

	    writemapc(buffer, header, bl->BLOptions.ifl.iord, 
		      (double *) bl->ypc1, (double *) bl->zpc1, 
		      (double *) bl->dypc, (double *) bl->dzpc,
		      (double *) bl->wc,   (double *) bl->xlc, 
		      (double *) bl->xlm.xlen1c, 
		      (double *) bl->xlm.xlen2c);
  
	  }
      }  
    break;   

  case kCWriteMCoButton: 
    bl= &Beamline;   
     /* \n weggenommen J.B. 10.11.2003 */
    snprintf(buffer, MaxPathLength, "%s", "mirror-coefficients.dat");
    printf("%s\n", buffer);
    WriteMKos((struct mirrortype *)&bl->ElementList[bl->position- 1].mir, buffer); 
    break;   
    

  case kCWriteResultButton: 
    bl= &Beamline;   
    if (CheckBLOK(Beamline.beamlineOK, resultOK, "act_pr: ") > 0)
      {

	/*  WriteRayFile(PHASESet.imageraysname, &bl->RTSource.raynumber, 
	    bl->raysout); */ 
	if ((bl->RESULT.typ & PLphspacetype) > 0)
	  {
#ifdef DEBUG
	    printf("activate_proc: callWritePsd\n");
#endif
	    PSDp= (struct PSDType *)Beamline.RESULT.RESp;

#ifdef global
	    WritePsd(PHASESet.imageraysname, PSDp, PSDp->iy, PSDp->iz);
#else
	     WritePsd(Beamline.filenames.imageraysname, PSDp, PSDp->iy, PSDp->iz);
#endif

	  }
	else 
#ifdef global
	  WriteRayFile(PHASESet.imageraysname, &bl->RESULT.points1,
		       (struct RayType *)bl->RESULT.RESp);
#else
	WriteRayFile(Beamline.filenames.imageraysname, &bl->RESULT.points1,
		       (struct RayType *)bl->RESULT.RESp);
#endif 
      } 
    break;   

          
    /******************* graphic Box **************************************/
  case kGraphicCommand:                          /* Commands */  
    start_watch();
    FetchWidget(kCGrBox, "CGrafBox"); 
#ifdef global
    InitGrafBox(&PHASESet, &grdatstruct);  
#else
    InitGrafBox(&Beamline.filenames, &grdatstruct);  
#endif 
    XtManageChild(widget_array[kCGrBox]); 
    xprintf("PHASEgraf started! \n");      
    stop_watch(); 
    break;
  
  case kCGrPSFileButton:
    ActivateFileSelection(widget_num, "*.ps");   
    break;   

  case kCGrOK: 
    XtUnmanageChild(widget_array[kCGrBox]); 
  case kCGrApply: 
#ifdef global   
    if (GetGrafBox(&PHASESet, &grdatstruct, 
		   Beamline.RESULT.typ) != -1)
#else
      if (GetGrafBox(&Beamline.filenames, &grdatstruct, 
		   Beamline.RESULT.typ) != -1)
#endif

      { 
#ifdef DEBUG
	printf("activate_proc: grafic start\n");  
#endif
#ifdef global
	vo= SetGrDatStruct(PHASESet.imageraysname, &Beamline,
			   &grdatstruct);
#else
		vo= SetGrDatStruct(Beamline.filenames.imageraysname, &Beamline,
			   &grdatstruct);
#endif

	if ((grdatstruct.status & PLrttype) > 0)
#ifdef global 
	  hplotdisplay(&Beamline, &grdatstruct, &PHASESet, 
		       (struct RayType *) vo); 
#else
	hplotdisplay(&Beamline, &grdatstruct, &Beamline.filenames, 
		       (struct RayType *) vo);
#endif

	if ((grdatstruct.status & PLphspacetype) > 0) /* Phase Space */
	  {
	    if ((grdatstruct.status - PLphspacetype) == 0)
#ifdef global
	      hplotpsdc(&Beamline, &grdatstruct, &PHASESet, 
			(struct PSDType *)vo, 
			(double *)((struct PSDType *)vo)->psd);
#else
	    hplotpsdc(&Beamline, &grdatstruct, &Beamline.filenames, 
			(struct PSDType *)vo, 
			(double *)((struct PSDType *)vo)->psd);


#endif
	    if ((grdatstruct.status & PLfd1phmax) > 0) 
#ifdef global
	      hplotpsdc(&Beamline, &grdatstruct, &PHASESet, 
			(struct PSDType *)vo, 
			(double *)((struct PSDType *)vo)->stfd1phmaxc);
#else
	    hplotpsdc(&Beamline, &grdatstruct, &Beamline.filenames, 
			(struct PSDType *)vo, 
			(double *)((struct PSDType *)vo)->stfd1phmaxc);
#endif



	    if ((grdatstruct.status & PLinumb) > 0) 
	      hplotpsdc(&Beamline, &grdatstruct, &Beamline.filenames, 
			(struct PSDType *)vo, 
			(double *)((struct PSDType *)vo)->stinumbc); 
	    if ((grdatstruct.status & PLS1) > 0) 
	      hplotpsdc(&Beamline, &grdatstruct, &Beamline.filenames, 
			(struct PSDType *)vo, 
			(double *)((struct PSDType *)vo)->s1c);
	    if ((grdatstruct.status & PLS2) > 0) 
	      hplotpsdc(&Beamline, &grdatstruct, &Beamline.filenames, 
			(struct PSDType *)vo, 
			(double *)((struct PSDType *)vo)->s2c);
	    if ((grdatstruct.status & PLS3) > 0) 
	      hplotpsdc(&Beamline, &grdatstruct, &Beamline.filenames, 
			(struct PSDType *)vo, 
			(double *)((struct PSDType *)vo)->s3c);
	    if ((grdatstruct.status & PLEyreal) > 0) 
	      hplotpsdc(&Beamline, &grdatstruct, &Beamline.filenames, 
			(struct PSDType *)vo, 
			(double *)((struct PSDType *)vo)->eyrec);
	    if ((grdatstruct.status & PLEzreal) > 0) 
	      hplotpsdc(&Beamline, &grdatstruct, &Beamline.filenames, 
			(struct PSDType *)vo, 
			(double *)((struct PSDType *)vo)->ezrec);
	    if ((grdatstruct.status & PLEyimag) > 0) 
	      hplotpsdc(&Beamline, &grdatstruct, &Beamline.filenames, 
			(struct PSDType *)vo, 
			(double *)((struct PSDType *)vo)->eyimc);
	    if ((grdatstruct.status & PLEzimag) > 0) 
	      hplotpsdc(&Beamline, &grdatstruct, &Beamline.filenames, 
			(struct PSDType *)vo, 
			(double *)((struct PSDType *)vo)->ezimc);

	    if ((grdatstruct.status & PLsimpre) > 0) 
	      hplotpssimc(&Beamline, &grdatstruct, &Beamline.filenames, 
			  (double *)((struct PSDType *)vo)->simpre);
	    if ((grdatstruct.status & PLsimpim) > 0) 
	      hplotpssimc(&Beamline, &grdatstruct, &Beamline.filenames, 
			  (double *)((struct PSDType *)vo)->simpim);
	    if ((grdatstruct.status & PLsintre) > 0) 
	      hplotpssimc(&Beamline, &grdatstruct, &Beamline.filenames, 
			  (double *)((struct PSDType *)vo)->sintre);
	    if ((grdatstruct.status & PLsintim) > 0) 
	      hplotpssimc(&Beamline, &grdatstruct, &Beamline.filenames, 
			  (double *)((struct PSDType *)vo)->sintim);
	    if ((grdatstruct.status & PLsimpam) > 0) 
	      hplotpssimc(&Beamline, &grdatstruct, &Beamline.filenames, 
			  (double *)((struct PSDType *)vo)->simpa);
	    if ((grdatstruct.status & PLsimpph) > 0) 
	      hplotpssimc(&Beamline, &grdatstruct, &Beamline.filenames, 
			  (double *)((struct PSDType *)vo)->simpp);

	  } /* end plotinhaltmenue phasespace */
     }
    break;

  case kCGrDefaults:
#ifdef global
    if (GetGrafBox(&PHASESet, &grdatstruct, 
		   Beamline.RESULT.typ) != -1)  /* st. initialisiert */
      {
	vo= SetGrDatStruct(PHASESet.imageraysname, &Beamline, 
			   &grdatstruct);  

#else
	if (GetGrafBox(&Beamline.filenames, &grdatstruct, 
		   Beamline.RESULT.typ) != -1)  /* st. initialisiert */
      {
	vo= SetGrDatStruct(Beamline.filenames.imageraysname, &Beamline, 
			   &grdatstruct);  
#endif

	if ((grdatstruct.status & PLrttype) > 0)   
	  AutoScale((struct RayType *)vo, &grdatstruct, &Beamline);  
	else
	  AutoScalePS((struct PSDType *)vo, &grdatstruct);  
#ifdef global
	  InitGrafBox(&PHASESet, &grdatstruct);   
#else
	  InitGrafBox(&Beamline.filenames, &grdatstruct); 
#endif

      } else printf("error getgrafbox\n");
    break;
	
  case kCGrCancel: 
    XtUnmanageChild(widget_array[kCGrBox]); 
    break;

  case kDirCommand:                            /* Druck */    
#ifdef global
    GeneratePrintDataFile(PHASESet.printpclname);
#else
    GeneratePrintDataFile(Beamline.filenames.printpclname);
#endif

    xprintf("PCL- File generated!");
    break;   
  
  case kCPurge:  
    start_watch();
#ifdef global
    snprintf(command, MaxPathLength,
	    "PHASEusercom %s", PHASESet.printpclname);
#else
    snprintf(command, MaxPathLength,
	    "PHASEusercom %s", Beamline.filenames.printpclname);
#endif
    printf("user command: %s\n", command);
    system(command); 
    xprintf("user finished!");
    stop_watch(); 
    break;
  case kSetupInfo:
    FetchWidget(kSetupInfo, "SetupInfo");
#ifdef VMS
    strncpy(buffer, ".lib]news.", MaxPathLength);
	PrependEnv(PHASE_HOME, buffer);
#else
       snprintf(buffer, MaxPathLength, "%s/share/phase/news", global_rundir);
#endif 
    
    PrintFileInMainList(buffer);  
    XtManageChild(widget_array[kSetupInfo]);   
    break;

  case k_help_overview:
    topic = XmStringCreateLocalized("overview");   
    create_help(topic);
    XmStringFree(topic);
    break;      
          
  case k_help_about:
    topic = XmStringCreateLocalized("about");   
    create_help(topic);
    XmStringFree(topic);
    break;      
          
  case k_help_onhelp:
    topic = XmStringCreateLocalized("onhelp");
    create_help(topic);          
    XmStringFree(topic);
    break;   
            
  case k_help_sensitive:
    tracking_help(); 
    break;      
                  
  default: 
    break;
  }
}
/* end activate_proc.c */
